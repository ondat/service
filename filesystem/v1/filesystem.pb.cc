// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: filesystem.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "filesystem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace filesystem {
namespace v1 {
class FsStatusRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsStatusRequest>
     _instance;
} _FsStatusRequest_default_instance_;
class FsStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsStatus>
     _instance;
} _FsStatus_default_instance_;
class FsVolumeListQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsVolumeListQuery>
     _instance;
} _FsVolumeListQuery_default_instance_;
class FsVolumeStatisticsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsVolumeStatistics>
     _instance;
} _FsVolumeStatistics_default_instance_;
class FsVolumeStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsVolumeStatus>
     _instance;
} _FsVolumeStatus_default_instance_;
class FsVolumeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsVolume>
     _instance;
} _FsVolume_default_instance_;
class FsVolumeListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsVolumeList>
     _instance;
} _FsVolumeList_default_instance_;
class FsPresentationListQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsPresentationListQuery>
     _instance;
} _FsPresentationListQuery_default_instance_;
class FsPresentationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsPresentation>
     _instance;
} _FsPresentation_default_instance_;
class FsPresentationListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsPresentationList>
     _instance;
} _FsPresentationList_default_instance_;

namespace protobuf_filesystem_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsStatus, version_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolumeListQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolumeListQuery, volume_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolumeStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolumeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolumeStatus, node_state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, cc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, volume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, node_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, device_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, presentation_filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, volume_size_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolumeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolumeList, volumes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsPresentationListQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsPresentationListQuery, presentation_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsPresentation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsPresentation, cc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsPresentation, presentation_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsPresentation, target_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsPresentation, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsPresentationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsPresentationList, presentations_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(FsStatusRequest)},
  { 5, -1, sizeof(FsStatus)},
  { 11, -1, sizeof(FsVolumeListQuery)},
  { 17, -1, sizeof(FsVolumeStatistics)},
  { 22, -1, sizeof(FsVolumeStatus)},
  { 28, -1, sizeof(FsVolume)},
  { 42, -1, sizeof(FsVolumeList)},
  { 48, -1, sizeof(FsPresentationListQuery)},
  { 54, -1, sizeof(FsPresentation)},
  { 63, -1, sizeof(FsPresentationList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsStatusRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsVolumeListQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsVolumeStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsVolumeStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsVolume_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsVolumeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsPresentationListQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsPresentation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsPresentationList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "filesystem.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::common::v1::protobuf_common_2eproto::InitDefaults();
  _FsStatusRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsStatusRequest_default_instance_);_FsStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsStatus_default_instance_);_FsVolumeListQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsVolumeListQuery_default_instance_);_FsVolumeStatistics_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsVolumeStatistics_default_instance_);_FsVolumeStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsVolumeStatus_default_instance_);_FsVolume_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsVolume_default_instance_);_FsVolumeList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsVolumeList_default_instance_);_FsPresentationListQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsPresentationListQuery_default_instance_);_FsPresentation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsPresentation_default_instance_);_FsPresentationList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsPresentationList_default_instance_);_FsVolume_default_instance_._instance.get_mutable()->cc_ = const_cast< ::common::v1::DataplaneCommon*>(
      ::common::v1::DataplaneCommon::internal_default_instance());
  _FsVolume_default_instance_._instance.get_mutable()->stats_ = const_cast< ::filesystem::v1::FsVolumeStatistics*>(
      ::filesystem::v1::FsVolumeStatistics::internal_default_instance());
  _FsVolume_default_instance_._instance.get_mutable()->status_ = const_cast< ::filesystem::v1::FsVolumeStatus*>(
      ::filesystem::v1::FsVolumeStatus::internal_default_instance());
  _FsPresentation_default_instance_._instance.get_mutable()->cc_ = const_cast< ::common::v1::DataplaneCommon*>(
      ::common::v1::DataplaneCommon::internal_default_instance());
  _FsPresentation_default_instance_._instance.get_mutable()->status_ = const_cast< ::filesystem::v1::FsVolumeStatus*>(
      ::filesystem::v1::FsVolumeStatus::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020filesystem.proto\022\rfilesystem.v1\032\014commo"
      "n.proto\"\021\n\017FsStatusRequest\" \n\010FsStatus\022\024"
      "\n\014version_info\030\001 \001(\t\"\'\n\021FsVolumeListQuer"
      "y\022\022\n\nvolume_ids\030\001 \003(\r\"\024\n\022FsVolumeStatist"
      "ics\"B\n\016FsVolumeStatus\0220\n\nnode_state\030\001 \001("
      "\0162\034.filesystem.v1.FsVolumeState\"\363\002\n\010FsVo"
      "lume\022&\n\002cc\030\001 \001(\0132\032.common.v1.DataplaneCo"
      "mmon\022\021\n\tvolume_id\030\002 \001(\r\022;\n\tnode_type\030\003 \001"
      "(\0162(.filesystem.v1.FsVolume.VolumeDevice"
      "Type\022\025\n\rdevice_number\030\004 \001(\r\022\020\n\010filename\030"
      "\005 \001(\t\022\035\n\025presentation_filename\030\t \001(\t\022\031\n\021"
      "volume_size_bytes\030\006 \001(\004\0220\n\005stats\030\007 \001(\0132!"
      ".filesystem.v1.FsVolumeStatistics\022-\n\006sta"
      "tus\030\010 \001(\0132\035.filesystem.v1.FsVolumeStatus"
      "\"+\n\020VolumeDeviceType\022\010\n\004FILE\020\000\022\r\n\tNBD_BL"
      "OCK\020\001\"8\n\014FsVolumeList\022(\n\007volumes\030\001 \003(\0132\027"
      ".filesystem.v1.FsVolume\"3\n\027FsPresentatio"
      "nListQuery\022\030\n\020presentation_ids\030\001 \003(\r\"\223\001\n"
      "\016FsPresentation\022&\n\002cc\030\001 \001(\0132\032.common.v1."
      "DataplaneCommon\022\027\n\017presentation_id\030\002 \001(\r"
      "\022\021\n\ttarget_id\030\003 \001(\r\022-\n\006status\030\005 \001(\0132\035.fi"
      "lesystem.v1.FsVolumeStatus\"J\n\022FsPresenta"
      "tionList\0224\n\rpresentations\030\001 \003(\0132\035.filesy"
      "stem.v1.FsPresentation*$\n\rFsVolumeState\022"
      "\010\n\004NONE\020\000\022\t\n\005READY\020\0012\243\005\n\002Fs\022C\n\006Status\022\036."
      "filesystem.v1.FsStatusRequest\032\027.filesyst"
      "em.v1.FsStatus\"\000\022\?\n\014VolumeCreate\022\027.files"
      "ystem.v1.FsVolume\032\024.common.v1.RpcResult\""
      "\000\022\?\n\014VolumeUpdate\022\027.filesystem.v1.FsVolu"
      "me\032\024.common.v1.RpcResult\"\000\022\?\n\014VolumeDele"
      "te\022\027.filesystem.v1.FsVolume\032\024.common.v1."
      "RpcResult\"\000\022M\n\nVolumeList\022 .filesystem.v"
      "1.FsVolumeListQuery\032\033.filesystem.v1.FsVo"
      "lumeList\"\000\022K\n\022PresentationCreate\022\035.files"
      "ystem.v1.FsPresentation\032\024.common.v1.RpcR"
      "esult\"\000\022K\n\022PresentationUpdate\022\035.filesyst"
      "em.v1.FsPresentation\032\024.common.v1.RpcResu"
      "lt\"\000\022K\n\022PresentationDelete\022\035.filesystem."
      "v1.FsPresentation\032\024.common.v1.RpcResult\""
      "\000\022_\n\020PresentationList\022&.filesystem.v1.Fs"
      "PresentationListQuery\032!.filesystem.v1.Fs"
      "PresentationList\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1666);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "filesystem.proto", &protobuf_RegisterTypes);
  ::common::v1::protobuf_common_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_filesystem_2eproto

const ::google::protobuf::EnumDescriptor* FsVolume_VolumeDeviceType_descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_enum_descriptors[0];
}
bool FsVolume_VolumeDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FsVolume_VolumeDeviceType FsVolume::FILE;
const FsVolume_VolumeDeviceType FsVolume::NBD_BLOCK;
const FsVolume_VolumeDeviceType FsVolume::VolumeDeviceType_MIN;
const FsVolume_VolumeDeviceType FsVolume::VolumeDeviceType_MAX;
const int FsVolume::VolumeDeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* FsVolumeState_descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_enum_descriptors[1];
}
bool FsVolumeState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsStatusRequest::FsStatusRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_filesystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesystem.v1.FsStatusRequest)
}
FsStatusRequest::FsStatusRequest(const FsStatusRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:filesystem.v1.FsStatusRequest)
}

void FsStatusRequest::SharedCtor() {
  _cached_size_ = 0;
}

FsStatusRequest::~FsStatusRequest() {
  // @@protoc_insertion_point(destructor:filesystem.v1.FsStatusRequest)
  SharedDtor();
}

void FsStatusRequest::SharedDtor() {
}

void FsStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsStatusRequest::descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsStatusRequest& FsStatusRequest::default_instance() {
  protobuf_filesystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsStatusRequest* FsStatusRequest::New(::google::protobuf::Arena* arena) const {
  FsStatusRequest* n = new FsStatusRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:filesystem.v1.FsStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool FsStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesystem.v1.FsStatusRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:filesystem.v1.FsStatusRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesystem.v1.FsStatusRequest)
  return false;
#undef DO_
}

void FsStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesystem.v1.FsStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:filesystem.v1.FsStatusRequest)
}

::google::protobuf::uint8* FsStatusRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:filesystem.v1.FsStatusRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesystem.v1.FsStatusRequest)
  return target;
}

size_t FsStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesystem.v1.FsStatusRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesystem.v1.FsStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FsStatusRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsStatusRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesystem.v1.FsStatusRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesystem.v1.FsStatusRequest)
    MergeFrom(*source);
  }
}

void FsStatusRequest::MergeFrom(const FsStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesystem.v1.FsStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FsStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesystem.v1.FsStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsStatusRequest::CopyFrom(const FsStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesystem.v1.FsStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsStatusRequest::IsInitialized() const {
  return true;
}

void FsStatusRequest::Swap(FsStatusRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsStatusRequest::InternalSwap(FsStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsStatusRequest::GetMetadata() const {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsStatusRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FsStatus::kVersionInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsStatus::FsStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_filesystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesystem.v1.FsStatus)
}
FsStatus::FsStatus(const FsStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version_info().size() > 0) {
    version_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_info_);
  }
  // @@protoc_insertion_point(copy_constructor:filesystem.v1.FsStatus)
}

void FsStatus::SharedCtor() {
  version_info_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FsStatus::~FsStatus() {
  // @@protoc_insertion_point(destructor:filesystem.v1.FsStatus)
  SharedDtor();
}

void FsStatus::SharedDtor() {
  version_info_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FsStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsStatus::descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsStatus& FsStatus::default_instance() {
  protobuf_filesystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsStatus* FsStatus::New(::google::protobuf::Arena* arena) const {
  FsStatus* n = new FsStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:filesystem.v1.FsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FsStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesystem.v1.FsStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string version_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version_info()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version_info().data(), static_cast<int>(this->version_info().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "filesystem.v1.FsStatus.version_info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesystem.v1.FsStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesystem.v1.FsStatus)
  return false;
#undef DO_
}

void FsStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesystem.v1.FsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_info = 1;
  if (this->version_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_info().data(), static_cast<int>(this->version_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "filesystem.v1.FsStatus.version_info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version_info(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:filesystem.v1.FsStatus)
}

::google::protobuf::uint8* FsStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:filesystem.v1.FsStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string version_info = 1;
  if (this->version_info().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version_info().data(), static_cast<int>(this->version_info().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "filesystem.v1.FsStatus.version_info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version_info(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesystem.v1.FsStatus)
  return target;
}

size_t FsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesystem.v1.FsStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string version_info = 1;
  if (this->version_info().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version_info());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesystem.v1.FsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const FsStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesystem.v1.FsStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesystem.v1.FsStatus)
    MergeFrom(*source);
  }
}

void FsStatus::MergeFrom(const FsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesystem.v1.FsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version_info().size() > 0) {

    version_info_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_info_);
  }
}

void FsStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesystem.v1.FsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsStatus::CopyFrom(const FsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesystem.v1.FsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsStatus::IsInitialized() const {
  return true;
}

void FsStatus::Swap(FsStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsStatus::InternalSwap(FsStatus* other) {
  using std::swap;
  version_info_.Swap(&other->version_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsStatus::GetMetadata() const {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsStatus

// string version_info = 1;
void FsStatus::clear_version_info() {
  version_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FsStatus::version_info() const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsStatus.version_info)
  return version_info_.GetNoArena();
}
void FsStatus::set_version_info(const ::std::string& value) {
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesystem.v1.FsStatus.version_info)
}
#if LANG_CXX11
void FsStatus::set_version_info(::std::string&& value) {
  
  version_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:filesystem.v1.FsStatus.version_info)
}
#endif
void FsStatus::set_version_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesystem.v1.FsStatus.version_info)
}
void FsStatus::set_version_info(const char* value, size_t size) {
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesystem.v1.FsStatus.version_info)
}
::std::string* FsStatus::mutable_version_info() {
  
  // @@protoc_insertion_point(field_mutable:filesystem.v1.FsStatus.version_info)
  return version_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FsStatus::release_version_info() {
  // @@protoc_insertion_point(field_release:filesystem.v1.FsStatus.version_info)
  
  return version_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FsStatus::set_allocated_version_info(::std::string* version_info) {
  if (version_info != NULL) {
    
  } else {
    
  }
  version_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_info);
  // @@protoc_insertion_point(field_set_allocated:filesystem.v1.FsStatus.version_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FsVolumeListQuery::kVolumeIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsVolumeListQuery::FsVolumeListQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_filesystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesystem.v1.FsVolumeListQuery)
}
FsVolumeListQuery::FsVolumeListQuery(const FsVolumeListQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      volume_ids_(from.volume_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:filesystem.v1.FsVolumeListQuery)
}

void FsVolumeListQuery::SharedCtor() {
  _cached_size_ = 0;
}

FsVolumeListQuery::~FsVolumeListQuery() {
  // @@protoc_insertion_point(destructor:filesystem.v1.FsVolumeListQuery)
  SharedDtor();
}

void FsVolumeListQuery::SharedDtor() {
}

void FsVolumeListQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsVolumeListQuery::descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsVolumeListQuery& FsVolumeListQuery::default_instance() {
  protobuf_filesystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsVolumeListQuery* FsVolumeListQuery::New(::google::protobuf::Arena* arena) const {
  FsVolumeListQuery* n = new FsVolumeListQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsVolumeListQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:filesystem.v1.FsVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_ids_.Clear();
  _internal_metadata_.Clear();
}

bool FsVolumeListQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesystem.v1.FsVolumeListQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 volume_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volume_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_volume_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesystem.v1.FsVolumeListQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesystem.v1.FsVolumeListQuery)
  return false;
#undef DO_
}

void FsVolumeListQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesystem.v1.FsVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 volume_ids = 1;
  if (this->volume_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _volume_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->volume_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->volume_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:filesystem.v1.FsVolumeListQuery)
}

::google::protobuf::uint8* FsVolumeListQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:filesystem.v1.FsVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 volume_ids = 1;
  if (this->volume_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _volume_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->volume_ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesystem.v1.FsVolumeListQuery)
  return target;
}

size_t FsVolumeListQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesystem.v1.FsVolumeListQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 volume_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->volume_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _volume_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsVolumeListQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesystem.v1.FsVolumeListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const FsVolumeListQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsVolumeListQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesystem.v1.FsVolumeListQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesystem.v1.FsVolumeListQuery)
    MergeFrom(*source);
  }
}

void FsVolumeListQuery::MergeFrom(const FsVolumeListQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesystem.v1.FsVolumeListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_ids_.MergeFrom(from.volume_ids_);
}

void FsVolumeListQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesystem.v1.FsVolumeListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsVolumeListQuery::CopyFrom(const FsVolumeListQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesystem.v1.FsVolumeListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsVolumeListQuery::IsInitialized() const {
  return true;
}

void FsVolumeListQuery::Swap(FsVolumeListQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsVolumeListQuery::InternalSwap(FsVolumeListQuery* other) {
  using std::swap;
  volume_ids_.InternalSwap(&other->volume_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsVolumeListQuery::GetMetadata() const {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsVolumeListQuery

// repeated uint32 volume_ids = 1;
int FsVolumeListQuery::volume_ids_size() const {
  return volume_ids_.size();
}
void FsVolumeListQuery::clear_volume_ids() {
  volume_ids_.Clear();
}
::google::protobuf::uint32 FsVolumeListQuery::volume_ids(int index) const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolumeListQuery.volume_ids)
  return volume_ids_.Get(index);
}
void FsVolumeListQuery::set_volume_ids(int index, ::google::protobuf::uint32 value) {
  volume_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:filesystem.v1.FsVolumeListQuery.volume_ids)
}
void FsVolumeListQuery::add_volume_ids(::google::protobuf::uint32 value) {
  volume_ids_.Add(value);
  // @@protoc_insertion_point(field_add:filesystem.v1.FsVolumeListQuery.volume_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FsVolumeListQuery::volume_ids() const {
  // @@protoc_insertion_point(field_list:filesystem.v1.FsVolumeListQuery.volume_ids)
  return volume_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FsVolumeListQuery::mutable_volume_ids() {
  // @@protoc_insertion_point(field_mutable_list:filesystem.v1.FsVolumeListQuery.volume_ids)
  return &volume_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsVolumeStatistics::FsVolumeStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_filesystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesystem.v1.FsVolumeStatistics)
}
FsVolumeStatistics::FsVolumeStatistics(const FsVolumeStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:filesystem.v1.FsVolumeStatistics)
}

void FsVolumeStatistics::SharedCtor() {
  _cached_size_ = 0;
}

FsVolumeStatistics::~FsVolumeStatistics() {
  // @@protoc_insertion_point(destructor:filesystem.v1.FsVolumeStatistics)
  SharedDtor();
}

void FsVolumeStatistics::SharedDtor() {
}

void FsVolumeStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsVolumeStatistics::descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsVolumeStatistics& FsVolumeStatistics::default_instance() {
  protobuf_filesystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsVolumeStatistics* FsVolumeStatistics::New(::google::protobuf::Arena* arena) const {
  FsVolumeStatistics* n = new FsVolumeStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsVolumeStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:filesystem.v1.FsVolumeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool FsVolumeStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesystem.v1.FsVolumeStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:filesystem.v1.FsVolumeStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesystem.v1.FsVolumeStatistics)
  return false;
#undef DO_
}

void FsVolumeStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesystem.v1.FsVolumeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:filesystem.v1.FsVolumeStatistics)
}

::google::protobuf::uint8* FsVolumeStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:filesystem.v1.FsVolumeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesystem.v1.FsVolumeStatistics)
  return target;
}

size_t FsVolumeStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesystem.v1.FsVolumeStatistics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsVolumeStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesystem.v1.FsVolumeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const FsVolumeStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsVolumeStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesystem.v1.FsVolumeStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesystem.v1.FsVolumeStatistics)
    MergeFrom(*source);
  }
}

void FsVolumeStatistics::MergeFrom(const FsVolumeStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesystem.v1.FsVolumeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FsVolumeStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesystem.v1.FsVolumeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsVolumeStatistics::CopyFrom(const FsVolumeStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesystem.v1.FsVolumeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsVolumeStatistics::IsInitialized() const {
  return true;
}

void FsVolumeStatistics::Swap(FsVolumeStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsVolumeStatistics::InternalSwap(FsVolumeStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsVolumeStatistics::GetMetadata() const {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsVolumeStatistics

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FsVolumeStatus::kNodeStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsVolumeStatus::FsVolumeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_filesystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesystem.v1.FsVolumeStatus)
}
FsVolumeStatus::FsVolumeStatus(const FsVolumeStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_state_ = from.node_state_;
  // @@protoc_insertion_point(copy_constructor:filesystem.v1.FsVolumeStatus)
}

void FsVolumeStatus::SharedCtor() {
  node_state_ = 0;
  _cached_size_ = 0;
}

FsVolumeStatus::~FsVolumeStatus() {
  // @@protoc_insertion_point(destructor:filesystem.v1.FsVolumeStatus)
  SharedDtor();
}

void FsVolumeStatus::SharedDtor() {
}

void FsVolumeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsVolumeStatus::descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsVolumeStatus& FsVolumeStatus::default_instance() {
  protobuf_filesystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsVolumeStatus* FsVolumeStatus::New(::google::protobuf::Arena* arena) const {
  FsVolumeStatus* n = new FsVolumeStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsVolumeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:filesystem.v1.FsVolumeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_state_ = 0;
  _internal_metadata_.Clear();
}

bool FsVolumeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesystem.v1.FsVolumeStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .filesystem.v1.FsVolumeState node_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_node_state(static_cast< ::filesystem::v1::FsVolumeState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesystem.v1.FsVolumeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesystem.v1.FsVolumeStatus)
  return false;
#undef DO_
}

void FsVolumeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesystem.v1.FsVolumeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .filesystem.v1.FsVolumeState node_state = 1;
  if (this->node_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->node_state(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:filesystem.v1.FsVolumeStatus)
}

::google::protobuf::uint8* FsVolumeStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:filesystem.v1.FsVolumeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .filesystem.v1.FsVolumeState node_state = 1;
  if (this->node_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->node_state(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesystem.v1.FsVolumeStatus)
  return target;
}

size_t FsVolumeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesystem.v1.FsVolumeStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .filesystem.v1.FsVolumeState node_state = 1;
  if (this->node_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsVolumeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesystem.v1.FsVolumeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const FsVolumeStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsVolumeStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesystem.v1.FsVolumeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesystem.v1.FsVolumeStatus)
    MergeFrom(*source);
  }
}

void FsVolumeStatus::MergeFrom(const FsVolumeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesystem.v1.FsVolumeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_state() != 0) {
    set_node_state(from.node_state());
  }
}

void FsVolumeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesystem.v1.FsVolumeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsVolumeStatus::CopyFrom(const FsVolumeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesystem.v1.FsVolumeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsVolumeStatus::IsInitialized() const {
  return true;
}

void FsVolumeStatus::Swap(FsVolumeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsVolumeStatus::InternalSwap(FsVolumeStatus* other) {
  using std::swap;
  swap(node_state_, other->node_state_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsVolumeStatus::GetMetadata() const {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsVolumeStatus

// .filesystem.v1.FsVolumeState node_state = 1;
void FsVolumeStatus::clear_node_state() {
  node_state_ = 0;
}
::filesystem::v1::FsVolumeState FsVolumeStatus::node_state() const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolumeStatus.node_state)
  return static_cast< ::filesystem::v1::FsVolumeState >(node_state_);
}
void FsVolumeStatus::set_node_state(::filesystem::v1::FsVolumeState value) {
  
  node_state_ = value;
  // @@protoc_insertion_point(field_set:filesystem.v1.FsVolumeStatus.node_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FsVolume::kCcFieldNumber;
const int FsVolume::kVolumeIdFieldNumber;
const int FsVolume::kNodeTypeFieldNumber;
const int FsVolume::kDeviceNumberFieldNumber;
const int FsVolume::kFilenameFieldNumber;
const int FsVolume::kPresentationFilenameFieldNumber;
const int FsVolume::kVolumeSizeBytesFieldNumber;
const int FsVolume::kStatsFieldNumber;
const int FsVolume::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsVolume::FsVolume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_filesystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesystem.v1.FsVolume)
}
FsVolume::FsVolume(const FsVolume& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  presentation_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.presentation_filename().size() > 0) {
    presentation_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.presentation_filename_);
  }
  if (from.has_cc()) {
    cc_ = new ::common::v1::DataplaneCommon(*from.cc_);
  } else {
    cc_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::filesystem::v1::FsVolumeStatistics(*from.stats_);
  } else {
    stats_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::filesystem::v1::FsVolumeStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  ::memcpy(&volume_id_, &from.volume_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_number_) -
    reinterpret_cast<char*>(&volume_id_)) + sizeof(device_number_));
  // @@protoc_insertion_point(copy_constructor:filesystem.v1.FsVolume)
}

void FsVolume::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  presentation_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_number_) -
      reinterpret_cast<char*>(&cc_)) + sizeof(device_number_));
  _cached_size_ = 0;
}

FsVolume::~FsVolume() {
  // @@protoc_insertion_point(destructor:filesystem.v1.FsVolume)
  SharedDtor();
}

void FsVolume::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  presentation_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cc_;
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete status_;
}

void FsVolume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsVolume::descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsVolume& FsVolume::default_instance() {
  protobuf_filesystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsVolume* FsVolume::New(::google::protobuf::Arena* arena) const {
  FsVolume* n = new FsVolume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:filesystem.v1.FsVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  presentation_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) {
    delete cc_;
  }
  cc_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  ::memset(&volume_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_number_) -
      reinterpret_cast<char*>(&volume_id_)) + sizeof(device_number_));
  _internal_metadata_.Clear();
}

bool FsVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesystem.v1.FsVolume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.v1.DataplaneCommon cc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 volume_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .filesystem.v1.FsVolume.VolumeDeviceType node_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_node_type(static_cast< ::filesystem::v1::FsVolume_VolumeDeviceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 device_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "filesystem.v1.FsVolume.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 volume_size_bytes = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .filesystem.v1.FsVolumeStatistics stats = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .filesystem.v1.FsVolumeStatus status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string presentation_filename = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_presentation_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->presentation_filename().data(), static_cast<int>(this->presentation_filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "filesystem.v1.FsVolume.presentation_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesystem.v1.FsVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesystem.v1.FsVolume)
  return false;
#undef DO_
}

void FsVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesystem.v1.FsVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cc_, output);
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->volume_id(), output);
  }

  // .filesystem.v1.FsVolume.VolumeDeviceType node_type = 3;
  if (this->node_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->node_type(), output);
  }

  // uint32 device_number = 4;
  if (this->device_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->device_number(), output);
  }

  // string filename = 5;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "filesystem.v1.FsVolume.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->filename(), output);
  }

  // uint64 volume_size_bytes = 6;
  if (this->volume_size_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->volume_size_bytes(), output);
  }

  // .filesystem.v1.FsVolumeStatistics stats = 7;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->stats_, output);
  }

  // .filesystem.v1.FsVolumeStatus status = 8;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->status_, output);
  }

  // string presentation_filename = 9;
  if (this->presentation_filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->presentation_filename().data(), static_cast<int>(this->presentation_filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "filesystem.v1.FsVolume.presentation_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->presentation_filename(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:filesystem.v1.FsVolume)
}

::google::protobuf::uint8* FsVolume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:filesystem.v1.FsVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cc_, deterministic, target);
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->volume_id(), target);
  }

  // .filesystem.v1.FsVolume.VolumeDeviceType node_type = 3;
  if (this->node_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->node_type(), target);
  }

  // uint32 device_number = 4;
  if (this->device_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->device_number(), target);
  }

  // string filename = 5;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "filesystem.v1.FsVolume.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filename(), target);
  }

  // uint64 volume_size_bytes = 6;
  if (this->volume_size_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->volume_size_bytes(), target);
  }

  // .filesystem.v1.FsVolumeStatistics stats = 7;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->stats_, deterministic, target);
  }

  // .filesystem.v1.FsVolumeStatus status = 8;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->status_, deterministic, target);
  }

  // string presentation_filename = 9;
  if (this->presentation_filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->presentation_filename().data(), static_cast<int>(this->presentation_filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "filesystem.v1.FsVolume.presentation_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->presentation_filename(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesystem.v1.FsVolume)
  return target;
}

size_t FsVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesystem.v1.FsVolume)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 5;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // string presentation_filename = 9;
  if (this->presentation_filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->presentation_filename());
  }

  // .common.v1.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cc_);
  }

  // .filesystem.v1.FsVolumeStatistics stats = 7;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // .filesystem.v1.FsVolumeStatus status = 8;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->volume_id());
  }

  // .filesystem.v1.FsVolume.VolumeDeviceType node_type = 3;
  if (this->node_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_type());
  }

  // uint64 volume_size_bytes = 6;
  if (this->volume_size_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->volume_size_bytes());
  }

  // uint32 device_number = 4;
  if (this->device_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesystem.v1.FsVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const FsVolume* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsVolume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesystem.v1.FsVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesystem.v1.FsVolume)
    MergeFrom(*source);
  }
}

void FsVolume::MergeFrom(const FsVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesystem.v1.FsVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.presentation_filename().size() > 0) {

    presentation_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.presentation_filename_);
  }
  if (from.has_cc()) {
    mutable_cc()->::common::v1::DataplaneCommon::MergeFrom(from.cc());
  }
  if (from.has_stats()) {
    mutable_stats()->::filesystem::v1::FsVolumeStatistics::MergeFrom(from.stats());
  }
  if (from.has_status()) {
    mutable_status()->::filesystem::v1::FsVolumeStatus::MergeFrom(from.status());
  }
  if (from.volume_id() != 0) {
    set_volume_id(from.volume_id());
  }
  if (from.node_type() != 0) {
    set_node_type(from.node_type());
  }
  if (from.volume_size_bytes() != 0) {
    set_volume_size_bytes(from.volume_size_bytes());
  }
  if (from.device_number() != 0) {
    set_device_number(from.device_number());
  }
}

void FsVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesystem.v1.FsVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsVolume::CopyFrom(const FsVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesystem.v1.FsVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsVolume::IsInitialized() const {
  return true;
}

void FsVolume::Swap(FsVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsVolume::InternalSwap(FsVolume* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  presentation_filename_.Swap(&other->presentation_filename_);
  swap(cc_, other->cc_);
  swap(stats_, other->stats_);
  swap(status_, other->status_);
  swap(volume_id_, other->volume_id_);
  swap(node_type_, other->node_type_);
  swap(volume_size_bytes_, other->volume_size_bytes_);
  swap(device_number_, other->device_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsVolume::GetMetadata() const {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsVolume

// .common.v1.DataplaneCommon cc = 1;
bool FsVolume::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
void FsVolume::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
const ::common::v1::DataplaneCommon& FsVolume::cc() const {
  const ::common::v1::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolume.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::common::v1::DataplaneCommon*>(
      &::common::v1::_DataplaneCommon_default_instance_);
}
::common::v1::DataplaneCommon* FsVolume::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::common::v1::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:filesystem.v1.FsVolume.cc)
  return cc_;
}
::common::v1::DataplaneCommon* FsVolume::release_cc() {
  // @@protoc_insertion_point(field_release:filesystem.v1.FsVolume.cc)
  
  ::common::v1::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
void FsVolume::set_allocated_cc(::common::v1::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:filesystem.v1.FsVolume.cc)
}

// uint32 volume_id = 2;
void FsVolume::clear_volume_id() {
  volume_id_ = 0u;
}
::google::protobuf::uint32 FsVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolume.volume_id)
  return volume_id_;
}
void FsVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:filesystem.v1.FsVolume.volume_id)
}

// .filesystem.v1.FsVolume.VolumeDeviceType node_type = 3;
void FsVolume::clear_node_type() {
  node_type_ = 0;
}
::filesystem::v1::FsVolume_VolumeDeviceType FsVolume::node_type() const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolume.node_type)
  return static_cast< ::filesystem::v1::FsVolume_VolumeDeviceType >(node_type_);
}
void FsVolume::set_node_type(::filesystem::v1::FsVolume_VolumeDeviceType value) {
  
  node_type_ = value;
  // @@protoc_insertion_point(field_set:filesystem.v1.FsVolume.node_type)
}

// uint32 device_number = 4;
void FsVolume::clear_device_number() {
  device_number_ = 0u;
}
::google::protobuf::uint32 FsVolume::device_number() const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolume.device_number)
  return device_number_;
}
void FsVolume::set_device_number(::google::protobuf::uint32 value) {
  
  device_number_ = value;
  // @@protoc_insertion_point(field_set:filesystem.v1.FsVolume.device_number)
}

// string filename = 5;
void FsVolume::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FsVolume::filename() const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolume.filename)
  return filename_.GetNoArena();
}
void FsVolume::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesystem.v1.FsVolume.filename)
}
#if LANG_CXX11
void FsVolume::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:filesystem.v1.FsVolume.filename)
}
#endif
void FsVolume::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesystem.v1.FsVolume.filename)
}
void FsVolume::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesystem.v1.FsVolume.filename)
}
::std::string* FsVolume::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:filesystem.v1.FsVolume.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FsVolume::release_filename() {
  // @@protoc_insertion_point(field_release:filesystem.v1.FsVolume.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FsVolume::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:filesystem.v1.FsVolume.filename)
}

// string presentation_filename = 9;
void FsVolume::clear_presentation_filename() {
  presentation_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FsVolume::presentation_filename() const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolume.presentation_filename)
  return presentation_filename_.GetNoArena();
}
void FsVolume::set_presentation_filename(const ::std::string& value) {
  
  presentation_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:filesystem.v1.FsVolume.presentation_filename)
}
#if LANG_CXX11
void FsVolume::set_presentation_filename(::std::string&& value) {
  
  presentation_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:filesystem.v1.FsVolume.presentation_filename)
}
#endif
void FsVolume::set_presentation_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  presentation_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:filesystem.v1.FsVolume.presentation_filename)
}
void FsVolume::set_presentation_filename(const char* value, size_t size) {
  
  presentation_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:filesystem.v1.FsVolume.presentation_filename)
}
::std::string* FsVolume::mutable_presentation_filename() {
  
  // @@protoc_insertion_point(field_mutable:filesystem.v1.FsVolume.presentation_filename)
  return presentation_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FsVolume::release_presentation_filename() {
  // @@protoc_insertion_point(field_release:filesystem.v1.FsVolume.presentation_filename)
  
  return presentation_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FsVolume::set_allocated_presentation_filename(::std::string* presentation_filename) {
  if (presentation_filename != NULL) {
    
  } else {
    
  }
  presentation_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), presentation_filename);
  // @@protoc_insertion_point(field_set_allocated:filesystem.v1.FsVolume.presentation_filename)
}

// uint64 volume_size_bytes = 6;
void FsVolume::clear_volume_size_bytes() {
  volume_size_bytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FsVolume::volume_size_bytes() const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolume.volume_size_bytes)
  return volume_size_bytes_;
}
void FsVolume::set_volume_size_bytes(::google::protobuf::uint64 value) {
  
  volume_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:filesystem.v1.FsVolume.volume_size_bytes)
}

// .filesystem.v1.FsVolumeStatistics stats = 7;
bool FsVolume::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void FsVolume::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::filesystem::v1::FsVolumeStatistics& FsVolume::stats() const {
  const ::filesystem::v1::FsVolumeStatistics* p = stats_;
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolume.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::filesystem::v1::FsVolumeStatistics*>(
      &::filesystem::v1::_FsVolumeStatistics_default_instance_);
}
::filesystem::v1::FsVolumeStatistics* FsVolume::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::filesystem::v1::FsVolumeStatistics;
  }
  // @@protoc_insertion_point(field_mutable:filesystem.v1.FsVolume.stats)
  return stats_;
}
::filesystem::v1::FsVolumeStatistics* FsVolume::release_stats() {
  // @@protoc_insertion_point(field_release:filesystem.v1.FsVolume.stats)
  
  ::filesystem::v1::FsVolumeStatistics* temp = stats_;
  stats_ = NULL;
  return temp;
}
void FsVolume::set_allocated_stats(::filesystem::v1::FsVolumeStatistics* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:filesystem.v1.FsVolume.stats)
}

// .filesystem.v1.FsVolumeStatus status = 8;
bool FsVolume::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void FsVolume::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::filesystem::v1::FsVolumeStatus& FsVolume::status() const {
  const ::filesystem::v1::FsVolumeStatus* p = status_;
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolume.status)
  return p != NULL ? *p : *reinterpret_cast<const ::filesystem::v1::FsVolumeStatus*>(
      &::filesystem::v1::_FsVolumeStatus_default_instance_);
}
::filesystem::v1::FsVolumeStatus* FsVolume::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::filesystem::v1::FsVolumeStatus;
  }
  // @@protoc_insertion_point(field_mutable:filesystem.v1.FsVolume.status)
  return status_;
}
::filesystem::v1::FsVolumeStatus* FsVolume::release_status() {
  // @@protoc_insertion_point(field_release:filesystem.v1.FsVolume.status)
  
  ::filesystem::v1::FsVolumeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void FsVolume::set_allocated_status(::filesystem::v1::FsVolumeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:filesystem.v1.FsVolume.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FsVolumeList::kVolumesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsVolumeList::FsVolumeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_filesystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesystem.v1.FsVolumeList)
}
FsVolumeList::FsVolumeList(const FsVolumeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      volumes_(from.volumes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:filesystem.v1.FsVolumeList)
}

void FsVolumeList::SharedCtor() {
  _cached_size_ = 0;
}

FsVolumeList::~FsVolumeList() {
  // @@protoc_insertion_point(destructor:filesystem.v1.FsVolumeList)
  SharedDtor();
}

void FsVolumeList::SharedDtor() {
}

void FsVolumeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsVolumeList::descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsVolumeList& FsVolumeList::default_instance() {
  protobuf_filesystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsVolumeList* FsVolumeList::New(::google::protobuf::Arena* arena) const {
  FsVolumeList* n = new FsVolumeList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsVolumeList::Clear() {
// @@protoc_insertion_point(message_clear_start:filesystem.v1.FsVolumeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volumes_.Clear();
  _internal_metadata_.Clear();
}

bool FsVolumeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesystem.v1.FsVolumeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .filesystem.v1.FsVolume volumes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volumes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesystem.v1.FsVolumeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesystem.v1.FsVolumeList)
  return false;
#undef DO_
}

void FsVolumeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesystem.v1.FsVolumeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .filesystem.v1.FsVolume volumes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volumes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->volumes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:filesystem.v1.FsVolumeList)
}

::google::protobuf::uint8* FsVolumeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:filesystem.v1.FsVolumeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .filesystem.v1.FsVolume volumes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volumes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->volumes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesystem.v1.FsVolumeList)
  return target;
}

size_t FsVolumeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesystem.v1.FsVolumeList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .filesystem.v1.FsVolume volumes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->volumes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volumes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsVolumeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesystem.v1.FsVolumeList)
  GOOGLE_DCHECK_NE(&from, this);
  const FsVolumeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsVolumeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesystem.v1.FsVolumeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesystem.v1.FsVolumeList)
    MergeFrom(*source);
  }
}

void FsVolumeList::MergeFrom(const FsVolumeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesystem.v1.FsVolumeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volumes_.MergeFrom(from.volumes_);
}

void FsVolumeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesystem.v1.FsVolumeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsVolumeList::CopyFrom(const FsVolumeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesystem.v1.FsVolumeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsVolumeList::IsInitialized() const {
  return true;
}

void FsVolumeList::Swap(FsVolumeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsVolumeList::InternalSwap(FsVolumeList* other) {
  using std::swap;
  volumes_.InternalSwap(&other->volumes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsVolumeList::GetMetadata() const {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsVolumeList

// repeated .filesystem.v1.FsVolume volumes = 1;
int FsVolumeList::volumes_size() const {
  return volumes_.size();
}
void FsVolumeList::clear_volumes() {
  volumes_.Clear();
}
const ::filesystem::v1::FsVolume& FsVolumeList::volumes(int index) const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsVolumeList.volumes)
  return volumes_.Get(index);
}
::filesystem::v1::FsVolume* FsVolumeList::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:filesystem.v1.FsVolumeList.volumes)
  return volumes_.Mutable(index);
}
::filesystem::v1::FsVolume* FsVolumeList::add_volumes() {
  // @@protoc_insertion_point(field_add:filesystem.v1.FsVolumeList.volumes)
  return volumes_.Add();
}
::google::protobuf::RepeatedPtrField< ::filesystem::v1::FsVolume >*
FsVolumeList::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:filesystem.v1.FsVolumeList.volumes)
  return &volumes_;
}
const ::google::protobuf::RepeatedPtrField< ::filesystem::v1::FsVolume >&
FsVolumeList::volumes() const {
  // @@protoc_insertion_point(field_list:filesystem.v1.FsVolumeList.volumes)
  return volumes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FsPresentationListQuery::kPresentationIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsPresentationListQuery::FsPresentationListQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_filesystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesystem.v1.FsPresentationListQuery)
}
FsPresentationListQuery::FsPresentationListQuery(const FsPresentationListQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      presentation_ids_(from.presentation_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:filesystem.v1.FsPresentationListQuery)
}

void FsPresentationListQuery::SharedCtor() {
  _cached_size_ = 0;
}

FsPresentationListQuery::~FsPresentationListQuery() {
  // @@protoc_insertion_point(destructor:filesystem.v1.FsPresentationListQuery)
  SharedDtor();
}

void FsPresentationListQuery::SharedDtor() {
}

void FsPresentationListQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsPresentationListQuery::descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsPresentationListQuery& FsPresentationListQuery::default_instance() {
  protobuf_filesystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsPresentationListQuery* FsPresentationListQuery::New(::google::protobuf::Arena* arena) const {
  FsPresentationListQuery* n = new FsPresentationListQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsPresentationListQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:filesystem.v1.FsPresentationListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presentation_ids_.Clear();
  _internal_metadata_.Clear();
}

bool FsPresentationListQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesystem.v1.FsPresentationListQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 presentation_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_presentation_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_presentation_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesystem.v1.FsPresentationListQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesystem.v1.FsPresentationListQuery)
  return false;
#undef DO_
}

void FsPresentationListQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesystem.v1.FsPresentationListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 presentation_ids = 1;
  if (this->presentation_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _presentation_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->presentation_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->presentation_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:filesystem.v1.FsPresentationListQuery)
}

::google::protobuf::uint8* FsPresentationListQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:filesystem.v1.FsPresentationListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 presentation_ids = 1;
  if (this->presentation_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _presentation_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->presentation_ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesystem.v1.FsPresentationListQuery)
  return target;
}

size_t FsPresentationListQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesystem.v1.FsPresentationListQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 presentation_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->presentation_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _presentation_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsPresentationListQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesystem.v1.FsPresentationListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const FsPresentationListQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsPresentationListQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesystem.v1.FsPresentationListQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesystem.v1.FsPresentationListQuery)
    MergeFrom(*source);
  }
}

void FsPresentationListQuery::MergeFrom(const FsPresentationListQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesystem.v1.FsPresentationListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  presentation_ids_.MergeFrom(from.presentation_ids_);
}

void FsPresentationListQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesystem.v1.FsPresentationListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsPresentationListQuery::CopyFrom(const FsPresentationListQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesystem.v1.FsPresentationListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsPresentationListQuery::IsInitialized() const {
  return true;
}

void FsPresentationListQuery::Swap(FsPresentationListQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsPresentationListQuery::InternalSwap(FsPresentationListQuery* other) {
  using std::swap;
  presentation_ids_.InternalSwap(&other->presentation_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsPresentationListQuery::GetMetadata() const {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsPresentationListQuery

// repeated uint32 presentation_ids = 1;
int FsPresentationListQuery::presentation_ids_size() const {
  return presentation_ids_.size();
}
void FsPresentationListQuery::clear_presentation_ids() {
  presentation_ids_.Clear();
}
::google::protobuf::uint32 FsPresentationListQuery::presentation_ids(int index) const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsPresentationListQuery.presentation_ids)
  return presentation_ids_.Get(index);
}
void FsPresentationListQuery::set_presentation_ids(int index, ::google::protobuf::uint32 value) {
  presentation_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:filesystem.v1.FsPresentationListQuery.presentation_ids)
}
void FsPresentationListQuery::add_presentation_ids(::google::protobuf::uint32 value) {
  presentation_ids_.Add(value);
  // @@protoc_insertion_point(field_add:filesystem.v1.FsPresentationListQuery.presentation_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FsPresentationListQuery::presentation_ids() const {
  // @@protoc_insertion_point(field_list:filesystem.v1.FsPresentationListQuery.presentation_ids)
  return presentation_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FsPresentationListQuery::mutable_presentation_ids() {
  // @@protoc_insertion_point(field_mutable_list:filesystem.v1.FsPresentationListQuery.presentation_ids)
  return &presentation_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FsPresentation::kCcFieldNumber;
const int FsPresentation::kPresentationIdFieldNumber;
const int FsPresentation::kTargetIdFieldNumber;
const int FsPresentation::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsPresentation::FsPresentation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_filesystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesystem.v1.FsPresentation)
}
FsPresentation::FsPresentation(const FsPresentation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cc()) {
    cc_ = new ::common::v1::DataplaneCommon(*from.cc_);
  } else {
    cc_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::filesystem::v1::FsVolumeStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  ::memcpy(&presentation_id_, &from.presentation_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&presentation_id_)) + sizeof(target_id_));
  // @@protoc_insertion_point(copy_constructor:filesystem.v1.FsPresentation)
}

void FsPresentation::SharedCtor() {
  ::memset(&cc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&cc_)) + sizeof(target_id_));
  _cached_size_ = 0;
}

FsPresentation::~FsPresentation() {
  // @@protoc_insertion_point(destructor:filesystem.v1.FsPresentation)
  SharedDtor();
}

void FsPresentation::SharedDtor() {
  if (this != internal_default_instance()) delete cc_;
  if (this != internal_default_instance()) delete status_;
}

void FsPresentation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsPresentation::descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsPresentation& FsPresentation::default_instance() {
  protobuf_filesystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsPresentation* FsPresentation::New(::google::protobuf::Arena* arena) const {
  FsPresentation* n = new FsPresentation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsPresentation::Clear() {
// @@protoc_insertion_point(message_clear_start:filesystem.v1.FsPresentation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cc_ != NULL) {
    delete cc_;
  }
  cc_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  ::memset(&presentation_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&presentation_id_)) + sizeof(target_id_));
  _internal_metadata_.Clear();
}

bool FsPresentation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesystem.v1.FsPresentation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .common.v1.DataplaneCommon cc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 presentation_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &presentation_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .filesystem.v1.FsVolumeStatus status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesystem.v1.FsPresentation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesystem.v1.FsPresentation)
  return false;
#undef DO_
}

void FsPresentation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesystem.v1.FsPresentation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cc_, output);
  }

  // uint32 presentation_id = 2;
  if (this->presentation_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->presentation_id(), output);
  }

  // uint32 target_id = 3;
  if (this->target_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_id(), output);
  }

  // .filesystem.v1.FsVolumeStatus status = 5;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->status_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:filesystem.v1.FsPresentation)
}

::google::protobuf::uint8* FsPresentation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:filesystem.v1.FsPresentation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .common.v1.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cc_, deterministic, target);
  }

  // uint32 presentation_id = 2;
  if (this->presentation_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->presentation_id(), target);
  }

  // uint32 target_id = 3;
  if (this->target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_id(), target);
  }

  // .filesystem.v1.FsVolumeStatus status = 5;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->status_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesystem.v1.FsPresentation)
  return target;
}

size_t FsPresentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesystem.v1.FsPresentation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .common.v1.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cc_);
  }

  // .filesystem.v1.FsVolumeStatus status = 5;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // uint32 presentation_id = 2;
  if (this->presentation_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->presentation_id());
  }

  // uint32 target_id = 3;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsPresentation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesystem.v1.FsPresentation)
  GOOGLE_DCHECK_NE(&from, this);
  const FsPresentation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsPresentation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesystem.v1.FsPresentation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesystem.v1.FsPresentation)
    MergeFrom(*source);
  }
}

void FsPresentation::MergeFrom(const FsPresentation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesystem.v1.FsPresentation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cc()) {
    mutable_cc()->::common::v1::DataplaneCommon::MergeFrom(from.cc());
  }
  if (from.has_status()) {
    mutable_status()->::filesystem::v1::FsVolumeStatus::MergeFrom(from.status());
  }
  if (from.presentation_id() != 0) {
    set_presentation_id(from.presentation_id());
  }
  if (from.target_id() != 0) {
    set_target_id(from.target_id());
  }
}

void FsPresentation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesystem.v1.FsPresentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsPresentation::CopyFrom(const FsPresentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesystem.v1.FsPresentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsPresentation::IsInitialized() const {
  return true;
}

void FsPresentation::Swap(FsPresentation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsPresentation::InternalSwap(FsPresentation* other) {
  using std::swap;
  swap(cc_, other->cc_);
  swap(status_, other->status_);
  swap(presentation_id_, other->presentation_id_);
  swap(target_id_, other->target_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsPresentation::GetMetadata() const {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsPresentation

// .common.v1.DataplaneCommon cc = 1;
bool FsPresentation::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
void FsPresentation::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
const ::common::v1::DataplaneCommon& FsPresentation::cc() const {
  const ::common::v1::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:filesystem.v1.FsPresentation.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::common::v1::DataplaneCommon*>(
      &::common::v1::_DataplaneCommon_default_instance_);
}
::common::v1::DataplaneCommon* FsPresentation::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::common::v1::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:filesystem.v1.FsPresentation.cc)
  return cc_;
}
::common::v1::DataplaneCommon* FsPresentation::release_cc() {
  // @@protoc_insertion_point(field_release:filesystem.v1.FsPresentation.cc)
  
  ::common::v1::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
void FsPresentation::set_allocated_cc(::common::v1::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:filesystem.v1.FsPresentation.cc)
}

// uint32 presentation_id = 2;
void FsPresentation::clear_presentation_id() {
  presentation_id_ = 0u;
}
::google::protobuf::uint32 FsPresentation::presentation_id() const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsPresentation.presentation_id)
  return presentation_id_;
}
void FsPresentation::set_presentation_id(::google::protobuf::uint32 value) {
  
  presentation_id_ = value;
  // @@protoc_insertion_point(field_set:filesystem.v1.FsPresentation.presentation_id)
}

// uint32 target_id = 3;
void FsPresentation::clear_target_id() {
  target_id_ = 0u;
}
::google::protobuf::uint32 FsPresentation::target_id() const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsPresentation.target_id)
  return target_id_;
}
void FsPresentation::set_target_id(::google::protobuf::uint32 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:filesystem.v1.FsPresentation.target_id)
}

// .filesystem.v1.FsVolumeStatus status = 5;
bool FsPresentation::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void FsPresentation::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::filesystem::v1::FsVolumeStatus& FsPresentation::status() const {
  const ::filesystem::v1::FsVolumeStatus* p = status_;
  // @@protoc_insertion_point(field_get:filesystem.v1.FsPresentation.status)
  return p != NULL ? *p : *reinterpret_cast<const ::filesystem::v1::FsVolumeStatus*>(
      &::filesystem::v1::_FsVolumeStatus_default_instance_);
}
::filesystem::v1::FsVolumeStatus* FsPresentation::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::filesystem::v1::FsVolumeStatus;
  }
  // @@protoc_insertion_point(field_mutable:filesystem.v1.FsPresentation.status)
  return status_;
}
::filesystem::v1::FsVolumeStatus* FsPresentation::release_status() {
  // @@protoc_insertion_point(field_release:filesystem.v1.FsPresentation.status)
  
  ::filesystem::v1::FsVolumeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void FsPresentation::set_allocated_status(::filesystem::v1::FsVolumeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:filesystem.v1.FsPresentation.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FsPresentationList::kPresentationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsPresentationList::FsPresentationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_filesystem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:filesystem.v1.FsPresentationList)
}
FsPresentationList::FsPresentationList(const FsPresentationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      presentations_(from.presentations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:filesystem.v1.FsPresentationList)
}

void FsPresentationList::SharedCtor() {
  _cached_size_ = 0;
}

FsPresentationList::~FsPresentationList() {
  // @@protoc_insertion_point(destructor:filesystem.v1.FsPresentationList)
  SharedDtor();
}

void FsPresentationList::SharedDtor() {
}

void FsPresentationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsPresentationList::descriptor() {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsPresentationList& FsPresentationList::default_instance() {
  protobuf_filesystem_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsPresentationList* FsPresentationList::New(::google::protobuf::Arena* arena) const {
  FsPresentationList* n = new FsPresentationList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsPresentationList::Clear() {
// @@protoc_insertion_point(message_clear_start:filesystem.v1.FsPresentationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presentations_.Clear();
  _internal_metadata_.Clear();
}

bool FsPresentationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:filesystem.v1.FsPresentationList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .filesystem.v1.FsPresentation presentations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_presentations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:filesystem.v1.FsPresentationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:filesystem.v1.FsPresentationList)
  return false;
#undef DO_
}

void FsPresentationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:filesystem.v1.FsPresentationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .filesystem.v1.FsPresentation presentations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->presentations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->presentations(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:filesystem.v1.FsPresentationList)
}

::google::protobuf::uint8* FsPresentationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:filesystem.v1.FsPresentationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .filesystem.v1.FsPresentation presentations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->presentations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->presentations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:filesystem.v1.FsPresentationList)
  return target;
}

size_t FsPresentationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:filesystem.v1.FsPresentationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .filesystem.v1.FsPresentation presentations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->presentations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presentations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsPresentationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:filesystem.v1.FsPresentationList)
  GOOGLE_DCHECK_NE(&from, this);
  const FsPresentationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsPresentationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:filesystem.v1.FsPresentationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:filesystem.v1.FsPresentationList)
    MergeFrom(*source);
  }
}

void FsPresentationList::MergeFrom(const FsPresentationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:filesystem.v1.FsPresentationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  presentations_.MergeFrom(from.presentations_);
}

void FsPresentationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:filesystem.v1.FsPresentationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsPresentationList::CopyFrom(const FsPresentationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:filesystem.v1.FsPresentationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsPresentationList::IsInitialized() const {
  return true;
}

void FsPresentationList::Swap(FsPresentationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsPresentationList::InternalSwap(FsPresentationList* other) {
  using std::swap;
  presentations_.InternalSwap(&other->presentations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsPresentationList::GetMetadata() const {
  protobuf_filesystem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_filesystem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsPresentationList

// repeated .filesystem.v1.FsPresentation presentations = 1;
int FsPresentationList::presentations_size() const {
  return presentations_.size();
}
void FsPresentationList::clear_presentations() {
  presentations_.Clear();
}
const ::filesystem::v1::FsPresentation& FsPresentationList::presentations(int index) const {
  // @@protoc_insertion_point(field_get:filesystem.v1.FsPresentationList.presentations)
  return presentations_.Get(index);
}
::filesystem::v1::FsPresentation* FsPresentationList::mutable_presentations(int index) {
  // @@protoc_insertion_point(field_mutable:filesystem.v1.FsPresentationList.presentations)
  return presentations_.Mutable(index);
}
::filesystem::v1::FsPresentation* FsPresentationList::add_presentations() {
  // @@protoc_insertion_point(field_add:filesystem.v1.FsPresentationList.presentations)
  return presentations_.Add();
}
::google::protobuf::RepeatedPtrField< ::filesystem::v1::FsPresentation >*
FsPresentationList::mutable_presentations() {
  // @@protoc_insertion_point(field_mutable_list:filesystem.v1.FsPresentationList.presentations)
  return &presentations_;
}
const ::google::protobuf::RepeatedPtrField< ::filesystem::v1::FsPresentation >&
FsPresentationList::presentations() const {
  // @@protoc_insertion_point(field_list:filesystem.v1.FsPresentationList.presentations)
  return presentations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace filesystem

// @@protoc_insertion_point(global_scope)
