// Code generated by protoc-gen-go. DO NOT EDIT.
// source: filesystem.proto

package v1

import (
	v1 "code.storageos.net/storageos/service/common/v1"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FsVolumeState int32

const (
	FsVolumeState_NONE  FsVolumeState = 0
	FsVolumeState_READY FsVolumeState = 1
)

var FsVolumeState_name = map[int32]string{
	0: "NONE",
	1: "READY",
}

var FsVolumeState_value = map[string]int32{
	"NONE":  0,
	"READY": 1,
}

func (x FsVolumeState) String() string {
	return proto.EnumName(FsVolumeState_name, int32(x))
}

func (FsVolumeState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{0}
}

type FsVolume_VolumeDeviceType int32

const (
	FsVolume_FILE      FsVolume_VolumeDeviceType = 0
	FsVolume_NBD_BLOCK FsVolume_VolumeDeviceType = 1
)

var FsVolume_VolumeDeviceType_name = map[int32]string{
	0: "FILE",
	1: "NBD_BLOCK",
}

var FsVolume_VolumeDeviceType_value = map[string]int32{
	"FILE":      0,
	"NBD_BLOCK": 1,
}

func (x FsVolume_VolumeDeviceType) String() string {
	return proto.EnumName(FsVolume_VolumeDeviceType_name, int32(x))
}

func (FsVolume_VolumeDeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{5, 0}
}

type FsVolume_VolumeControlStatus int32

const (
	FsVolume_NONE        FsVolume_VolumeControlStatus = 0
	FsVolume_ACTIVE      FsVolume_VolumeControlStatus = 1
	FsVolume_UNAVAILABLE FsVolume_VolumeControlStatus = 2
	FsVolume_FAILED      FsVolume_VolumeControlStatus = 3
	FsVolume_DELETING    FsVolume_VolumeControlStatus = 4
)

var FsVolume_VolumeControlStatus_name = map[int32]string{
	0: "NONE",
	1: "ACTIVE",
	2: "UNAVAILABLE",
	3: "FAILED",
	4: "DELETING",
}

var FsVolume_VolumeControlStatus_value = map[string]int32{
	"NONE":        0,
	"ACTIVE":      1,
	"UNAVAILABLE": 2,
	"FAILED":      3,
	"DELETING":    4,
}

func (x FsVolume_VolumeControlStatus) String() string {
	return proto.EnumName(FsVolume_VolumeControlStatus_name, int32(x))
}

func (FsVolume_VolumeControlStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{5, 1}
}

type FsStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FsStatusRequest) Reset()         { *m = FsStatusRequest{} }
func (m *FsStatusRequest) String() string { return proto.CompactTextString(m) }
func (*FsStatusRequest) ProtoMessage()    {}
func (*FsStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{0}
}

func (m *FsStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FsStatusRequest.Unmarshal(m, b)
}
func (m *FsStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FsStatusRequest.Marshal(b, m, deterministic)
}
func (m *FsStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FsStatusRequest.Merge(m, src)
}
func (m *FsStatusRequest) XXX_Size() int {
	return xxx_messageInfo_FsStatusRequest.Size(m)
}
func (m *FsStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FsStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FsStatusRequest proto.InternalMessageInfo

type FsStatus struct {
	// The version control info string.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	// Generic daemon status.
	Status               *v1.DaemonStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FsStatus) Reset()         { *m = FsStatus{} }
func (m *FsStatus) String() string { return proto.CompactTextString(m) }
func (*FsStatus) ProtoMessage()    {}
func (*FsStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{1}
}

func (m *FsStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FsStatus.Unmarshal(m, b)
}
func (m *FsStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FsStatus.Marshal(b, m, deterministic)
}
func (m *FsStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FsStatus.Merge(m, src)
}
func (m *FsStatus) XXX_Size() int {
	return xxx_messageInfo_FsStatus.Size(m)
}
func (m *FsStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_FsStatus.DiscardUnknown(m)
}

var xxx_messageInfo_FsStatus proto.InternalMessageInfo

func (m *FsStatus) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

func (m *FsStatus) GetStatus() *v1.DaemonStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type FsVolumeListQuery struct {
	// A possibly-empty list of volume IDs to query.
	VolumeIds []uint32 `protobuf:"varint,1,rep,packed,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
	// A possibly-empty list of volume UUIDs to query.
	VolumeUuids          []string `protobuf:"bytes,2,rep,name=volume_uuids,json=volumeUuids,proto3" json:"volume_uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FsVolumeListQuery) Reset()         { *m = FsVolumeListQuery{} }
func (m *FsVolumeListQuery) String() string { return proto.CompactTextString(m) }
func (*FsVolumeListQuery) ProtoMessage()    {}
func (*FsVolumeListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{2}
}

func (m *FsVolumeListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FsVolumeListQuery.Unmarshal(m, b)
}
func (m *FsVolumeListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FsVolumeListQuery.Marshal(b, m, deterministic)
}
func (m *FsVolumeListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FsVolumeListQuery.Merge(m, src)
}
func (m *FsVolumeListQuery) XXX_Size() int {
	return xxx_messageInfo_FsVolumeListQuery.Size(m)
}
func (m *FsVolumeListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FsVolumeListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FsVolumeListQuery proto.InternalMessageInfo

func (m *FsVolumeListQuery) GetVolumeIds() []uint32 {
	if m != nil {
		return m.VolumeIds
	}
	return nil
}

func (m *FsVolumeListQuery) GetVolumeUuids() []string {
	if m != nil {
		return m.VolumeUuids
	}
	return nil
}

type FsVolumeStatistics struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FsVolumeStatistics) Reset()         { *m = FsVolumeStatistics{} }
func (m *FsVolumeStatistics) String() string { return proto.CompactTextString(m) }
func (*FsVolumeStatistics) ProtoMessage()    {}
func (*FsVolumeStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{3}
}

func (m *FsVolumeStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FsVolumeStatistics.Unmarshal(m, b)
}
func (m *FsVolumeStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FsVolumeStatistics.Marshal(b, m, deterministic)
}
func (m *FsVolumeStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FsVolumeStatistics.Merge(m, src)
}
func (m *FsVolumeStatistics) XXX_Size() int {
	return xxx_messageInfo_FsVolumeStatistics.Size(m)
}
func (m *FsVolumeStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_FsVolumeStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_FsVolumeStatistics proto.InternalMessageInfo

type FsVolumeStatus struct {
	// State of the volume device node (file/block device).
	NodeState            FsVolumeState `protobuf:"varint,1,opt,name=node_state,json=nodeState,proto3,enum=filesystem.v1.FsVolumeState" json:"node_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *FsVolumeStatus) Reset()         { *m = FsVolumeStatus{} }
func (m *FsVolumeStatus) String() string { return proto.CompactTextString(m) }
func (*FsVolumeStatus) ProtoMessage()    {}
func (*FsVolumeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{4}
}

func (m *FsVolumeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FsVolumeStatus.Unmarshal(m, b)
}
func (m *FsVolumeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FsVolumeStatus.Marshal(b, m, deterministic)
}
func (m *FsVolumeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FsVolumeStatus.Merge(m, src)
}
func (m *FsVolumeStatus) XXX_Size() int {
	return xxx_messageInfo_FsVolumeStatus.Size(m)
}
func (m *FsVolumeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_FsVolumeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_FsVolumeStatus proto.InternalMessageInfo

func (m *FsVolumeStatus) GetNodeState() FsVolumeState {
	if m != nil {
		return m.NodeState
	}
	return FsVolumeState_NONE
}

//*
// A StorageOS volume to be presented via the FUSE filesystem.
type FsVolume struct {
	Cc *v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc,proto3" json:"cc,omitempty"`
	// The volume ID to represent.
	VolumeId uint32 `protobuf:"varint,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The type for this volume.
	NodeType FsVolume_VolumeDeviceType `protobuf:"varint,3,opt,name=node_type,json=nodeType,proto3,enum=filesystem.v1.FsVolume_VolumeDeviceType" json:"node_type,omitempty"`
	// The control plane's desired state for this volume.
	ControlStatus FsVolume_VolumeControlStatus `protobuf:"varint,10,opt,name=control_status,json=controlStatus,proto3,enum=filesystem.v1.FsVolume_VolumeControlStatus" json:"control_status,omitempty"`
	// An opaque value interpreted based on node_type.
	DeviceNumber uint32 `protobuf:"varint,4,opt,name=device_number,json=deviceNumber,proto3" json:"device_number,omitempty"` // Deprecated: Do not use.
	// The filename of the underlying volume to present in the filesystem.
	Filename string `protobuf:"bytes,5,opt,name=filename,proto3" json:"filename,omitempty"`
	// The filename of the presentation node, to which users actually connect.
	// This field really belongs on the FsPresentation object and has been added
	// there post-1.5.0. Until we're all C2, this field and the field in
	// FsPresentation should have the same value or you'll see some very strange
	// artifacts.
	PresentationFilename string `protobuf:"bytes,9,opt,name=presentation_filename,json=presentationFilename,proto3" json:"presentation_filename,omitempty"`
	// The volume size in bytes.
	VolumeSizeBytes uint64 `protobuf:"varint,6,opt,name=volume_size_bytes,json=volumeSizeBytes,proto3" json:"volume_size_bytes,omitempty"`
	// Volume statistics.
	Stats *FsVolumeStatistics `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
	// Volume status, e.g. readiness.
	Status               *FsVolumeStatus `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FsVolume) Reset()         { *m = FsVolume{} }
func (m *FsVolume) String() string { return proto.CompactTextString(m) }
func (*FsVolume) ProtoMessage()    {}
func (*FsVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{5}
}

func (m *FsVolume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FsVolume.Unmarshal(m, b)
}
func (m *FsVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FsVolume.Marshal(b, m, deterministic)
}
func (m *FsVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FsVolume.Merge(m, src)
}
func (m *FsVolume) XXX_Size() int {
	return xxx_messageInfo_FsVolume.Size(m)
}
func (m *FsVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_FsVolume.DiscardUnknown(m)
}

var xxx_messageInfo_FsVolume proto.InternalMessageInfo

func (m *FsVolume) GetCc() *v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *FsVolume) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *FsVolume) GetNodeType() FsVolume_VolumeDeviceType {
	if m != nil {
		return m.NodeType
	}
	return FsVolume_FILE
}

func (m *FsVolume) GetControlStatus() FsVolume_VolumeControlStatus {
	if m != nil {
		return m.ControlStatus
	}
	return FsVolume_NONE
}

// Deprecated: Do not use.
func (m *FsVolume) GetDeviceNumber() uint32 {
	if m != nil {
		return m.DeviceNumber
	}
	return 0
}

func (m *FsVolume) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *FsVolume) GetPresentationFilename() string {
	if m != nil {
		return m.PresentationFilename
	}
	return ""
}

func (m *FsVolume) GetVolumeSizeBytes() uint64 {
	if m != nil {
		return m.VolumeSizeBytes
	}
	return 0
}

func (m *FsVolume) GetStats() *FsVolumeStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *FsVolume) GetStatus() *FsVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type FsVolumeList struct {
	Volumes              []*FsVolume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FsVolumeList) Reset()         { *m = FsVolumeList{} }
func (m *FsVolumeList) String() string { return proto.CompactTextString(m) }
func (*FsVolumeList) ProtoMessage()    {}
func (*FsVolumeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{6}
}

func (m *FsVolumeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FsVolumeList.Unmarshal(m, b)
}
func (m *FsVolumeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FsVolumeList.Marshal(b, m, deterministic)
}
func (m *FsVolumeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FsVolumeList.Merge(m, src)
}
func (m *FsVolumeList) XXX_Size() int {
	return xxx_messageInfo_FsVolumeList.Size(m)
}
func (m *FsVolumeList) XXX_DiscardUnknown() {
	xxx_messageInfo_FsVolumeList.DiscardUnknown(m)
}

var xxx_messageInfo_FsVolumeList proto.InternalMessageInfo

func (m *FsVolumeList) GetVolumes() []*FsVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type FsPresentationListQuery struct {
	// A possibly-empty list of volume IDs to query.
	PresentationIds []uint32 `protobuf:"varint,1,rep,packed,name=presentation_ids,json=presentationIds,proto3" json:"presentation_ids,omitempty"`
	// A possibly-empty list of volume UUIDs to query.
	PresentationUuids    []string `protobuf:"bytes,2,rep,name=presentation_uuids,json=presentationUuids,proto3" json:"presentation_uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FsPresentationListQuery) Reset()         { *m = FsPresentationListQuery{} }
func (m *FsPresentationListQuery) String() string { return proto.CompactTextString(m) }
func (*FsPresentationListQuery) ProtoMessage()    {}
func (*FsPresentationListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{7}
}

func (m *FsPresentationListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FsPresentationListQuery.Unmarshal(m, b)
}
func (m *FsPresentationListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FsPresentationListQuery.Marshal(b, m, deterministic)
}
func (m *FsPresentationListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FsPresentationListQuery.Merge(m, src)
}
func (m *FsPresentationListQuery) XXX_Size() int {
	return xxx_messageInfo_FsPresentationListQuery.Size(m)
}
func (m *FsPresentationListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FsPresentationListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FsPresentationListQuery proto.InternalMessageInfo

func (m *FsPresentationListQuery) GetPresentationIds() []uint32 {
	if m != nil {
		return m.PresentationIds
	}
	return nil
}

func (m *FsPresentationListQuery) GetPresentationUuids() []string {
	if m != nil {
		return m.PresentationUuids
	}
	return nil
}

//*
// Presentation volume message for Fs RPCs.
//
// The minimum amount of information required to specify the 'presentation' or source volume,
// the volume that is presented to the user and (usually) mounted. All actual work
// is done on the target volume, which has actual storage associated with it.
//
// In order to discover information about the type of volume to present, the target
// volume has to be fetched regardless. As a result, there's no need to duplicate fields
// here, we just need enough information to get from the presentation node to the target,
// and to know when the presentation is actually available to the user.
type FsPresentation struct {
	Cc *v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc,proto3" json:"cc,omitempty"`
	// The inode the user mounts or opens.
	PresentationId uint32 `protobuf:"varint,2,opt,name=presentation_id,json=presentationId,proto3" json:"presentation_id,omitempty"`
	// The underlying inode of the StorageOS volume.
	TargetId uint32 `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// The UUID of the volume to which we point. This must be set for NLI mode,
	// and should be ignored in GSI mode.
	TargetUuid string `protobuf:"bytes,7,opt,name=target_uuid,json=targetUuid,proto3" json:"target_uuid,omitempty"`
	// Presentation inode status, e.g. readiness.
	Status *FsVolumeStatus `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// The filesystem name of the presentation. This should have the same
	// contents as the presentation_filename field of the DirectorVolume object
	// of the target, otherwise expect weird artifacts as we transition to C2.
	Filename             string   `protobuf:"bytes,6,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FsPresentation) Reset()         { *m = FsPresentation{} }
func (m *FsPresentation) String() string { return proto.CompactTextString(m) }
func (*FsPresentation) ProtoMessage()    {}
func (*FsPresentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{8}
}

func (m *FsPresentation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FsPresentation.Unmarshal(m, b)
}
func (m *FsPresentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FsPresentation.Marshal(b, m, deterministic)
}
func (m *FsPresentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FsPresentation.Merge(m, src)
}
func (m *FsPresentation) XXX_Size() int {
	return xxx_messageInfo_FsPresentation.Size(m)
}
func (m *FsPresentation) XXX_DiscardUnknown() {
	xxx_messageInfo_FsPresentation.DiscardUnknown(m)
}

var xxx_messageInfo_FsPresentation proto.InternalMessageInfo

func (m *FsPresentation) GetCc() *v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *FsPresentation) GetPresentationId() uint32 {
	if m != nil {
		return m.PresentationId
	}
	return 0
}

func (m *FsPresentation) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *FsPresentation) GetTargetUuid() string {
	if m != nil {
		return m.TargetUuid
	}
	return ""
}

func (m *FsPresentation) GetStatus() *FsVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *FsPresentation) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type FsPresentationList struct {
	Presentations        []*FsPresentation `protobuf:"bytes,1,rep,name=presentations,proto3" json:"presentations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FsPresentationList) Reset()         { *m = FsPresentationList{} }
func (m *FsPresentationList) String() string { return proto.CompactTextString(m) }
func (*FsPresentationList) ProtoMessage()    {}
func (*FsPresentationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a9f8093c6c7067e, []int{9}
}

func (m *FsPresentationList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FsPresentationList.Unmarshal(m, b)
}
func (m *FsPresentationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FsPresentationList.Marshal(b, m, deterministic)
}
func (m *FsPresentationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FsPresentationList.Merge(m, src)
}
func (m *FsPresentationList) XXX_Size() int {
	return xxx_messageInfo_FsPresentationList.Size(m)
}
func (m *FsPresentationList) XXX_DiscardUnknown() {
	xxx_messageInfo_FsPresentationList.DiscardUnknown(m)
}

var xxx_messageInfo_FsPresentationList proto.InternalMessageInfo

func (m *FsPresentationList) GetPresentations() []*FsPresentation {
	if m != nil {
		return m.Presentations
	}
	return nil
}

func init() {
	proto.RegisterEnum("filesystem.v1.FsVolumeState", FsVolumeState_name, FsVolumeState_value)
	proto.RegisterEnum("filesystem.v1.FsVolume_VolumeDeviceType", FsVolume_VolumeDeviceType_name, FsVolume_VolumeDeviceType_value)
	proto.RegisterEnum("filesystem.v1.FsVolume_VolumeControlStatus", FsVolume_VolumeControlStatus_name, FsVolume_VolumeControlStatus_value)
	proto.RegisterType((*FsStatusRequest)(nil), "filesystem.v1.FsStatusRequest")
	proto.RegisterType((*FsStatus)(nil), "filesystem.v1.FsStatus")
	proto.RegisterType((*FsVolumeListQuery)(nil), "filesystem.v1.FsVolumeListQuery")
	proto.RegisterType((*FsVolumeStatistics)(nil), "filesystem.v1.FsVolumeStatistics")
	proto.RegisterType((*FsVolumeStatus)(nil), "filesystem.v1.FsVolumeStatus")
	proto.RegisterType((*FsVolume)(nil), "filesystem.v1.FsVolume")
	proto.RegisterType((*FsVolumeList)(nil), "filesystem.v1.FsVolumeList")
	proto.RegisterType((*FsPresentationListQuery)(nil), "filesystem.v1.FsPresentationListQuery")
	proto.RegisterType((*FsPresentation)(nil), "filesystem.v1.FsPresentation")
	proto.RegisterType((*FsPresentationList)(nil), "filesystem.v1.FsPresentationList")
}

func init() { proto.RegisterFile("filesystem.proto", fileDescriptor_0a9f8093c6c7067e) }

var fileDescriptor_0a9f8093c6c7067e = []byte{
	// 1029 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x5b, 0x6f, 0x1a, 0x47,
	0x1b, 0xf6, 0x82, 0x21, 0xf0, 0x72, 0x5a, 0xcf, 0xe7, 0xc8, 0x04, 0xc7, 0x5f, 0xf0, 0xaa, 0x6a,
	0xa8, 0xa3, 0x82, 0x8c, 0x5b, 0xf5, 0xa2, 0x17, 0x15, 0xc7, 0x88, 0x1a, 0x93, 0x76, 0x6d, 0x2c,
	0xa5, 0x17, 0x5d, 0xe1, 0x65, 0x6c, 0xad, 0x04, 0x3b, 0x74, 0x67, 0x40, 0x22, 0xff, 0xa0, 0x3f,
	0xa2, 0x7f, 0xb3, 0xd7, 0xd5, 0x1c, 0x80, 0x59, 0x73, 0x88, 0x48, 0x7b, 0x65, 0xf6, 0x3d, 0x3c,
	0xef, 0xf3, 0xbc, 0x87, 0xf5, 0x82, 0xf9, 0xe8, 0x8d, 0x30, 0x9d, 0x53, 0x86, 0xc7, 0xe5, 0x49,
	0x40, 0x18, 0x41, 0x19, 0xcd, 0x32, 0xbb, 0x2c, 0xa4, 0x5d, 0x32, 0x1e, 0x13, 0x5f, 0x3a, 0xad,
	0x23, 0xc8, 0xb5, 0xe9, 0x2d, 0x1b, 0xb0, 0x29, 0xb5, 0xf1, 0x1f, 0x53, 0x4c, 0x99, 0xf5, 0x3b,
	0x24, 0x16, 0x26, 0x74, 0x0e, 0xe9, 0x19, 0x0e, 0xa8, 0x47, 0x7c, 0xc7, 0xf3, 0x1f, 0x49, 0xde,
	0x28, 0x1a, 0xa5, 0xa4, 0x9d, 0x52, 0xb6, 0x8e, 0xff, 0x48, 0x50, 0x05, 0xe2, 0x54, 0x04, 0xe7,
	0x23, 0x45, 0xa3, 0x94, 0xaa, 0x9e, 0x94, 0x55, 0x81, 0xd9, 0x65, 0xb9, 0x39, 0xc0, 0x63, 0xe2,
	0x2b, 0x78, 0x15, 0x66, 0xf5, 0xe1, 0xa8, 0x4d, 0xef, 0xc9, 0x68, 0x3a, 0xc6, 0x5d, 0x8f, 0xb2,
	0x5f, 0xa7, 0x38, 0x98, 0xa3, 0x33, 0x80, 0x99, 0x30, 0x39, 0xde, 0x90, 0xe6, 0x8d, 0x62, 0xb4,
	0x94, 0xb1, 0x93, 0xd2, 0xd2, 0x19, 0x4a, 0x1e, 0xd2, 0x3d, 0x9d, 0xf2, 0x80, 0x48, 0x31, 0x2a,
	0x78, 0x08, 0x5b, 0x9f, 0x9b, 0xac, 0x63, 0x40, 0x0b, 0x58, 0x5e, 0xd0, 0xa3, 0xcc, 0x73, 0xa9,
	0x75, 0x03, 0x59, 0xdd, 0x3a, 0xa5, 0xe8, 0x47, 0x00, 0x9f, 0x0c, 0xb1, 0xc3, 0xd9, 0x60, 0x21,
	0x28, 0x5b, 0x7d, 0x5d, 0x0e, 0xf5, 0xa8, 0xac, 0xa7, 0x60, 0x3b, 0xc9, 0xe3, 0xc5, 0x4f, 0xeb,
	0xcf, 0x18, 0x6f, 0x8e, 0x74, 0xa2, 0x0b, 0x88, 0xb8, 0xae, 0x40, 0x48, 0x55, 0x0b, 0x21, 0xd5,
	0x6c, 0x30, 0x19, 0x0d, 0x7c, 0xdc, 0x10, 0x26, 0x3b, 0xe2, 0xba, 0xe8, 0x14, 0x92, 0x4b, 0x7d,
	0xa2, 0x51, 0x19, 0x3b, 0xb1, 0x90, 0x87, 0x5a, 0x20, 0x4a, 0x38, 0x6c, 0x3e, 0xc1, 0xf9, 0xa8,
	0x60, 0x54, 0xda, 0xc2, 0xa8, 0x2c, 0xff, 0x34, 0xf1, 0xcc, 0x73, 0xf1, 0xdd, 0x7c, 0x82, 0xed,
	0x04, 0x4f, 0xe5, 0xbf, 0x90, 0x0d, 0x59, 0x97, 0xf8, 0x2c, 0x20, 0x23, 0x47, 0x4d, 0x04, 0x04,
	0xd6, 0xbb, 0xdd, 0x58, 0x0d, 0x99, 0xa3, 0xa6, 0x94, 0x71, 0xf5, 0x47, 0xf4, 0x16, 0x32, 0x43,
	0x51, 0xcb, 0xf1, 0xa7, 0xe3, 0x07, 0x1c, 0xe4, 0x0f, 0x39, 0xf7, 0x7a, 0x24, 0x6f, 0xd8, 0x69,
	0xe9, 0xe8, 0x09, 0x3b, 0x2a, 0x40, 0x82, 0x57, 0xf1, 0x07, 0x63, 0x9c, 0x8f, 0x89, 0x2d, 0x59,
	0x3e, 0xa3, 0x2b, 0x78, 0x39, 0x09, 0x30, 0xc5, 0x3e, 0x9f, 0x0b, 0xf1, 0x9d, 0x65, 0x60, 0x52,
	0x04, 0x1e, 0xeb, 0xce, 0xf6, 0x22, 0xe9, 0x02, 0x8e, 0x54, 0xc7, 0xa8, 0xf7, 0x09, 0x3b, 0x0f,
	0x73, 0x86, 0x69, 0x3e, 0x5e, 0x34, 0x4a, 0x87, 0x76, 0x4e, 0x3a, 0x6e, 0xbd, 0x4f, 0xb8, 0xce,
	0xcd, 0xe8, 0x07, 0x88, 0x71, 0xc5, 0x34, 0xff, 0x42, 0x0c, 0xe3, 0x7c, 0xc7, 0x38, 0xe5, 0x5e,
	0xd8, 0x32, 0x1e, 0x7d, 0xbf, 0x5c, 0xde, 0x84, 0xc8, 0x3c, 0xdb, 0x91, 0xa9, 0xad, 0xf0, 0x3b,
	0x30, 0x9f, 0xcf, 0x01, 0x25, 0xe0, 0xb0, 0xdd, 0xe9, 0xb6, 0xcc, 0x03, 0x94, 0x81, 0x64, 0xaf,
	0xde, 0x74, 0xea, 0xdd, 0x0f, 0x8d, 0x6b, 0xd3, 0xb0, 0xee, 0xe1, 0x7f, 0x1b, 0x1a, 0xcd, 0xe3,
	0x7b, 0x1f, 0x7a, 0x3c, 0x1e, 0x20, 0x5e, 0x6b, 0xdc, 0x75, 0xee, 0x5b, 0xa6, 0x81, 0x72, 0x90,
	0xea, 0xf7, 0x6a, 0xf7, 0xb5, 0x4e, 0xb7, 0x56, 0xef, 0xb6, 0xcc, 0x08, 0x77, 0xb6, 0x6b, 0x9d,
	0x6e, 0xab, 0x69, 0x46, 0x51, 0x1a, 0x12, 0xcd, 0x56, 0xb7, 0x75, 0xd7, 0xe9, 0xbd, 0x37, 0x0f,
	0xad, 0x1a, 0xa4, 0xf5, 0x3b, 0x42, 0x97, 0xf0, 0x42, 0xf6, 0x45, 0xde, 0x0f, 0xbf, 0xc4, 0xcd,
	0x62, 0xec, 0x45, 0x9c, 0x45, 0xe1, 0xa4, 0x4d, 0x7f, 0xd1, 0xba, 0xbf, 0x3a, 0xc8, 0x6f, 0xc0,
	0x0c, 0xcd, 0x6c, 0x75, 0x96, 0x39, 0xdd, 0xce, 0x8f, 0xf3, 0x5b, 0x40, 0xa1, 0x50, 0xfd, 0x44,
	0x8f, 0x74, 0x8f, 0x3c, 0xd4, 0xbf, 0x0d, 0x7e, 0x93, 0x7a, 0xd5, 0xbd, 0x2e, 0xe9, 0x2d, 0xe4,
	0x9e, 0x11, 0x53, 0xf7, 0x94, 0x0d, 0xf3, 0xe2, 0x27, 0xc7, 0x06, 0xc1, 0x13, 0x66, 0x3c, 0x24,
	0x2a, 0x4f, 0x4e, 0x1a, 0x3a, 0x43, 0xf4, 0x06, 0x52, 0xca, 0xc9, 0xd9, 0x8a, 0xbd, 0x49, 0xda,
	0x20, 0x4d, 0x9c, 0xa6, 0xb6, 0x19, 0xb1, 0x3d, 0x36, 0x23, 0x74, 0x06, 0xf1, 0xf0, 0x19, 0x58,
	0x1f, 0xf9, 0x1b, 0xea, 0x79, 0xb7, 0x51, 0x03, 0x32, 0x3a, 0xf1, 0xc5, 0xf0, 0xd6, 0xeb, 0xe9,
	0x99, 0x76, 0x38, 0xe7, 0xe2, 0x2b, 0xc8, 0x84, 0xde, 0x59, 0xda, 0x76, 0x25, 0x21, 0x66, 0xb7,
	0x6a, 0xcd, 0x8f, 0xa6, 0x51, 0xfd, 0x2b, 0x05, 0x91, 0x36, 0x45, 0x0d, 0x88, 0xab, 0x1d, 0xfc,
	0xff, 0x5a, 0x91, 0xd0, 0xbf, 0x82, 0xc2, 0xc9, 0x16, 0xbf, 0x75, 0x80, 0x7e, 0x82, 0xb4, 0xda,
	0xea, 0x00, 0xf3, 0x82, 0xdb, 0x96, 0xad, 0x70, 0xac, 0xcd, 0xd3, 0x9e, 0xb8, 0x36, 0xa6, 0xd3,
	0x11, 0xd3, 0x01, 0xfa, 0x93, 0xe1, 0xbf, 0x03, 0x68, 0xe2, 0x11, 0xfe, 0x12, 0x80, 0x1b, 0x00,
	0xed, 0x7c, 0x8a, 0x5b, 0xd2, 0x97, 0x27, 0x51, 0x38, 0xdd, 0x11, 0x61, 0x1d, 0xa0, 0x6b, 0x40,
	0xfa, 0x88, 0x54, 0x5f, 0x76, 0xcf, 0x71, 0x2b, 0xb7, 0x67, 0x60, 0xaa, 0x47, 0xff, 0x0d, 0x98,
	0xea, 0xd7, 0x17, 0x82, 0x39, 0x60, 0xae, 0xed, 0xf0, 0xd7, 0x3b, 0xa1, 0x56, 0x1d, 0x3c, 0xff,
	0x6c, 0x9c, 0x75, 0x80, 0xda, 0x90, 0xe4, 0x5b, 0x46, 0x05, 0xf2, 0x2b, 0x8d, 0xc5, 0xd2, 0x2a,
	0xc1, 0x5e, 0x6f, 0x72, 0xd9, 0x98, 0x4e, 0x88, 0x4f, 0xb1, 0xc0, 0xc9, 0x34, 0x88, 0xff, 0xe8,
	0x3d, 0xbd, 0xc7, 0xac, 0x4e, 0xc8, 0x08, 0xe9, 0x8a, 0xa4, 0xe7, 0x1a, 0xcf, 0x0b, 0x67, 0x6b,
	0x56, 0x15, 0x6f, 0xe3, 0xc9, 0x68, 0x6e, 0x1d, 0xa0, 0x0e, 0x98, 0xd2, 0x2e, 0x87, 0x20, 0xa0,
	0x5e, 0xae, 0x25, 0x71, 0x73, 0x88, 0x92, 0x9e, 0xb3, 0x82, 0xca, 0x4a, 0x33, 0xa7, 0x2a, 0x80,
	0x0a, 0x6b, 0x19, 0x2b, 0x81, 0xaf, 0x36, 0x16, 0x51, 0x5d, 0xfa, 0x19, 0x72, 0x4b, 0xb6, 0xb7,
	0x2c, 0xf0, 0xfc, 0xa7, 0x2d, 0xfa, 0xde, 0x6c, 0xd2, 0x27, 0x33, 0x16, 0xb4, 0x6e, 0x00, 0xe9,
	0x6c, 0x15, 0xdc, 0xc9, 0x5a, 0xa2, 0x74, 0x7c, 0x56, 0xe5, 0xcd, 0xa2, 0x61, 0x9c, 0xaa, 0x02,
	0xdb, 0xa5, 0xf3, 0x74, 0x4b, 0xa1, 0x0d, 0x4a, 0xfb, 0x9e, 0xcf, 0xae, 0xaa, 0xfb, 0x28, 0x95,
	0x19, 0x5b, 0x94, 0x2a, 0xb8, 0x75, 0xa5, 0xd2, 0xb1, 0x9f, 0x52, 0x05, 0xb6, 0x9f, 0x52, 0x99,
	0x24, 0x95, 0xd6, 0xbf, 0xfb, 0xad, 0xea, 0x92, 0x21, 0x2e, 0x53, 0x46, 0x82, 0xc1, 0x13, 0x26,
	0xb4, 0xec, 0x63, 0x56, 0x59, 0x3e, 0x55, 0x28, 0x0e, 0xf8, 0xe7, 0x46, 0x65, 0x75, 0x44, 0x95,
	0xd9, 0xe5, 0x43, 0x5c, 0x7c, 0xc9, 0x5f, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0x39, 0x60, 0xc6,
	0x1c, 0xfa, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FsClient is the client API for Fs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FsClient interface {
	//*
	// Get program status.
	Status(ctx context.Context, in *FsStatusRequest, opts ...grpc.CallOption) (*FsStatus, error)
	//*
	// Create the specified FsVolume.
	//
	// returns RpcResult
	VolumeCreate(ctx context.Context, in *FsVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Update the specified FsVolume.
	//
	// returns RpcResult
	VolumeUpdate(ctx context.Context, in *FsVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Delete the specified FsVolume.
	//
	// returns RpcResult
	VolumeDelete(ctx context.Context, in *FsVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Return a list of FsVolume messages, optionally filtered using the supplied
	// FsVolumeListQuery message.
	//
	// returns A FsVolumeList message containing FsVolume objects,
	//         if any are found that match the filter.
	VolumeList(ctx context.Context, in *FsVolumeListQuery, opts ...grpc.CallOption) (*FsVolumeList, error)
	//*
	// Add configuration for a Presentation volume specified in the FsPresentation message.
	//
	// returns RpcResult
	PresentationCreate(ctx context.Context, in *FsPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Update configuration for a Presentation volume specified in the FsPresentation message.
	//
	// returns RpcResult
	PresentationUpdate(ctx context.Context, in *FsPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Remove configuration for the Presentation volume specified in the FsPresentation message.
	//
	// returns RpcResult
	PresentationDelete(ctx context.Context, in *FsPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// List configured Presentation volumes, optionally filtered using a FsPresentationListQuery
	// message.
	//
	// returns A FsPresentationList message containing FsPresentation mesages,
	//         if any are found matching the filter.
	PresentationList(ctx context.Context, in *FsPresentationListQuery, opts ...grpc.CallOption) (*FsPresentationList, error)
	//*
	// List data-plane stats, optionally filtered using a StatsListQuery message.
	//
	// returns A StatsListResponse containing Statistic messages, if any are
	// found matching the filter.
	StatsList(ctx context.Context, in *v1.StatsListQuery, opts ...grpc.CallOption) (*v1.StatsListResponse, error)
	// Config services, from common.v1.
	ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error)
	ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error)
	ConfigGetUint32(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint32Reply, error)
	ConfigUpdateUint32(ctx context.Context, in *v1.ConfigUint32, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListUint32(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint32List, error)
}

type fsClient struct {
	cc *grpc.ClientConn
}

func NewFsClient(cc *grpc.ClientConn) FsClient {
	return &fsClient{cc}
}

func (c *fsClient) Status(ctx context.Context, in *FsStatusRequest, opts ...grpc.CallOption) (*FsStatus, error) {
	out := new(FsStatus)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) VolumeCreate(ctx context.Context, in *FsVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/VolumeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) VolumeUpdate(ctx context.Context, in *FsVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/VolumeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) VolumeDelete(ctx context.Context, in *FsVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/VolumeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) VolumeList(ctx context.Context, in *FsVolumeListQuery, opts ...grpc.CallOption) (*FsVolumeList, error) {
	out := new(FsVolumeList)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/VolumeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) PresentationCreate(ctx context.Context, in *FsPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/PresentationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) PresentationUpdate(ctx context.Context, in *FsPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/PresentationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) PresentationDelete(ctx context.Context, in *FsPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/PresentationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) PresentationList(ctx context.Context, in *FsPresentationListQuery, opts ...grpc.CallOption) (*FsPresentationList, error) {
	out := new(FsPresentationList)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/PresentationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) StatsList(ctx context.Context, in *v1.StatsListQuery, opts ...grpc.CallOption) (*v1.StatsListResponse, error) {
	out := new(v1.StatsListResponse)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/StatsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error) {
	out := new(v1.ConfigGetBoolReply)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/ConfigGetBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/ConfigUpdateBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error) {
	out := new(v1.ConfigBoolList)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/ConfigListBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error) {
	out := new(v1.ConfigGetStringReply)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/ConfigGetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/ConfigUpdateString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error) {
	out := new(v1.ConfigStringList)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/ConfigListString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) ConfigGetUint32(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint32Reply, error) {
	out := new(v1.ConfigGetUint32Reply)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/ConfigGetUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) ConfigUpdateUint32(ctx context.Context, in *v1.ConfigUint32, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/ConfigUpdateUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fsClient) ConfigListUint32(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint32List, error) {
	out := new(v1.ConfigUint32List)
	err := c.cc.Invoke(ctx, "/filesystem.v1.Fs/ConfigListUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FsServer is the server API for Fs service.
type FsServer interface {
	//*
	// Get program status.
	Status(context.Context, *FsStatusRequest) (*FsStatus, error)
	//*
	// Create the specified FsVolume.
	//
	// returns RpcResult
	VolumeCreate(context.Context, *FsVolume) (*v1.RpcResult, error)
	//*
	// Update the specified FsVolume.
	//
	// returns RpcResult
	VolumeUpdate(context.Context, *FsVolume) (*v1.RpcResult, error)
	//*
	// Delete the specified FsVolume.
	//
	// returns RpcResult
	VolumeDelete(context.Context, *FsVolume) (*v1.RpcResult, error)
	//*
	// Return a list of FsVolume messages, optionally filtered using the supplied
	// FsVolumeListQuery message.
	//
	// returns A FsVolumeList message containing FsVolume objects,
	//         if any are found that match the filter.
	VolumeList(context.Context, *FsVolumeListQuery) (*FsVolumeList, error)
	//*
	// Add configuration for a Presentation volume specified in the FsPresentation message.
	//
	// returns RpcResult
	PresentationCreate(context.Context, *FsPresentation) (*v1.RpcResult, error)
	//*
	// Update configuration for a Presentation volume specified in the FsPresentation message.
	//
	// returns RpcResult
	PresentationUpdate(context.Context, *FsPresentation) (*v1.RpcResult, error)
	//*
	// Remove configuration for the Presentation volume specified in the FsPresentation message.
	//
	// returns RpcResult
	PresentationDelete(context.Context, *FsPresentation) (*v1.RpcResult, error)
	//*
	// List configured Presentation volumes, optionally filtered using a FsPresentationListQuery
	// message.
	//
	// returns A FsPresentationList message containing FsPresentation mesages,
	//         if any are found matching the filter.
	PresentationList(context.Context, *FsPresentationListQuery) (*FsPresentationList, error)
	//*
	// List data-plane stats, optionally filtered using a StatsListQuery message.
	//
	// returns A StatsListResponse containing Statistic messages, if any are
	// found matching the filter.
	StatsList(context.Context, *v1.StatsListQuery) (*v1.StatsListResponse, error)
	// Config services, from common.v1.
	ConfigGetBool(context.Context, *v1.ConfigKey) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(context.Context, *v1.ConfigBool) (*v1.ConfigUpdateReply, error)
	ConfigListBool(context.Context, *v1.ConfigListQuery) (*v1.ConfigBoolList, error)
	ConfigGetString(context.Context, *v1.ConfigKey) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(context.Context, *v1.ConfigString) (*v1.ConfigUpdateReply, error)
	ConfigListString(context.Context, *v1.ConfigListQuery) (*v1.ConfigStringList, error)
	ConfigGetUint32(context.Context, *v1.ConfigKey) (*v1.ConfigGetUint32Reply, error)
	ConfigUpdateUint32(context.Context, *v1.ConfigUint32) (*v1.ConfigUpdateReply, error)
	ConfigListUint32(context.Context, *v1.ConfigListQuery) (*v1.ConfigUint32List, error)
}

// UnimplementedFsServer can be embedded to have forward compatible implementations.
type UnimplementedFsServer struct {
}

func (*UnimplementedFsServer) Status(ctx context.Context, req *FsStatusRequest) (*FsStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedFsServer) VolumeCreate(ctx context.Context, req *FsVolume) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeCreate not implemented")
}
func (*UnimplementedFsServer) VolumeUpdate(ctx context.Context, req *FsVolume) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeUpdate not implemented")
}
func (*UnimplementedFsServer) VolumeDelete(ctx context.Context, req *FsVolume) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeDelete not implemented")
}
func (*UnimplementedFsServer) VolumeList(ctx context.Context, req *FsVolumeListQuery) (*FsVolumeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeList not implemented")
}
func (*UnimplementedFsServer) PresentationCreate(ctx context.Context, req *FsPresentation) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresentationCreate not implemented")
}
func (*UnimplementedFsServer) PresentationUpdate(ctx context.Context, req *FsPresentation) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresentationUpdate not implemented")
}
func (*UnimplementedFsServer) PresentationDelete(ctx context.Context, req *FsPresentation) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresentationDelete not implemented")
}
func (*UnimplementedFsServer) PresentationList(ctx context.Context, req *FsPresentationListQuery) (*FsPresentationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresentationList not implemented")
}
func (*UnimplementedFsServer) StatsList(ctx context.Context, req *v1.StatsListQuery) (*v1.StatsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsList not implemented")
}
func (*UnimplementedFsServer) ConfigGetBool(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetBoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetBool not implemented")
}
func (*UnimplementedFsServer) ConfigUpdateBool(ctx context.Context, req *v1.ConfigBool) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateBool not implemented")
}
func (*UnimplementedFsServer) ConfigListBool(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigBoolList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListBool not implemented")
}
func (*UnimplementedFsServer) ConfigGetString(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetStringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetString not implemented")
}
func (*UnimplementedFsServer) ConfigUpdateString(ctx context.Context, req *v1.ConfigString) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateString not implemented")
}
func (*UnimplementedFsServer) ConfigListString(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigStringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListString not implemented")
}
func (*UnimplementedFsServer) ConfigGetUint32(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetUint32Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetUint32 not implemented")
}
func (*UnimplementedFsServer) ConfigUpdateUint32(ctx context.Context, req *v1.ConfigUint32) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateUint32 not implemented")
}
func (*UnimplementedFsServer) ConfigListUint32(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigUint32List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListUint32 not implemented")
}

func RegisterFsServer(s *grpc.Server, srv FsServer) {
	s.RegisterService(&_Fs_serviceDesc, srv)
}

func _Fs_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).Status(ctx, req.(*FsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).VolumeCreate(ctx, req.(*FsVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_VolumeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).VolumeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/VolumeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).VolumeUpdate(ctx, req.(*FsVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).VolumeDelete(ctx, req.(*FsVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsVolumeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).VolumeList(ctx, req.(*FsVolumeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_PresentationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsPresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).PresentationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/PresentationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).PresentationCreate(ctx, req.(*FsPresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_PresentationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsPresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).PresentationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/PresentationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).PresentationUpdate(ctx, req.(*FsPresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_PresentationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsPresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).PresentationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/PresentationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).PresentationDelete(ctx, req.(*FsPresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_PresentationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FsPresentationListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).PresentationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/PresentationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).PresentationList(ctx, req.(*FsPresentationListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_StatsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.StatsListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).StatsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/StatsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).StatsList(ctx, req.(*v1.StatsListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_ConfigGetBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).ConfigGetBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/ConfigGetBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).ConfigGetBool(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_ConfigUpdateBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigBool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).ConfigUpdateBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/ConfigUpdateBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).ConfigUpdateBool(ctx, req.(*v1.ConfigBool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_ConfigListBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).ConfigListBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/ConfigListBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).ConfigListBool(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_ConfigGetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).ConfigGetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/ConfigGetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).ConfigGetString(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_ConfigUpdateString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).ConfigUpdateString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/ConfigUpdateString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).ConfigUpdateString(ctx, req.(*v1.ConfigString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_ConfigListString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).ConfigListString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/ConfigListString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).ConfigListString(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_ConfigGetUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).ConfigGetUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/ConfigGetUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).ConfigGetUint32(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_ConfigUpdateUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigUint32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).ConfigUpdateUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/ConfigUpdateUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).ConfigUpdateUint32(ctx, req.(*v1.ConfigUint32))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fs_ConfigListUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FsServer).ConfigListUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/filesystem.v1.Fs/ConfigListUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FsServer).ConfigListUint32(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "filesystem.v1.Fs",
	HandlerType: (*FsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Fs_Status_Handler,
		},
		{
			MethodName: "VolumeCreate",
			Handler:    _Fs_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeUpdate",
			Handler:    _Fs_VolumeUpdate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _Fs_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _Fs_VolumeList_Handler,
		},
		{
			MethodName: "PresentationCreate",
			Handler:    _Fs_PresentationCreate_Handler,
		},
		{
			MethodName: "PresentationUpdate",
			Handler:    _Fs_PresentationUpdate_Handler,
		},
		{
			MethodName: "PresentationDelete",
			Handler:    _Fs_PresentationDelete_Handler,
		},
		{
			MethodName: "PresentationList",
			Handler:    _Fs_PresentationList_Handler,
		},
		{
			MethodName: "StatsList",
			Handler:    _Fs_StatsList_Handler,
		},
		{
			MethodName: "ConfigGetBool",
			Handler:    _Fs_ConfigGetBool_Handler,
		},
		{
			MethodName: "ConfigUpdateBool",
			Handler:    _Fs_ConfigUpdateBool_Handler,
		},
		{
			MethodName: "ConfigListBool",
			Handler:    _Fs_ConfigListBool_Handler,
		},
		{
			MethodName: "ConfigGetString",
			Handler:    _Fs_ConfigGetString_Handler,
		},
		{
			MethodName: "ConfigUpdateString",
			Handler:    _Fs_ConfigUpdateString_Handler,
		},
		{
			MethodName: "ConfigListString",
			Handler:    _Fs_ConfigListString_Handler,
		},
		{
			MethodName: "ConfigGetUint32",
			Handler:    _Fs_ConfigGetUint32_Handler,
		},
		{
			MethodName: "ConfigUpdateUint32",
			Handler:    _Fs_ConfigUpdateUint32_Handler,
		},
		{
			MethodName: "ConfigListUint32",
			Handler:    _Fs_ConfigListUint32_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "filesystem.proto",
}
