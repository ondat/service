syntax = "proto3";
package filesystem.v1;

import "common.proto";

/**
 * Filesystem configuration and status service.
 */
service Fs {
    /**
     * Get program status.
     */
    rpc Status(FsStatusRequest) returns (FsStatus) {}

    /**
     * Create the specified FsVolume.
     *
     * returns RpcResult
     */
    rpc VolumeCreate(FsVolume) returns (common.v1.RpcResult) {}

    /**
     * Update the specified FsVolume.
     *
     * returns RpcResult
     */
    rpc VolumeUpdate(FsVolume) returns (common.v1.RpcResult) {}

    /**
     * Delete the specified FsVolume.
     *
     * returns RpcResult
     */
    rpc VolumeDelete(FsVolume) returns (common.v1.RpcResult) {}

    /**
     * Return a list of FsVolume messages, optionally filtered using the supplied
     * FsVolumeListQuery message.
     *
     * returns A FsVolumeList message containing FsVolume objects,
     *         if any are found that match the filter.
     */
    rpc VolumeList(FsVolumeListQuery) returns (FsVolumeList) {}

    /**
     * Add configuration for a Presentation volume specified in the FsPresentation message.
     *
     * returns RpcResult
     */
    rpc PresentationCreate(FsPresentation) returns (common.v1.RpcResult) {}

    /**
     * Update configuration for a Presentation volume specified in the FsPresentation message.
     *
     * returns RpcResult
     */
    rpc PresentationUpdate(FsPresentation) returns (common.v1.RpcResult) {}

    /**
     * Remove configuration for the Presentation volume specified in the FsPresentation message.
     *
     * returns RpcResult
     */
    rpc PresentationDelete(FsPresentation) returns (common.v1.RpcResult) {}

    /**
     * List configured Presentation volumes, optionally filtered using a FsPresentationListQuery
     * message.
     *
     * returns A FsPresentationList message containing FsPresentation mesages,
     *         if any are found matching the filter.
     */
    rpc PresentationList(FsPresentationListQuery) returns (FsPresentationList) {}
}

message FsStatusRequest {
    // Empty for now.
}

message FsStatus {
    // The version control info string.
    string version_info = 1;
}

message FsVolumeListQuery {
    // A possibly-empty list of volume IDs to query.
    repeated uint32 volume_ids = 1;
}

message FsVolumeStatistics {
    // Empty for now.
}

enum FsVolumeState {
    NONE = 0;       // Volume is not available in the filesystem.
    READY = 1;    // Volume can be read from the filesystem.
}

message FsVolumeStatus {
    // State of the volume device node (file/block device).
    FsVolumeState node_state = 1;
}

/**
 * A StorageOS volume to be presented via the FUSE filesystem.
 */
message FsVolume {
    common.v1.DataplaneCommon cc = 1;

    // The volume ID to represent.
    uint32 volume_id = 2;

    enum VolumeDeviceType {
        FILE = 0;           // A regular file (backed by FUSE).
        NBD_BLOCK = 1;      // An nbd-backed block device node.
    }

    // The type for this volume.
    VolumeDeviceType node_type = 3;

    // An opaque value interpreted based on node_type.
    uint32 device_number = 4;

    // The name of the volume to present in the filesystem.
    string filename = 5;

    // True if this volume should be backed by another volume.
    bool linked_volume = 6;

    // If linked_volume is true, this is the volume to which we link.
    uint32 target_volume_id = 7;

    // The volume size in bytes.
    uint64 volume_size_bytes = 8;

    // Volume statistics.
    FsVolumeStatistics stats = 9;

    // Volume status, e.g. readiness.
    FsVolumeStatus status = 10;
}

message FsVolumeList {
    repeated FsVolume volumes = 1;
}


message FsPresentationListQuery {
    // A possibly-empty list of volume IDs to query.
    repeated uint32 presentation_ids = 1;
}

/**
 * Presentation volume message for Fs RPCs.
 *
 * The minimum amount of information required to specify the 'presentation' or source volume,
 * the volume that is presented to the user and (usually) mounted. All actual work
 * is done on the target volume, which has actual storage associated with it.
 */
message FsPresentation {
    common.v1.DataplaneCommon cc = 1;

    // The inode the user mounts or opens.
    uint32 presentation_id = 2;

    // The underlying inode of the StorageOS volume.
    uint32 target_id = 3;

    // Presentation inode status, e.g. readiness.
    FsVolumeStatus status = 5;
}

message FsPresentationList {
    repeated FsPresentation presentations = 1;
}
