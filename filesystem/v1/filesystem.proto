syntax = "proto3";
package filesystem.v1;
option go_package = "code.storageos.net/storageos/service/filesystem/v1";

import "common.proto";

/**
 * Filesystem configuration and status service.
 */
service Fs {
    /**
     * Get program status.
     */
    rpc Status(FsStatusRequest) returns (FsStatus) {}

    /**
     * Create the specified FsVolume.
     *
     * returns RpcResult
     */
    rpc VolumeCreate(FsVolume) returns (common.v1.RpcResult) {}

    /**
     * Update the specified FsVolume.
     *
     * returns RpcResult
     */
    rpc VolumeUpdate(FsVolume) returns (common.v1.RpcResult) {}

    /**
     * Delete the specified FsVolume.
     *
     * returns RpcResult
     */
    rpc VolumeDelete(FsVolume) returns (common.v1.RpcResult) {}

    /**
     * Return a list of FsVolume messages, optionally filtered using the supplied
     * FsVolumeListQuery message.
     *
     * returns A FsVolumeList message containing FsVolume objects,
     *         if any are found that match the filter.
     */
    rpc VolumeList(FsVolumeListQuery) returns (FsVolumeList) {}

    /**
     * Add configuration for a Presentation volume specified in the FsPresentation message.
     *
     * returns RpcResult
     */
    rpc PresentationCreate(FsPresentation) returns (common.v1.RpcResult) {}

    /**
     * Update configuration for a Presentation volume specified in the FsPresentation message.
     *
     * returns RpcResult
     */
    rpc PresentationUpdate(FsPresentation) returns (common.v1.RpcResult) {}

    /**
     * Remove configuration for the Presentation volume specified in the FsPresentation message.
     *
     * returns RpcResult
     */
    rpc PresentationDelete(FsPresentation) returns (common.v1.RpcResult) {}

    /**
     * List configured Presentation volumes, optionally filtered using a FsPresentationListQuery
     * message.
     *
     * returns A FsPresentationList message containing FsPresentation mesages,
     *         if any are found matching the filter.
     */
    rpc PresentationList(FsPresentationListQuery) returns (FsPresentationList) {}

    /**
     * List data-plane stats, optionally filtered using a StatsListQuery message.
     *
     * returns A StatsListResponse containing Statistic messages, if any are
     * found matching the filter.
     */
    rpc StatsList(common.v1.StatsListQuery) returns (common.v1.StatsListResponse) {}

    // Config services, from common.v1.
    rpc ConfigGetBool(common.v1.ConfigKey) returns (common.v1.ConfigGetBoolReply) {}
    rpc ConfigUpdateBool(common.v1.ConfigBool) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListBool(common.v1.ConfigListQuery) returns (common.v1.ConfigBoolList) {}

    rpc ConfigGetString(common.v1.ConfigKey) returns (common.v1.ConfigGetStringReply) {}
    rpc ConfigUpdateString(common.v1.ConfigString) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListString(common.v1.ConfigListQuery) returns (common.v1.ConfigStringList) {}

    rpc ConfigGetUint32(common.v1.ConfigKey) returns (common.v1.ConfigGetUint32Reply) {}
    rpc ConfigUpdateUint32(common.v1.ConfigUint32) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListUint32(common.v1.ConfigListQuery) returns (common.v1.ConfigUint32List) {}
}

message FsStatusRequest {
    // Empty for now.
}

message FsStatus {
    // The version control info string.
    string version_info = 1;

    // Generic daemon status.
    common.v1.DaemonStatus status = 2;
}

message FsVolumeListQuery {
    // A possibly-empty list of volume IDs to query.
    repeated uint32 volume_ids = 1;
    // A possibly-empty list of volume UUIDs to query.
    repeated string volume_uuids = 2;
}

message FsVolumeStatistics {
    // Empty for now.
}

enum FsVolumeState {
    NONE = 0;   // Volume is not available in the filesystem.
    READY = 1;  // Volume can be read from the filesystem.
}

message FsVolumeStatus {
    // State of the volume device node (file/block device).
    FsVolumeState node_state = 1;
}

/**
 * A StorageOS volume to be presented via the FUSE filesystem.
 */
message FsVolume {
    common.v1.DataplaneCommon cc = 1;

    // The volume ID to represent.
    uint32 volume_id = 2;

    enum VolumeDeviceType {
        FILE = 0;       // A regular file (backed by FUSE).
        NBD_BLOCK = 1;  // An nbd-backed block device node. Deprecated. Need to coordinate its removal with the control-plane.
    }

    // The type for this volume.
    VolumeDeviceType node_type = 3;

    enum VolumeControlStatus {
        NONE = 0;         // State not set (shouldn't happen).
        ACTIVE = 1;       // Volume should be made available to the user.
        UNAVAILABLE = 2;  // Volume is in the process of being deleted.
        FAILED = 3;       // Volume is in a failure state.
        DELETING = 4;     // Volume is in the process of being deleted.
    }

    // The control plane's desired state for this volume.
    VolumeControlStatus control_status = 10;

    // An opaque value interpreted based on node_type.
    uint32 device_number = 4 [ deprecated = true ];

    // The filename of the underlying volume to present in the filesystem.
    string filename = 5;

    // The filename of the presentation node, to which users actually connect.
    // This field really belongs on the FsPresentation object and has been added
    // there post-1.5.0. Until we're all C2, this field and the field in
    // FsPresentation should have the same value or you'll see some very strange
    // artifacts.
    string presentation_filename = 9;

    // The volume size in bytes.
    uint64 volume_size_bytes = 6;

    // Volume statistics.
    FsVolumeStatistics stats = 7;

    // Volume status, e.g. readiness.
    FsVolumeStatus status = 8;
}

message FsVolumeList {
    repeated FsVolume volumes = 1;
}

message FsPresentationListQuery {
    // A possibly-empty list of volume IDs to query.
    repeated uint32 presentation_ids = 1;
    // A possibly-empty list of volume UUIDs to query.
    repeated string presentation_uuids = 2;
}

/**
 * Presentation volume message for Fs RPCs.
 *
 * The minimum amount of information required to specify the 'presentation' or source volume,
 * the volume that is presented to the user and (usually) mounted. All actual work
 * is done on the target volume, which has actual storage associated with it.
 *
 * In order to discover information about the type of volume to present, the target
 * volume has to be fetched regardless. As a result, there's no need to duplicate fields
 * here, we just need enough information to get from the presentation node to the target,
 * and to know when the presentation is actually available to the user.
 */
message FsPresentation {
    common.v1.DataplaneCommon cc = 1;

    // The inode the user mounts or opens.
    uint32 presentation_id = 2;

    // The underlying inode of the StorageOS volume.
    uint32 target_id = 3;

    // The UUID of the volume to which we point. This must be set for NLI mode,
    // and should be ignored in GSI mode.
    string target_uuid = 7;

    // Presentation inode status, e.g. readiness.
    FsVolumeStatus status = 5;

    // The filesystem name of the presentation. This should have the same
    // contents as the presentation_filename field of the DirectorVolume object
    // of the target, otherwise expect weird artifacts as we transition to C2.
    string filename = 6;
}

message FsPresentationList {
    repeated FsPresentation presentations = 1;
}
