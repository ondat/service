// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: filesystem.proto
#ifndef GRPC_filesystem_2eproto__INCLUDED
#define GRPC_filesystem_2eproto__INCLUDED

#include "filesystem.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace filesystem {
namespace v1 {

// *
// Filesystem configuration and status service.
class Fs final {
 public:
  static constexpr char const* service_full_name() {
    return "filesystem.v1.Fs";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // *
    // Get program status.
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::filesystem::v1::FsStatusRequest& request, ::filesystem::v1::FsStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystem::v1::FsStatus>> AsyncStatus(::grpc::ClientContext* context, const ::filesystem::v1::FsStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystem::v1::FsStatus>>(AsyncStatusRaw(context, request, cq));
    }
    // *
    // Create the specified FsVolume.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeCreate(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeCreate(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeCreateRaw(context, request, cq));
    }
    // *
    // Update the specified FsVolume.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeUpdate(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeUpdate(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeUpdateRaw(context, request, cq));
    }
    // *
    // Delete the specified FsVolume.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeDelete(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeDelete(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeDeleteRaw(context, request, cq));
    }
    // *
    // Return a list of FsVolume messages, optionally filtered using the supplied
    // FsVolumeListQuery message.
    //
    // returns A FsVolumeList message containing FsVolume objects,
    //         if any are found that match the filter.
    virtual ::grpc::Status VolumeList(::grpc::ClientContext* context, const ::filesystem::v1::FsVolumeListQuery& request, ::filesystem::v1::FsVolumeList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystem::v1::FsVolumeList>> AsyncVolumeList(::grpc::ClientContext* context, const ::filesystem::v1::FsVolumeListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystem::v1::FsVolumeList>>(AsyncVolumeListRaw(context, request, cq));
    }
    // *
    // Add configuration for a Presentation volume specified in the FsPresentation message.
    //
    // returns RpcResult
    virtual ::grpc::Status PresentationCreate(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncPresentationCreate(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncPresentationCreateRaw(context, request, cq));
    }
    // *
    // Update configuration for a Presentation volume specified in the FsPresentation message.
    //
    // returns RpcResult
    virtual ::grpc::Status PresentationUpdate(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncPresentationUpdate(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncPresentationUpdateRaw(context, request, cq));
    }
    // *
    // Remove configuration for the Presentation volume specified in the FsPresentation message.
    //
    // returns RpcResult
    virtual ::grpc::Status PresentationDelete(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncPresentationDelete(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncPresentationDeleteRaw(context, request, cq));
    }
    // *
    // List configured Presentation volumes, optionally filtered using a FsPresentationListQuery
    // message.
    //
    // returns A FsPresentationList message containing FsPresentation mesages,
    //         if any are found matching the filter.
    virtual ::grpc::Status PresentationList(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentationListQuery& request, ::filesystem::v1::FsPresentationList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystem::v1::FsPresentationList>> AsyncPresentationList(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentationListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::filesystem::v1::FsPresentationList>>(AsyncPresentationListRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystem::v1::FsStatus>* AsyncStatusRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystem::v1::FsVolumeList>* AsyncVolumeListRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolumeListQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncPresentationCreateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncPresentationUpdateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncPresentationDeleteRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::filesystem::v1::FsPresentationList>* AsyncPresentationListRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentationListQuery& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Status(::grpc::ClientContext* context, const ::filesystem::v1::FsStatusRequest& request, ::filesystem::v1::FsStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsStatus>> AsyncStatus(::grpc::ClientContext* context, const ::filesystem::v1::FsStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsStatus>>(AsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status VolumeCreate(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeCreate(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeCreateRaw(context, request, cq));
    }
    ::grpc::Status VolumeUpdate(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeUpdate(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeUpdateRaw(context, request, cq));
    }
    ::grpc::Status VolumeDelete(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeDelete(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeDeleteRaw(context, request, cq));
    }
    ::grpc::Status VolumeList(::grpc::ClientContext* context, const ::filesystem::v1::FsVolumeListQuery& request, ::filesystem::v1::FsVolumeList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsVolumeList>> AsyncVolumeList(::grpc::ClientContext* context, const ::filesystem::v1::FsVolumeListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsVolumeList>>(AsyncVolumeListRaw(context, request, cq));
    }
    ::grpc::Status PresentationCreate(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncPresentationCreate(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncPresentationCreateRaw(context, request, cq));
    }
    ::grpc::Status PresentationUpdate(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncPresentationUpdate(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncPresentationUpdateRaw(context, request, cq));
    }
    ::grpc::Status PresentationDelete(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncPresentationDelete(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncPresentationDeleteRaw(context, request, cq));
    }
    ::grpc::Status PresentationList(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentationListQuery& request, ::filesystem::v1::FsPresentationList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsPresentationList>> AsyncPresentationList(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentationListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsPresentationList>>(AsyncPresentationListRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsStatus>* AsyncStatusRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsVolumeList>* AsyncVolumeListRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolumeListQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncPresentationCreateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncPresentationUpdateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncPresentationDeleteRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsPresentationList>* AsyncPresentationListRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentationListQuery& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Status_;
    const ::grpc::RpcMethod rpcmethod_VolumeCreate_;
    const ::grpc::RpcMethod rpcmethod_VolumeUpdate_;
    const ::grpc::RpcMethod rpcmethod_VolumeDelete_;
    const ::grpc::RpcMethod rpcmethod_VolumeList_;
    const ::grpc::RpcMethod rpcmethod_PresentationCreate_;
    const ::grpc::RpcMethod rpcmethod_PresentationUpdate_;
    const ::grpc::RpcMethod rpcmethod_PresentationDelete_;
    const ::grpc::RpcMethod rpcmethod_PresentationList_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // *
    // Get program status.
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::filesystem::v1::FsStatusRequest* request, ::filesystem::v1::FsStatus* response);
    // *
    // Create the specified FsVolume.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response);
    // *
    // Update the specified FsVolume.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response);
    // *
    // Delete the specified FsVolume.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response);
    // *
    // Return a list of FsVolume messages, optionally filtered using the supplied
    // FsVolumeListQuery message.
    //
    // returns A FsVolumeList message containing FsVolume objects,
    //         if any are found that match the filter.
    virtual ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::filesystem::v1::FsVolumeListQuery* request, ::filesystem::v1::FsVolumeList* response);
    // *
    // Add configuration for a Presentation volume specified in the FsPresentation message.
    //
    // returns RpcResult
    virtual ::grpc::Status PresentationCreate(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response);
    // *
    // Update configuration for a Presentation volume specified in the FsPresentation message.
    //
    // returns RpcResult
    virtual ::grpc::Status PresentationUpdate(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response);
    // *
    // Remove configuration for the Presentation volume specified in the FsPresentation message.
    //
    // returns RpcResult
    virtual ::grpc::Status PresentationDelete(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response);
    // *
    // List configured Presentation volumes, optionally filtered using a FsPresentationListQuery
    // message.
    //
    // returns A FsPresentationList message containing FsPresentation mesages,
    //         if any are found matching the filter.
    virtual ::grpc::Status PresentationList(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentationListQuery* request, ::filesystem::v1::FsPresentationList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::filesystem::v1::FsStatusRequest* request, ::filesystem::v1::FsStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::filesystem::v1::FsStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::filesystem::v1::FsStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeCreate(::grpc::ServerContext* context, ::filesystem::v1::FsVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeUpdate(::grpc::ServerContext* context, ::filesystem::v1::FsVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeDelete(::grpc::ServerContext* context, ::filesystem::v1::FsVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeList() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::filesystem::v1::FsVolumeListQuery* request, ::filesystem::v1::FsVolumeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeList(::grpc::ServerContext* context, ::filesystem::v1::FsVolumeListQuery* request, ::grpc::ServerAsyncResponseWriter< ::filesystem::v1::FsVolumeList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PresentationCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PresentationCreate() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PresentationCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresentationCreate(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPresentationCreate(::grpc::ServerContext* context, ::filesystem::v1::FsPresentation* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PresentationUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PresentationUpdate() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_PresentationUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresentationUpdate(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPresentationUpdate(::grpc::ServerContext* context, ::filesystem::v1::FsPresentation* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PresentationDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PresentationDelete() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_PresentationDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresentationDelete(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPresentationDelete(::grpc::ServerContext* context, ::filesystem::v1::FsPresentation* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PresentationList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PresentationList() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PresentationList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresentationList(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentationListQuery* request, ::filesystem::v1::FsPresentationList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPresentationList(::grpc::ServerContext* context, ::filesystem::v1::FsPresentationListQuery* request, ::grpc::ServerAsyncResponseWriter< ::filesystem::v1::FsPresentationList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Status<WithAsyncMethod_VolumeCreate<WithAsyncMethod_VolumeUpdate<WithAsyncMethod_VolumeDelete<WithAsyncMethod_VolumeList<WithAsyncMethod_PresentationCreate<WithAsyncMethod_PresentationUpdate<WithAsyncMethod_PresentationDelete<WithAsyncMethod_PresentationList<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::filesystem::v1::FsStatusRequest* request, ::filesystem::v1::FsStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeList() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::filesystem::v1::FsVolumeListQuery* request, ::filesystem::v1::FsVolumeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PresentationCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PresentationCreate() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PresentationCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresentationCreate(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PresentationUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PresentationUpdate() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_PresentationUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresentationUpdate(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PresentationDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PresentationDelete() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_PresentationDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresentationDelete(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PresentationList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PresentationList() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PresentationList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PresentationList(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentationListQuery* request, ::filesystem::v1::FsPresentationList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::filesystem::v1::FsStatusRequest, ::filesystem::v1::FsStatus>(std::bind(&WithStreamedUnaryMethod_Status<BaseClass>::StreamedStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::filesystem::v1::FsStatusRequest* request, ::filesystem::v1::FsStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystem::v1::FsStatusRequest,::filesystem::v1::FsStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::filesystem::v1::FsVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeCreate<BaseClass>::StreamedVolumeCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystem::v1::FsVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::filesystem::v1::FsVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeUpdate<BaseClass>::StreamedVolumeUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystem::v1::FsVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::filesystem::v1::FsVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeDelete<BaseClass>::StreamedVolumeDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystem::v1::FsVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeList() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::filesystem::v1::FsVolumeListQuery, ::filesystem::v1::FsVolumeList>(std::bind(&WithStreamedUnaryMethod_VolumeList<BaseClass>::StreamedVolumeList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::filesystem::v1::FsVolumeListQuery* request, ::filesystem::v1::FsVolumeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystem::v1::FsVolumeListQuery,::filesystem::v1::FsVolumeList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PresentationCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PresentationCreate() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::filesystem::v1::FsPresentation, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_PresentationCreate<BaseClass>::StreamedPresentationCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PresentationCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PresentationCreate(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPresentationCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystem::v1::FsPresentation,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PresentationUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PresentationUpdate() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::filesystem::v1::FsPresentation, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_PresentationUpdate<BaseClass>::StreamedPresentationUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PresentationUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PresentationUpdate(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPresentationUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystem::v1::FsPresentation,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PresentationDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PresentationDelete() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::filesystem::v1::FsPresentation, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_PresentationDelete<BaseClass>::StreamedPresentationDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PresentationDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PresentationDelete(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPresentationDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystem::v1::FsPresentation,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PresentationList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PresentationList() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::StreamedUnaryHandler< ::filesystem::v1::FsPresentationListQuery, ::filesystem::v1::FsPresentationList>(std::bind(&WithStreamedUnaryMethod_PresentationList<BaseClass>::StreamedPresentationList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PresentationList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PresentationList(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentationListQuery* request, ::filesystem::v1::FsPresentationList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPresentationList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::filesystem::v1::FsPresentationListQuery,::filesystem::v1::FsPresentationList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_VolumeCreate<WithStreamedUnaryMethod_VolumeUpdate<WithStreamedUnaryMethod_VolumeDelete<WithStreamedUnaryMethod_VolumeList<WithStreamedUnaryMethod_PresentationCreate<WithStreamedUnaryMethod_PresentationUpdate<WithStreamedUnaryMethod_PresentationDelete<WithStreamedUnaryMethod_PresentationList<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_VolumeCreate<WithStreamedUnaryMethod_VolumeUpdate<WithStreamedUnaryMethod_VolumeDelete<WithStreamedUnaryMethod_VolumeList<WithStreamedUnaryMethod_PresentationCreate<WithStreamedUnaryMethod_PresentationUpdate<WithStreamedUnaryMethod_PresentationDelete<WithStreamedUnaryMethod_PresentationList<Service > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace filesystem


#endif  // GRPC_filesystem_2eproto__INCLUDED
