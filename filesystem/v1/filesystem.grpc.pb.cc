// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: filesystem.proto

#include "filesystem.pb.h"
#include "filesystem.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace filesystem {
namespace v1 {

static const char* Fs_method_names[] = {
  "/filesystem.v1.Fs/VolumeCreate",
  "/filesystem.v1.Fs/VolumeUpdate",
  "/filesystem.v1.Fs/VolumeDelete",
  "/filesystem.v1.Fs/VolumeList",
  "/filesystem.v1.Fs/PresentationCreate",
  "/filesystem.v1.Fs/PresentationUpdate",
  "/filesystem.v1.Fs/PresentationDelete",
  "/filesystem.v1.Fs/PresentationList",
};

std::unique_ptr< Fs::Stub> Fs::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Fs::Stub> stub(new Fs::Stub(channel));
  return stub;
}

Fs::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_VolumeCreate_(Fs_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeUpdate_(Fs_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeDelete_(Fs_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeList_(Fs_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PresentationCreate_(Fs_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PresentationUpdate_(Fs_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PresentationDelete_(Fs_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PresentationList_(Fs_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Fs::Stub::VolumeCreate(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeCreate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* Fs::Stub::AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeCreate_, context, request);
}

::grpc::Status Fs::Stub::VolumeUpdate(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeUpdate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* Fs::Stub::AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeUpdate_, context, request);
}

::grpc::Status Fs::Stub::VolumeDelete(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeDelete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* Fs::Stub::AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeDelete_, context, request);
}

::grpc::Status Fs::Stub::VolumeList(::grpc::ClientContext* context, const ::filesystem::v1::FsVolumeListQuery& request, ::filesystem::v1::FsVolumeList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsVolumeList>* Fs::Stub::AsyncVolumeListRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsVolumeListQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsVolumeList>::Create(channel_.get(), cq, rpcmethod_VolumeList_, context, request);
}

::grpc::Status Fs::Stub::PresentationCreate(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PresentationCreate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* Fs::Stub::AsyncPresentationCreateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_PresentationCreate_, context, request);
}

::grpc::Status Fs::Stub::PresentationUpdate(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PresentationUpdate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* Fs::Stub::AsyncPresentationUpdateRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_PresentationUpdate_, context, request);
}

::grpc::Status Fs::Stub::PresentationDelete(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PresentationDelete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* Fs::Stub::AsyncPresentationDeleteRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_PresentationDelete_, context, request);
}

::grpc::Status Fs::Stub::PresentationList(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentationListQuery& request, ::filesystem::v1::FsPresentationList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_PresentationList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsPresentationList>* Fs::Stub::AsyncPresentationListRaw(::grpc::ClientContext* context, const ::filesystem::v1::FsPresentationListQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::filesystem::v1::FsPresentationList>::Create(channel_.get(), cq, rpcmethod_PresentationList_, context, request);
}

Fs::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Fs_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Fs::Service, ::filesystem::v1::FsVolume, ::common::v1::RpcResult>(
          std::mem_fn(&Fs::Service::VolumeCreate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Fs_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Fs::Service, ::filesystem::v1::FsVolume, ::common::v1::RpcResult>(
          std::mem_fn(&Fs::Service::VolumeUpdate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Fs_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Fs::Service, ::filesystem::v1::FsVolume, ::common::v1::RpcResult>(
          std::mem_fn(&Fs::Service::VolumeDelete), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Fs_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Fs::Service, ::filesystem::v1::FsVolumeListQuery, ::filesystem::v1::FsVolumeList>(
          std::mem_fn(&Fs::Service::VolumeList), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Fs_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Fs::Service, ::filesystem::v1::FsPresentation, ::common::v1::RpcResult>(
          std::mem_fn(&Fs::Service::PresentationCreate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Fs_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Fs::Service, ::filesystem::v1::FsPresentation, ::common::v1::RpcResult>(
          std::mem_fn(&Fs::Service::PresentationUpdate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Fs_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Fs::Service, ::filesystem::v1::FsPresentation, ::common::v1::RpcResult>(
          std::mem_fn(&Fs::Service::PresentationDelete), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Fs_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Fs::Service, ::filesystem::v1::FsPresentationListQuery, ::filesystem::v1::FsPresentationList>(
          std::mem_fn(&Fs::Service::PresentationList), this)));
}

Fs::Service::~Service() {
}

::grpc::Status Fs::Service::VolumeCreate(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Fs::Service::VolumeUpdate(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Fs::Service::VolumeDelete(::grpc::ServerContext* context, const ::filesystem::v1::FsVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Fs::Service::VolumeList(::grpc::ServerContext* context, const ::filesystem::v1::FsVolumeListQuery* request, ::filesystem::v1::FsVolumeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Fs::Service::PresentationCreate(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Fs::Service::PresentationUpdate(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Fs::Service::PresentationDelete(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentation* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Fs::Service::PresentationList(::grpc::ServerContext* context, const ::filesystem::v1::FsPresentationListQuery* request, ::filesystem::v1::FsPresentationList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace filesystem
}  // namespace v1

