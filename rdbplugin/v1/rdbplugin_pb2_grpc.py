# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2
import rdbplugin_pb2 as rdbplugin__pb2


class RdbPluginStub(object):
  """*
  RDB Plugin configuration and status service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Status = channel.unary_unary(
        '/rdbplugin.v1.RdbPlugin/Status',
        request_serializer=rdbplugin__pb2.RdbStatusRequest.SerializeToString,
        response_deserializer=rdbplugin__pb2.RdbStatus.FromString,
        )
    self.VolumeCreate = channel.unary_unary(
        '/rdbplugin.v1.RdbPlugin/VolumeCreate',
        request_serializer=rdbplugin__pb2.RdbVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeUpdate = channel.unary_unary(
        '/rdbplugin.v1.RdbPlugin/VolumeUpdate',
        request_serializer=rdbplugin__pb2.RdbVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeDelete = channel.unary_unary(
        '/rdbplugin.v1.RdbPlugin/VolumeDelete',
        request_serializer=rdbplugin__pb2.RdbVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeList = channel.unary_unary(
        '/rdbplugin.v1.RdbPlugin/VolumeList',
        request_serializer=rdbplugin__pb2.RdbVolumeListQuery.SerializeToString,
        response_deserializer=rdbplugin__pb2.RdbVolumeList.FromString,
        )


class RdbPluginServicer(object):
  """*
  RDB Plugin configuration and status service.
  """

  def Status(self, request, context):
    """*
    Get program status.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeCreate(self, request, context):
    """*
    Create a volume. Currently has no actual effect other than
    to add an entry reporting that the volume is 'configured', and so will
    have results returned by VolumeList.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeUpdate(self, request, context):
    """*
    Create a volume. Currently has no actual effect other than
    to update the entry reporting that the volume is 'configured', and so will
    have results returned by VolumeList.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeDelete(self, request, context):
    """*
    Delete the storage allocated for a volume.

    Deletion can take some time, this call starts the deletion process then
    returns. Operation status must be obtained elsewhere.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeList(self, request, context):
    """*
    Return a list of configured volumes. Optionally filter using the RdbVolumeListQuery message.

    returns An RdbVolumeList message containing RdbVolume messages,
    if any are found matching the filter.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RdbPluginServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Status': grpc.unary_unary_rpc_method_handler(
          servicer.Status,
          request_deserializer=rdbplugin__pb2.RdbStatusRequest.FromString,
          response_serializer=rdbplugin__pb2.RdbStatus.SerializeToString,
      ),
      'VolumeCreate': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeCreate,
          request_deserializer=rdbplugin__pb2.RdbVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeUpdate,
          request_deserializer=rdbplugin__pb2.RdbVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeDelete': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeDelete,
          request_deserializer=rdbplugin__pb2.RdbVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeList': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeList,
          request_deserializer=rdbplugin__pb2.RdbVolumeListQuery.FromString,
          response_serializer=rdbplugin__pb2.RdbVolumeList.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rdbplugin.v1.RdbPlugin', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
