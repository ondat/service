syntax = "proto3";
package rdbplugin.v1;

import "common.proto";

/**
 * RDB Plugin configuration and status service.
 */
service RdbPlugin  {

    /**
     * Create a volume. Currently has no actual effect other than
     * to add an entry reporting that the volume is 'configured', and so will
     * have results returned by VolumeList.
     *
     * returns RpcResult
     */
    rpc VolumeCreate(RdbVolume) returns (common.v1.RpcResult) {}

    /**
     * Create a volume. Currently has no actual effect other than
     * to update the entry reporting that the volume is 'configured', and so will
     * have results returned by VolumeList.
     *
     * returns RpcResult
     */
    rpc VolumeUpdate(RdbVolume) returns (common.v1.RpcResult) {}

    /**
     * Delete the storage allocated for a volume.
     *
     * Deletion can take some time, this call starts the deletion process then
     * returns. Operation status must be obtained elsewhere.
     *
     * returns RpcResult
     */
    rpc VolumeDelete(RdbVolume) returns (common.v1.RpcResult) {}

    /**
     * Return a list of configured volumes. Optionally filter using the RdbVolumeListQuery message.

     * returns An RdbVolumeList message containing RdbVolume messages,
     *         if any are found matching the filter.
     */
    rpc VolumeList(RdbVolumeListQuery) returns (RdbVolumeList) {}
}

message RdbVolumeListQuery {
    // Optional list of volume IDs to query.
    repeated RdbVolume volume_ids = 1;
}

message RdbVolumeCredentials {
    // Empty for now.
}

message RdbVolumeStatistics {
    // Empty for now.
}

message RdbVolumeStatus {
    // Empty for now.
}

/**
 * A volume used by the RDB plugin.
 *
 * Currently there's no clear merit to adding and removing a volume here,
 * as the RDB plugin doesn't read ConfigFS and doesn't really do anything.
 *
 * However, the control plane should still configure a volume - it's likely
 * to be useful. At the very least we can create blob resources ahead of time.
 */
message RdbVolume {
    common.v1.DataplaneCommon cc = 1;

    // The volume ID.
    uint32 volume_id = 2;

    // The volume size in bytes.
    uint64 volume_size_bytes = 3;

    // Volume credentials.
    RdbVolumeCredentials credentials = 4;

    // Volume statistics.
    RdbVolumeStatistics stats = 5;

    // Volume status.
    RdbVolumeStatus status = 6;
}

message RdbVolumeList {
    repeated RdbVolume volumes = 1;
}
