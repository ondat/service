syntax = "proto3";
package rdbplugin.v1;
option go_package = "code.storageos.net/storageos/service/rdbplugin/v1";

import "common.proto";

/**
 * RDB Plugin configuration and status service.
 */
service RdbPlugin  {
    /**
     * Get program status.
     */
    rpc Status(RdbStatusRequest) returns (RdbStatus) {}

    /**
     * Create a volume. Currently has no actual effect other than
     * to add an entry reporting that the volume is 'configured', and so will
     * have results returned by VolumeList.
     *
     * returns RpcResult
     */
    rpc VolumeCreate(RdbVolume) returns (common.v1.RpcResult) {}

    /**
     * Create a volume. Currently has no actual effect other than
     * to update the entry reporting that the volume is 'configured', and so will
     * have results returned by VolumeList.
     *
     * returns RpcResult
     */
    rpc VolumeUpdate(RdbVolume) returns (common.v1.RpcResult) {}

    /**
     * Delete the storage allocated for a volume.
     *
     * Deletion can take some time, this call starts the deletion process then
     * returns. Operation status must be obtained elsewhere.
     *
     * returns RpcResult
     */
    rpc VolumeDelete(RdbVolume) returns (common.v1.RpcResult) {}

    /**
     * Return a list of configured volumes. Optionally filter using the RdbVolumeListQuery message.

     * returns An RdbVolumeList message containing RdbVolume messages,
     *         if any are found matching the filter.
     */
    rpc VolumeList(RdbVolumeListQuery) returns (RdbVolumeList) {}

     /**
     * List data-plane stats, optionally filtered using a StatsListQuery message.
     *
     * returns A StatsListResponse containing Statistic messages, if any are
     * found matching the filter.
     */
     rpc StatsList(StatsListQuery) returns (StatsListResponse) {}

    // Config services, from common.v1.
    rpc ConfigGetBool(common.v1.ConfigKey) returns (common.v1.ConfigGetBoolReply) {}
    rpc ConfigUpdateBool(common.v1.ConfigBool) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListBool(common.v1.ConfigListQuery) returns (common.v1.ConfigBoolList) {}

    rpc ConfigGetString(common.v1.ConfigKey) returns (common.v1.ConfigGetStringReply) {}
    rpc ConfigUpdateString(common.v1.ConfigString) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListString(common.v1.ConfigListQuery) returns (common.v1.ConfigStringList) {}

}

message RdbStatusRequest {
    // Empty for now.
}

message RdbStatus {
    // The version control info string.
    string version_info = 1;

    // Generic daemon status.
    common.v1.DaemonStatus status = 2;
}


message RdbVolumeListQuery {
    // Optional list of volume IDs to query.
    repeated uint32 volume_ids = 1;
}

message RdbVolumeCredentials {
    // Empty for now.
}

message RdbVolumeStatistics {
    // Empty for now.
}

message RdbVolumeStatus {
    // Empty for now.
}

/**
 * A volume used by the RDB plugin.
 *
 * Currently there's no clear merit to adding and removing a volume here,
 * as the RDB plugin doesn't read ConfigFS and doesn't really do anything.
 *
 * However, the control plane should still configure a volume - it's likely
 * to be useful. At the very least we can create blob resources ahead of time.
 */
message RdbVolume {
    common.v1.DataplaneCommon cc = 1;

    // The volume ID.
    uint32 volume_id = 2;

    // The volume size in bytes.
    uint64 volume_size_bytes = 3;

    // Volume credentials.
    RdbVolumeCredentials credentials = 4;

    // Volume statistics.
    RdbVolumeStatistics stats = 5;

    // Volume status.
    RdbVolumeStatus status = 6;
}

message RdbVolumeList {
    repeated RdbVolume volumes = 1;
}

message StatsListQuery {
    enum Type {
        // For requesting volume stats.
        VOLUME = 0;
        // For requesting node stats.
        NODE = 1;
    }

    // Type of stats to retrieve.
    Type type = 1;

    // An optional list of volume (or node or other) ids to query.  Empty list will return all.
    repeated uint32 ids = 2;
}

message Counter {
    uint64 value = 1;
}

message Gauge {
    uint64 value = 1;
}

message Statistic {
    uint32 id = 1;
    string name = 2;
    oneof metric_type {
        Counter counter = 3;
        Gauge gauge = 4;
    }
}

message StatsListResponse {
    repeated Statistic stats = 1;
}