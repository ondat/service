// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rdbplugin.proto

#ifndef PROTOBUF_rdbplugin_2eproto__INCLUDED
#define PROTOBUF_rdbplugin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace rdbplugin {
namespace v1 {
class RdbVolume;
class RdbVolumeDefaultTypeInternal;
extern RdbVolumeDefaultTypeInternal _RdbVolume_default_instance_;
class RdbVolumeCredentials;
class RdbVolumeCredentialsDefaultTypeInternal;
extern RdbVolumeCredentialsDefaultTypeInternal _RdbVolumeCredentials_default_instance_;
class RdbVolumeList;
class RdbVolumeListDefaultTypeInternal;
extern RdbVolumeListDefaultTypeInternal _RdbVolumeList_default_instance_;
class RdbVolumeListQuery;
class RdbVolumeListQueryDefaultTypeInternal;
extern RdbVolumeListQueryDefaultTypeInternal _RdbVolumeListQuery_default_instance_;
class RdbVolumeStatistics;
class RdbVolumeStatisticsDefaultTypeInternal;
extern RdbVolumeStatisticsDefaultTypeInternal _RdbVolumeStatistics_default_instance_;
class RdbVolumeStatus;
class RdbVolumeStatusDefaultTypeInternal;
extern RdbVolumeStatusDefaultTypeInternal _RdbVolumeStatus_default_instance_;
}  // namespace v1
}  // namespace rdbplugin

namespace rdbplugin {
namespace v1 {

namespace protobuf_rdbplugin_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_rdbplugin_2eproto

// ===================================================================

class RdbVolumeListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rdbplugin.v1.RdbVolumeListQuery) */ {
 public:
  RdbVolumeListQuery();
  virtual ~RdbVolumeListQuery();

  RdbVolumeListQuery(const RdbVolumeListQuery& from);

  inline RdbVolumeListQuery& operator=(const RdbVolumeListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RdbVolumeListQuery(RdbVolumeListQuery&& from) noexcept
    : RdbVolumeListQuery() {
    *this = ::std::move(from);
  }

  inline RdbVolumeListQuery& operator=(RdbVolumeListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RdbVolumeListQuery& default_instance();

  static inline const RdbVolumeListQuery* internal_default_instance() {
    return reinterpret_cast<const RdbVolumeListQuery*>(
               &_RdbVolumeListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RdbVolumeListQuery* other);
  friend void swap(RdbVolumeListQuery& a, RdbVolumeListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RdbVolumeListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  RdbVolumeListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RdbVolumeListQuery& from);
  void MergeFrom(const RdbVolumeListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RdbVolumeListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rdbplugin.v1.RdbVolume volume_ids = 1;
  int volume_ids_size() const;
  void clear_volume_ids();
  static const int kVolumeIdsFieldNumber = 1;
  const ::rdbplugin::v1::RdbVolume& volume_ids(int index) const;
  ::rdbplugin::v1::RdbVolume* mutable_volume_ids(int index);
  ::rdbplugin::v1::RdbVolume* add_volume_ids();
  ::google::protobuf::RepeatedPtrField< ::rdbplugin::v1::RdbVolume >*
      mutable_volume_ids();
  const ::google::protobuf::RepeatedPtrField< ::rdbplugin::v1::RdbVolume >&
      volume_ids() const;

  // @@protoc_insertion_point(class_scope:rdbplugin.v1.RdbVolumeListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::rdbplugin::v1::RdbVolume > volume_ids_;
  mutable int _cached_size_;
  friend struct protobuf_rdbplugin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RdbVolumeCredentials : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rdbplugin.v1.RdbVolumeCredentials) */ {
 public:
  RdbVolumeCredentials();
  virtual ~RdbVolumeCredentials();

  RdbVolumeCredentials(const RdbVolumeCredentials& from);

  inline RdbVolumeCredentials& operator=(const RdbVolumeCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RdbVolumeCredentials(RdbVolumeCredentials&& from) noexcept
    : RdbVolumeCredentials() {
    *this = ::std::move(from);
  }

  inline RdbVolumeCredentials& operator=(RdbVolumeCredentials&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RdbVolumeCredentials& default_instance();

  static inline const RdbVolumeCredentials* internal_default_instance() {
    return reinterpret_cast<const RdbVolumeCredentials*>(
               &_RdbVolumeCredentials_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(RdbVolumeCredentials* other);
  friend void swap(RdbVolumeCredentials& a, RdbVolumeCredentials& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RdbVolumeCredentials* New() const PROTOBUF_FINAL { return New(NULL); }

  RdbVolumeCredentials* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RdbVolumeCredentials& from);
  void MergeFrom(const RdbVolumeCredentials& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RdbVolumeCredentials* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rdbplugin.v1.RdbVolumeCredentials)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_rdbplugin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RdbVolumeStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rdbplugin.v1.RdbVolumeStatistics) */ {
 public:
  RdbVolumeStatistics();
  virtual ~RdbVolumeStatistics();

  RdbVolumeStatistics(const RdbVolumeStatistics& from);

  inline RdbVolumeStatistics& operator=(const RdbVolumeStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RdbVolumeStatistics(RdbVolumeStatistics&& from) noexcept
    : RdbVolumeStatistics() {
    *this = ::std::move(from);
  }

  inline RdbVolumeStatistics& operator=(RdbVolumeStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RdbVolumeStatistics& default_instance();

  static inline const RdbVolumeStatistics* internal_default_instance() {
    return reinterpret_cast<const RdbVolumeStatistics*>(
               &_RdbVolumeStatistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RdbVolumeStatistics* other);
  friend void swap(RdbVolumeStatistics& a, RdbVolumeStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RdbVolumeStatistics* New() const PROTOBUF_FINAL { return New(NULL); }

  RdbVolumeStatistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RdbVolumeStatistics& from);
  void MergeFrom(const RdbVolumeStatistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RdbVolumeStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rdbplugin.v1.RdbVolumeStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_rdbplugin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RdbVolumeStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rdbplugin.v1.RdbVolumeStatus) */ {
 public:
  RdbVolumeStatus();
  virtual ~RdbVolumeStatus();

  RdbVolumeStatus(const RdbVolumeStatus& from);

  inline RdbVolumeStatus& operator=(const RdbVolumeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RdbVolumeStatus(RdbVolumeStatus&& from) noexcept
    : RdbVolumeStatus() {
    *this = ::std::move(from);
  }

  inline RdbVolumeStatus& operator=(RdbVolumeStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RdbVolumeStatus& default_instance();

  static inline const RdbVolumeStatus* internal_default_instance() {
    return reinterpret_cast<const RdbVolumeStatus*>(
               &_RdbVolumeStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RdbVolumeStatus* other);
  friend void swap(RdbVolumeStatus& a, RdbVolumeStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RdbVolumeStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  RdbVolumeStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RdbVolumeStatus& from);
  void MergeFrom(const RdbVolumeStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RdbVolumeStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:rdbplugin.v1.RdbVolumeStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_rdbplugin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RdbVolume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rdbplugin.v1.RdbVolume) */ {
 public:
  RdbVolume();
  virtual ~RdbVolume();

  RdbVolume(const RdbVolume& from);

  inline RdbVolume& operator=(const RdbVolume& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RdbVolume(RdbVolume&& from) noexcept
    : RdbVolume() {
    *this = ::std::move(from);
  }

  inline RdbVolume& operator=(RdbVolume&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RdbVolume& default_instance();

  static inline const RdbVolume* internal_default_instance() {
    return reinterpret_cast<const RdbVolume*>(
               &_RdbVolume_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RdbVolume* other);
  friend void swap(RdbVolume& a, RdbVolume& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RdbVolume* New() const PROTOBUF_FINAL { return New(NULL); }

  RdbVolume* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RdbVolume& from);
  void MergeFrom(const RdbVolume& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RdbVolume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DataplaneCommon cc = 1;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 1;
  const ::DataplaneCommon& cc() const;
  ::DataplaneCommon* mutable_cc();
  ::DataplaneCommon* release_cc();
  void set_allocated_cc(::DataplaneCommon* cc);

  // .rdbplugin.v1.RdbVolumeCredentials credentials = 4;
  bool has_credentials() const;
  void clear_credentials();
  static const int kCredentialsFieldNumber = 4;
  const ::rdbplugin::v1::RdbVolumeCredentials& credentials() const;
  ::rdbplugin::v1::RdbVolumeCredentials* mutable_credentials();
  ::rdbplugin::v1::RdbVolumeCredentials* release_credentials();
  void set_allocated_credentials(::rdbplugin::v1::RdbVolumeCredentials* credentials);

  // .rdbplugin.v1.RdbVolumeStatistics stats = 5;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 5;
  const ::rdbplugin::v1::RdbVolumeStatistics& stats() const;
  ::rdbplugin::v1::RdbVolumeStatistics* mutable_stats();
  ::rdbplugin::v1::RdbVolumeStatistics* release_stats();
  void set_allocated_stats(::rdbplugin::v1::RdbVolumeStatistics* stats);

  // .rdbplugin.v1.RdbVolumeStatus status = 6;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  const ::rdbplugin::v1::RdbVolumeStatus& status() const;
  ::rdbplugin::v1::RdbVolumeStatus* mutable_status();
  ::rdbplugin::v1::RdbVolumeStatus* release_status();
  void set_allocated_status(::rdbplugin::v1::RdbVolumeStatus* status);

  // uint64 volume_size_bytes = 3;
  void clear_volume_size_bytes();
  static const int kVolumeSizeBytesFieldNumber = 3;
  ::google::protobuf::uint64 volume_size_bytes() const;
  void set_volume_size_bytes(::google::protobuf::uint64 value);

  // uint32 volume_id = 2;
  void clear_volume_id();
  static const int kVolumeIdFieldNumber = 2;
  ::google::protobuf::uint32 volume_id() const;
  void set_volume_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:rdbplugin.v1.RdbVolume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::DataplaneCommon* cc_;
  ::rdbplugin::v1::RdbVolumeCredentials* credentials_;
  ::rdbplugin::v1::RdbVolumeStatistics* stats_;
  ::rdbplugin::v1::RdbVolumeStatus* status_;
  ::google::protobuf::uint64 volume_size_bytes_;
  ::google::protobuf::uint32 volume_id_;
  mutable int _cached_size_;
  friend struct protobuf_rdbplugin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RdbVolumeList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:rdbplugin.v1.RdbVolumeList) */ {
 public:
  RdbVolumeList();
  virtual ~RdbVolumeList();

  RdbVolumeList(const RdbVolumeList& from);

  inline RdbVolumeList& operator=(const RdbVolumeList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RdbVolumeList(RdbVolumeList&& from) noexcept
    : RdbVolumeList() {
    *this = ::std::move(from);
  }

  inline RdbVolumeList& operator=(RdbVolumeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RdbVolumeList& default_instance();

  static inline const RdbVolumeList* internal_default_instance() {
    return reinterpret_cast<const RdbVolumeList*>(
               &_RdbVolumeList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(RdbVolumeList* other);
  friend void swap(RdbVolumeList& a, RdbVolumeList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RdbVolumeList* New() const PROTOBUF_FINAL { return New(NULL); }

  RdbVolumeList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RdbVolumeList& from);
  void MergeFrom(const RdbVolumeList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RdbVolumeList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .rdbplugin.v1.RdbVolume volumes = 1;
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 1;
  const ::rdbplugin::v1::RdbVolume& volumes(int index) const;
  ::rdbplugin::v1::RdbVolume* mutable_volumes(int index);
  ::rdbplugin::v1::RdbVolume* add_volumes();
  ::google::protobuf::RepeatedPtrField< ::rdbplugin::v1::RdbVolume >*
      mutable_volumes();
  const ::google::protobuf::RepeatedPtrField< ::rdbplugin::v1::RdbVolume >&
      volumes() const;

  // @@protoc_insertion_point(class_scope:rdbplugin.v1.RdbVolumeList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::rdbplugin::v1::RdbVolume > volumes_;
  mutable int _cached_size_;
  friend struct protobuf_rdbplugin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RdbVolumeListQuery

// repeated .rdbplugin.v1.RdbVolume volume_ids = 1;
inline int RdbVolumeListQuery::volume_ids_size() const {
  return volume_ids_.size();
}
inline void RdbVolumeListQuery::clear_volume_ids() {
  volume_ids_.Clear();
}
inline const ::rdbplugin::v1::RdbVolume& RdbVolumeListQuery::volume_ids(int index) const {
  // @@protoc_insertion_point(field_get:rdbplugin.v1.RdbVolumeListQuery.volume_ids)
  return volume_ids_.Get(index);
}
inline ::rdbplugin::v1::RdbVolume* RdbVolumeListQuery::mutable_volume_ids(int index) {
  // @@protoc_insertion_point(field_mutable:rdbplugin.v1.RdbVolumeListQuery.volume_ids)
  return volume_ids_.Mutable(index);
}
inline ::rdbplugin::v1::RdbVolume* RdbVolumeListQuery::add_volume_ids() {
  // @@protoc_insertion_point(field_add:rdbplugin.v1.RdbVolumeListQuery.volume_ids)
  return volume_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rdbplugin::v1::RdbVolume >*
RdbVolumeListQuery::mutable_volume_ids() {
  // @@protoc_insertion_point(field_mutable_list:rdbplugin.v1.RdbVolumeListQuery.volume_ids)
  return &volume_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rdbplugin::v1::RdbVolume >&
RdbVolumeListQuery::volume_ids() const {
  // @@protoc_insertion_point(field_list:rdbplugin.v1.RdbVolumeListQuery.volume_ids)
  return volume_ids_;
}

// -------------------------------------------------------------------

// RdbVolumeCredentials

// -------------------------------------------------------------------

// RdbVolumeStatistics

// -------------------------------------------------------------------

// RdbVolumeStatus

// -------------------------------------------------------------------

// RdbVolume

// .DataplaneCommon cc = 1;
inline bool RdbVolume::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline void RdbVolume::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
inline const ::DataplaneCommon& RdbVolume::cc() const {
  const ::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:rdbplugin.v1.RdbVolume.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::DataplaneCommon*>(
      &::_DataplaneCommon_default_instance_);
}
inline ::DataplaneCommon* RdbVolume::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:rdbplugin.v1.RdbVolume.cc)
  return cc_;
}
inline ::DataplaneCommon* RdbVolume::release_cc() {
  // @@protoc_insertion_point(field_release:rdbplugin.v1.RdbVolume.cc)
  
  ::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void RdbVolume::set_allocated_cc(::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rdbplugin.v1.RdbVolume.cc)
}

// uint32 volume_id = 2;
inline void RdbVolume::clear_volume_id() {
  volume_id_ = 0u;
}
inline ::google::protobuf::uint32 RdbVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:rdbplugin.v1.RdbVolume.volume_id)
  return volume_id_;
}
inline void RdbVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:rdbplugin.v1.RdbVolume.volume_id)
}

// uint64 volume_size_bytes = 3;
inline void RdbVolume::clear_volume_size_bytes() {
  volume_size_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RdbVolume::volume_size_bytes() const {
  // @@protoc_insertion_point(field_get:rdbplugin.v1.RdbVolume.volume_size_bytes)
  return volume_size_bytes_;
}
inline void RdbVolume::set_volume_size_bytes(::google::protobuf::uint64 value) {
  
  volume_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:rdbplugin.v1.RdbVolume.volume_size_bytes)
}

// .rdbplugin.v1.RdbVolumeCredentials credentials = 4;
inline bool RdbVolume::has_credentials() const {
  return this != internal_default_instance() && credentials_ != NULL;
}
inline void RdbVolume::clear_credentials() {
  if (GetArenaNoVirtual() == NULL && credentials_ != NULL) delete credentials_;
  credentials_ = NULL;
}
inline const ::rdbplugin::v1::RdbVolumeCredentials& RdbVolume::credentials() const {
  const ::rdbplugin::v1::RdbVolumeCredentials* p = credentials_;
  // @@protoc_insertion_point(field_get:rdbplugin.v1.RdbVolume.credentials)
  return p != NULL ? *p : *reinterpret_cast<const ::rdbplugin::v1::RdbVolumeCredentials*>(
      &::rdbplugin::v1::_RdbVolumeCredentials_default_instance_);
}
inline ::rdbplugin::v1::RdbVolumeCredentials* RdbVolume::mutable_credentials() {
  
  if (credentials_ == NULL) {
    credentials_ = new ::rdbplugin::v1::RdbVolumeCredentials;
  }
  // @@protoc_insertion_point(field_mutable:rdbplugin.v1.RdbVolume.credentials)
  return credentials_;
}
inline ::rdbplugin::v1::RdbVolumeCredentials* RdbVolume::release_credentials() {
  // @@protoc_insertion_point(field_release:rdbplugin.v1.RdbVolume.credentials)
  
  ::rdbplugin::v1::RdbVolumeCredentials* temp = credentials_;
  credentials_ = NULL;
  return temp;
}
inline void RdbVolume::set_allocated_credentials(::rdbplugin::v1::RdbVolumeCredentials* credentials) {
  delete credentials_;
  credentials_ = credentials;
  if (credentials) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rdbplugin.v1.RdbVolume.credentials)
}

// .rdbplugin.v1.RdbVolumeStatistics stats = 5;
inline bool RdbVolume::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
inline void RdbVolume::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
inline const ::rdbplugin::v1::RdbVolumeStatistics& RdbVolume::stats() const {
  const ::rdbplugin::v1::RdbVolumeStatistics* p = stats_;
  // @@protoc_insertion_point(field_get:rdbplugin.v1.RdbVolume.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::rdbplugin::v1::RdbVolumeStatistics*>(
      &::rdbplugin::v1::_RdbVolumeStatistics_default_instance_);
}
inline ::rdbplugin::v1::RdbVolumeStatistics* RdbVolume::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::rdbplugin::v1::RdbVolumeStatistics;
  }
  // @@protoc_insertion_point(field_mutable:rdbplugin.v1.RdbVolume.stats)
  return stats_;
}
inline ::rdbplugin::v1::RdbVolumeStatistics* RdbVolume::release_stats() {
  // @@protoc_insertion_point(field_release:rdbplugin.v1.RdbVolume.stats)
  
  ::rdbplugin::v1::RdbVolumeStatistics* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void RdbVolume::set_allocated_stats(::rdbplugin::v1::RdbVolumeStatistics* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rdbplugin.v1.RdbVolume.stats)
}

// .rdbplugin.v1.RdbVolumeStatus status = 6;
inline bool RdbVolume::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void RdbVolume::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::rdbplugin::v1::RdbVolumeStatus& RdbVolume::status() const {
  const ::rdbplugin::v1::RdbVolumeStatus* p = status_;
  // @@protoc_insertion_point(field_get:rdbplugin.v1.RdbVolume.status)
  return p != NULL ? *p : *reinterpret_cast<const ::rdbplugin::v1::RdbVolumeStatus*>(
      &::rdbplugin::v1::_RdbVolumeStatus_default_instance_);
}
inline ::rdbplugin::v1::RdbVolumeStatus* RdbVolume::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::rdbplugin::v1::RdbVolumeStatus;
  }
  // @@protoc_insertion_point(field_mutable:rdbplugin.v1.RdbVolume.status)
  return status_;
}
inline ::rdbplugin::v1::RdbVolumeStatus* RdbVolume::release_status() {
  // @@protoc_insertion_point(field_release:rdbplugin.v1.RdbVolume.status)
  
  ::rdbplugin::v1::RdbVolumeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void RdbVolume::set_allocated_status(::rdbplugin::v1::RdbVolumeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:rdbplugin.v1.RdbVolume.status)
}

// -------------------------------------------------------------------

// RdbVolumeList

// repeated .rdbplugin.v1.RdbVolume volumes = 1;
inline int RdbVolumeList::volumes_size() const {
  return volumes_.size();
}
inline void RdbVolumeList::clear_volumes() {
  volumes_.Clear();
}
inline const ::rdbplugin::v1::RdbVolume& RdbVolumeList::volumes(int index) const {
  // @@protoc_insertion_point(field_get:rdbplugin.v1.RdbVolumeList.volumes)
  return volumes_.Get(index);
}
inline ::rdbplugin::v1::RdbVolume* RdbVolumeList::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:rdbplugin.v1.RdbVolumeList.volumes)
  return volumes_.Mutable(index);
}
inline ::rdbplugin::v1::RdbVolume* RdbVolumeList::add_volumes() {
  // @@protoc_insertion_point(field_add:rdbplugin.v1.RdbVolumeList.volumes)
  return volumes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::rdbplugin::v1::RdbVolume >*
RdbVolumeList::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:rdbplugin.v1.RdbVolumeList.volumes)
  return &volumes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::rdbplugin::v1::RdbVolume >&
RdbVolumeList::volumes() const {
  // @@protoc_insertion_point(field_list:rdbplugin.v1.RdbVolumeList.volumes)
  return volumes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v1
}  // namespace rdbplugin

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rdbplugin_2eproto__INCLUDED
