// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rdbplugin.proto
#ifndef GRPC_rdbplugin_2eproto__INCLUDED
#define GRPC_rdbplugin_2eproto__INCLUDED

#include "rdbplugin.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace rdbplugin {
namespace v1 {

// *
// RDB Plugin configuration and status service.
class RdbPlugin final {
 public:
  static constexpr char const* service_full_name() {
    return "rdbplugin.v1.RdbPlugin";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // *
    // Get program status.
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbStatusRequest& request, ::rdbplugin::v1::RdbStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rdbplugin::v1::RdbStatus>> AsyncStatus(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rdbplugin::v1::RdbStatus>>(AsyncStatusRaw(context, request, cq));
    }
    // *
    // Create a volume. Currently has no actual effect other than
    // to add an entry reporting that the volume is 'configured', and so will
    // have results returned by VolumeList.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeCreate(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeCreate(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeCreateRaw(context, request, cq));
    }
    // *
    // Create a volume. Currently has no actual effect other than
    // to update the entry reporting that the volume is 'configured', and so will
    // have results returned by VolumeList.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeUpdate(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeUpdate(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeUpdateRaw(context, request, cq));
    }
    // *
    // Delete the storage allocated for a volume.
    //
    // Deletion can take some time, this call starts the deletion process then
    // returns. Operation status must be obtained elsewhere.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeDelete(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeDelete(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeDeleteRaw(context, request, cq));
    }
    // *
    // Return a list of configured volumes. Optionally filter using the RdbVolumeListQuery message.
    //
    // returns An RdbVolumeList message containing RdbVolume messages,
    //         if any are found matching the filter.
    virtual ::grpc::Status VolumeList(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolumeListQuery& request, ::rdbplugin::v1::RdbVolumeList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rdbplugin::v1::RdbVolumeList>> AsyncVolumeList(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolumeListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rdbplugin::v1::RdbVolumeList>>(AsyncVolumeListRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rdbplugin::v1::RdbStatus>* AsyncStatusRaw(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rdbplugin::v1::RdbVolumeList>* AsyncVolumeListRaw(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolumeListQuery& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Status(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbStatusRequest& request, ::rdbplugin::v1::RdbStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rdbplugin::v1::RdbStatus>> AsyncStatus(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rdbplugin::v1::RdbStatus>>(AsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status VolumeCreate(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeCreate(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeCreateRaw(context, request, cq));
    }
    ::grpc::Status VolumeUpdate(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeUpdate(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeUpdateRaw(context, request, cq));
    }
    ::grpc::Status VolumeDelete(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeDelete(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeDeleteRaw(context, request, cq));
    }
    ::grpc::Status VolumeList(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolumeListQuery& request, ::rdbplugin::v1::RdbVolumeList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rdbplugin::v1::RdbVolumeList>> AsyncVolumeList(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolumeListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rdbplugin::v1::RdbVolumeList>>(AsyncVolumeListRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::rdbplugin::v1::RdbStatus>* AsyncStatusRaw(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rdbplugin::v1::RdbVolumeList>* AsyncVolumeListRaw(::grpc::ClientContext* context, const ::rdbplugin::v1::RdbVolumeListQuery& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Status_;
    const ::grpc::RpcMethod rpcmethod_VolumeCreate_;
    const ::grpc::RpcMethod rpcmethod_VolumeUpdate_;
    const ::grpc::RpcMethod rpcmethod_VolumeDelete_;
    const ::grpc::RpcMethod rpcmethod_VolumeList_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // *
    // Get program status.
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbStatusRequest* request, ::rdbplugin::v1::RdbStatus* response);
    // *
    // Create a volume. Currently has no actual effect other than
    // to add an entry reporting that the volume is 'configured', and so will
    // have results returned by VolumeList.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response);
    // *
    // Create a volume. Currently has no actual effect other than
    // to update the entry reporting that the volume is 'configured', and so will
    // have results returned by VolumeList.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response);
    // *
    // Delete the storage allocated for a volume.
    //
    // Deletion can take some time, this call starts the deletion process then
    // returns. Operation status must be obtained elsewhere.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response);
    // *
    // Return a list of configured volumes. Optionally filter using the RdbVolumeListQuery message.
    //
    // returns An RdbVolumeList message containing RdbVolume messages,
    //         if any are found matching the filter.
    virtual ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolumeListQuery* request, ::rdbplugin::v1::RdbVolumeList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbStatusRequest* request, ::rdbplugin::v1::RdbStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::rdbplugin::v1::RdbStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::rdbplugin::v1::RdbStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeCreate(::grpc::ServerContext* context, ::rdbplugin::v1::RdbVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeUpdate(::grpc::ServerContext* context, ::rdbplugin::v1::RdbVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeDelete(::grpc::ServerContext* context, ::rdbplugin::v1::RdbVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeList() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolumeListQuery* request, ::rdbplugin::v1::RdbVolumeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeList(::grpc::ServerContext* context, ::rdbplugin::v1::RdbVolumeListQuery* request, ::grpc::ServerAsyncResponseWriter< ::rdbplugin::v1::RdbVolumeList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Status<WithAsyncMethod_VolumeCreate<WithAsyncMethod_VolumeUpdate<WithAsyncMethod_VolumeDelete<WithAsyncMethod_VolumeList<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbStatusRequest* request, ::rdbplugin::v1::RdbStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeList() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolumeListQuery* request, ::rdbplugin::v1::RdbVolumeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::rdbplugin::v1::RdbStatusRequest, ::rdbplugin::v1::RdbStatus>(std::bind(&WithStreamedUnaryMethod_Status<BaseClass>::StreamedStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbStatusRequest* request, ::rdbplugin::v1::RdbStatus* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rdbplugin::v1::RdbStatusRequest,::rdbplugin::v1::RdbStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::rdbplugin::v1::RdbVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeCreate<BaseClass>::StreamedVolumeCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rdbplugin::v1::RdbVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::rdbplugin::v1::RdbVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeUpdate<BaseClass>::StreamedVolumeUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rdbplugin::v1::RdbVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::rdbplugin::v1::RdbVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeDelete<BaseClass>::StreamedVolumeDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rdbplugin::v1::RdbVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeList() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::rdbplugin::v1::RdbVolumeListQuery, ::rdbplugin::v1::RdbVolumeList>(std::bind(&WithStreamedUnaryMethod_VolumeList<BaseClass>::StreamedVolumeList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::rdbplugin::v1::RdbVolumeListQuery* request, ::rdbplugin::v1::RdbVolumeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rdbplugin::v1::RdbVolumeListQuery,::rdbplugin::v1::RdbVolumeList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_VolumeCreate<WithStreamedUnaryMethod_VolumeUpdate<WithStreamedUnaryMethod_VolumeDelete<WithStreamedUnaryMethod_VolumeList<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_VolumeCreate<WithStreamedUnaryMethod_VolumeUpdate<WithStreamedUnaryMethod_VolumeDelete<WithStreamedUnaryMethod_VolumeList<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace rdbplugin


#endif  // GRPC_rdbplugin_2eproto__INCLUDED
