// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rdbplugin.proto

package v1

import (
	v1 "code.storageos.net/storageos/service/common/v1"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StatsListQuery_Type int32

const (
	// For requesting volume stats.
	StatsListQuery_VOLUME StatsListQuery_Type = 0
	// For requesting node stats.
	StatsListQuery_NODE StatsListQuery_Type = 1
)

var StatsListQuery_Type_name = map[int32]string{
	0: "VOLUME",
	1: "NODE",
}

var StatsListQuery_Type_value = map[string]int32{
	"VOLUME": 0,
	"NODE":   1,
}

func (x StatsListQuery_Type) String() string {
	return proto.EnumName(StatsListQuery_Type_name, int32(x))
}

func (StatsListQuery_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{8, 0}
}

type RdbStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RdbStatusRequest) Reset()         { *m = RdbStatusRequest{} }
func (m *RdbStatusRequest) String() string { return proto.CompactTextString(m) }
func (*RdbStatusRequest) ProtoMessage()    {}
func (*RdbStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{0}
}

func (m *RdbStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RdbStatusRequest.Unmarshal(m, b)
}
func (m *RdbStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RdbStatusRequest.Marshal(b, m, deterministic)
}
func (m *RdbStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RdbStatusRequest.Merge(m, src)
}
func (m *RdbStatusRequest) XXX_Size() int {
	return xxx_messageInfo_RdbStatusRequest.Size(m)
}
func (m *RdbStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RdbStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RdbStatusRequest proto.InternalMessageInfo

type RdbStatus struct {
	// The version control info string.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	// Generic daemon status.
	Status               *v1.DaemonStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RdbStatus) Reset()         { *m = RdbStatus{} }
func (m *RdbStatus) String() string { return proto.CompactTextString(m) }
func (*RdbStatus) ProtoMessage()    {}
func (*RdbStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{1}
}

func (m *RdbStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RdbStatus.Unmarshal(m, b)
}
func (m *RdbStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RdbStatus.Marshal(b, m, deterministic)
}
func (m *RdbStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RdbStatus.Merge(m, src)
}
func (m *RdbStatus) XXX_Size() int {
	return xxx_messageInfo_RdbStatus.Size(m)
}
func (m *RdbStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RdbStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RdbStatus proto.InternalMessageInfo

func (m *RdbStatus) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

func (m *RdbStatus) GetStatus() *v1.DaemonStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type RdbVolumeListQuery struct {
	// Optional list of volume IDs to query.
	VolumeIds            []uint32 `protobuf:"varint,1,rep,packed,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RdbVolumeListQuery) Reset()         { *m = RdbVolumeListQuery{} }
func (m *RdbVolumeListQuery) String() string { return proto.CompactTextString(m) }
func (*RdbVolumeListQuery) ProtoMessage()    {}
func (*RdbVolumeListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{2}
}

func (m *RdbVolumeListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RdbVolumeListQuery.Unmarshal(m, b)
}
func (m *RdbVolumeListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RdbVolumeListQuery.Marshal(b, m, deterministic)
}
func (m *RdbVolumeListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RdbVolumeListQuery.Merge(m, src)
}
func (m *RdbVolumeListQuery) XXX_Size() int {
	return xxx_messageInfo_RdbVolumeListQuery.Size(m)
}
func (m *RdbVolumeListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RdbVolumeListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RdbVolumeListQuery proto.InternalMessageInfo

func (m *RdbVolumeListQuery) GetVolumeIds() []uint32 {
	if m != nil {
		return m.VolumeIds
	}
	return nil
}

type RdbVolumeCredentials struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RdbVolumeCredentials) Reset()         { *m = RdbVolumeCredentials{} }
func (m *RdbVolumeCredentials) String() string { return proto.CompactTextString(m) }
func (*RdbVolumeCredentials) ProtoMessage()    {}
func (*RdbVolumeCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{3}
}

func (m *RdbVolumeCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RdbVolumeCredentials.Unmarshal(m, b)
}
func (m *RdbVolumeCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RdbVolumeCredentials.Marshal(b, m, deterministic)
}
func (m *RdbVolumeCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RdbVolumeCredentials.Merge(m, src)
}
func (m *RdbVolumeCredentials) XXX_Size() int {
	return xxx_messageInfo_RdbVolumeCredentials.Size(m)
}
func (m *RdbVolumeCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_RdbVolumeCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_RdbVolumeCredentials proto.InternalMessageInfo

type RdbVolumeStatistics struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RdbVolumeStatistics) Reset()         { *m = RdbVolumeStatistics{} }
func (m *RdbVolumeStatistics) String() string { return proto.CompactTextString(m) }
func (*RdbVolumeStatistics) ProtoMessage()    {}
func (*RdbVolumeStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{4}
}

func (m *RdbVolumeStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RdbVolumeStatistics.Unmarshal(m, b)
}
func (m *RdbVolumeStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RdbVolumeStatistics.Marshal(b, m, deterministic)
}
func (m *RdbVolumeStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RdbVolumeStatistics.Merge(m, src)
}
func (m *RdbVolumeStatistics) XXX_Size() int {
	return xxx_messageInfo_RdbVolumeStatistics.Size(m)
}
func (m *RdbVolumeStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_RdbVolumeStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_RdbVolumeStatistics proto.InternalMessageInfo

type RdbVolumeStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RdbVolumeStatus) Reset()         { *m = RdbVolumeStatus{} }
func (m *RdbVolumeStatus) String() string { return proto.CompactTextString(m) }
func (*RdbVolumeStatus) ProtoMessage()    {}
func (*RdbVolumeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{5}
}

func (m *RdbVolumeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RdbVolumeStatus.Unmarshal(m, b)
}
func (m *RdbVolumeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RdbVolumeStatus.Marshal(b, m, deterministic)
}
func (m *RdbVolumeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RdbVolumeStatus.Merge(m, src)
}
func (m *RdbVolumeStatus) XXX_Size() int {
	return xxx_messageInfo_RdbVolumeStatus.Size(m)
}
func (m *RdbVolumeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_RdbVolumeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_RdbVolumeStatus proto.InternalMessageInfo

//*
// A volume used by the RDB plugin.
//
// Currently there's no clear merit to adding and removing a volume here,
// as the RDB plugin doesn't read ConfigFS and doesn't really do anything.
//
// However, the control plane should still configure a volume - it's likely
// to be useful. At the very least we can create blob resources ahead of time.
type RdbVolume struct {
	Cc *v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc,proto3" json:"cc,omitempty"`
	// The volume ID.
	VolumeId uint32 `protobuf:"varint,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The volume size in bytes.
	VolumeSizeBytes uint64 `protobuf:"varint,3,opt,name=volume_size_bytes,json=volumeSizeBytes,proto3" json:"volume_size_bytes,omitempty"`
	// Volume credentials.
	Credentials *RdbVolumeCredentials `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// Volume statistics.
	Stats *RdbVolumeStatistics `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
	// Volume status.
	Status               *RdbVolumeStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RdbVolume) Reset()         { *m = RdbVolume{} }
func (m *RdbVolume) String() string { return proto.CompactTextString(m) }
func (*RdbVolume) ProtoMessage()    {}
func (*RdbVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{6}
}

func (m *RdbVolume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RdbVolume.Unmarshal(m, b)
}
func (m *RdbVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RdbVolume.Marshal(b, m, deterministic)
}
func (m *RdbVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RdbVolume.Merge(m, src)
}
func (m *RdbVolume) XXX_Size() int {
	return xxx_messageInfo_RdbVolume.Size(m)
}
func (m *RdbVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_RdbVolume.DiscardUnknown(m)
}

var xxx_messageInfo_RdbVolume proto.InternalMessageInfo

func (m *RdbVolume) GetCc() *v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *RdbVolume) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *RdbVolume) GetVolumeSizeBytes() uint64 {
	if m != nil {
		return m.VolumeSizeBytes
	}
	return 0
}

func (m *RdbVolume) GetCredentials() *RdbVolumeCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *RdbVolume) GetStats() *RdbVolumeStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *RdbVolume) GetStatus() *RdbVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type RdbVolumeList struct {
	Volumes              []*RdbVolume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *RdbVolumeList) Reset()         { *m = RdbVolumeList{} }
func (m *RdbVolumeList) String() string { return proto.CompactTextString(m) }
func (*RdbVolumeList) ProtoMessage()    {}
func (*RdbVolumeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{7}
}

func (m *RdbVolumeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RdbVolumeList.Unmarshal(m, b)
}
func (m *RdbVolumeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RdbVolumeList.Marshal(b, m, deterministic)
}
func (m *RdbVolumeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RdbVolumeList.Merge(m, src)
}
func (m *RdbVolumeList) XXX_Size() int {
	return xxx_messageInfo_RdbVolumeList.Size(m)
}
func (m *RdbVolumeList) XXX_DiscardUnknown() {
	xxx_messageInfo_RdbVolumeList.DiscardUnknown(m)
}

var xxx_messageInfo_RdbVolumeList proto.InternalMessageInfo

func (m *RdbVolumeList) GetVolumes() []*RdbVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type StatsListQuery struct {
	// Type of stats to retrieve.
	Type StatsListQuery_Type `protobuf:"varint,1,opt,name=type,proto3,enum=rdbplugin.v1.StatsListQuery_Type" json:"type,omitempty"`
	// An optional list of volume (or node or other) ids to query.  Empty list will return all.
	Ids                  []uint32 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatsListQuery) Reset()         { *m = StatsListQuery{} }
func (m *StatsListQuery) String() string { return proto.CompactTextString(m) }
func (*StatsListQuery) ProtoMessage()    {}
func (*StatsListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{8}
}

func (m *StatsListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsListQuery.Unmarshal(m, b)
}
func (m *StatsListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsListQuery.Marshal(b, m, deterministic)
}
func (m *StatsListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsListQuery.Merge(m, src)
}
func (m *StatsListQuery) XXX_Size() int {
	return xxx_messageInfo_StatsListQuery.Size(m)
}
func (m *StatsListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_StatsListQuery proto.InternalMessageInfo

func (m *StatsListQuery) GetType() StatsListQuery_Type {
	if m != nil {
		return m.Type
	}
	return StatsListQuery_VOLUME
}

func (m *StatsListQuery) GetIds() []uint32 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Counter struct {
	Value                uint64   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Counter) Reset()         { *m = Counter{} }
func (m *Counter) String() string { return proto.CompactTextString(m) }
func (*Counter) ProtoMessage()    {}
func (*Counter) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{9}
}

func (m *Counter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Counter.Unmarshal(m, b)
}
func (m *Counter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Counter.Marshal(b, m, deterministic)
}
func (m *Counter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counter.Merge(m, src)
}
func (m *Counter) XXX_Size() int {
	return xxx_messageInfo_Counter.Size(m)
}
func (m *Counter) XXX_DiscardUnknown() {
	xxx_messageInfo_Counter.DiscardUnknown(m)
}

var xxx_messageInfo_Counter proto.InternalMessageInfo

func (m *Counter) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Gauge struct {
	Value                uint64   `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Gauge) Reset()         { *m = Gauge{} }
func (m *Gauge) String() string { return proto.CompactTextString(m) }
func (*Gauge) ProtoMessage()    {}
func (*Gauge) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{10}
}

func (m *Gauge) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Gauge.Unmarshal(m, b)
}
func (m *Gauge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Gauge.Marshal(b, m, deterministic)
}
func (m *Gauge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Gauge.Merge(m, src)
}
func (m *Gauge) XXX_Size() int {
	return xxx_messageInfo_Gauge.Size(m)
}
func (m *Gauge) XXX_DiscardUnknown() {
	xxx_messageInfo_Gauge.DiscardUnknown(m)
}

var xxx_messageInfo_Gauge proto.InternalMessageInfo

func (m *Gauge) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Statistic struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to MetricType:
	//	*Statistic_Counter
	//	*Statistic_Gauge
	MetricType           isStatistic_MetricType `protobuf_oneof:"metric_type"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Statistic) Reset()         { *m = Statistic{} }
func (m *Statistic) String() string { return proto.CompactTextString(m) }
func (*Statistic) ProtoMessage()    {}
func (*Statistic) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{11}
}

func (m *Statistic) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Statistic.Unmarshal(m, b)
}
func (m *Statistic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Statistic.Marshal(b, m, deterministic)
}
func (m *Statistic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Statistic.Merge(m, src)
}
func (m *Statistic) XXX_Size() int {
	return xxx_messageInfo_Statistic.Size(m)
}
func (m *Statistic) XXX_DiscardUnknown() {
	xxx_messageInfo_Statistic.DiscardUnknown(m)
}

var xxx_messageInfo_Statistic proto.InternalMessageInfo

func (m *Statistic) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Statistic) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type isStatistic_MetricType interface {
	isStatistic_MetricType()
}

type Statistic_Counter struct {
	Counter *Counter `protobuf:"bytes,3,opt,name=counter,proto3,oneof"`
}

type Statistic_Gauge struct {
	Gauge *Gauge `protobuf:"bytes,4,opt,name=gauge,proto3,oneof"`
}

func (*Statistic_Counter) isStatistic_MetricType() {}

func (*Statistic_Gauge) isStatistic_MetricType() {}

func (m *Statistic) GetMetricType() isStatistic_MetricType {
	if m != nil {
		return m.MetricType
	}
	return nil
}

func (m *Statistic) GetCounter() *Counter {
	if x, ok := m.GetMetricType().(*Statistic_Counter); ok {
		return x.Counter
	}
	return nil
}

func (m *Statistic) GetGauge() *Gauge {
	if x, ok := m.GetMetricType().(*Statistic_Gauge); ok {
		return x.Gauge
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Statistic) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Statistic_Counter)(nil),
		(*Statistic_Gauge)(nil),
	}
}

type StatsListResponse struct {
	Stats                []*Statistic `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *StatsListResponse) Reset()         { *m = StatsListResponse{} }
func (m *StatsListResponse) String() string { return proto.CompactTextString(m) }
func (*StatsListResponse) ProtoMessage()    {}
func (*StatsListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_883053c55cea96f3, []int{12}
}

func (m *StatsListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatsListResponse.Unmarshal(m, b)
}
func (m *StatsListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatsListResponse.Marshal(b, m, deterministic)
}
func (m *StatsListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatsListResponse.Merge(m, src)
}
func (m *StatsListResponse) XXX_Size() int {
	return xxx_messageInfo_StatsListResponse.Size(m)
}
func (m *StatsListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatsListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatsListResponse proto.InternalMessageInfo

func (m *StatsListResponse) GetStats() []*Statistic {
	if m != nil {
		return m.Stats
	}
	return nil
}

func init() {
	proto.RegisterEnum("rdbplugin.v1.StatsListQuery_Type", StatsListQuery_Type_name, StatsListQuery_Type_value)
	proto.RegisterType((*RdbStatusRequest)(nil), "rdbplugin.v1.RdbStatusRequest")
	proto.RegisterType((*RdbStatus)(nil), "rdbplugin.v1.RdbStatus")
	proto.RegisterType((*RdbVolumeListQuery)(nil), "rdbplugin.v1.RdbVolumeListQuery")
	proto.RegisterType((*RdbVolumeCredentials)(nil), "rdbplugin.v1.RdbVolumeCredentials")
	proto.RegisterType((*RdbVolumeStatistics)(nil), "rdbplugin.v1.RdbVolumeStatistics")
	proto.RegisterType((*RdbVolumeStatus)(nil), "rdbplugin.v1.RdbVolumeStatus")
	proto.RegisterType((*RdbVolume)(nil), "rdbplugin.v1.RdbVolume")
	proto.RegisterType((*RdbVolumeList)(nil), "rdbplugin.v1.RdbVolumeList")
	proto.RegisterType((*StatsListQuery)(nil), "rdbplugin.v1.StatsListQuery")
	proto.RegisterType((*Counter)(nil), "rdbplugin.v1.Counter")
	proto.RegisterType((*Gauge)(nil), "rdbplugin.v1.Gauge")
	proto.RegisterType((*Statistic)(nil), "rdbplugin.v1.Statistic")
	proto.RegisterType((*StatsListResponse)(nil), "rdbplugin.v1.StatsListResponse")
}

func init() { proto.RegisterFile("rdbplugin.proto", fileDescriptor_883053c55cea96f3) }

var fileDescriptor_883053c55cea96f3 = []byte{
	// 804 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x51, 0x6f, 0xe2, 0x46,
	0x10, 0x06, 0x02, 0xdc, 0x31, 0x84, 0x84, 0xec, 0x25, 0x0d, 0x75, 0x92, 0x86, 0xdb, 0xa7, 0xe8,
	0xaa, 0x1a, 0x91, 0xe8, 0xd4, 0xc7, 0x4a, 0xc0, 0xf5, 0x2e, 0x6d, 0xe8, 0xb5, 0x9b, 0xde, 0x3d,
	0xf4, 0x05, 0x19, 0x7b, 0x82, 0x56, 0x32, 0x5e, 0xd7, 0xbb, 0xa6, 0xe2, 0x7e, 0x4c, 0x7f, 0x46,
	0x7f, 0x5b, 0x1f, 0x2b, 0xef, 0x1a, 0x63, 0x0a, 0xa6, 0x52, 0xef, 0xcd, 0xfe, 0x66, 0xbe, 0x99,
	0xf9, 0x66, 0x3e, 0x03, 0x1c, 0x47, 0xde, 0x34, 0xf4, 0xe3, 0x19, 0x0f, 0xec, 0x30, 0x12, 0x4a,
	0x90, 0xc3, 0x35, 0xb0, 0xe8, 0x5b, 0x87, 0xae, 0x98, 0xcf, 0x45, 0x1a, 0xa3, 0x04, 0xda, 0xcc,
	0x9b, 0x3e, 0x2a, 0x47, 0xc5, 0x92, 0xe1, 0xef, 0x31, 0x4a, 0x45, 0x27, 0xd0, 0xc8, 0x30, 0xf2,
	0x12, 0x0e, 0x17, 0x18, 0x49, 0x2e, 0x82, 0x09, 0x0f, 0x9e, 0x44, 0xa7, 0xdc, 0x2d, 0xdf, 0x34,
	0x58, 0x33, 0xc5, 0xee, 0x83, 0x27, 0x41, 0x7a, 0x50, 0x97, 0x3a, 0xb9, 0x53, 0xe9, 0x96, 0x6f,
	0x9a, 0xb7, 0xe7, 0x76, 0xda, 0x62, 0xd1, 0xb7, 0x47, 0x0e, 0xce, 0x45, 0x90, 0xd6, 0x4f, 0xd3,
	0xe8, 0x1d, 0x10, 0xe6, 0x4d, 0x3f, 0x0a, 0x3f, 0x9e, 0xe3, 0x03, 0x97, 0xea, 0x97, 0x18, 0xa3,
	0x25, 0xb9, 0x02, 0x58, 0x68, 0x68, 0xc2, 0x3d, 0xd9, 0x29, 0x77, 0x0f, 0x6e, 0x5a, 0xac, 0x61,
	0x90, 0x7b, 0x4f, 0xd2, 0x2f, 0xe0, 0x34, 0x23, 0x0d, 0x23, 0xf4, 0x30, 0x50, 0xdc, 0xf1, 0x25,
	0x3d, 0x83, 0x17, 0x19, 0x9e, 0xf4, 0xe1, 0x52, 0x71, 0x57, 0xd2, 0x13, 0x38, 0xde, 0x80, 0x63,
	0x49, 0xff, 0xaa, 0x68, 0x61, 0x06, 0x23, 0xaf, 0xa0, 0xe2, 0xba, 0x5a, 0x4e, 0xf3, 0xd6, 0xda,
	0x98, 0x58, 0x39, 0xa1, 0xef, 0x04, 0x38, 0xd4, 0x10, 0xab, 0xb8, 0x2e, 0xb9, 0x80, 0x46, 0x36,
	0x9a, 0x16, 0xd9, 0x62, 0xcf, 0x57, 0x93, 0x91, 0x57, 0x70, 0x92, 0x06, 0x25, 0xff, 0x84, 0x93,
	0xe9, 0x52, 0xa1, 0xec, 0x1c, 0x74, 0xcb, 0x37, 0x55, 0x76, 0x6c, 0x02, 0x8f, 0xfc, 0x13, 0x0e,
	0x12, 0x98, 0x8c, 0xa0, 0xe9, 0xae, 0x67, 0xef, 0x54, 0x75, 0x77, 0x6a, 0xe7, 0x0f, 0x64, 0xef,
	0x52, 0xc9, 0xf2, 0x34, 0xf2, 0x2d, 0xd4, 0x92, 0x4d, 0xca, 0x4e, 0x4d, 0xf3, 0x5f, 0x16, 0xf0,
	0xd7, 0xdb, 0x60, 0x26, 0x9f, 0xbc, 0xce, 0x2e, 0x55, 0xd7, 0xcc, 0xab, 0x3d, 0xcc, 0xdc, 0xbd,
	0x06, 0xd0, 0xda, 0xb8, 0x17, 0xe9, 0xc3, 0x33, 0xa3, 0xcc, 0xdc, 0x29, 0x39, 0xf9, 0xee, 0x42,
	0x6c, 0x95, 0x47, 0xff, 0x80, 0xa3, 0xa4, 0xaa, 0x5c, 0xdf, 0xfb, 0x35, 0x54, 0xd5, 0x32, 0x44,
	0x7d, 0x82, 0xa3, 0x7f, 0x8b, 0xd8, 0xcc, 0xb5, 0x7f, 0x5d, 0x86, 0xc8, 0x74, 0x3a, 0x69, 0xc3,
	0x41, 0xe2, 0x8f, 0x8a, 0xf6, 0x47, 0xf2, 0x48, 0x2f, 0xa1, 0x9a, 0xc4, 0x09, 0x40, 0xfd, 0xe3,
	0xfb, 0x87, 0x0f, 0xe3, 0x37, 0xed, 0x12, 0x79, 0x0e, 0xd5, 0x9f, 0xde, 0x8f, 0xde, 0xb4, 0xcb,
	0xf4, 0x1a, 0x9e, 0x0d, 0x45, 0x1c, 0x28, 0x8c, 0xc8, 0x29, 0xd4, 0x16, 0x8e, 0x1f, 0x9b, 0x96,
	0x55, 0x66, 0x5e, 0xe8, 0x15, 0xd4, 0xde, 0x3a, 0xf1, 0x0c, 0x0b, 0xc2, 0x7f, 0x96, 0xa1, 0x91,
	0x6d, 0x92, 0x1c, 0x41, 0x85, 0x7b, 0x3a, 0xa1, 0xc5, 0x2a, 0xdc, 0x23, 0x04, 0xaa, 0x81, 0x33,
	0x47, 0x6d, 0x8a, 0x06, 0xd3, 0xcf, 0xc9, 0x76, 0x5c, 0xd3, 0x51, 0xdb, 0xa0, 0x79, 0x7b, 0xb6,
	0xa9, 0x2d, 0x1d, 0xe7, 0x5d, 0x89, 0xad, 0xf2, 0xc8, 0xd7, 0x50, 0x9b, 0x25, 0x33, 0xa4, 0x8e,
	0x78, 0xb1, 0x49, 0xd0, 0xe3, 0xbd, 0x2b, 0x31, 0x93, 0x33, 0x68, 0x41, 0x73, 0x8e, 0x2a, 0xe2,
	0xee, 0x24, 0x59, 0x08, 0x1d, 0xc0, 0x49, 0xb6, 0x2d, 0x86, 0x32, 0x14, 0x81, 0x44, 0xf2, 0xcd,
	0xca, 0x22, 0x3b, 0xef, 0x93, 0xe9, 0x49, 0x8d, 0x71, 0xfb, 0x77, 0x5d, 0x7f, 0x1a, 0x3f, 0xeb,
	0x0c, 0x32, 0x84, 0x7a, 0xfa, 0xf5, 0x7f, 0xb5, 0x75, 0xd7, 0x8d, 0x9f, 0x0a, 0xeb, 0xbc, 0x20,
	0x4e, 0x4b, 0xe4, 0x3b, 0x38, 0xcc, 0x6c, 0xec, 0x28, 0x24, 0x45, 0x16, 0xb1, 0x4e, 0x73, 0x1f,
	0x1f, 0x0b, 0x5d, 0x86, 0x32, 0xf6, 0x55, 0xbe, 0xc0, 0x87, 0xd0, 0xfb, 0xbc, 0x02, 0x23, 0xf4,
	0xf1, 0xff, 0x14, 0x18, 0x03, 0xe4, 0x4c, 0xdf, 0x2d, 0xa0, 0x67, 0x2e, 0xb5, 0x2e, 0xf6, 0x64,
	0xd0, 0x12, 0x79, 0x30, 0x46, 0xd2, 0x87, 0x22, 0x97, 0xfb, 0xfc, 0x6e, 0x5d, 0x17, 0x44, 0x57,
	0xf7, 0xa5, 0x25, 0xf2, 0x3d, 0xb4, 0x86, 0x22, 0x78, 0xe2, 0xb3, 0xb7, 0xa8, 0x06, 0x42, 0xf8,
	0x24, 0xaf, 0xc2, 0x44, 0x7e, 0xc4, 0xa5, 0x75, 0xb5, 0x85, 0xa6, 0xf9, 0x0c, 0x43, 0x7f, 0x49,
	0x4b, 0xe4, 0x1e, 0xda, 0x06, 0x37, 0x6b, 0xd6, 0xa5, 0xce, 0xb6, 0x48, 0x09, 0x6c, 0x5d, 0x6e,
	0xc1, 0x86, 0xb3, 0x2e, 0x75, 0x64, 0xe0, 0x64, 0x54, 0x5d, 0xc8, 0xda, 0x62, 0xac, 0x35, 0x7e,
	0xb9, 0xb3, 0x49, 0xba, 0xab, 0x1f, 0xe0, 0x38, 0x9b, 0xf6, 0x51, 0x45, 0x3c, 0x98, 0x15, 0xe8,
	0xbb, 0xde, 0xa5, 0xcf, 0x30, 0x56, 0x63, 0x8d, 0x81, 0xe4, 0xa7, 0x4d, 0xcb, 0x9d, 0x6f, 0x11,
	0x4d, 0xe0, 0x3f, 0x55, 0x8e, 0x57, 0x0b, 0x4b, 0x46, 0x4d, 0x8b, 0xed, 0xd3, 0x79, 0x51, 0xd0,
	0xc8, 0x28, 0x1d, 0xdc, 0xfd, 0xd6, 0x77, 0x85, 0x87, 0xb6, 0x54, 0x22, 0x72, 0x66, 0x28, 0xa4,
	0x1d, 0xa0, 0xea, 0x65, 0x6f, 0x3d, 0x89, 0xd1, 0x82, 0xbb, 0xd8, 0xcb, 0x0c, 0xd1, 0x5b, 0xf4,
	0xa7, 0x75, 0xfd, 0xef, 0x7d, 0xf7, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x36, 0x1f, 0x33, 0x80,
	0xec, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RdbPluginClient is the client API for RdbPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RdbPluginClient interface {
	//*
	// Get program status.
	Status(ctx context.Context, in *RdbStatusRequest, opts ...grpc.CallOption) (*RdbStatus, error)
	//*
	// Create a volume. Currently has no actual effect other than
	// to add an entry reporting that the volume is 'configured', and so will
	// have results returned by VolumeList.
	//
	// returns RpcResult
	VolumeCreate(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Create a volume. Currently has no actual effect other than
	// to update the entry reporting that the volume is 'configured', and so will
	// have results returned by VolumeList.
	//
	// returns RpcResult
	VolumeUpdate(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Delete the storage allocated for a volume.
	//
	// Deletion can take some time, this call starts the deletion process then
	// returns. Operation status must be obtained elsewhere.
	//
	// returns RpcResult
	VolumeDelete(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Return a list of configured volumes. Optionally filter using the RdbVolumeListQuery message.
	//
	// returns An RdbVolumeList message containing RdbVolume messages,
	//         if any are found matching the filter.
	VolumeList(ctx context.Context, in *RdbVolumeListQuery, opts ...grpc.CallOption) (*RdbVolumeList, error)
	//*
	// List data-plane stats, optionally filtered using a StatsListQuery message.
	//
	// returns A StatsListResponse containing Statistic messages, if any are
	// found matching the filter.
	StatsList(ctx context.Context, in *StatsListQuery, opts ...grpc.CallOption) (*StatsListResponse, error)
	// Config services, from common.v1.
	ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error)
	ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error)
}

type rdbPluginClient struct {
	cc *grpc.ClientConn
}

func NewRdbPluginClient(cc *grpc.ClientConn) RdbPluginClient {
	return &rdbPluginClient{cc}
}

func (c *rdbPluginClient) Status(ctx context.Context, in *RdbStatusRequest, opts ...grpc.CallOption) (*RdbStatus, error) {
	out := new(RdbStatus)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) VolumeCreate(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/VolumeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) VolumeUpdate(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/VolumeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) VolumeDelete(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/VolumeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) VolumeList(ctx context.Context, in *RdbVolumeListQuery, opts ...grpc.CallOption) (*RdbVolumeList, error) {
	out := new(RdbVolumeList)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/VolumeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) StatsList(ctx context.Context, in *StatsListQuery, opts ...grpc.CallOption) (*StatsListResponse, error) {
	out := new(StatsListResponse)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/StatsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error) {
	out := new(v1.ConfigGetBoolReply)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/ConfigGetBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/ConfigUpdateBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error) {
	out := new(v1.ConfigBoolList)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/ConfigListBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error) {
	out := new(v1.ConfigGetStringReply)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/ConfigGetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/ConfigUpdateString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error) {
	out := new(v1.ConfigStringList)
	err := c.cc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/ConfigListString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RdbPluginServer is the server API for RdbPlugin service.
type RdbPluginServer interface {
	//*
	// Get program status.
	Status(context.Context, *RdbStatusRequest) (*RdbStatus, error)
	//*
	// Create a volume. Currently has no actual effect other than
	// to add an entry reporting that the volume is 'configured', and so will
	// have results returned by VolumeList.
	//
	// returns RpcResult
	VolumeCreate(context.Context, *RdbVolume) (*v1.RpcResult, error)
	//*
	// Create a volume. Currently has no actual effect other than
	// to update the entry reporting that the volume is 'configured', and so will
	// have results returned by VolumeList.
	//
	// returns RpcResult
	VolumeUpdate(context.Context, *RdbVolume) (*v1.RpcResult, error)
	//*
	// Delete the storage allocated for a volume.
	//
	// Deletion can take some time, this call starts the deletion process then
	// returns. Operation status must be obtained elsewhere.
	//
	// returns RpcResult
	VolumeDelete(context.Context, *RdbVolume) (*v1.RpcResult, error)
	//*
	// Return a list of configured volumes. Optionally filter using the RdbVolumeListQuery message.
	//
	// returns An RdbVolumeList message containing RdbVolume messages,
	//         if any are found matching the filter.
	VolumeList(context.Context, *RdbVolumeListQuery) (*RdbVolumeList, error)
	//*
	// List data-plane stats, optionally filtered using a StatsListQuery message.
	//
	// returns A StatsListResponse containing Statistic messages, if any are
	// found matching the filter.
	StatsList(context.Context, *StatsListQuery) (*StatsListResponse, error)
	// Config services, from common.v1.
	ConfigGetBool(context.Context, *v1.ConfigKey) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(context.Context, *v1.ConfigBool) (*v1.ConfigUpdateReply, error)
	ConfigListBool(context.Context, *v1.ConfigListQuery) (*v1.ConfigBoolList, error)
	ConfigGetString(context.Context, *v1.ConfigKey) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(context.Context, *v1.ConfigString) (*v1.ConfigUpdateReply, error)
	ConfigListString(context.Context, *v1.ConfigListQuery) (*v1.ConfigStringList, error)
}

func RegisterRdbPluginServer(s *grpc.Server, srv RdbPluginServer) {
	s.RegisterService(&_RdbPlugin_serviceDesc, srv)
}

func _RdbPlugin_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdbStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).Status(ctx, req.(*RdbStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdbVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).VolumeCreate(ctx, req.(*RdbVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_VolumeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdbVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).VolumeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/VolumeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).VolumeUpdate(ctx, req.(*RdbVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdbVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).VolumeDelete(ctx, req.(*RdbVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdbVolumeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).VolumeList(ctx, req.(*RdbVolumeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_StatsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).StatsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/StatsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).StatsList(ctx, req.(*StatsListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_ConfigGetBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).ConfigGetBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/ConfigGetBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).ConfigGetBool(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_ConfigUpdateBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigBool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).ConfigUpdateBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/ConfigUpdateBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).ConfigUpdateBool(ctx, req.(*v1.ConfigBool))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_ConfigListBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).ConfigListBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/ConfigListBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).ConfigListBool(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_ConfigGetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).ConfigGetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/ConfigGetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).ConfigGetString(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_ConfigUpdateString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).ConfigUpdateString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/ConfigUpdateString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).ConfigUpdateString(ctx, req.(*v1.ConfigString))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_ConfigListString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).ConfigListString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/ConfigListString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).ConfigListString(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _RdbPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rdbplugin.v1.RdbPlugin",
	HandlerType: (*RdbPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _RdbPlugin_Status_Handler,
		},
		{
			MethodName: "VolumeCreate",
			Handler:    _RdbPlugin_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeUpdate",
			Handler:    _RdbPlugin_VolumeUpdate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _RdbPlugin_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _RdbPlugin_VolumeList_Handler,
		},
		{
			MethodName: "StatsList",
			Handler:    _RdbPlugin_StatsList_Handler,
		},
		{
			MethodName: "ConfigGetBool",
			Handler:    _RdbPlugin_ConfigGetBool_Handler,
		},
		{
			MethodName: "ConfigUpdateBool",
			Handler:    _RdbPlugin_ConfigUpdateBool_Handler,
		},
		{
			MethodName: "ConfigListBool",
			Handler:    _RdbPlugin_ConfigListBool_Handler,
		},
		{
			MethodName: "ConfigGetString",
			Handler:    _RdbPlugin_ConfigGetString_Handler,
		},
		{
			MethodName: "ConfigUpdateString",
			Handler:    _RdbPlugin_ConfigUpdateString_Handler,
		},
		{
			MethodName: "ConfigListString",
			Handler:    _RdbPlugin_ConfigListString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rdbplugin.proto",
}
