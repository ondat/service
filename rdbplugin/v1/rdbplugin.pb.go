// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rdbplugin.proto

/*
Package rdbplugin_v1 is a generated protocol buffer package.

It is generated from these files:
	rdbplugin.proto

It has these top-level messages:
	RdbVolumeListQuery
	RdbVolumeCredentials
	RdbVolumeStatistics
	RdbVolumeStatus
	RdbVolume
	RdbVolumeList
*/
package rdbplugin_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common_v1 "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RdbVolumeListQuery struct {
	// Optional list of volume IDs to query.
	VolumeIds []*RdbVolume `protobuf:"bytes,1,rep,name=volume_ids,json=volumeIds" json:"volume_ids,omitempty"`
}

func (m *RdbVolumeListQuery) Reset()                    { *m = RdbVolumeListQuery{} }
func (m *RdbVolumeListQuery) String() string            { return proto.CompactTextString(m) }
func (*RdbVolumeListQuery) ProtoMessage()               {}
func (*RdbVolumeListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RdbVolumeListQuery) GetVolumeIds() []*RdbVolume {
	if m != nil {
		return m.VolumeIds
	}
	return nil
}

type RdbVolumeCredentials struct {
}

func (m *RdbVolumeCredentials) Reset()                    { *m = RdbVolumeCredentials{} }
func (m *RdbVolumeCredentials) String() string            { return proto.CompactTextString(m) }
func (*RdbVolumeCredentials) ProtoMessage()               {}
func (*RdbVolumeCredentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type RdbVolumeStatistics struct {
}

func (m *RdbVolumeStatistics) Reset()                    { *m = RdbVolumeStatistics{} }
func (m *RdbVolumeStatistics) String() string            { return proto.CompactTextString(m) }
func (*RdbVolumeStatistics) ProtoMessage()               {}
func (*RdbVolumeStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type RdbVolumeStatus struct {
}

func (m *RdbVolumeStatus) Reset()                    { *m = RdbVolumeStatus{} }
func (m *RdbVolumeStatus) String() string            { return proto.CompactTextString(m) }
func (*RdbVolumeStatus) ProtoMessage()               {}
func (*RdbVolumeStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// *
// A volume used by the RDB plugin.
//
// Currently there's no clear merit to adding and removing a volume here,
// as the RDB plugin doesn't read ConfigFS and doesn't really do anything.
//
// However, the control plane should still configure a volume - it's likely
// to be useful. At the very least we can create blob resources ahead of time.
type RdbVolume struct {
	Cc *common_v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc" json:"cc,omitempty"`
	// The volume ID.
	VolumeId uint32 `protobuf:"varint,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// The volume size in bytes.
	VolumeSizeBytes uint64 `protobuf:"varint,3,opt,name=volume_size_bytes,json=volumeSizeBytes" json:"volume_size_bytes,omitempty"`
	// Volume credentials.
	Credentials *RdbVolumeCredentials `protobuf:"bytes,4,opt,name=credentials" json:"credentials,omitempty"`
	// Volume statistics.
	Stats *RdbVolumeStatistics `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
	// Volume status.
	Status *RdbVolumeStatus `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
}

func (m *RdbVolume) Reset()                    { *m = RdbVolume{} }
func (m *RdbVolume) String() string            { return proto.CompactTextString(m) }
func (*RdbVolume) ProtoMessage()               {}
func (*RdbVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RdbVolume) GetCc() *common_v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *RdbVolume) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *RdbVolume) GetVolumeSizeBytes() uint64 {
	if m != nil {
		return m.VolumeSizeBytes
	}
	return 0
}

func (m *RdbVolume) GetCredentials() *RdbVolumeCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *RdbVolume) GetStats() *RdbVolumeStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *RdbVolume) GetStatus() *RdbVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type RdbVolumeList struct {
	Volumes []*RdbVolume `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
}

func (m *RdbVolumeList) Reset()                    { *m = RdbVolumeList{} }
func (m *RdbVolumeList) String() string            { return proto.CompactTextString(m) }
func (*RdbVolumeList) ProtoMessage()               {}
func (*RdbVolumeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RdbVolumeList) GetVolumes() []*RdbVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func init() {
	proto.RegisterType((*RdbVolumeListQuery)(nil), "rdbplugin.v1.RdbVolumeListQuery")
	proto.RegisterType((*RdbVolumeCredentials)(nil), "rdbplugin.v1.RdbVolumeCredentials")
	proto.RegisterType((*RdbVolumeStatistics)(nil), "rdbplugin.v1.RdbVolumeStatistics")
	proto.RegisterType((*RdbVolumeStatus)(nil), "rdbplugin.v1.RdbVolumeStatus")
	proto.RegisterType((*RdbVolume)(nil), "rdbplugin.v1.RdbVolume")
	proto.RegisterType((*RdbVolumeList)(nil), "rdbplugin.v1.RdbVolumeList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RdbPlugin service

type RdbPluginClient interface {
	// *
	// Create a volume. Currently has no actual effect other than
	// to add an entry reporting that the volume is 'configured', and so will
	// have results returned by VolumeList.
	//
	// returns RpcResult
	VolumeCreate(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Create a volume. Currently has no actual effect other than
	// to update the entry reporting that the volume is 'configured', and so will
	// have results returned by VolumeList.
	//
	// returns RpcResult
	VolumeUpdate(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Delete the storage allocated for a volume.
	//
	// Deletion can take some time, this call starts the deletion process then
	// returns. Operation status must be obtained elsewhere.
	//
	// returns RpcResult
	VolumeDelete(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Return a list of configured volumes. Optionally filter using the RdbVolumeListQuery message.
	//
	// returns An RdbVolumeList message containing RdbVolume messages,
	//         if any are found matching the filter.
	VolumeList(ctx context.Context, in *RdbVolumeListQuery, opts ...grpc.CallOption) (*RdbVolumeList, error)
}

type rdbPluginClient struct {
	cc *grpc.ClientConn
}

func NewRdbPluginClient(cc *grpc.ClientConn) RdbPluginClient {
	return &rdbPluginClient{cc}
}

func (c *rdbPluginClient) VolumeCreate(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/VolumeCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) VolumeUpdate(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/VolumeUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) VolumeDelete(ctx context.Context, in *RdbVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/VolumeDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbPluginClient) VolumeList(ctx context.Context, in *RdbVolumeListQuery, opts ...grpc.CallOption) (*RdbVolumeList, error) {
	out := new(RdbVolumeList)
	err := grpc.Invoke(ctx, "/rdbplugin.v1.RdbPlugin/VolumeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RdbPlugin service

type RdbPluginServer interface {
	// *
	// Create a volume. Currently has no actual effect other than
	// to add an entry reporting that the volume is 'configured', and so will
	// have results returned by VolumeList.
	//
	// returns RpcResult
	VolumeCreate(context.Context, *RdbVolume) (*common_v1.RpcResult, error)
	// *
	// Create a volume. Currently has no actual effect other than
	// to update the entry reporting that the volume is 'configured', and so will
	// have results returned by VolumeList.
	//
	// returns RpcResult
	VolumeUpdate(context.Context, *RdbVolume) (*common_v1.RpcResult, error)
	// *
	// Delete the storage allocated for a volume.
	//
	// Deletion can take some time, this call starts the deletion process then
	// returns. Operation status must be obtained elsewhere.
	//
	// returns RpcResult
	VolumeDelete(context.Context, *RdbVolume) (*common_v1.RpcResult, error)
	// *
	// Return a list of configured volumes. Optionally filter using the RdbVolumeListQuery message.
	//
	// returns An RdbVolumeList message containing RdbVolume messages,
	//         if any are found matching the filter.
	VolumeList(context.Context, *RdbVolumeListQuery) (*RdbVolumeList, error)
}

func RegisterRdbPluginServer(s *grpc.Server, srv RdbPluginServer) {
	s.RegisterService(&_RdbPlugin_serviceDesc, srv)
}

func _RdbPlugin_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdbVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).VolumeCreate(ctx, req.(*RdbVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_VolumeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdbVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).VolumeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/VolumeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).VolumeUpdate(ctx, req.(*RdbVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdbVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).VolumeDelete(ctx, req.(*RdbVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _RdbPlugin_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RdbVolumeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbPluginServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbplugin.v1.RdbPlugin/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbPluginServer).VolumeList(ctx, req.(*RdbVolumeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _RdbPlugin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rdbplugin.v1.RdbPlugin",
	HandlerType: (*RdbPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VolumeCreate",
			Handler:    _RdbPlugin_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeUpdate",
			Handler:    _RdbPlugin_VolumeUpdate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _RdbPlugin_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _RdbPlugin_VolumeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rdbplugin.proto",
}

func init() { proto.RegisterFile("rdbplugin.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xcf, 0x6a, 0xea, 0x40,
	0x14, 0xc6, 0x4d, 0xfc, 0x73, 0xaf, 0x47, 0x45, 0x9c, 0xeb, 0xbd, 0x37, 0x44, 0x0a, 0xe9, 0xac,
	0x82, 0x8b, 0x80, 0x96, 0xb6, 0xcb, 0x82, 0xba, 0x29, 0x58, 0x68, 0x47, 0xda, 0xad, 0x24, 0x93,
	0xa1, 0x0c, 0x44, 0x13, 0x32, 0x13, 0x41, 0xdf, 0xa5, 0xaf, 0xd1, 0xe7, 0x2b, 0x9d, 0xc4, 0x24,
	0x2e, 0x62, 0xa1, 0xdd, 0x7e, 0xe7, 0xfb, 0x9d, 0x9c, 0xf3, 0x9d, 0x0c, 0xf4, 0x63, 0xdf, 0x8b,
	0x82, 0xe4, 0x95, 0x6f, 0x9d, 0x28, 0x0e, 0x65, 0x88, 0xba, 0x85, 0xb0, 0x9b, 0x98, 0x5d, 0x1a,
	0x6e, 0x36, 0x61, 0x56, 0xc3, 0x4b, 0x40, 0xc4, 0xf7, 0x5e, 0xc2, 0x20, 0xd9, 0xb0, 0x25, 0x17,
	0xf2, 0x29, 0x61, 0xf1, 0x1e, 0xdd, 0x00, 0xec, 0x94, 0xb4, 0xe6, 0xbe, 0x30, 0x34, 0xab, 0x6e,
	0x77, 0xa6, 0xff, 0x9d, 0x72, 0x1b, 0x27, 0xa7, 0x48, 0x3b, 0xb5, 0xde, 0xfb, 0x02, 0xff, 0x83,
	0x61, 0xae, 0xcf, 0x63, 0xe6, 0xb3, 0xad, 0xe4, 0x6e, 0x20, 0xf0, 0x5f, 0xf8, 0x93, 0xeb, 0x2b,
	0xe9, 0x4a, 0x2e, 0x24, 0xa7, 0x02, 0x0f, 0xa0, 0x7f, 0x22, 0x27, 0x02, 0xbf, 0xeb, 0xd0, 0xce,
	0x35, 0x34, 0x06, 0x9d, 0x52, 0x43, 0xb3, 0x34, 0xbb, 0x33, 0x35, 0x9d, 0x6c, 0xf0, 0xdd, 0xc4,
	0x59, 0xb8, 0xd2, 0x8d, 0x02, 0x77, 0xcb, 0xe6, 0x4a, 0x22, 0x3a, 0xa5, 0x68, 0x04, 0xed, 0x7c,
	0x66, 0x43, 0xb7, 0x34, 0xbb, 0x47, 0x7e, 0x1f, 0x27, 0x43, 0x63, 0x18, 0x64, 0x45, 0xc1, 0x0f,
	0x6c, 0xed, 0xed, 0x25, 0x13, 0x46, 0xdd, 0xd2, 0xec, 0x06, 0xe9, 0xa7, 0x85, 0x15, 0x3f, 0xb0,
	0xd9, 0xa7, 0x8c, 0x16, 0xd0, 0xa1, 0xc5, 0xec, 0x46, 0x43, 0x7d, 0x1d, 0x57, 0x6c, 0x5f, 0xda,
	0x92, 0x94, 0x31, 0x74, 0x0b, 0x4d, 0x21, 0x5d, 0x29, 0x8c, 0xa6, 0xe2, 0x2f, 0x2b, 0xf8, 0x22,
	0x0d, 0x92, 0xfa, 0xd1, 0x35, 0xb4, 0x84, 0xca, 0xc2, 0x68, 0x29, 0xf2, 0xe2, 0x0c, 0x99, 0x08,
	0x92, 0x99, 0xf1, 0x0c, 0x7a, 0x27, 0x87, 0x44, 0x13, 0xf8, 0x95, 0x6e, 0xf6, 0xe5, 0x01, 0x8f,
	0xbe, 0xe9, 0x5b, 0x1a, 0xfe, 0xa3, 0xf2, 0xa0, 0x3b, 0xe8, 0xe6, 0x3b, 0xba, 0x92, 0xa1, 0x2a,
	0xde, 0x1c, 0x96, 0x2e, 0x43, 0x22, 0x4a, 0x98, 0x48, 0x02, 0x89, 0x6b, 0x45, 0x83, 0xe7, 0xc8,
	0xff, 0x59, 0x83, 0x05, 0x0b, 0xd8, 0x77, 0x1a, 0x3c, 0x00, 0x94, 0x12, 0xb1, 0x2a, 0xf0, 0xfc,
	0xbf, 0x37, 0x47, 0x67, 0x1c, 0xb8, 0xe6, 0xb5, 0xd4, 0x9b, 0xb9, 0xfa, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x86, 0x61, 0xdc, 0x89, 0x62, 0x03, 0x00, 0x00,
}
