// Code generated by protoc-gen-go. DO NOT EDIT.
// source: supervisor.proto

package supervisor_v1

import (
	v1 "code.storageos.net/storageos/service/common/v1"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IdMapperStatus_MapMode int32

const (
	IdMapperStatus_NOTSET IdMapperStatus_MapMode = 0
	IdMapperStatus_GSI    IdMapperStatus_MapMode = 1
	IdMapperStatus_NLI    IdMapperStatus_MapMode = 2
)

var IdMapperStatus_MapMode_name = map[int32]string{
	0: "NOTSET",
	1: "GSI",
	2: "NLI",
}

var IdMapperStatus_MapMode_value = map[string]int32{
	"NOTSET": 0,
	"GSI":    1,
	"NLI":    2,
}

func (x IdMapperStatus_MapMode) String() string {
	return proto.EnumName(IdMapperStatus_MapMode_name, int32(x))
}

func (IdMapperStatus_MapMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{3, 0}
}

type SupervisorStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SupervisorStatusRequest) Reset()         { *m = SupervisorStatusRequest{} }
func (m *SupervisorStatusRequest) String() string { return proto.CompactTextString(m) }
func (*SupervisorStatusRequest) ProtoMessage()    {}
func (*SupervisorStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{0}
}

func (m *SupervisorStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SupervisorStatusRequest.Unmarshal(m, b)
}
func (m *SupervisorStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SupervisorStatusRequest.Marshal(b, m, deterministic)
}
func (m *SupervisorStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupervisorStatusRequest.Merge(m, src)
}
func (m *SupervisorStatusRequest) XXX_Size() int {
	return xxx_messageInfo_SupervisorStatusRequest.Size(m)
}
func (m *SupervisorStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SupervisorStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SupervisorStatusRequest proto.InternalMessageInfo

type SupervisorStatus struct {
	// Generic daemon status.
	Status *v1.DaemonStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Composite Id Mapper status.
	IdmapStatus          *IdMapperStatus `protobuf:"bytes,3,opt,name=idmap_status,json=idmapStatus,proto3" json:"idmap_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SupervisorStatus) Reset()         { *m = SupervisorStatus{} }
func (m *SupervisorStatus) String() string { return proto.CompactTextString(m) }
func (*SupervisorStatus) ProtoMessage()    {}
func (*SupervisorStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{1}
}

func (m *SupervisorStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SupervisorStatus.Unmarshal(m, b)
}
func (m *SupervisorStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SupervisorStatus.Marshal(b, m, deterministic)
}
func (m *SupervisorStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupervisorStatus.Merge(m, src)
}
func (m *SupervisorStatus) XXX_Size() int {
	return xxx_messageInfo_SupervisorStatus.Size(m)
}
func (m *SupervisorStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SupervisorStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SupervisorStatus proto.InternalMessageInfo

func (m *SupervisorStatus) GetStatus() *v1.DaemonStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SupervisorStatus) GetIdmapStatus() *IdMapperStatus {
	if m != nil {
		return m.IdmapStatus
	}
	return nil
}

type IdMapping struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Inode                uint32   `protobuf:"varint,2,opt,name=inode,proto3" json:"inode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdMapping) Reset()         { *m = IdMapping{} }
func (m *IdMapping) String() string { return proto.CompactTextString(m) }
func (*IdMapping) ProtoMessage()    {}
func (*IdMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{2}
}

func (m *IdMapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdMapping.Unmarshal(m, b)
}
func (m *IdMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdMapping.Marshal(b, m, deterministic)
}
func (m *IdMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdMapping.Merge(m, src)
}
func (m *IdMapping) XXX_Size() int {
	return xxx_messageInfo_IdMapping.Size(m)
}
func (m *IdMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_IdMapping.DiscardUnknown(m)
}

var xxx_messageInfo_IdMapping proto.InternalMessageInfo

func (m *IdMapping) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *IdMapping) GetInode() uint32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type IdMapperStatus struct {
	// The map mode, only valid if mode_set==true.
	Mode IdMapperStatus_MapMode `protobuf:"varint,2,opt,name=mode,proto3,enum=supervisor.v1.IdMapperStatus_MapMode" json:"mode,omitempty"`
	// A list of mappings.
	Mappings             []*IdMapping `protobuf:"bytes,3,rep,name=mappings,proto3" json:"mappings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *IdMapperStatus) Reset()         { *m = IdMapperStatus{} }
func (m *IdMapperStatus) String() string { return proto.CompactTextString(m) }
func (*IdMapperStatus) ProtoMessage()    {}
func (*IdMapperStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{3}
}

func (m *IdMapperStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdMapperStatus.Unmarshal(m, b)
}
func (m *IdMapperStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdMapperStatus.Marshal(b, m, deterministic)
}
func (m *IdMapperStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdMapperStatus.Merge(m, src)
}
func (m *IdMapperStatus) XXX_Size() int {
	return xxx_messageInfo_IdMapperStatus.Size(m)
}
func (m *IdMapperStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_IdMapperStatus.DiscardUnknown(m)
}

var xxx_messageInfo_IdMapperStatus proto.InternalMessageInfo

func (m *IdMapperStatus) GetMode() IdMapperStatus_MapMode {
	if m != nil {
		return m.Mode
	}
	return IdMapperStatus_NOTSET
}

func (m *IdMapperStatus) GetMappings() []*IdMapping {
	if m != nil {
		return m.Mappings
	}
	return nil
}

type VolumeHash struct {
	// There's no way to define this in the proto but bytes.size() is always sizeof(HashType_t).
	// Currently 16 bytes.
	Bytes                []byte   `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeHash) Reset()         { *m = VolumeHash{} }
func (m *VolumeHash) String() string { return proto.CompactTextString(m) }
func (*VolumeHash) ProtoMessage()    {}
func (*VolumeHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{4}
}

func (m *VolumeHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeHash.Unmarshal(m, b)
}
func (m *VolumeHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeHash.Marshal(b, m, deterministic)
}
func (m *VolumeHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeHash.Merge(m, src)
}
func (m *VolumeHash) XXX_Size() int {
	return xxx_messageInfo_VolumeHash.Size(m)
}
func (m *VolumeHash) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeHash.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeHash proto.InternalMessageInfo

func (m *VolumeHash) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// Note: the response to this message, VolumeHashListResponse, is chunked (streamed in
// gRPC parlance).
type VolumeHashListRequest struct {
	// The volume we want to generate a hash over
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The volume UUID we want to generate a hash over.
	VolumeUuid string `protobuf:"bytes,5,opt,name=volume_uuid,json=volumeUuid,proto3" json:"volume_uuid,omitempty"`
	// Defines the byte offset into `volume_id` at which we'll start hash list generation.
	StartOffset uint64 `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	// Defines the byte offset into `volume_id` at which we'll end hash list generation.
	EndOffset uint64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	// When generating the hash list we do so by rolling together individual block hashes
	// into a region hash. This field defines the size of that region in bytes. It must be
	// multiple of RIXIO_BSIZE. By giving the option for clients to specify this size they
	// can optimise based on volume size and required sync granularity.
	RegionSize           uint64   `protobuf:"varint,4,opt,name=region_size,json=regionSize,proto3" json:"region_size,omitempty"`
	IsCompressed         bool     `protobuf:"varint,6,opt,name=is_compressed,json=isCompressed,proto3" json:"is_compressed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeHashListRequest) Reset()         { *m = VolumeHashListRequest{} }
func (m *VolumeHashListRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeHashListRequest) ProtoMessage()    {}
func (*VolumeHashListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{5}
}

func (m *VolumeHashListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeHashListRequest.Unmarshal(m, b)
}
func (m *VolumeHashListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeHashListRequest.Marshal(b, m, deterministic)
}
func (m *VolumeHashListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeHashListRequest.Merge(m, src)
}
func (m *VolumeHashListRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeHashListRequest.Size(m)
}
func (m *VolumeHashListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeHashListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeHashListRequest proto.InternalMessageInfo

func (m *VolumeHashListRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeHashListRequest) GetVolumeUuid() string {
	if m != nil {
		return m.VolumeUuid
	}
	return ""
}

func (m *VolumeHashListRequest) GetStartOffset() uint64 {
	if m != nil {
		return m.StartOffset
	}
	return 0
}

func (m *VolumeHashListRequest) GetEndOffset() uint64 {
	if m != nil {
		return m.EndOffset
	}
	return 0
}

func (m *VolumeHashListRequest) GetRegionSize() uint64 {
	if m != nil {
		return m.RegionSize
	}
	return 0
}

func (m *VolumeHashListRequest) GetIsCompressed() bool {
	if m != nil {
		return m.IsCompressed
	}
	return false
}

// This message is streamed back to the client in response to a VolumeHashListRequest message.
// As such the client should expect to receive many of these messages. Each VolumeHashListResponse
// contains the hash list for a sequential portion of the volume. For simplicity the volume_hash --
// i.e the hash for the range [start_offset, end_offset) as specified in the initial VolumeHashListRequest
// -- is stored in every message.
type VolumeHashListResponse struct {
	// The hash over the region [start_offset, end_offset) as specified in the initial VolumeHashListRequest
	VolumeHash *VolumeHash `protobuf:"bytes,1,opt,name=volume_hash,json=volumeHash,proto3" json:"volume_hash,omitempty"`
	// Defines the byte offset into `volume_id` at which hash_list[0] begins.
	StartOffset uint64 `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	// Defines the byte offset into `volume_id` at which hash_list[max] ends.
	EndOffset uint64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	// A list of region hashes pertaining to the regions defined by the byte range [start_offset, end_offset).
	// The number of regions depends on the `region_size` defined in the inital VolumeHashListRequest.
	HashList             []*VolumeHash `protobuf:"bytes,4,rep,name=hash_list,json=hashList,proto3" json:"hash_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VolumeHashListResponse) Reset()         { *m = VolumeHashListResponse{} }
func (m *VolumeHashListResponse) String() string { return proto.CompactTextString(m) }
func (*VolumeHashListResponse) ProtoMessage()    {}
func (*VolumeHashListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{6}
}

func (m *VolumeHashListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeHashListResponse.Unmarshal(m, b)
}
func (m *VolumeHashListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeHashListResponse.Marshal(b, m, deterministic)
}
func (m *VolumeHashListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeHashListResponse.Merge(m, src)
}
func (m *VolumeHashListResponse) XXX_Size() int {
	return xxx_messageInfo_VolumeHashListResponse.Size(m)
}
func (m *VolumeHashListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeHashListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeHashListResponse proto.InternalMessageInfo

func (m *VolumeHashListResponse) GetVolumeHash() *VolumeHash {
	if m != nil {
		return m.VolumeHash
	}
	return nil
}

func (m *VolumeHashListResponse) GetStartOffset() uint64 {
	if m != nil {
		return m.StartOffset
	}
	return 0
}

func (m *VolumeHashListResponse) GetEndOffset() uint64 {
	if m != nil {
		return m.EndOffset
	}
	return 0
}

func (m *VolumeHashListResponse) GetHashList() []*VolumeHash {
	if m != nil {
		return m.HashList
	}
	return nil
}

func init() {
	proto.RegisterEnum("supervisor.v1.IdMapperStatus_MapMode", IdMapperStatus_MapMode_name, IdMapperStatus_MapMode_value)
	proto.RegisterType((*SupervisorStatusRequest)(nil), "supervisor.v1.SupervisorStatusRequest")
	proto.RegisterType((*SupervisorStatus)(nil), "supervisor.v1.SupervisorStatus")
	proto.RegisterType((*IdMapping)(nil), "supervisor.v1.IdMapping")
	proto.RegisterType((*IdMapperStatus)(nil), "supervisor.v1.IdMapperStatus")
	proto.RegisterType((*VolumeHash)(nil), "supervisor.v1.VolumeHash")
	proto.RegisterType((*VolumeHashListRequest)(nil), "supervisor.v1.VolumeHashListRequest")
	proto.RegisterType((*VolumeHashListResponse)(nil), "supervisor.v1.VolumeHashListResponse")
}

func init() { proto.RegisterFile("supervisor.proto", fileDescriptor_b8b9452d77b1c7d2) }

var fileDescriptor_b8b9452d77b1c7d2 = []byte{
	// 673 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x72, 0xd3, 0x3a,
	0x18, 0x8d, 0x9b, 0x34, 0x4d, 0x3e, 0x27, 0xb9, 0x19, 0x4d, 0x7b, 0x93, 0xba, 0xb7, 0x93, 0x5e,
	0xdd, 0x5b, 0xc8, 0x2a, 0xd0, 0xf0, 0x37, 0xb0, 0x62, 0x28, 0x50, 0x02, 0x4d, 0x0b, 0x76, 0xcb,
	0x36, 0xe3, 0xd6, 0x6a, 0xa2, 0x21, 0xb6, 0x8c, 0x25, 0x67, 0x26, 0xdd, 0xf3, 0x32, 0xbc, 0x07,
	0x5b, 0xde, 0x80, 0x77, 0x61, 0x2c, 0xc9, 0xf9, 0x6f, 0xbb, 0x60, 0x67, 0x9d, 0xf3, 0x9d, 0x4f,
	0xe7, 0x7c, 0x92, 0x12, 0xa8, 0xf2, 0x38, 0x24, 0xd1, 0x88, 0x72, 0x16, 0xb5, 0xc2, 0x88, 0x09,
	0x86, 0xca, 0x33, 0xc8, 0xe8, 0xc0, 0x2a, 0x5d, 0x32, 0xdf, 0x67, 0x81, 0x22, 0xf1, 0x36, 0xd4,
	0x9c, 0x09, 0xed, 0x08, 0x57, 0xc4, 0xdc, 0x26, 0x5f, 0x63, 0xc2, 0x05, 0xfe, 0x66, 0x40, 0x75,
	0x91, 0x43, 0x0f, 0x20, 0xcf, 0xe5, 0x57, 0x7d, 0x6d, 0xcf, 0x68, 0x9a, 0xed, 0x5a, 0x4b, 0xb7,
	0x1b, 0x1d, 0xb4, 0x5e, 0xbb, 0xc4, 0x67, 0x81, 0x6e, 0xa2, 0xcb, 0xd0, 0x4b, 0x28, 0x51, 0xcf,
	0x77, 0xc3, 0x9e, 0x96, 0x65, 0xa5, 0x6c, 0xb7, 0x35, 0x67, 0xaa, 0xd5, 0xf1, 0xba, 0x6e, 0x18,
	0x92, 0xd4, 0x81, 0x29, 0x25, 0x6a, 0x81, 0x9f, 0x40, 0x51, 0xd1, 0x34, 0xe8, 0x23, 0x04, 0xb9,
	0x38, 0xa6, 0x5e, 0xdd, 0xd8, 0x33, 0x9a, 0x45, 0x5b, 0x7e, 0xa3, 0x4d, 0x58, 0xa7, 0x01, 0xf3,
	0x88, 0xb4, 0x54, 0xb6, 0xd5, 0x02, 0x7f, 0x37, 0xa0, 0x32, 0xdf, 0x16, 0x3d, 0x87, 0x9c, 0x9f,
	0xd6, 0x55, 0xda, 0xfb, 0xb7, 0x7a, 0x68, 0x75, 0xdd, 0xb0, 0xcb, 0x3c, 0x62, 0x4b, 0x09, 0x7a,
	0x0c, 0x05, 0x5f, 0x59, 0x48, 0x22, 0x64, 0x9b, 0x66, 0xbb, 0xbe, 0x52, 0x4e, 0x83, 0xbe, 0x3d,
	0xa9, 0xc4, 0xf7, 0x61, 0x43, 0xb7, 0x41, 0x00, 0xf9, 0x93, 0xd3, 0x33, 0xe7, 0xcd, 0x59, 0x35,
	0x83, 0x36, 0x20, 0x7b, 0xe4, 0x74, 0xaa, 0x46, 0xf2, 0x71, 0x72, 0xdc, 0xa9, 0xae, 0x61, 0x0c,
	0xf0, 0x99, 0x0d, 0x63, 0x9f, 0xbc, 0x73, 0xf9, 0x20, 0x09, 0x74, 0x31, 0x16, 0x84, 0xcb, 0x94,
	0x25, 0x5b, 0x2d, 0xf0, 0x2f, 0x03, 0xb6, 0xa6, 0x45, 0xc7, 0x94, 0x0b, 0x7d, 0x52, 0x68, 0x07,
	0x8a, 0x23, 0x49, 0xf4, 0xf4, 0x64, 0xca, 0x76, 0x41, 0x01, 0x1d, 0x0f, 0x35, 0xc0, 0xd4, 0xa4,
	0x1c, 0xdc, 0xba, 0x1c, 0x1c, 0x28, 0xe8, 0x3c, 0x19, 0xdf, 0xbf, 0x50, 0xe2, 0xc2, 0x8d, 0x44,
	0x8f, 0x5d, 0x5d, 0x71, 0x22, 0xe4, 0x74, 0x72, 0xb6, 0x29, 0xb1, 0x53, 0x09, 0xa1, 0x5d, 0x00,
	0x12, 0x78, 0x69, 0x41, 0x56, 0x16, 0x14, 0x49, 0xe0, 0x69, 0xba, 0x01, 0x66, 0x44, 0xfa, 0x94,
	0x05, 0x3d, 0x4e, 0xaf, 0x49, 0x3d, 0x27, 0x79, 0x50, 0x90, 0x43, 0xaf, 0x09, 0xfa, 0x0f, 0xca,
	0x94, 0xf7, 0x2e, 0x99, 0x1f, 0x46, 0x84, 0x73, 0xe2, 0xd5, 0xf3, 0x7b, 0x46, 0xb3, 0x60, 0x97,
	0x28, 0x3f, 0x9c, 0x60, 0xf8, 0xa7, 0x01, 0x7f, 0x2f, 0xe6, 0xe3, 0x21, 0x0b, 0x38, 0x41, 0x2f,
	0x26, 0x19, 0x06, 0x2e, 0x1f, 0xc8, 0x88, 0x66, 0x7b, 0x7b, 0xe1, 0x00, 0xa6, 0xda, 0x34, 0x9e,
	0x1c, 0xe6, 0x9f, 0xc7, 0x7b, 0x0a, 0xc5, 0x64, 0xdb, 0xde, 0x90, 0x72, 0x51, 0xcf, 0xc9, 0xc3,
	0xbf, 0x65, 0xef, 0xc2, 0x40, 0xbb, 0x6f, 0xff, 0x58, 0x07, 0x98, 0x3e, 0x20, 0xe4, 0x40, 0x5e,
	0xdf, 0xc3, 0x7b, 0x0b, 0xea, 0x1b, 0x5e, 0xa0, 0xd5, 0xb8, 0xa3, 0x0e, 0x67, 0xd0, 0x33, 0xc8,
	0x7d, 0x64, 0x5f, 0x08, 0xda, 0x9c, 0x79, 0x87, 0x09, 0xf0, 0x29, 0x26, 0xd1, 0xd8, 0xaa, 0x2d,
	0xa0, 0xe9, 0x40, 0x71, 0x06, 0xbd, 0x85, 0xf2, 0x21, 0x0b, 0xae, 0x68, 0xff, 0x88, 0x88, 0x57,
	0x8c, 0x0d, 0xe7, 0x3a, 0x28, 0xe6, 0x03, 0x19, 0x5b, 0xbb, 0x4b, 0xa8, 0xae, 0xb7, 0x49, 0x38,
	0x1c, 0xe3, 0x0c, 0xea, 0x40, 0x55, 0xe1, 0xe7, 0xa1, 0xe7, 0x0a, 0x22, 0x5b, 0x6d, 0x2d, 0x89,
	0x12, 0xd8, 0xfa, 0x67, 0x09, 0x56, 0x9a, 0x69, 0xab, 0x8a, 0x82, 0x93, 0xe9, 0xc9, 0x46, 0xd6,
	0x92, 0x22, 0xa1, 0x54, 0xb6, 0xed, 0x95, 0x9b, 0x24, 0x3c, 0xce, 0xa0, 0xf7, 0xf0, 0xd7, 0xc4,
	0xad, 0x23, 0xa2, 0xe4, 0x97, 0x63, 0x75, 0xbe, 0xc6, 0xaa, 0x7c, 0x4a, 0x91, 0xda, 0xea, 0x02,
	0x9a, 0x75, 0xab, 0xdb, 0xd5, 0x96, 0x84, 0x8a, 0xb8, 0x33, 0x65, 0x37, 0x1d, 0x58, 0x62, 0x55,
	0x37, 0xbb, 0x2d, 0xe7, 0xce, 0x0d, 0x1b, 0xe9, 0xa4, 0x2e, 0x54, 0xe6, 0x1f, 0x0d, 0xfa, 0xff,
	0xc6, 0xbb, 0x39, 0xf3, 0x9b, 0x61, 0xed, 0xdf, 0x51, 0x95, 0x5e, 0x94, 0x87, 0xc6, 0x45, 0x5e,
	0xfe, 0x55, 0x3c, 0xfa, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x02, 0x6e, 0xe6, 0xd5, 0x5b, 0x06, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SupervisorClient is the client API for Supervisor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SupervisorClient interface {
	//*
	// Get program status.
	Status(ctx context.Context, in *SupervisorStatusRequest, opts ...grpc.CallOption) (*SupervisorStatus, error)
	//*
	// Perform actions that really only make sense for very low-level testing.
	Poke(ctx context.Context, in *v1.PokeQuery, opts ...grpc.CallOption) (*v1.PokeResponse, error)
	// Config services, from common.v1.
	ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error)
	ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error)
	//*
	// Return a hash list for the specified volume, over the specified range.
	// Note: this is a streaming RPC as the hash lists returned could conceiveably
	// be multiple megabytes in size.
	//
	// returns the hash list and volume hash
	VolumeHashList(ctx context.Context, in *VolumeHashListRequest, opts ...grpc.CallOption) (Supervisor_VolumeHashListClient, error)
}

type supervisorClient struct {
	cc *grpc.ClientConn
}

func NewSupervisorClient(cc *grpc.ClientConn) SupervisorClient {
	return &supervisorClient{cc}
}

func (c *supervisorClient) Status(ctx context.Context, in *SupervisorStatusRequest, opts ...grpc.CallOption) (*SupervisorStatus, error) {
	out := new(SupervisorStatus)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) Poke(ctx context.Context, in *v1.PokeQuery, opts ...grpc.CallOption) (*v1.PokeResponse, error) {
	out := new(v1.PokeResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/Poke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error) {
	out := new(v1.ConfigGetBoolReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigGetBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigUpdateBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error) {
	out := new(v1.ConfigBoolList)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigListBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error) {
	out := new(v1.ConfigGetStringReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigGetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigUpdateString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error) {
	out := new(v1.ConfigStringList)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigListString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) VolumeHashList(ctx context.Context, in *VolumeHashListRequest, opts ...grpc.CallOption) (Supervisor_VolumeHashListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Supervisor_serviceDesc.Streams[0], "/supervisor.v1.Supervisor/VolumeHashList", opts...)
	if err != nil {
		return nil, err
	}
	x := &supervisorVolumeHashListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Supervisor_VolumeHashListClient interface {
	Recv() (*VolumeHashListResponse, error)
	grpc.ClientStream
}

type supervisorVolumeHashListClient struct {
	grpc.ClientStream
}

func (x *supervisorVolumeHashListClient) Recv() (*VolumeHashListResponse, error) {
	m := new(VolumeHashListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SupervisorServer is the server API for Supervisor service.
type SupervisorServer interface {
	//*
	// Get program status.
	Status(context.Context, *SupervisorStatusRequest) (*SupervisorStatus, error)
	//*
	// Perform actions that really only make sense for very low-level testing.
	Poke(context.Context, *v1.PokeQuery) (*v1.PokeResponse, error)
	// Config services, from common.v1.
	ConfigGetBool(context.Context, *v1.ConfigKey) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(context.Context, *v1.ConfigBool) (*v1.ConfigUpdateReply, error)
	ConfigListBool(context.Context, *v1.ConfigListQuery) (*v1.ConfigBoolList, error)
	ConfigGetString(context.Context, *v1.ConfigKey) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(context.Context, *v1.ConfigString) (*v1.ConfigUpdateReply, error)
	ConfigListString(context.Context, *v1.ConfigListQuery) (*v1.ConfigStringList, error)
	//*
	// Return a hash list for the specified volume, over the specified range.
	// Note: this is a streaming RPC as the hash lists returned could conceiveably
	// be multiple megabytes in size.
	//
	// returns the hash list and volume hash
	VolumeHashList(*VolumeHashListRequest, Supervisor_VolumeHashListServer) error
}

// UnimplementedSupervisorServer can be embedded to have forward compatible implementations.
type UnimplementedSupervisorServer struct {
}

func (*UnimplementedSupervisorServer) Status(ctx context.Context, req *SupervisorStatusRequest) (*SupervisorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedSupervisorServer) Poke(ctx context.Context, req *v1.PokeQuery) (*v1.PokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poke not implemented")
}
func (*UnimplementedSupervisorServer) ConfigGetBool(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetBoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetBool not implemented")
}
func (*UnimplementedSupervisorServer) ConfigUpdateBool(ctx context.Context, req *v1.ConfigBool) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateBool not implemented")
}
func (*UnimplementedSupervisorServer) ConfigListBool(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigBoolList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListBool not implemented")
}
func (*UnimplementedSupervisorServer) ConfigGetString(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetStringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetString not implemented")
}
func (*UnimplementedSupervisorServer) ConfigUpdateString(ctx context.Context, req *v1.ConfigString) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateString not implemented")
}
func (*UnimplementedSupervisorServer) ConfigListString(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigStringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListString not implemented")
}
func (*UnimplementedSupervisorServer) VolumeHashList(req *VolumeHashListRequest, srv Supervisor_VolumeHashListServer) error {
	return status.Errorf(codes.Unimplemented, "method VolumeHashList not implemented")
}

func RegisterSupervisorServer(s *grpc.Server, srv SupervisorServer) {
	s.RegisterService(&_Supervisor_serviceDesc, srv)
}

func _Supervisor_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupervisorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).Status(ctx, req.(*SupervisorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_Poke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PokeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).Poke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/Poke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).Poke(ctx, req.(*v1.PokeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigGetBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigGetBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigGetBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigGetBool(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigUpdateBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigBool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigUpdateBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigUpdateBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigUpdateBool(ctx, req.(*v1.ConfigBool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigListBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigListBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigListBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigListBool(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigGetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigGetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigGetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigGetString(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigUpdateString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigUpdateString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigUpdateString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigUpdateString(ctx, req.(*v1.ConfigString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigListString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigListString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigListString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigListString(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_VolumeHashList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeHashListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SupervisorServer).VolumeHashList(m, &supervisorVolumeHashListServer{stream})
}

type Supervisor_VolumeHashListServer interface {
	Send(*VolumeHashListResponse) error
	grpc.ServerStream
}

type supervisorVolumeHashListServer struct {
	grpc.ServerStream
}

func (x *supervisorVolumeHashListServer) Send(m *VolumeHashListResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Supervisor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "supervisor.v1.Supervisor",
	HandlerType: (*SupervisorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Supervisor_Status_Handler,
		},
		{
			MethodName: "Poke",
			Handler:    _Supervisor_Poke_Handler,
		},
		{
			MethodName: "ConfigGetBool",
			Handler:    _Supervisor_ConfigGetBool_Handler,
		},
		{
			MethodName: "ConfigUpdateBool",
			Handler:    _Supervisor_ConfigUpdateBool_Handler,
		},
		{
			MethodName: "ConfigListBool",
			Handler:    _Supervisor_ConfigListBool_Handler,
		},
		{
			MethodName: "ConfigGetString",
			Handler:    _Supervisor_ConfigGetString_Handler,
		},
		{
			MethodName: "ConfigUpdateString",
			Handler:    _Supervisor_ConfigUpdateString_Handler,
		},
		{
			MethodName: "ConfigListString",
			Handler:    _Supervisor_ConfigListString_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VolumeHashList",
			Handler:       _Supervisor_VolumeHashList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "supervisor.proto",
}
