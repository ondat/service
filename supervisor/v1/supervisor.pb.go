// Code generated by protoc-gen-go. DO NOT EDIT.
// source: supervisor.proto

package v1

import (
	v1 "code.storageos.net/storageos/service/common/v1"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VolumeHashListRpcVersion int32

const (
	VolumeHashListRpcVersion_V1 VolumeHashListRpcVersion = 0
	VolumeHashListRpcVersion_V2 VolumeHashListRpcVersion = 1
)

var VolumeHashListRpcVersion_name = map[int32]string{
	0: "V1",
	1: "V2",
}

var VolumeHashListRpcVersion_value = map[string]int32{
	"V1": 0,
	"V2": 1,
}

func (x VolumeHashListRpcVersion) String() string {
	return proto.EnumName(VolumeHashListRpcVersion_name, int32(x))
}

func (VolumeHashListRpcVersion) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{0}
}

//
// Metrics
type MetricType int32

const (
	// Counters may only increase (like an odometer)
	MetricType_COUNT MetricType = 0
	// Gauges may fluctuate (like a speedometer)
	MetricType_GAUGE MetricType = 1
)

var MetricType_name = map[int32]string{
	0: "COUNT",
	1: "GAUGE",
}

var MetricType_value = map[string]int32{
	"COUNT": 0,
	"GAUGE": 1,
}

func (x MetricType) String() string {
	return proto.EnumName(MetricType_name, int32(x))
}

func (MetricType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{1}
}

type IdMapperStatus_MapMode int32

const (
	IdMapperStatus_NOTSET IdMapperStatus_MapMode = 0
	IdMapperStatus_GSI    IdMapperStatus_MapMode = 1
	IdMapperStatus_NLI    IdMapperStatus_MapMode = 2
)

var IdMapperStatus_MapMode_name = map[int32]string{
	0: "NOTSET",
	1: "GSI",
	2: "NLI",
}

var IdMapperStatus_MapMode_value = map[string]int32{
	"NOTSET": 0,
	"GSI":    1,
	"NLI":    2,
}

func (x IdMapperStatus_MapMode) String() string {
	return proto.EnumName(IdMapperStatus_MapMode_name, int32(x))
}

func (IdMapperStatus_MapMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{7, 0}
}

type ReapVolumeRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Inode                uint32   `protobuf:"varint,2,opt,name=inode,proto3" json:"inode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReapVolumeRequest) Reset()         { *m = ReapVolumeRequest{} }
func (m *ReapVolumeRequest) String() string { return proto.CompactTextString(m) }
func (*ReapVolumeRequest) ProtoMessage()    {}
func (*ReapVolumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{0}
}

func (m *ReapVolumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReapVolumeRequest.Unmarshal(m, b)
}
func (m *ReapVolumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReapVolumeRequest.Marshal(b, m, deterministic)
}
func (m *ReapVolumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReapVolumeRequest.Merge(m, src)
}
func (m *ReapVolumeRequest) XXX_Size() int {
	return xxx_messageInfo_ReapVolumeRequest.Size(m)
}
func (m *ReapVolumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReapVolumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReapVolumeRequest proto.InternalMessageInfo

func (m *ReapVolumeRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ReapVolumeRequest) GetInode() uint32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type ReapVolumeResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReapVolumeResponse) Reset()         { *m = ReapVolumeResponse{} }
func (m *ReapVolumeResponse) String() string { return proto.CompactTextString(m) }
func (*ReapVolumeResponse) ProtoMessage()    {}
func (*ReapVolumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{1}
}

func (m *ReapVolumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReapVolumeResponse.Unmarshal(m, b)
}
func (m *ReapVolumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReapVolumeResponse.Marshal(b, m, deterministic)
}
func (m *ReapVolumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReapVolumeResponse.Merge(m, src)
}
func (m *ReapVolumeResponse) XXX_Size() int {
	return xxx_messageInfo_ReapVolumeResponse.Size(m)
}
func (m *ReapVolumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReapVolumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReapVolumeResponse proto.InternalMessageInfo

type DeleteMappingRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMappingRequest) Reset()         { *m = DeleteMappingRequest{} }
func (m *DeleteMappingRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMappingRequest) ProtoMessage()    {}
func (*DeleteMappingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{2}
}

func (m *DeleteMappingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMappingRequest.Unmarshal(m, b)
}
func (m *DeleteMappingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMappingRequest.Marshal(b, m, deterministic)
}
func (m *DeleteMappingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMappingRequest.Merge(m, src)
}
func (m *DeleteMappingRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteMappingRequest.Size(m)
}
func (m *DeleteMappingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMappingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMappingRequest proto.InternalMessageInfo

func (m *DeleteMappingRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type DeleteMappingResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMappingResponse) Reset()         { *m = DeleteMappingResponse{} }
func (m *DeleteMappingResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteMappingResponse) ProtoMessage()    {}
func (*DeleteMappingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{3}
}

func (m *DeleteMappingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMappingResponse.Unmarshal(m, b)
}
func (m *DeleteMappingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMappingResponse.Marshal(b, m, deterministic)
}
func (m *DeleteMappingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMappingResponse.Merge(m, src)
}
func (m *DeleteMappingResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteMappingResponse.Size(m)
}
func (m *DeleteMappingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMappingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMappingResponse proto.InternalMessageInfo

type SupervisorStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SupervisorStatusRequest) Reset()         { *m = SupervisorStatusRequest{} }
func (m *SupervisorStatusRequest) String() string { return proto.CompactTextString(m) }
func (*SupervisorStatusRequest) ProtoMessage()    {}
func (*SupervisorStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{4}
}

func (m *SupervisorStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SupervisorStatusRequest.Unmarshal(m, b)
}
func (m *SupervisorStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SupervisorStatusRequest.Marshal(b, m, deterministic)
}
func (m *SupervisorStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupervisorStatusRequest.Merge(m, src)
}
func (m *SupervisorStatusRequest) XXX_Size() int {
	return xxx_messageInfo_SupervisorStatusRequest.Size(m)
}
func (m *SupervisorStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SupervisorStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SupervisorStatusRequest proto.InternalMessageInfo

type SupervisorStatus struct {
	// Generic daemon status.
	Status *v1.DaemonStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Composite Id Mapper status.
	IdmapStatus *IdMapperStatus `protobuf:"bytes,3,opt,name=idmap_status,json=idmapStatus,proto3" json:"idmap_status,omitempty"`
	// Composite consumer count status.
	CcStatus             *ConsumerCountStatus `protobuf:"bytes,4,opt,name=cc_status,json=ccStatus,proto3" json:"cc_status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SupervisorStatus) Reset()         { *m = SupervisorStatus{} }
func (m *SupervisorStatus) String() string { return proto.CompactTextString(m) }
func (*SupervisorStatus) ProtoMessage()    {}
func (*SupervisorStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{5}
}

func (m *SupervisorStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SupervisorStatus.Unmarshal(m, b)
}
func (m *SupervisorStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SupervisorStatus.Marshal(b, m, deterministic)
}
func (m *SupervisorStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupervisorStatus.Merge(m, src)
}
func (m *SupervisorStatus) XXX_Size() int {
	return xxx_messageInfo_SupervisorStatus.Size(m)
}
func (m *SupervisorStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SupervisorStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SupervisorStatus proto.InternalMessageInfo

func (m *SupervisorStatus) GetStatus() *v1.DaemonStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SupervisorStatus) GetIdmapStatus() *IdMapperStatus {
	if m != nil {
		return m.IdmapStatus
	}
	return nil
}

func (m *SupervisorStatus) GetCcStatus() *ConsumerCountStatus {
	if m != nil {
		return m.CcStatus
	}
	return nil
}

type IdMapping struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Inode                uint32   `protobuf:"varint,2,opt,name=inode,proto3" json:"inode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdMapping) Reset()         { *m = IdMapping{} }
func (m *IdMapping) String() string { return proto.CompactTextString(m) }
func (*IdMapping) ProtoMessage()    {}
func (*IdMapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{6}
}

func (m *IdMapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdMapping.Unmarshal(m, b)
}
func (m *IdMapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdMapping.Marshal(b, m, deterministic)
}
func (m *IdMapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdMapping.Merge(m, src)
}
func (m *IdMapping) XXX_Size() int {
	return xxx_messageInfo_IdMapping.Size(m)
}
func (m *IdMapping) XXX_DiscardUnknown() {
	xxx_messageInfo_IdMapping.DiscardUnknown(m)
}

var xxx_messageInfo_IdMapping proto.InternalMessageInfo

func (m *IdMapping) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *IdMapping) GetInode() uint32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type IdMapperStatus struct {
	// The map mode, only valid if mode_set==true.
	Mode IdMapperStatus_MapMode `protobuf:"varint,2,opt,name=mode,proto3,enum=supervisor.v1.IdMapperStatus_MapMode" json:"mode,omitempty"`
	// A list of mappings.
	Mappings             []*IdMapping `protobuf:"bytes,3,rep,name=mappings,proto3" json:"mappings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *IdMapperStatus) Reset()         { *m = IdMapperStatus{} }
func (m *IdMapperStatus) String() string { return proto.CompactTextString(m) }
func (*IdMapperStatus) ProtoMessage()    {}
func (*IdMapperStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{7}
}

func (m *IdMapperStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdMapperStatus.Unmarshal(m, b)
}
func (m *IdMapperStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdMapperStatus.Marshal(b, m, deterministic)
}
func (m *IdMapperStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdMapperStatus.Merge(m, src)
}
func (m *IdMapperStatus) XXX_Size() int {
	return xxx_messageInfo_IdMapperStatus.Size(m)
}
func (m *IdMapperStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_IdMapperStatus.DiscardUnknown(m)
}

var xxx_messageInfo_IdMapperStatus proto.InternalMessageInfo

func (m *IdMapperStatus) GetMode() IdMapperStatus_MapMode {
	if m != nil {
		return m.Mode
	}
	return IdMapperStatus_NOTSET
}

func (m *IdMapperStatus) GetMappings() []*IdMapping {
	if m != nil {
		return m.Mappings
	}
	return nil
}

type ConsumerCountStatus struct {
	// Just a list of counts and mappings.
	Ccs                  []*ConsumerCountEntry `protobuf:"bytes,1,rep,name=ccs,proto3" json:"ccs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ConsumerCountStatus) Reset()         { *m = ConsumerCountStatus{} }
func (m *ConsumerCountStatus) String() string { return proto.CompactTextString(m) }
func (*ConsumerCountStatus) ProtoMessage()    {}
func (*ConsumerCountStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{8}
}

func (m *ConsumerCountStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumerCountStatus.Unmarshal(m, b)
}
func (m *ConsumerCountStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumerCountStatus.Marshal(b, m, deterministic)
}
func (m *ConsumerCountStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerCountStatus.Merge(m, src)
}
func (m *ConsumerCountStatus) XXX_Size() int {
	return xxx_messageInfo_ConsumerCountStatus.Size(m)
}
func (m *ConsumerCountStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerCountStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerCountStatus proto.InternalMessageInfo

func (m *ConsumerCountStatus) GetCcs() []*ConsumerCountEntry {
	if m != nil {
		return m.Ccs
	}
	return nil
}

type ConsumerCountEntry struct {
	// The mapping for which we're returning a CC.
	Mapping *IdMapping `protobuf:"bytes,1,opt,name=mapping,proto3" json:"mapping,omitempty"`
	// The cc for the provided mapping.
	Cc                   *v1.ConsumerCount `protobuf:"bytes,2,opt,name=cc,proto3" json:"cc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConsumerCountEntry) Reset()         { *m = ConsumerCountEntry{} }
func (m *ConsumerCountEntry) String() string { return proto.CompactTextString(m) }
func (*ConsumerCountEntry) ProtoMessage()    {}
func (*ConsumerCountEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{9}
}

func (m *ConsumerCountEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumerCountEntry.Unmarshal(m, b)
}
func (m *ConsumerCountEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumerCountEntry.Marshal(b, m, deterministic)
}
func (m *ConsumerCountEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumerCountEntry.Merge(m, src)
}
func (m *ConsumerCountEntry) XXX_Size() int {
	return xxx_messageInfo_ConsumerCountEntry.Size(m)
}
func (m *ConsumerCountEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumerCountEntry.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumerCountEntry proto.InternalMessageInfo

func (m *ConsumerCountEntry) GetMapping() *IdMapping {
	if m != nil {
		return m.Mapping
	}
	return nil
}

func (m *ConsumerCountEntry) GetCc() *v1.ConsumerCount {
	if m != nil {
		return m.Cc
	}
	return nil
}

type VolumeHash struct {
	// There's no way to define this in the proto but bytes.size() is always
	// sizeof(HashType_t). Currently 16 bytes.
	Bytes                []byte   `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeHash) Reset()         { *m = VolumeHash{} }
func (m *VolumeHash) String() string { return proto.CompactTextString(m) }
func (*VolumeHash) ProtoMessage()    {}
func (*VolumeHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{10}
}

func (m *VolumeHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeHash.Unmarshal(m, b)
}
func (m *VolumeHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeHash.Marshal(b, m, deterministic)
}
func (m *VolumeHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeHash.Merge(m, src)
}
func (m *VolumeHash) XXX_Size() int {
	return xxx_messageInfo_VolumeHash.Size(m)
}
func (m *VolumeHash) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeHash.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeHash proto.InternalMessageInfo

func (m *VolumeHash) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

// Note: the response to this message, VolumeHashListResponse, is chunked
// (streamed in gRPC parlance).
type VolumeHashListRequest struct {
	Version VolumeHashListRpcVersion `protobuf:"varint,7,opt,name=version,proto3,enum=supervisor.v1.VolumeHashListRpcVersion" json:"version,omitempty"`
	// The volume we want to generate a hash over
	VolumeId uint32 `protobuf:"varint,1,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The volume UUID we want to generate a hash over.
	VolumeUuid string `protobuf:"bytes,5,opt,name=volume_uuid,json=volumeUuid,proto3" json:"volume_uuid,omitempty"`
	// Defines the byte offset into `volume_id` at which we'll start hash list
	// generation.
	StartOffset uint64 `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	// Defines the byte offset into `volume_id` at which we'll end hash list
	// generation.
	EndOffset uint64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	// When generating the hash list we do so by rolling together individual block
	// hashes into a region hash. This field defines the size of that region in
	// bytes. It must be multiple of RIXIO_BSIZE. By giving the option for clients
	// to specify this size they can optimise based on volume size and required
	// sync granularity.
	RegionSize uint64 `protobuf:"varint,4,opt,name=region_size,json=regionSize,proto3" json:"region_size,omitempty"`
	// As it stands we need to know if the volume is compressed or not in order to
	// generate the volume hashes. This field will likely become redundant once
	// DP-40 is fixed.
	IsCompressed         bool     `protobuf:"varint,6,opt,name=is_compressed,json=isCompressed,proto3" json:"is_compressed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VolumeHashListRequest) Reset()         { *m = VolumeHashListRequest{} }
func (m *VolumeHashListRequest) String() string { return proto.CompactTextString(m) }
func (*VolumeHashListRequest) ProtoMessage()    {}
func (*VolumeHashListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{11}
}

func (m *VolumeHashListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeHashListRequest.Unmarshal(m, b)
}
func (m *VolumeHashListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeHashListRequest.Marshal(b, m, deterministic)
}
func (m *VolumeHashListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeHashListRequest.Merge(m, src)
}
func (m *VolumeHashListRequest) XXX_Size() int {
	return xxx_messageInfo_VolumeHashListRequest.Size(m)
}
func (m *VolumeHashListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeHashListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeHashListRequest proto.InternalMessageInfo

func (m *VolumeHashListRequest) GetVersion() VolumeHashListRpcVersion {
	if m != nil {
		return m.Version
	}
	return VolumeHashListRpcVersion_V1
}

func (m *VolumeHashListRequest) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *VolumeHashListRequest) GetVolumeUuid() string {
	if m != nil {
		return m.VolumeUuid
	}
	return ""
}

func (m *VolumeHashListRequest) GetStartOffset() uint64 {
	if m != nil {
		return m.StartOffset
	}
	return 0
}

func (m *VolumeHashListRequest) GetEndOffset() uint64 {
	if m != nil {
		return m.EndOffset
	}
	return 0
}

func (m *VolumeHashListRequest) GetRegionSize() uint64 {
	if m != nil {
		return m.RegionSize
	}
	return 0
}

func (m *VolumeHashListRequest) GetIsCompressed() bool {
	if m != nil {
		return m.IsCompressed
	}
	return false
}

// This message is streamed back to the client in response to a
// VolumeHashListRequest message. As such the client should expect to receive
// many of these messages. Each VolumeHashListResponse contains the hash list
// for a sequential portion of the volume. For simplicity the volume_hash -- i.e
// the hash for the range [start_offset, end_offset) as specified in the initial
// VolumeHashListRequest
// -- is stored in every message.
type VolumeHashListResponse struct {
	Version VolumeHashListRpcVersion `protobuf:"varint,5,opt,name=version,proto3,enum=supervisor.v1.VolumeHashListRpcVersion" json:"version,omitempty"`
	// The hash over the region [start_offset, end_offset) as specified in the
	// initial VolumeHashListRequest
	VolumeHash *VolumeHash `protobuf:"bytes,1,opt,name=volume_hash,json=volumeHash,proto3" json:"volume_hash,omitempty"`
	// Defines the byte offset into `volume_id` at which hash_list[0] begins.
	StartOffset uint64 `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	// Defines the byte offset into `volume_id` at which hash_list[max] ends.
	EndOffset uint64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	// A list of region hashes pertaining to the regions defined by the byte range
	// [start_offset, end_offset). The number of regions depends on the
	// `region_size` defined in the inital VolumeHashListRequest.
	HashList             []*VolumeHash `protobuf:"bytes,4,rep,name=hash_list,json=hashList,proto3" json:"hash_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *VolumeHashListResponse) Reset()         { *m = VolumeHashListResponse{} }
func (m *VolumeHashListResponse) String() string { return proto.CompactTextString(m) }
func (*VolumeHashListResponse) ProtoMessage()    {}
func (*VolumeHashListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{12}
}

func (m *VolumeHashListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeHashListResponse.Unmarshal(m, b)
}
func (m *VolumeHashListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeHashListResponse.Marshal(b, m, deterministic)
}
func (m *VolumeHashListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeHashListResponse.Merge(m, src)
}
func (m *VolumeHashListResponse) XXX_Size() int {
	return xxx_messageInfo_VolumeHashListResponse.Size(m)
}
func (m *VolumeHashListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeHashListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeHashListResponse proto.InternalMessageInfo

func (m *VolumeHashListResponse) GetVersion() VolumeHashListRpcVersion {
	if m != nil {
		return m.Version
	}
	return VolumeHashListRpcVersion_V1
}

func (m *VolumeHashListResponse) GetVolumeHash() *VolumeHash {
	if m != nil {
		return m.VolumeHash
	}
	return nil
}

func (m *VolumeHashListResponse) GetStartOffset() uint64 {
	if m != nil {
		return m.StartOffset
	}
	return 0
}

func (m *VolumeHashListResponse) GetEndOffset() uint64 {
	if m != nil {
		return m.EndOffset
	}
	return 0
}

func (m *VolumeHashListResponse) GetHashList() []*VolumeHash {
	if m != nil {
		return m.HashList
	}
	return nil
}

type GetVolumeConsumerCountRequest struct {
	// The UUID whose consumer count we are requesting.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The inode whos consumer count we are requesting.
	Inode                uint32   `protobuf:"varint,2,opt,name=inode,proto3" json:"inode,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVolumeConsumerCountRequest) Reset()         { *m = GetVolumeConsumerCountRequest{} }
func (m *GetVolumeConsumerCountRequest) String() string { return proto.CompactTextString(m) }
func (*GetVolumeConsumerCountRequest) ProtoMessage()    {}
func (*GetVolumeConsumerCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{13}
}

func (m *GetVolumeConsumerCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVolumeConsumerCountRequest.Unmarshal(m, b)
}
func (m *GetVolumeConsumerCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVolumeConsumerCountRequest.Marshal(b, m, deterministic)
}
func (m *GetVolumeConsumerCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVolumeConsumerCountRequest.Merge(m, src)
}
func (m *GetVolumeConsumerCountRequest) XXX_Size() int {
	return xxx_messageInfo_GetVolumeConsumerCountRequest.Size(m)
}
func (m *GetVolumeConsumerCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVolumeConsumerCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVolumeConsumerCountRequest proto.InternalMessageInfo

func (m *GetVolumeConsumerCountRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GetVolumeConsumerCountRequest) GetInode() uint32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

type GetVolumeConsumerCountReply struct {
	// The UUID we're returning the cc for.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The inode whos consumer count we are requesting.
	Inode uint32 `protobuf:"varint,3,opt,name=inode,proto3" json:"inode,omitempty"`
	// The Consumer Count for this uuid.
	Cc                   *v1.ConsumerCount `protobuf:"bytes,2,opt,name=cc,proto3" json:"cc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetVolumeConsumerCountReply) Reset()         { *m = GetVolumeConsumerCountReply{} }
func (m *GetVolumeConsumerCountReply) String() string { return proto.CompactTextString(m) }
func (*GetVolumeConsumerCountReply) ProtoMessage()    {}
func (*GetVolumeConsumerCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{14}
}

func (m *GetVolumeConsumerCountReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVolumeConsumerCountReply.Unmarshal(m, b)
}
func (m *GetVolumeConsumerCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVolumeConsumerCountReply.Marshal(b, m, deterministic)
}
func (m *GetVolumeConsumerCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVolumeConsumerCountReply.Merge(m, src)
}
func (m *GetVolumeConsumerCountReply) XXX_Size() int {
	return xxx_messageInfo_GetVolumeConsumerCountReply.Size(m)
}
func (m *GetVolumeConsumerCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVolumeConsumerCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetVolumeConsumerCountReply proto.InternalMessageInfo

func (m *GetVolumeConsumerCountReply) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GetVolumeConsumerCountReply) GetInode() uint32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *GetVolumeConsumerCountReply) GetCc() *v1.ConsumerCount {
	if m != nil {
		return m.Cc
	}
	return nil
}

type SetVolumeConsumerCountRequest struct {
	// The UUID whose consumer count is being set.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The inode whos consumer count is being set.
	Inode uint32 `protobuf:"varint,3,opt,name=inode,proto3" json:"inode,omitempty"`
	// The Consumer Count being set.
	Cc                   *v1.ConsumerCount `protobuf:"bytes,2,opt,name=cc,proto3" json:"cc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetVolumeConsumerCountRequest) Reset()         { *m = SetVolumeConsumerCountRequest{} }
func (m *SetVolumeConsumerCountRequest) String() string { return proto.CompactTextString(m) }
func (*SetVolumeConsumerCountRequest) ProtoMessage()    {}
func (*SetVolumeConsumerCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{15}
}

func (m *SetVolumeConsumerCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetVolumeConsumerCountRequest.Unmarshal(m, b)
}
func (m *SetVolumeConsumerCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetVolumeConsumerCountRequest.Marshal(b, m, deterministic)
}
func (m *SetVolumeConsumerCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVolumeConsumerCountRequest.Merge(m, src)
}
func (m *SetVolumeConsumerCountRequest) XXX_Size() int {
	return xxx_messageInfo_SetVolumeConsumerCountRequest.Size(m)
}
func (m *SetVolumeConsumerCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVolumeConsumerCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetVolumeConsumerCountRequest proto.InternalMessageInfo

func (m *SetVolumeConsumerCountRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *SetVolumeConsumerCountRequest) GetInode() uint32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *SetVolumeConsumerCountRequest) GetCc() *v1.ConsumerCount {
	if m != nil {
		return m.Cc
	}
	return nil
}

type SetVolumeConsumerCountReply struct {
	// The UUID whose consumer count was set.
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The inode whos consumer count was set.
	Inode uint32 `protobuf:"varint,3,opt,name=inode,proto3" json:"inode,omitempty"`
	// The Consumer Count returned by the data plane on attempting to set the
	// value contained in the SetVolumeConsumerCountRequest. May be >=
	// request.cc.
	Cc                   *v1.ConsumerCount `protobuf:"bytes,2,opt,name=cc,proto3" json:"cc,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetVolumeConsumerCountReply) Reset()         { *m = SetVolumeConsumerCountReply{} }
func (m *SetVolumeConsumerCountReply) String() string { return proto.CompactTextString(m) }
func (*SetVolumeConsumerCountReply) ProtoMessage()    {}
func (*SetVolumeConsumerCountReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{16}
}

func (m *SetVolumeConsumerCountReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetVolumeConsumerCountReply.Unmarshal(m, b)
}
func (m *SetVolumeConsumerCountReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetVolumeConsumerCountReply.Marshal(b, m, deterministic)
}
func (m *SetVolumeConsumerCountReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetVolumeConsumerCountReply.Merge(m, src)
}
func (m *SetVolumeConsumerCountReply) XXX_Size() int {
	return xxx_messageInfo_SetVolumeConsumerCountReply.Size(m)
}
func (m *SetVolumeConsumerCountReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SetVolumeConsumerCountReply.DiscardUnknown(m)
}

var xxx_messageInfo_SetVolumeConsumerCountReply proto.InternalMessageInfo

func (m *SetVolumeConsumerCountReply) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *SetVolumeConsumerCountReply) GetInode() uint32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *SetVolumeConsumerCountReply) GetCc() *v1.ConsumerCount {
	if m != nil {
		return m.Cc
	}
	return nil
}

type SyncRegionRequest struct {
	// The source volume ID.
	SourceVolume uint64 `protobuf:"varint,1,opt,name=source_volume,json=sourceVolume,proto3" json:"source_volume,omitempty"`
	// The source UUID.
	// This field is used as the volume identifier over destination_volume if
	// destination_volume is set to INVALID_INODE;
	SourceUuid string `protobuf:"bytes,2,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	// The destination volume ID.
	DestinationVolume uint64 `protobuf:"varint,3,opt,name=destination_volume,json=destinationVolume,proto3" json:"destination_volume,omitempty"`
	// The destination UUID.
	// This field is used as the volume identifier over destination_volume if
	// destination_volume is set to INVALID_INODE;
	DestinationUuid string `protobuf:"bytes,4,opt,name=destination_uuid,json=destinationUuid,proto3" json:"destination_uuid,omitempty"`
	// The start offset.
	Offset uint64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// The length of region to sync.
	Length uint64 `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty"`
	// Whether the sync should be forced. If this flag is set we'll overwrite
	// every sync block transaction ID with TransactionId{node_cc, 0}, where
	// node_cc is the consumer count of the source volume. See sync2020.pdf for
	// the rationale behind this.
	Force                bool     `protobuf:"varint,7,opt,name=force,proto3" json:"force,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRegionRequest) Reset()         { *m = SyncRegionRequest{} }
func (m *SyncRegionRequest) String() string { return proto.CompactTextString(m) }
func (*SyncRegionRequest) ProtoMessage()    {}
func (*SyncRegionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{17}
}

func (m *SyncRegionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRegionRequest.Unmarshal(m, b)
}
func (m *SyncRegionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRegionRequest.Marshal(b, m, deterministic)
}
func (m *SyncRegionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRegionRequest.Merge(m, src)
}
func (m *SyncRegionRequest) XXX_Size() int {
	return xxx_messageInfo_SyncRegionRequest.Size(m)
}
func (m *SyncRegionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRegionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRegionRequest proto.InternalMessageInfo

func (m *SyncRegionRequest) GetSourceVolume() uint64 {
	if m != nil {
		return m.SourceVolume
	}
	return 0
}

func (m *SyncRegionRequest) GetSourceUuid() string {
	if m != nil {
		return m.SourceUuid
	}
	return ""
}

func (m *SyncRegionRequest) GetDestinationVolume() uint64 {
	if m != nil {
		return m.DestinationVolume
	}
	return 0
}

func (m *SyncRegionRequest) GetDestinationUuid() string {
	if m != nil {
		return m.DestinationUuid
	}
	return ""
}

func (m *SyncRegionRequest) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SyncRegionRequest) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *SyncRegionRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

type SyncRegionResponse struct {
	// Whether or not the operation was successful.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// If the operation was not successful, this is an explanatory message as to
	// why.
	Reason               string   `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SyncRegionResponse) Reset()         { *m = SyncRegionResponse{} }
func (m *SyncRegionResponse) String() string { return proto.CompactTextString(m) }
func (*SyncRegionResponse) ProtoMessage()    {}
func (*SyncRegionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{18}
}

func (m *SyncRegionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SyncRegionResponse.Unmarshal(m, b)
}
func (m *SyncRegionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SyncRegionResponse.Marshal(b, m, deterministic)
}
func (m *SyncRegionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SyncRegionResponse.Merge(m, src)
}
func (m *SyncRegionResponse) XXX_Size() int {
	return xxx_messageInfo_SyncRegionResponse.Size(m)
}
func (m *SyncRegionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SyncRegionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SyncRegionResponse proto.InternalMessageInfo

func (m *SyncRegionResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SyncRegionResponse) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

type Metric struct {
	// The metric name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Counter or gauge
	Type MetricType `protobuf:"varint,2,opt,name=type,proto3,enum=supervisor.v1.MetricType" json:"type,omitempty"`
	// Instantaneous value
	Value                uint64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Metric) Reset()         { *m = Metric{} }
func (m *Metric) String() string { return proto.CompactTextString(m) }
func (*Metric) ProtoMessage()    {}
func (*Metric) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{19}
}

func (m *Metric) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Metric.Unmarshal(m, b)
}
func (m *Metric) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Metric.Marshal(b, m, deterministic)
}
func (m *Metric) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Metric.Merge(m, src)
}
func (m *Metric) XXX_Size() int {
	return xxx_messageInfo_Metric.Size(m)
}
func (m *Metric) XXX_DiscardUnknown() {
	xxx_messageInfo_Metric.DiscardUnknown(m)
}

var xxx_messageInfo_Metric proto.InternalMessageInfo

func (m *Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Metric) GetType() MetricType {
	if m != nil {
		return m.Type
	}
	return MetricType_COUNT
}

func (m *Metric) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type MetricsRequest struct {
	// A list of volumes to query (by inode). If this and uuids is left empty we'll return
	// metrics for all volumes which are configured.
	Inodes []uint32 `protobuf:"varint,1,rep,packed,name=inodes,proto3" json:"inodes,omitempty"`
	// A list of volume to query (by uuid). If this and uuids is left empty we'll return
	// metrircs for all volumes which are configured.
	Uuids                []string `protobuf:"bytes,2,rep,name=uuids,proto3" json:"uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MetricsRequest) Reset()         { *m = MetricsRequest{} }
func (m *MetricsRequest) String() string { return proto.CompactTextString(m) }
func (*MetricsRequest) ProtoMessage()    {}
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{20}
}

func (m *MetricsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsRequest.Unmarshal(m, b)
}
func (m *MetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsRequest.Marshal(b, m, deterministic)
}
func (m *MetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsRequest.Merge(m, src)
}
func (m *MetricsRequest) XXX_Size() int {
	return xxx_messageInfo_MetricsRequest.Size(m)
}
func (m *MetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsRequest proto.InternalMessageInfo

func (m *MetricsRequest) GetInodes() []uint32 {
	if m != nil {
		return m.Inodes
	}
	return nil
}

func (m *MetricsRequest) GetUuids() []string {
	if m != nil {
		return m.Uuids
	}
	return nil
}

type VolumeMetrics struct {
	// The volume this collection of metrics belongs to
	Inode uint32 `protobuf:"varint,1,opt,name=inode,proto3" json:"inode,omitempty"`
	// The volume this collection of metrics belongs to
	Uuid                 string    `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Metrics              []*Metric `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *VolumeMetrics) Reset()         { *m = VolumeMetrics{} }
func (m *VolumeMetrics) String() string { return proto.CompactTextString(m) }
func (*VolumeMetrics) ProtoMessage()    {}
func (*VolumeMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{21}
}

func (m *VolumeMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VolumeMetrics.Unmarshal(m, b)
}
func (m *VolumeMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VolumeMetrics.Marshal(b, m, deterministic)
}
func (m *VolumeMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VolumeMetrics.Merge(m, src)
}
func (m *VolumeMetrics) XXX_Size() int {
	return xxx_messageInfo_VolumeMetrics.Size(m)
}
func (m *VolumeMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_VolumeMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_VolumeMetrics proto.InternalMessageInfo

func (m *VolumeMetrics) GetInode() uint32 {
	if m != nil {
		return m.Inode
	}
	return 0
}

func (m *VolumeMetrics) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *VolumeMetrics) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Node-level metrics are metrics which aren't specific to a volume.
type NodeMetrics struct {
	Metrics              []*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NodeMetrics) Reset()         { *m = NodeMetrics{} }
func (m *NodeMetrics) String() string { return proto.CompactTextString(m) }
func (*NodeMetrics) ProtoMessage()    {}
func (*NodeMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{22}
}

func (m *NodeMetrics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodeMetrics.Unmarshal(m, b)
}
func (m *NodeMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodeMetrics.Marshal(b, m, deterministic)
}
func (m *NodeMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeMetrics.Merge(m, src)
}
func (m *NodeMetrics) XXX_Size() int {
	return xxx_messageInfo_NodeMetrics.Size(m)
}
func (m *NodeMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_NodeMetrics proto.InternalMessageInfo

func (m *NodeMetrics) GetMetrics() []*Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type MetricsResponse struct {
	// Per volume stats. One collection of metrics per requested volume.
	VolumeMetrics []*VolumeMetrics `protobuf:"bytes,1,rep,name=volume_metrics,json=volumeMetrics,proto3" json:"volume_metrics,omitempty"`
	// Per node stats. One collection per node.
	NodeMetrics          *NodeMetrics `protobuf:"bytes,2,opt,name=node_metrics,json=nodeMetrics,proto3" json:"node_metrics,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MetricsResponse) Reset()         { *m = MetricsResponse{} }
func (m *MetricsResponse) String() string { return proto.CompactTextString(m) }
func (*MetricsResponse) ProtoMessage()    {}
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b8b9452d77b1c7d2, []int{23}
}

func (m *MetricsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MetricsResponse.Unmarshal(m, b)
}
func (m *MetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MetricsResponse.Marshal(b, m, deterministic)
}
func (m *MetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsResponse.Merge(m, src)
}
func (m *MetricsResponse) XXX_Size() int {
	return xxx_messageInfo_MetricsResponse.Size(m)
}
func (m *MetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsResponse proto.InternalMessageInfo

func (m *MetricsResponse) GetVolumeMetrics() []*VolumeMetrics {
	if m != nil {
		return m.VolumeMetrics
	}
	return nil
}

func (m *MetricsResponse) GetNodeMetrics() *NodeMetrics {
	if m != nil {
		return m.NodeMetrics
	}
	return nil
}

func init() {
	proto.RegisterEnum("supervisor.v1.VolumeHashListRpcVersion", VolumeHashListRpcVersion_name, VolumeHashListRpcVersion_value)
	proto.RegisterEnum("supervisor.v1.MetricType", MetricType_name, MetricType_value)
	proto.RegisterEnum("supervisor.v1.IdMapperStatus_MapMode", IdMapperStatus_MapMode_name, IdMapperStatus_MapMode_value)
	proto.RegisterType((*ReapVolumeRequest)(nil), "supervisor.v1.ReapVolumeRequest")
	proto.RegisterType((*ReapVolumeResponse)(nil), "supervisor.v1.ReapVolumeResponse")
	proto.RegisterType((*DeleteMappingRequest)(nil), "supervisor.v1.DeleteMappingRequest")
	proto.RegisterType((*DeleteMappingResponse)(nil), "supervisor.v1.DeleteMappingResponse")
	proto.RegisterType((*SupervisorStatusRequest)(nil), "supervisor.v1.SupervisorStatusRequest")
	proto.RegisterType((*SupervisorStatus)(nil), "supervisor.v1.SupervisorStatus")
	proto.RegisterType((*IdMapping)(nil), "supervisor.v1.IdMapping")
	proto.RegisterType((*IdMapperStatus)(nil), "supervisor.v1.IdMapperStatus")
	proto.RegisterType((*ConsumerCountStatus)(nil), "supervisor.v1.ConsumerCountStatus")
	proto.RegisterType((*ConsumerCountEntry)(nil), "supervisor.v1.ConsumerCountEntry")
	proto.RegisterType((*VolumeHash)(nil), "supervisor.v1.VolumeHash")
	proto.RegisterType((*VolumeHashListRequest)(nil), "supervisor.v1.VolumeHashListRequest")
	proto.RegisterType((*VolumeHashListResponse)(nil), "supervisor.v1.VolumeHashListResponse")
	proto.RegisterType((*GetVolumeConsumerCountRequest)(nil), "supervisor.v1.GetVolumeConsumerCountRequest")
	proto.RegisterType((*GetVolumeConsumerCountReply)(nil), "supervisor.v1.GetVolumeConsumerCountReply")
	proto.RegisterType((*SetVolumeConsumerCountRequest)(nil), "supervisor.v1.SetVolumeConsumerCountRequest")
	proto.RegisterType((*SetVolumeConsumerCountReply)(nil), "supervisor.v1.SetVolumeConsumerCountReply")
	proto.RegisterType((*SyncRegionRequest)(nil), "supervisor.v1.SyncRegionRequest")
	proto.RegisterType((*SyncRegionResponse)(nil), "supervisor.v1.SyncRegionResponse")
	proto.RegisterType((*Metric)(nil), "supervisor.v1.Metric")
	proto.RegisterType((*MetricsRequest)(nil), "supervisor.v1.MetricsRequest")
	proto.RegisterType((*VolumeMetrics)(nil), "supervisor.v1.VolumeMetrics")
	proto.RegisterType((*NodeMetrics)(nil), "supervisor.v1.NodeMetrics")
	proto.RegisterType((*MetricsResponse)(nil), "supervisor.v1.MetricsResponse")
}

func init() { proto.RegisterFile("supervisor.proto", fileDescriptor_b8b9452d77b1c7d2) }

var fileDescriptor_b8b9452d77b1c7d2 = []byte{
	// 1398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5d, 0x73, 0xda, 0x46,
	0x17, 0x46, 0x80, 0xf9, 0x38, 0x80, 0x43, 0xf6, 0xf5, 0x07, 0xc1, 0xf1, 0x6b, 0x47, 0x49, 0xde,
	0xf8, 0xf5, 0x34, 0xb8, 0x26, 0x94, 0x4e, 0x3b, 0x93, 0xb4, 0x89, 0x93, 0xb8, 0x4e, 0x83, 0xd3,
	0x4a, 0x71, 0x2e, 0x3a, 0x9d, 0x61, 0x14, 0x69, 0x6d, 0xab, 0x05, 0xad, 0xa2, 0x5d, 0x98, 0x21,
	0xff, 0xa2, 0x17, 0xbd, 0xef, 0x75, 0x7f, 0x48, 0xff, 0x40, 0x7f, 0x4d, 0xef, 0x3a, 0xfb, 0x21,
	0x10, 0x02, 0x94, 0xe0, 0xce, 0xf4, 0x0a, 0xed, 0xd9, 0xf3, 0x3c, 0x7b, 0x9e, 0xb3, 0x67, 0x77,
	0xcf, 0x00, 0x55, 0x3a, 0xf0, 0x71, 0x30, 0x74, 0x29, 0x09, 0x1a, 0x7e, 0x40, 0x18, 0x41, 0x95,
	0x88, 0x65, 0x78, 0x58, 0x2f, 0xdb, 0xa4, 0xdf, 0x27, 0x9e, 0x9c, 0xd4, 0x1f, 0xc2, 0x75, 0x03,
	0x5b, 0xfe, 0x1b, 0xd2, 0x1b, 0xf4, 0xb1, 0x81, 0xdf, 0x0d, 0x30, 0x65, 0x08, 0x41, 0x76, 0x30,
	0x70, 0x9d, 0x9a, 0xb6, 0xab, 0xed, 0x15, 0x0d, 0xf1, 0x8d, 0xd6, 0x60, 0xc5, 0xf5, 0x88, 0x83,
	0x6b, 0xe9, 0x5d, 0x6d, 0xaf, 0x62, 0xc8, 0x81, 0xbe, 0x06, 0x28, 0x0a, 0xa7, 0x3e, 0xf1, 0x28,
	0xd6, 0xf7, 0x61, 0xed, 0x29, 0xee, 0x61, 0x86, 0x3b, 0x96, 0xef, 0xbb, 0xde, 0x45, 0x02, 0xaf,
	0xbe, 0x09, 0xeb, 0x31, 0x5f, 0x45, 0x72, 0x03, 0x36, 0xcd, 0x71, 0xe0, 0x26, 0xb3, 0xd8, 0x80,
	0x2a, 0x1e, 0xfd, 0x0f, 0x0d, 0xaa, 0xf1, 0x39, 0x74, 0x00, 0x39, 0x2a, 0xbe, 0x44, 0x84, 0xa5,
	0xe6, 0x66, 0x43, 0x09, 0x1d, 0x1e, 0x36, 0x9e, 0x5a, 0xb8, 0x4f, 0x3c, 0x45, 0xa2, 0xdc, 0xd0,
	0xd7, 0x50, 0x76, 0x9d, 0xbe, 0xe5, 0x77, 0x15, 0x2c, 0x23, 0x60, 0xdb, 0x8d, 0xa9, 0x74, 0x35,
	0x4e, 0x1c, 0x1e, 0x18, 0x0e, 0x23, 0x28, 0x09, 0x88, 0x5a, 0xf2, 0x2b, 0x28, 0xda, 0x76, 0x08,
	0xcf, 0x0a, 0xb8, 0x1e, 0x83, 0x1f, 0x11, 0x8f, 0x0e, 0xfa, 0x38, 0x38, 0x22, 0x03, 0x8f, 0x29,
	0x8e, 0x82, 0x6d, 0xcb, 0x2f, 0xfd, 0x33, 0x28, 0x4a, 0x7e, 0xd7, 0xbb, 0x58, 0x22, 0xeb, 0xbf,
	0x6b, 0xb0, 0x3a, 0x1d, 0x17, 0xfa, 0x02, 0xb2, 0xfd, 0xd0, 0x6f, 0xb5, 0x79, 0x37, 0x51, 0x44,
	0xa3, 0x63, 0xf9, 0x1d, 0xe2, 0x60, 0x43, 0x40, 0x50, 0x0b, 0x0a, 0x7d, 0x19, 0x02, 0xcf, 0x41,
	0x66, 0xaf, 0xd4, 0xac, 0xcd, 0x85, 0xf3, 0xcd, 0x19, 0x7b, 0xea, 0xf7, 0x20, 0xaf, 0x68, 0x10,
	0x40, 0xee, 0xf4, 0xd5, 0x6b, 0xf3, 0xd9, 0xeb, 0x6a, 0x0a, 0xe5, 0x21, 0x73, 0x6c, 0x9e, 0x54,
	0x35, 0xfe, 0x71, 0xfa, 0xf2, 0xa4, 0x9a, 0xd6, 0x5f, 0xc0, 0x7f, 0xe6, 0x24, 0x01, 0x3d, 0x80,
	0x8c, 0x6d, 0xd3, 0x9a, 0x26, 0x16, 0xbc, 0x95, 0x94, 0xb5, 0x67, 0x1e, 0x0b, 0x46, 0x06, 0xf7,
	0xd6, 0x03, 0x40, 0xb3, 0x53, 0xa8, 0x09, 0x79, 0x15, 0x96, 0xc8, 0x5d, 0x52, 0xfc, 0xa1, 0x23,
	0xda, 0x83, 0xb4, 0x6d, 0xab, 0x4a, 0xa9, 0x45, 0x2a, 0x65, 0x8a, 0xde, 0x48, 0xdb, 0xb6, 0xae,
	0x03, 0xc8, 0xf2, 0xfe, 0xc6, 0xa2, 0x97, 0x7c, 0x43, 0xde, 0x8e, 0x18, 0xa6, 0x62, 0xa5, 0xb2,
	0x21, 0x07, 0xfa, 0x6f, 0x69, 0x58, 0x9f, 0x38, 0xbd, 0x74, 0x29, 0x0b, 0x4b, 0xfe, 0x31, 0xe4,
	0x87, 0x38, 0xa0, 0x2e, 0xf1, 0x6a, 0x79, 0xb1, 0x35, 0xf7, 0x62, 0xb1, 0xc5, 0x60, 0xbe, 0xfd,
	0x46, 0xba, 0x1b, 0x21, 0x0e, 0x6d, 0x41, 0x71, 0x28, 0x9c, 0xba, 0xaa, 0x38, 0x2a, 0x46, 0x41,
	0x1a, 0x4e, 0x1c, 0xb4, 0x03, 0x25, 0x35, 0x29, 0x6a, 0x67, 0x45, 0xd4, 0x0e, 0x48, 0xd3, 0x19,
	0xaf, 0xa0, 0x5b, 0x50, 0xa6, 0xcc, 0x0a, 0x58, 0x97, 0x9c, 0x9f, 0x53, 0xcc, 0x84, 0xe4, 0xac,
	0x51, 0x12, 0xb6, 0x57, 0xc2, 0x84, 0xb6, 0x01, 0xb0, 0xe7, 0x84, 0x0e, 0x19, 0xe1, 0x50, 0xc4,
	0x9e, 0xa3, 0xa6, 0x77, 0xa0, 0x14, 0xe0, 0x0b, 0x97, 0x78, 0x5d, 0xea, 0xbe, 0xc7, 0xa2, 0xce,
	0xb3, 0x06, 0x48, 0x93, 0xe9, 0xbe, 0xc7, 0xe8, 0x36, 0x54, 0x5c, 0xda, 0xb5, 0x49, 0xdf, 0x0f,
	0x30, 0xa5, 0xd8, 0xa9, 0xe5, 0x76, 0xb5, 0xbd, 0x82, 0x51, 0x76, 0xe9, 0xd1, 0xd8, 0xa6, 0xff,
	0x92, 0x86, 0x8d, 0x78, 0x8a, 0xe4, 0x49, 0x8f, 0xe6, 0x68, 0xe5, 0x8a, 0x39, 0xfa, 0x72, 0x9c,
	0x86, 0x4b, 0x8b, 0x5e, 0xaa, 0x32, 0xb8, 0xb1, 0x90, 0x26, 0xcc, 0x90, 0xd8, 0xd2, 0x7f, 0x9e,
	0xa1, 0x36, 0x14, 0xf9, 0xb2, 0xdd, 0x9e, 0x4b, 0x59, 0x2d, 0x2b, 0x2a, 0x3a, 0x61, 0xed, 0xc2,
	0xa5, 0x12, 0xa2, 0x9f, 0xc0, 0xf6, 0x31, 0x66, 0x72, 0x6a, 0xba, 0xf0, 0x96, 0xbe, 0x88, 0xdf,
	0xc1, 0xd6, 0x22, 0x2a, 0xbf, 0x37, 0x4a, 0x26, 0xca, 0x44, 0x88, 0x96, 0x38, 0x18, 0x14, 0xb6,
	0xcd, 0xab, 0x47, 0x7f, 0xc5, 0x45, 0xdf, 0xc1, 0x96, 0xf9, 0x2f, 0xeb, 0xfc, 0x4b, 0x83, 0xeb,
	0xe6, 0xc8, 0xb3, 0x0d, 0x51, 0xf1, 0xa1, 0xb8, 0xdb, 0x50, 0xa1, 0x64, 0x10, 0xd8, 0xb8, 0x2b,
	0x4b, 0x49, 0x2c, 0x99, 0x35, 0xca, 0xd2, 0x28, 0x03, 0xe4, 0x47, 0x47, 0x39, 0x89, 0xa8, 0xd2,
	0xf2, 0x74, 0x4a, 0x93, 0x38, 0x9d, 0xf7, 0x01, 0x39, 0x98, 0x32, 0xd7, 0xb3, 0x18, 0x3f, 0x60,
	0x8a, 0x4a, 0x16, 0xd8, 0xf5, 0xc8, 0x8c, 0xe2, 0xfb, 0x3f, 0x54, 0xa3, 0xee, 0x82, 0x34, 0x2b,
	0x48, 0xaf, 0x45, 0xec, 0x82, 0x79, 0x03, 0x72, 0xaa, 0x5c, 0x57, 0x04, 0x9b, 0x1a, 0x71, 0x7b,
	0x0f, 0x7b, 0x17, 0xec, 0x52, 0x9c, 0xd2, 0xac, 0xa1, 0x46, 0x3c, 0x4b, 0xe7, 0x24, 0xb0, 0xb1,
	0xb8, 0xa6, 0x0a, 0x86, 0x1c, 0xe8, 0xcf, 0x01, 0x45, 0xa5, 0xab, 0x03, 0x5b, 0x83, 0x3c, 0x1d,
	0xd8, 0x36, 0xa6, 0xf2, 0x1a, 0x2c, 0x18, 0xe1, 0x90, 0xb3, 0x07, 0xd8, 0xa2, 0xc4, 0x53, 0x5a,
	0xd5, 0x48, 0xb7, 0x20, 0xd7, 0xc1, 0x2c, 0x70, 0x6d, 0xbe, 0x43, 0x9e, 0xa5, 0xd2, 0x55, 0x34,
	0xc4, 0x37, 0xba, 0x0f, 0x59, 0x36, 0xf2, 0xc3, 0xc7, 0x2b, 0x7e, 0x74, 0x24, 0xf0, 0xf5, 0xc8,
	0xc7, 0x86, 0x70, 0xe3, 0xa1, 0x0e, 0xad, 0xde, 0x20, 0xcc, 0x93, 0x1c, 0xe8, 0x8f, 0x60, 0x55,
	0x7a, 0x86, 0x6d, 0x02, 0x0f, 0x46, 0xec, 0xb5, 0x7c, 0x65, 0x2a, 0x86, 0x1a, 0x71, 0x3c, 0xcf,
	0x1c, 0x6f, 0x14, 0x32, 0x7b, 0x45, 0x43, 0x0e, 0xf4, 0x9f, 0xa0, 0x22, 0xb3, 0xac, 0x58, 0x26,
	0x75, 0xa3, 0x45, 0xeb, 0x26, 0xac, 0xb0, 0x74, 0xa4, 0xc2, 0x0e, 0x20, 0xdf, 0x97, 0x20, 0xf5,
	0x80, 0xae, 0xcf, 0x95, 0x60, 0x84, 0x5e, 0xfa, 0x23, 0x28, 0x9d, 0x12, 0x67, 0xbc, 0x52, 0x04,
	0xaf, 0x7d, 0x14, 0xfe, 0x57, 0x0d, 0xae, 0x8d, 0xc5, 0xaa, 0x4d, 0x39, 0x82, 0x55, 0x75, 0x05,
	0x4e, 0x73, 0xdd, 0x9c, 0x7b, 0x13, 0x85, 0xe8, 0xca, 0x70, 0x4a, 0xf3, 0x43, 0x28, 0x73, 0x95,
	0x63, 0x0a, 0x79, 0x3e, 0xea, 0x31, 0x8a, 0x48, 0xec, 0x46, 0xc9, 0x9b, 0x0c, 0xf6, 0xf7, 0xa1,
	0xb6, 0xe8, 0xae, 0x46, 0x39, 0x48, 0xbf, 0x39, 0xac, 0xa6, 0xc4, 0x6f, 0xb3, 0xaa, 0xed, 0xeb,
	0x00, 0x93, 0x9d, 0x45, 0x45, 0x58, 0x39, 0x7a, 0x75, 0x76, 0xca, 0x5b, 0x88, 0x22, 0xac, 0x1c,
	0x3f, 0x3e, 0x3b, 0x7e, 0x56, 0xd5, 0x9a, 0x7f, 0x56, 0x00, 0x26, 0x8d, 0x1e, 0x32, 0x21, 0xa7,
	0xba, 0x87, 0xff, 0xc5, 0x22, 0x5a, 0xd0, 0x29, 0xd6, 0x77, 0x3e, 0xe0, 0xa7, 0xa7, 0x90, 0x09,
	0x30, 0x69, 0x61, 0xd1, 0x6e, 0x0c, 0x30, 0xd3, 0x1c, 0xd7, 0x6f, 0x25, 0x78, 0xa8, 0xd6, 0x35,
	0x85, 0x7e, 0x84, 0xca, 0x54, 0x57, 0x8b, 0x6e, 0xc7, 0x50, 0xf3, 0xfa, 0xe3, 0xfa, 0x9d, 0x64,
	0xa7, 0x31, 0xfb, 0xe7, 0x90, 0xfd, 0x8e, 0xfc, 0x8c, 0xd1, 0x5a, 0xe4, 0xde, 0xe2, 0x86, 0xef,
	0x07, 0x38, 0x18, 0xd5, 0x37, 0x63, 0xd6, 0x08, 0xf0, 0x39, 0x54, 0x8e, 0x88, 0x77, 0xee, 0x5e,
	0x1c, 0x63, 0xf6, 0x84, 0x90, 0xde, 0x14, 0x83, 0x9c, 0xf9, 0x16, 0x8f, 0xea, 0xdb, 0x33, 0x56,
	0xe5, 0x2f, 0x2e, 0x59, 0x3d, 0x85, 0x4e, 0xa0, 0x2a, 0xed, 0x67, 0xbe, 0x63, 0x31, 0x2c, 0xa8,
	0xd6, 0x67, 0x40, 0xdc, 0x5c, 0xbf, 0x39, 0x63, 0x96, 0x98, 0x09, 0xd5, 0xaa, 0x34, 0xf3, 0x72,
	0x11, 0x44, 0xf5, 0x19, 0x04, 0x9f, 0x92, 0xda, 0x6e, 0xcc, 0x5d, 0x44, 0x3c, 0xa6, 0x29, 0xf4,
	0x02, 0xae, 0x8d, 0xa3, 0x35, 0x59, 0xc0, 0xd3, 0x3e, 0x5f, 0xdf, 0xce, 0x3c, 0x7d, 0x12, 0x11,
	0x86, 0xd5, 0x11, 0x9d, 0xe6, 0x38, 0x5a, 0x45, 0xb7, 0x39, 0x03, 0x94, 0x13, 0x1f, 0x54, 0xd9,
	0x09, 0x13, 0xc6, 0x43, 0x55, 0x64, 0x49, 0x3a, 0xb7, 0x16, 0x2c, 0x34, 0x47, 0xe9, 0x99, 0xeb,
	0xb1, 0x07, 0xcd, 0x65, 0x94, 0x4a, 0xc4, 0x02, 0xa5, 0x8a, 0x6e, 0x56, 0xa9, 0x9c, 0x58, 0x4e,
	0xa9, 0x22, 0x5b, 0x4e, 0xa9, 0x04, 0x2d, 0x50, 0xda, 0x6e, 0x2d, 0xab, 0xb4, 0xdd, 0x4a, 0x50,
	0xda, 0x6e, 0x2d, 0x50, 0xda, 0x6e, 0x2d, 0xaf, 0xb4, 0xdd, 0xba, 0x82, 0xd2, 0x76, 0x4b, 0x29,
	0xed, 0x40, 0x96, 0x3f, 0xb5, 0x33, 0x37, 0xd0, 0x4c, 0xeb, 0x31, 0x73, 0x03, 0xcd, 0xbe, 0xd0,
	0x7a, 0x0a, 0x59, 0xb0, 0x3a, 0x7d, 0x15, 0xa3, 0x3b, 0xc9, 0x5d, 0xb5, 0x22, 0xbf, 0xfb, 0x01,
	0xaf, 0x70, 0x81, 0x4f, 0x35, 0xc4, 0x60, 0x63, 0x7e, 0xcf, 0x89, 0x3e, 0x89, 0x91, 0x24, 0x76,
	0xb9, 0xf5, 0xfd, 0x8f, 0xf4, 0x96, 0x69, 0x67, 0xb0, 0x61, 0x7e, 0xdc, 0xaa, 0xe6, 0x52, 0xab,
	0x9a, 0x89, 0xab, 0xbe, 0x80, 0x7c, 0xf8, 0x46, 0x6e, 0xcf, 0x7d, 0x9c, 0xc7, 0x4f, 0xce, 0x7f,
	0x17, 0x4d, 0x87, 0x99, 0x7b, 0xd2, 0xfa, 0xa1, 0x69, 0x13, 0x07, 0x37, 0x28, 0x23, 0x81, 0x75,
	0x81, 0x09, 0x6d, 0x78, 0x98, 0x1d, 0x8c, 0x47, 0x07, 0x94, 0xa3, 0x6d, 0x7c, 0x30, 0xe1, 0x39,
	0x18, 0x1e, 0xbe, 0xcd, 0x89, 0x3f, 0x6c, 0x1e, 0xfc, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x4e,
	0x7d, 0xfc, 0xe1, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SupervisorClient is the client API for Supervisor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SupervisorClient interface {
	//*
	// Get program status.
	Status(ctx context.Context, in *SupervisorStatusRequest, opts ...grpc.CallOption) (*SupervisorStatus, error)
	//*
	// Reap a volume.
	ReapVolume(ctx context.Context, in *ReapVolumeRequest, opts ...grpc.CallOption) (*ReapVolumeResponse, error)
	//*
	// Delete a mapping, freeing associated resources.
	DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*DeleteMappingResponse, error)
	//*
	// Perform actions that really only make sense for very low-level testing.
	Poke(ctx context.Context, in *v1.PokeQuery, opts ...grpc.CallOption) (*v1.PokeResponse, error)
	// Config services, from common.v1.
	ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error)
	ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error)
	ConfigGetUint32(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint32Reply, error)
	ConfigUpdateUint32(ctx context.Context, in *v1.ConfigUint32, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListUint32(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint32List, error)
	ConfigGetUint64(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint64Reply, error)
	ConfigUpdateUint64(ctx context.Context, in *v1.ConfigUint64, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListUint64(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint64List, error)
	//*
	// Sync the specified region. Called by symmetra.
	Sync(ctx context.Context, in *SyncRegionRequest, opts ...grpc.CallOption) (*SyncRegionResponse, error)
	//*
	// Return a hash list for the specified volume, over the specified range.
	// Note: this is a streaming RPC as the hash lists returned could conceiveably
	// be multiple megabytes in size.
	//
	// returns the hash list and volume hash
	VolumeHashList(ctx context.Context, in *VolumeHashListRequest, opts ...grpc.CallOption) (Supervisor_VolumeHashListClient, error)
	//*
	//* Sync 2020.1 consumer count interface.
	GetVolumeConsumerCount(ctx context.Context, in *GetVolumeConsumerCountRequest, opts ...grpc.CallOption) (*GetVolumeConsumerCountReply, error)
	SetVolumeConsumerCount(ctx context.Context, in *SetVolumeConsumerCountRequest, opts ...grpc.CallOption) (*SetVolumeConsumerCountReply, error)
	//*
	// Collect the dataplane node-level metrics and specific per-volume metrics.
	// NOTE: This is an experimental dataplane-only API. It's probably not quite
	// what the control-plane requires in terms of a metrics API, but it's fine
	// for dataplane tooling and tests.
	Metrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type supervisorClient struct {
	cc *grpc.ClientConn
}

func NewSupervisorClient(cc *grpc.ClientConn) SupervisorClient {
	return &supervisorClient{cc}
}

func (c *supervisorClient) Status(ctx context.Context, in *SupervisorStatusRequest, opts ...grpc.CallOption) (*SupervisorStatus, error) {
	out := new(SupervisorStatus)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ReapVolume(ctx context.Context, in *ReapVolumeRequest, opts ...grpc.CallOption) (*ReapVolumeResponse, error) {
	out := new(ReapVolumeResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ReapVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) DeleteMapping(ctx context.Context, in *DeleteMappingRequest, opts ...grpc.CallOption) (*DeleteMappingResponse, error) {
	out := new(DeleteMappingResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/DeleteMapping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) Poke(ctx context.Context, in *v1.PokeQuery, opts ...grpc.CallOption) (*v1.PokeResponse, error) {
	out := new(v1.PokeResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/Poke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error) {
	out := new(v1.ConfigGetBoolReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigGetBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigUpdateBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error) {
	out := new(v1.ConfigBoolList)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigListBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error) {
	out := new(v1.ConfigGetStringReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigGetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigUpdateString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error) {
	out := new(v1.ConfigStringList)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigListString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigGetUint32(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint32Reply, error) {
	out := new(v1.ConfigGetUint32Reply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigGetUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigUpdateUint32(ctx context.Context, in *v1.ConfigUint32, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigUpdateUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigListUint32(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint32List, error) {
	out := new(v1.ConfigUint32List)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigListUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigGetUint64(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint64Reply, error) {
	out := new(v1.ConfigGetUint64Reply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigGetUint64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigUpdateUint64(ctx context.Context, in *v1.ConfigUint64, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigUpdateUint64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigListUint64(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint64List, error) {
	out := new(v1.ConfigUint64List)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigListUint64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) Sync(ctx context.Context, in *SyncRegionRequest, opts ...grpc.CallOption) (*SyncRegionResponse, error) {
	out := new(SyncRegionResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) VolumeHashList(ctx context.Context, in *VolumeHashListRequest, opts ...grpc.CallOption) (Supervisor_VolumeHashListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Supervisor_serviceDesc.Streams[0], "/supervisor.v1.Supervisor/VolumeHashList", opts...)
	if err != nil {
		return nil, err
	}
	x := &supervisorVolumeHashListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Supervisor_VolumeHashListClient interface {
	Recv() (*VolumeHashListResponse, error)
	grpc.ClientStream
}

type supervisorVolumeHashListClient struct {
	grpc.ClientStream
}

func (x *supervisorVolumeHashListClient) Recv() (*VolumeHashListResponse, error) {
	m := new(VolumeHashListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *supervisorClient) GetVolumeConsumerCount(ctx context.Context, in *GetVolumeConsumerCountRequest, opts ...grpc.CallOption) (*GetVolumeConsumerCountReply, error) {
	out := new(GetVolumeConsumerCountReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/GetVolumeConsumerCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) SetVolumeConsumerCount(ctx context.Context, in *SetVolumeConsumerCountRequest, opts ...grpc.CallOption) (*SetVolumeConsumerCountReply, error) {
	out := new(SetVolumeConsumerCountReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/SetVolumeConsumerCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) Metrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/Metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupervisorServer is the server API for Supervisor service.
type SupervisorServer interface {
	//*
	// Get program status.
	Status(context.Context, *SupervisorStatusRequest) (*SupervisorStatus, error)
	//*
	// Reap a volume.
	ReapVolume(context.Context, *ReapVolumeRequest) (*ReapVolumeResponse, error)
	//*
	// Delete a mapping, freeing associated resources.
	DeleteMapping(context.Context, *DeleteMappingRequest) (*DeleteMappingResponse, error)
	//*
	// Perform actions that really only make sense for very low-level testing.
	Poke(context.Context, *v1.PokeQuery) (*v1.PokeResponse, error)
	// Config services, from common.v1.
	ConfigGetBool(context.Context, *v1.ConfigKey) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(context.Context, *v1.ConfigBool) (*v1.ConfigUpdateReply, error)
	ConfigListBool(context.Context, *v1.ConfigListQuery) (*v1.ConfigBoolList, error)
	ConfigGetString(context.Context, *v1.ConfigKey) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(context.Context, *v1.ConfigString) (*v1.ConfigUpdateReply, error)
	ConfigListString(context.Context, *v1.ConfigListQuery) (*v1.ConfigStringList, error)
	ConfigGetUint32(context.Context, *v1.ConfigKey) (*v1.ConfigGetUint32Reply, error)
	ConfigUpdateUint32(context.Context, *v1.ConfigUint32) (*v1.ConfigUpdateReply, error)
	ConfigListUint32(context.Context, *v1.ConfigListQuery) (*v1.ConfigUint32List, error)
	ConfigGetUint64(context.Context, *v1.ConfigKey) (*v1.ConfigGetUint64Reply, error)
	ConfigUpdateUint64(context.Context, *v1.ConfigUint64) (*v1.ConfigUpdateReply, error)
	ConfigListUint64(context.Context, *v1.ConfigListQuery) (*v1.ConfigUint64List, error)
	//*
	// Sync the specified region. Called by symmetra.
	Sync(context.Context, *SyncRegionRequest) (*SyncRegionResponse, error)
	//*
	// Return a hash list for the specified volume, over the specified range.
	// Note: this is a streaming RPC as the hash lists returned could conceiveably
	// be multiple megabytes in size.
	//
	// returns the hash list and volume hash
	VolumeHashList(*VolumeHashListRequest, Supervisor_VolumeHashListServer) error
	//*
	//* Sync 2020.1 consumer count interface.
	GetVolumeConsumerCount(context.Context, *GetVolumeConsumerCountRequest) (*GetVolumeConsumerCountReply, error)
	SetVolumeConsumerCount(context.Context, *SetVolumeConsumerCountRequest) (*SetVolumeConsumerCountReply, error)
	//*
	// Collect the dataplane node-level metrics and specific per-volume metrics.
	// NOTE: This is an experimental dataplane-only API. It's probably not quite
	// what the control-plane requires in terms of a metrics API, but it's fine
	// for dataplane tooling and tests.
	Metrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
}

// UnimplementedSupervisorServer can be embedded to have forward compatible implementations.
type UnimplementedSupervisorServer struct {
}

func (*UnimplementedSupervisorServer) Status(ctx context.Context, req *SupervisorStatusRequest) (*SupervisorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedSupervisorServer) ReapVolume(ctx context.Context, req *ReapVolumeRequest) (*ReapVolumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReapVolume not implemented")
}
func (*UnimplementedSupervisorServer) DeleteMapping(ctx context.Context, req *DeleteMappingRequest) (*DeleteMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMapping not implemented")
}
func (*UnimplementedSupervisorServer) Poke(ctx context.Context, req *v1.PokeQuery) (*v1.PokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poke not implemented")
}
func (*UnimplementedSupervisorServer) ConfigGetBool(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetBoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetBool not implemented")
}
func (*UnimplementedSupervisorServer) ConfigUpdateBool(ctx context.Context, req *v1.ConfigBool) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateBool not implemented")
}
func (*UnimplementedSupervisorServer) ConfigListBool(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigBoolList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListBool not implemented")
}
func (*UnimplementedSupervisorServer) ConfigGetString(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetStringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetString not implemented")
}
func (*UnimplementedSupervisorServer) ConfigUpdateString(ctx context.Context, req *v1.ConfigString) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateString not implemented")
}
func (*UnimplementedSupervisorServer) ConfigListString(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigStringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListString not implemented")
}
func (*UnimplementedSupervisorServer) ConfigGetUint32(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetUint32Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetUint32 not implemented")
}
func (*UnimplementedSupervisorServer) ConfigUpdateUint32(ctx context.Context, req *v1.ConfigUint32) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateUint32 not implemented")
}
func (*UnimplementedSupervisorServer) ConfigListUint32(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigUint32List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListUint32 not implemented")
}
func (*UnimplementedSupervisorServer) ConfigGetUint64(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetUint64Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetUint64 not implemented")
}
func (*UnimplementedSupervisorServer) ConfigUpdateUint64(ctx context.Context, req *v1.ConfigUint64) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateUint64 not implemented")
}
func (*UnimplementedSupervisorServer) ConfigListUint64(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigUint64List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListUint64 not implemented")
}
func (*UnimplementedSupervisorServer) Sync(ctx context.Context, req *SyncRegionRequest) (*SyncRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (*UnimplementedSupervisorServer) VolumeHashList(req *VolumeHashListRequest, srv Supervisor_VolumeHashListServer) error {
	return status.Errorf(codes.Unimplemented, "method VolumeHashList not implemented")
}
func (*UnimplementedSupervisorServer) GetVolumeConsumerCount(ctx context.Context, req *GetVolumeConsumerCountRequest) (*GetVolumeConsumerCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVolumeConsumerCount not implemented")
}
func (*UnimplementedSupervisorServer) SetVolumeConsumerCount(ctx context.Context, req *SetVolumeConsumerCountRequest) (*SetVolumeConsumerCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVolumeConsumerCount not implemented")
}
func (*UnimplementedSupervisorServer) Metrics(ctx context.Context, req *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metrics not implemented")
}

func RegisterSupervisorServer(s *grpc.Server, srv SupervisorServer) {
	s.RegisterService(&_Supervisor_serviceDesc, srv)
}

func _Supervisor_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupervisorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).Status(ctx, req.(*SupervisorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ReapVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReapVolumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ReapVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ReapVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ReapVolume(ctx, req.(*ReapVolumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_DeleteMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMappingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).DeleteMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/DeleteMapping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).DeleteMapping(ctx, req.(*DeleteMappingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_Poke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PokeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).Poke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/Poke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).Poke(ctx, req.(*v1.PokeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigGetBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigGetBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigGetBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigGetBool(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigUpdateBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigBool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigUpdateBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigUpdateBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigUpdateBool(ctx, req.(*v1.ConfigBool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigListBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigListBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigListBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigListBool(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigGetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigGetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigGetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigGetString(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigUpdateString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigUpdateString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigUpdateString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigUpdateString(ctx, req.(*v1.ConfigString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigListString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigListString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigListString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigListString(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigGetUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigGetUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigGetUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigGetUint32(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigUpdateUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigUint32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigUpdateUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigUpdateUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigUpdateUint32(ctx, req.(*v1.ConfigUint32))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigListUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigListUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigListUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigListUint32(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigGetUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigGetUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigGetUint64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigGetUint64(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigUpdateUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigUint64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigUpdateUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigUpdateUint64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigUpdateUint64(ctx, req.(*v1.ConfigUint64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigListUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigListUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigListUint64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigListUint64(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).Sync(ctx, req.(*SyncRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_VolumeHashList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VolumeHashListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SupervisorServer).VolumeHashList(m, &supervisorVolumeHashListServer{stream})
}

type Supervisor_VolumeHashListServer interface {
	Send(*VolumeHashListResponse) error
	grpc.ServerStream
}

type supervisorVolumeHashListServer struct {
	grpc.ServerStream
}

func (x *supervisorVolumeHashListServer) Send(m *VolumeHashListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Supervisor_GetVolumeConsumerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeConsumerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).GetVolumeConsumerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/GetVolumeConsumerCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).GetVolumeConsumerCount(ctx, req.(*GetVolumeConsumerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_SetVolumeConsumerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVolumeConsumerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).SetVolumeConsumerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/SetVolumeConsumerCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).SetVolumeConsumerCount(ctx, req.(*SetVolumeConsumerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/Metrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).Metrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Supervisor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "supervisor.v1.Supervisor",
	HandlerType: (*SupervisorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Supervisor_Status_Handler,
		},
		{
			MethodName: "ReapVolume",
			Handler:    _Supervisor_ReapVolume_Handler,
		},
		{
			MethodName: "DeleteMapping",
			Handler:    _Supervisor_DeleteMapping_Handler,
		},
		{
			MethodName: "Poke",
			Handler:    _Supervisor_Poke_Handler,
		},
		{
			MethodName: "ConfigGetBool",
			Handler:    _Supervisor_ConfigGetBool_Handler,
		},
		{
			MethodName: "ConfigUpdateBool",
			Handler:    _Supervisor_ConfigUpdateBool_Handler,
		},
		{
			MethodName: "ConfigListBool",
			Handler:    _Supervisor_ConfigListBool_Handler,
		},
		{
			MethodName: "ConfigGetString",
			Handler:    _Supervisor_ConfigGetString_Handler,
		},
		{
			MethodName: "ConfigUpdateString",
			Handler:    _Supervisor_ConfigUpdateString_Handler,
		},
		{
			MethodName: "ConfigListString",
			Handler:    _Supervisor_ConfigListString_Handler,
		},
		{
			MethodName: "ConfigGetUint32",
			Handler:    _Supervisor_ConfigGetUint32_Handler,
		},
		{
			MethodName: "ConfigUpdateUint32",
			Handler:    _Supervisor_ConfigUpdateUint32_Handler,
		},
		{
			MethodName: "ConfigListUint32",
			Handler:    _Supervisor_ConfigListUint32_Handler,
		},
		{
			MethodName: "ConfigGetUint64",
			Handler:    _Supervisor_ConfigGetUint64_Handler,
		},
		{
			MethodName: "ConfigUpdateUint64",
			Handler:    _Supervisor_ConfigUpdateUint64_Handler,
		},
		{
			MethodName: "ConfigListUint64",
			Handler:    _Supervisor_ConfigListUint64_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _Supervisor_Sync_Handler,
		},
		{
			MethodName: "GetVolumeConsumerCount",
			Handler:    _Supervisor_GetVolumeConsumerCount_Handler,
		},
		{
			MethodName: "SetVolumeConsumerCount",
			Handler:    _Supervisor_SetVolumeConsumerCount_Handler,
		},
		{
			MethodName: "Metrics",
			Handler:    _Supervisor_Metrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VolumeHashList",
			Handler:       _Supervisor_VolumeHashList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "supervisor.proto",
}
