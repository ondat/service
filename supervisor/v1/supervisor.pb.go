// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1-devel
// 	protoc        v3.17.3
// source: supervisor.proto

package v1

import (
	v1 "code.storageos.net/storageos/service/common/v1"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of the deployment.
type DeploymentType int32

const (
	DeploymentType_UNKNOWN DeploymentType = 0
	DeploymentType_MASTER  DeploymentType = 1
	DeploymentType_REPLICA DeploymentType = 2
)

// Enum value maps for DeploymentType.
var (
	DeploymentType_name = map[int32]string{
		0: "UNKNOWN",
		1: "MASTER",
		2: "REPLICA",
	}
	DeploymentType_value = map[string]int32{
		"UNKNOWN": 0,
		"MASTER":  1,
		"REPLICA": 2,
	}
)

func (x DeploymentType) Enum() *DeploymentType {
	p := new(DeploymentType)
	*p = x
	return p
}

func (x DeploymentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentType) Descriptor() protoreflect.EnumDescriptor {
	return file_supervisor_proto_enumTypes[0].Descriptor()
}

func (DeploymentType) Type() protoreflect.EnumType {
	return &file_supervisor_proto_enumTypes[0]
}

func (x DeploymentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentType.Descriptor instead.
func (DeploymentType) EnumDescriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{0}
}

//
// Metrics
type MetricType int32

const (
	// Counters may only increase (like an odometer)
	MetricType_COUNT MetricType = 0
	// Gauges may fluctuate (like a speedometer)
	MetricType_GAUGE MetricType = 1
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "COUNT",
		1: "GAUGE",
	}
	MetricType_value = map[string]int32{
		"COUNT": 0,
		"GAUGE": 1,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_supervisor_proto_enumTypes[1].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_supervisor_proto_enumTypes[1]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{1}
}

type IdMapperStatus_MapMode int32

const (
	IdMapperStatus_NOTSET IdMapperStatus_MapMode = 0 // No value (new dataplane, never been configured).
	IdMapperStatus_GSI    IdMapperStatus_MapMode = 1 // Global-scope IDs (v1).
	IdMapperStatus_NLI    IdMapperStatus_MapMode = 2 // Node-local IDs (v2).
)

// Enum value maps for IdMapperStatus_MapMode.
var (
	IdMapperStatus_MapMode_name = map[int32]string{
		0: "NOTSET",
		1: "GSI",
		2: "NLI",
	}
	IdMapperStatus_MapMode_value = map[string]int32{
		"NOTSET": 0,
		"GSI":    1,
		"NLI":    2,
	}
)

func (x IdMapperStatus_MapMode) Enum() *IdMapperStatus_MapMode {
	p := new(IdMapperStatus_MapMode)
	*p = x
	return p
}

func (x IdMapperStatus_MapMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdMapperStatus_MapMode) Descriptor() protoreflect.EnumDescriptor {
	return file_supervisor_proto_enumTypes[2].Descriptor()
}

func (IdMapperStatus_MapMode) Type() protoreflect.EnumType {
	return &file_supervisor_proto_enumTypes[2]
}

func (x IdMapperStatus_MapMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdMapperStatus_MapMode.Descriptor instead.
func (IdMapperStatus_MapMode) EnumDescriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{23, 0}
}

type NodeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The remote peer's UUID
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The hostname of the remote peer
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The port of the remote peer normally 5703 (can be overriden by starting
	// the Dataplane with IO_BIND_PORT=<port>)
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Whether TLS is enabled for this connection (always true when the CP is
	// managing the DP).
	TlsEnabled bool `protobuf:"varint,4,opt,name=tls_enabled,json=tlsEnabled,proto3" json:"tls_enabled,omitempty"`
	// This field specifies the hostname to use when performing rfc2818
	// hostname verification of the remote end. If this field is empty
	// we use the dial address, i.e. `hostname`. With out current PKI
	// infrastructure this field should always be set by the CP as the
	// `hostname`, will never match the server Common Name in the server's
	// certificate
	OptVerifyHostname *string `protobuf:"bytes,5,opt,name=opt_verify_hostname,json=optVerifyHostname,proto3,oneof" json:"opt_verify_hostname,omitempty"`
}

func (x *NodeConfig) Reset() {
	*x = NodeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeConfig) ProtoMessage() {}

func (x *NodeConfig) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeConfig.ProtoReflect.Descriptor instead.
func (*NodeConfig) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{0}
}

func (x *NodeConfig) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *NodeConfig) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NodeConfig) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NodeConfig) GetTlsEnabled() bool {
	if x != nil {
		return x.TlsEnabled
	}
	return false
}

func (x *NodeConfig) GetOptVerifyHostname() string {
	if x != nil && x.OptVerifyHostname != nil {
		return *x.OptVerifyHostname
	}
	return ""
}

type DeploymentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Is this a master or a replica?
	DeploymentType DeploymentType `protobuf:"varint,1,opt,name=deployment_type,json=deploymentType,proto3,enum=supervisor.v1.DeploymentType" json:"deployment_type,omitempty"`
	// The deployment's UUID
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Not for CP use. The internal deployment ID used by the dataplane
	// Useful for dataplane testing and not much else
	Id uint32 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	// Whether the deployment uses compression. In reality this is a per volume
	// option. All deployments should use compression if the volume uses
	// compression. This field is also sticky, you can't choose to undo at a
	// later date. Compression is applied to the underlying block data which
	// is stored in the blob files. Normally we recommend disabling compression.
	UsesCompression bool `protobuf:"varint,4,opt,name=uses_compression,json=usesCompression,proto3" json:"uses_compression,omitempty"`
	// The consumer count for the volume.
	Cc *v1.ConsumerCount `protobuf:"bytes,5,opt,name=cc,proto3" json:"cc,omitempty"`
	// The replicas associated with this deployment. This field is only
	// valid if the deployment is a master deployment.
	Replicas []*DeploymentConfig_ReplicaAndLocation `protobuf:"bytes,6,rep,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *DeploymentConfig) Reset() {
	*x = DeploymentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentConfig) ProtoMessage() {}

func (x *DeploymentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentConfig.ProtoReflect.Descriptor instead.
func (*DeploymentConfig) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{1}
}

func (x *DeploymentConfig) GetDeploymentType() DeploymentType {
	if x != nil {
		return x.DeploymentType
	}
	return DeploymentType_UNKNOWN
}

func (x *DeploymentConfig) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DeploymentConfig) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeploymentConfig) GetUsesCompression() bool {
	if x != nil {
		return x.UsesCompression
	}
	return false
}

func (x *DeploymentConfig) GetCc() *v1.ConsumerCount {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *DeploymentConfig) GetReplicas() []*DeploymentConfig_ReplicaAndLocation {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type PresentationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An identifier for the presentation. There's no good reason why this should
	// be anything other than the UUID of the volume. Calling it anything else
	// will make debugging a nightmare.
	PresentationUuid string `protobuf:"bytes,1,opt,name=presentation_uuid,json=presentationUuid,proto3" json:"presentation_uuid,omitempty"`
	// Not for CP use. The internal master deployment ID used by the dataplane
	// Useful for dataplane testing and not much else
	PresentationId uint32 `protobuf:"varint,2,opt,name=presentation_id,json=presentationId,proto3" json:"presentation_id,omitempty"`
	// The filename of the block device we'll create for the volume under
	// /var/lib/storageos/volumes. Historically v.<volume_uuid>. Calling it
	// anything else will make debugging a nightmare.
	Filename string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	// The deployment we are presenting (always the master deployment).
	DeploymentUuid string `protobuf:"bytes,4,opt,name=deployment_uuid,json=deploymentUuid,proto3" json:"deployment_uuid,omitempty"`
	// Not for CP use. The internal master deployment ID used by the dataplane
	// Useful for dataplane testing and not much else
	DeploymentId uint32 `protobuf:"varint,5,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// The size of the volume in bytes
	Size uint64 `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	// Even though compression is applied on the deployments at the point where we we store
	// the blocks we need to know whether we are using compression when configuring the
	// presentation. This is because we disallow UNMAP support on block devices which are backing
	// compressed volumes (for performance reasons).
	UsesCompression bool `protobuf:"varint,7,opt,name=uses_compression,json=usesCompression,proto3" json:"uses_compression,omitempty"`
	// The consumer count of the volume
	Cc *v1.ConsumerCount `protobuf:"bytes,8,opt,name=cc,proto3" json:"cc,omitempty"`
	// Only present if the volume's master is on a remote node
	OptNodeConfig *NodeConfig `protobuf:"bytes,9,opt,name=opt_node_config,json=optNodeConfig,proto3,oneof" json:"opt_node_config,omitempty"`
	// If the volume is using encryption then the crypo parameters should be
	// specified here. Once we've started using encryption on a volume it's
	// impossible to undo it. The opposite is also true.
	OptVolumeCrypto *v1.VolumeCrypto `protobuf:"bytes,10,opt,name=opt_volume_crypto,json=optVolumeCrypto,proto3,oneof" json:"opt_volume_crypto,omitempty"`
}

func (x *PresentationConfig) Reset() {
	*x = PresentationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresentationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresentationConfig) ProtoMessage() {}

func (x *PresentationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresentationConfig.ProtoReflect.Descriptor instead.
func (*PresentationConfig) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{2}
}

func (x *PresentationConfig) GetPresentationUuid() string {
	if x != nil {
		return x.PresentationUuid
	}
	return ""
}

func (x *PresentationConfig) GetPresentationId() uint32 {
	if x != nil {
		return x.PresentationId
	}
	return 0
}

func (x *PresentationConfig) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *PresentationConfig) GetDeploymentUuid() string {
	if x != nil {
		return x.DeploymentUuid
	}
	return ""
}

func (x *PresentationConfig) GetDeploymentId() uint32 {
	if x != nil {
		return x.DeploymentId
	}
	return 0
}

func (x *PresentationConfig) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PresentationConfig) GetUsesCompression() bool {
	if x != nil {
		return x.UsesCompression
	}
	return false
}

func (x *PresentationConfig) GetCc() *v1.ConsumerCount {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *PresentationConfig) GetOptNodeConfig() *NodeConfig {
	if x != nil {
		return x.OptNodeConfig
	}
	return nil
}

func (x *PresentationConfig) GetOptVolumeCrypto() *v1.VolumeCrypto {
	if x != nil {
		return x.OptVolumeCrypto
	}
	return nil
}

type PresentationScsiDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host block device major number.
	Major uint32 `protobuf:"varint,1,opt,name=major,proto3" json:"major,omitempty"`
	// The host block device minor number.
	Minor uint32 `protobuf:"varint,2,opt,name=minor,proto3" json:"minor,omitempty"`
}

func (x *PresentationScsiDevice) Reset() {
	*x = PresentationScsiDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PresentationScsiDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PresentationScsiDevice) ProtoMessage() {}

func (x *PresentationScsiDevice) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PresentationScsiDevice.ProtoReflect.Descriptor instead.
func (*PresentationScsiDevice) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{3}
}

func (x *PresentationScsiDevice) GetMajor() uint32 {
	if x != nil {
		return x.Major
	}
	return 0
}

func (x *PresentationScsiDevice) GetMinor() uint32 {
	if x != nil {
		return x.Minor
	}
	return 0
}

type SupervisorStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SupervisorStatusRequest) Reset() {
	*x = SupervisorStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupervisorStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupervisorStatusRequest) ProtoMessage() {}

func (x *SupervisorStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupervisorStatusRequest.ProtoReflect.Descriptor instead.
func (*SupervisorStatusRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{4}
}

type SupervisorStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In the event of failure, what went wrong
	RpcResult *v1.RpcResult `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
	// Generic daemon status.
	Status *v1.DaemonStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// Composite Id Mapper status.
	IdmapStatus *IdMapperStatus `protobuf:"bytes,3,opt,name=idmap_status,json=idmapStatus,proto3" json:"idmap_status,omitempty"`
	// Composite consumer count status.
	CcStatus *ConsumerCountStatus `protobuf:"bytes,4,opt,name=cc_status,json=ccStatus,proto3" json:"cc_status,omitempty"`
}

func (x *SupervisorStatusResponse) Reset() {
	*x = SupervisorStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupervisorStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupervisorStatusResponse) ProtoMessage() {}

func (x *SupervisorStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupervisorStatusResponse.ProtoReflect.Descriptor instead.
func (*SupervisorStatusResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{5}
}

func (x *SupervisorStatusResponse) GetRpcResult() *v1.RpcResult {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

func (x *SupervisorStatusResponse) GetStatus() *v1.DaemonStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *SupervisorStatusResponse) GetIdmapStatus() *IdMapperStatus {
	if x != nil {
		return x.IdmapStatus
	}
	return nil
}

func (x *SupervisorStatusResponse) GetCcStatus() *ConsumerCountStatus {
	if x != nil {
		return x.CcStatus
	}
	return nil
}

type ConfigureDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *DeploymentConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigureDeploymentRequest) Reset() {
	*x = ConfigureDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureDeploymentRequest) ProtoMessage() {}

func (x *ConfigureDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureDeploymentRequest.ProtoReflect.Descriptor instead.
func (*ConfigureDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigureDeploymentRequest) GetConfig() *DeploymentConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigureDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult *v1.RpcResult `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
}

func (x *ConfigureDeploymentResponse) Reset() {
	*x = ConfigureDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigureDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureDeploymentResponse) ProtoMessage() {}

func (x *ConfigureDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureDeploymentResponse.ProtoReflect.Descriptor instead.
func (*ConfigureDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{7}
}

func (x *ConfigureDeploymentResponse) GetRpcResult() *v1.RpcResult {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

type DeconfigureDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeconfigureDeploymentRequest) Reset() {
	*x = DeconfigureDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeconfigureDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeconfigureDeploymentRequest) ProtoMessage() {}

func (x *DeconfigureDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeconfigureDeploymentRequest.ProtoReflect.Descriptor instead.
func (*DeconfigureDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{8}
}

func (x *DeconfigureDeploymentRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DeconfigureDeploymentRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeconfigureDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult *v1.RpcResult `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
}

func (x *DeconfigureDeploymentResponse) Reset() {
	*x = DeconfigureDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeconfigureDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeconfigureDeploymentResponse) ProtoMessage() {}

func (x *DeconfigureDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeconfigureDeploymentResponse.ProtoReflect.Descriptor instead.
func (*DeconfigureDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{9}
}

func (x *DeconfigureDeploymentResponse) GetRpcResult() *v1.RpcResult {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

type DeleteDeploymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDeploymentRequest) Reset() {
	*x = DeleteDeploymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeploymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeploymentRequest) ProtoMessage() {}

func (x *DeleteDeploymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeploymentRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeploymentRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteDeploymentRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DeleteDeploymentRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteDeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult *v1.RpcResult `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
}

func (x *DeleteDeploymentResponse) Reset() {
	*x = DeleteDeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeploymentResponse) ProtoMessage() {}

func (x *DeleteDeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeploymentResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeploymentResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDeploymentResponse) GetRpcResult() *v1.RpcResult {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

type ConfigurePresentationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *PresentationConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigurePresentationRequest) Reset() {
	*x = ConfigurePresentationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurePresentationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurePresentationRequest) ProtoMessage() {}

func (x *ConfigurePresentationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurePresentationRequest.ProtoReflect.Descriptor instead.
func (*ConfigurePresentationRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{12}
}

func (x *ConfigurePresentationRequest) GetConfig() *PresentationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigurePresentationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult  *v1.RpcResult           `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
	DeviceInfo *PresentationScsiDevice `protobuf:"bytes,2,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`
}

func (x *ConfigurePresentationResponse) Reset() {
	*x = ConfigurePresentationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurePresentationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurePresentationResponse) ProtoMessage() {}

func (x *ConfigurePresentationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurePresentationResponse.ProtoReflect.Descriptor instead.
func (*ConfigurePresentationResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigurePresentationResponse) GetRpcResult() *v1.RpcResult {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

func (x *ConfigurePresentationResponse) GetDeviceInfo() *PresentationScsiDevice {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

type DeconfigurePresentationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PresentationUuid string `protobuf:"bytes,1,opt,name=presentation_uuid,json=presentationUuid,proto3" json:"presentation_uuid,omitempty"`
	PresentationId   uint32 `protobuf:"varint,2,opt,name=presentation_id,json=presentationId,proto3" json:"presentation_id,omitempty"`
}

func (x *DeconfigurePresentationRequest) Reset() {
	*x = DeconfigurePresentationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeconfigurePresentationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeconfigurePresentationRequest) ProtoMessage() {}

func (x *DeconfigurePresentationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeconfigurePresentationRequest.ProtoReflect.Descriptor instead.
func (*DeconfigurePresentationRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{14}
}

func (x *DeconfigurePresentationRequest) GetPresentationUuid() string {
	if x != nil {
		return x.PresentationUuid
	}
	return ""
}

func (x *DeconfigurePresentationRequest) GetPresentationId() uint32 {
	if x != nil {
		return x.PresentationId
	}
	return 0
}

type DeconfigurePresentationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult *v1.RpcResult `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
}

func (x *DeconfigurePresentationResponse) Reset() {
	*x = DeconfigurePresentationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeconfigurePresentationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeconfigurePresentationResponse) ProtoMessage() {}

func (x *DeconfigurePresentationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeconfigurePresentationResponse.ProtoReflect.Descriptor instead.
func (*DeconfigurePresentationResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{15}
}

func (x *DeconfigurePresentationResponse) GetRpcResult() *v1.RpcResult {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

type SetConsumerCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Id   uint32            `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Cc   *v1.ConsumerCount `protobuf:"bytes,3,opt,name=cc,proto3" json:"cc,omitempty"`
}

func (x *SetConsumerCountRequest) Reset() {
	*x = SetConsumerCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConsumerCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConsumerCountRequest) ProtoMessage() {}

func (x *SetConsumerCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConsumerCountRequest.ProtoReflect.Descriptor instead.
func (*SetConsumerCountRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{16}
}

func (x *SetConsumerCountRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SetConsumerCountRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SetConsumerCountRequest) GetCc() *v1.ConsumerCount {
	if x != nil {
		return x.Cc
	}
	return nil
}

type SetConsumerCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult *v1.RpcResult     `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
	Cc        *v1.ConsumerCount `protobuf:"bytes,2,opt,name=cc,proto3" json:"cc,omitempty"`
}

func (x *SetConsumerCountResponse) Reset() {
	*x = SetConsumerCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConsumerCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConsumerCountResponse) ProtoMessage() {}

func (x *SetConsumerCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConsumerCountResponse.ProtoReflect.Descriptor instead.
func (*SetConsumerCountResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{17}
}

func (x *SetConsumerCountResponse) GetRpcResult() *v1.RpcResult {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

func (x *SetConsumerCountResponse) GetCc() *v1.ConsumerCount {
	if x != nil {
		return x.Cc
	}
	return nil
}

type GetConsumerCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetConsumerCountRequest) Reset() {
	*x = GetConsumerCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsumerCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsumerCountRequest) ProtoMessage() {}

func (x *GetConsumerCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsumerCountRequest.ProtoReflect.Descriptor instead.
func (*GetConsumerCountRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{18}
}

func (x *GetConsumerCountRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetConsumerCountRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetConsumerCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult *v1.RpcResult     `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
	Cc        *v1.ConsumerCount `protobuf:"bytes,2,opt,name=cc,proto3" json:"cc,omitempty"`
}

func (x *GetConsumerCountResponse) Reset() {
	*x = GetConsumerCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConsumerCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsumerCountResponse) ProtoMessage() {}

func (x *GetConsumerCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsumerCountResponse.ProtoReflect.Descriptor instead.
func (*GetConsumerCountResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{19}
}

func (x *GetConsumerCountResponse) GetRpcResult() *v1.RpcResult {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

func (x *GetConsumerCountResponse) GetCc() *v1.ConsumerCount {
	if x != nil {
		return x.Cc
	}
	return nil
}

type DumpConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DumpConfigRequest) Reset() {
	*x = DumpConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpConfigRequest) ProtoMessage() {}

func (x *DumpConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpConfigRequest.ProtoReflect.Descriptor instead.
func (*DumpConfigRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{20}
}

type DumpConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployments   map[string]*DumpConfigResponse_DeploymentConfigBundle   `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Presentations map[string]*DumpConfigResponse_PresentationConfigBundle `protobuf:"bytes,2,rep,name=presentations,proto3" json:"presentations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Connections   map[string]*Connection                                  `protobuf:"bytes,3,rep,name=connections,proto3" json:"connections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DumpConfigResponse) Reset() {
	*x = DumpConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpConfigResponse) ProtoMessage() {}

func (x *DumpConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpConfigResponse.ProtoReflect.Descriptor instead.
func (*DumpConfigResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{21}
}

func (x *DumpConfigResponse) GetDeployments() map[string]*DumpConfigResponse_DeploymentConfigBundle {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *DumpConfigResponse) GetPresentations() map[string]*DumpConfigResponse_PresentationConfigBundle {
	if x != nil {
		return x.Presentations
	}
	return nil
}

func (x *DumpConfigResponse) GetConnections() map[string]*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type IdMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Inode uint32 `protobuf:"varint,2,opt,name=inode,proto3" json:"inode,omitempty"`
}

func (x *IdMapping) Reset() {
	*x = IdMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdMapping) ProtoMessage() {}

func (x *IdMapping) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdMapping.ProtoReflect.Descriptor instead.
func (*IdMapping) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{22}
}

func (x *IdMapping) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *IdMapping) GetInode() uint32 {
	if x != nil {
		return x.Inode
	}
	return 0
}

type IdMapperStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map mode, only valid if mode_set==true.
	Mode IdMapperStatus_MapMode `protobuf:"varint,2,opt,name=mode,proto3,enum=supervisor.v1.IdMapperStatus_MapMode" json:"mode,omitempty"`
	// A list of mappings.
	Mappings []*IdMapping `protobuf:"bytes,3,rep,name=mappings,proto3" json:"mappings,omitempty"`
}

func (x *IdMapperStatus) Reset() {
	*x = IdMapperStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdMapperStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdMapperStatus) ProtoMessage() {}

func (x *IdMapperStatus) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdMapperStatus.ProtoReflect.Descriptor instead.
func (*IdMapperStatus) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{23}
}

func (x *IdMapperStatus) GetMode() IdMapperStatus_MapMode {
	if x != nil {
		return x.Mode
	}
	return IdMapperStatus_NOTSET
}

func (x *IdMapperStatus) GetMappings() []*IdMapping {
	if x != nil {
		return x.Mappings
	}
	return nil
}

type ConsumerCountStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Just a list of counts and mappings.
	Ccs []*ConsumerCountEntry `protobuf:"bytes,1,rep,name=ccs,proto3" json:"ccs,omitempty"`
}

func (x *ConsumerCountStatus) Reset() {
	*x = ConsumerCountStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerCountStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerCountStatus) ProtoMessage() {}

func (x *ConsumerCountStatus) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerCountStatus.ProtoReflect.Descriptor instead.
func (*ConsumerCountStatus) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{24}
}

func (x *ConsumerCountStatus) GetCcs() []*ConsumerCountEntry {
	if x != nil {
		return x.Ccs
	}
	return nil
}

type ConsumerCountEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The mapping for which we're returning a CC.
	Mapping *IdMapping `protobuf:"bytes,1,opt,name=mapping,proto3" json:"mapping,omitempty"`
	// The cc for the provided mapping.
	Cc *v1.ConsumerCount `protobuf:"bytes,2,opt,name=cc,proto3" json:"cc,omitempty"`
}

func (x *ConsumerCountEntry) Reset() {
	*x = ConsumerCountEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumerCountEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumerCountEntry) ProtoMessage() {}

func (x *ConsumerCountEntry) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumerCountEntry.ProtoReflect.Descriptor instead.
func (*ConsumerCountEntry) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{25}
}

func (x *ConsumerCountEntry) GetMapping() *IdMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

func (x *ConsumerCountEntry) GetCc() *v1.ConsumerCount {
	if x != nil {
		return x.Cc
	}
	return nil
}

// Syncing a volume is a multi stage process:
//
// * first the CP invokes symmetra (a standalone binary), which then
// * calls the DeploymentHashList() RPC for the master and replica deployments
// * symmetra then calls the SyncRegions() RPC multiple times on the master to copy the
//   data
//
// We want to be able to track this transaction across it's entire duration.
// The SyncContext message type allows us to do this. When symmetra is first
// invoked it generates the SyncContext. This token is then passed in all
// subsequent DeploymentHashListRequests and SyncRegionRequests. Any code taking
// part in the sync operation can then log this ID as part of any structued
// logging calls.
//
// UUIDs seem to be in fashion at the moment so we'll use that as the unique
// identifier.
type SyncContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *SyncContext) Reset() {
	*x = SyncContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncContext) ProtoMessage() {}

func (x *SyncContext) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncContext.ProtoReflect.Descriptor instead.
func (*SyncContext) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{26}
}

func (x *SyncContext) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DeploymentHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// There's no way to define this in the proto but bytes.size() is always
	// sizeof(HashType_t). Currently 16 bytes.
	Bytes []byte `protobuf:"bytes,1,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *DeploymentHash) Reset() {
	*x = DeploymentHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentHash) ProtoMessage() {}

func (x *DeploymentHash) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentHash.ProtoReflect.Descriptor instead.
func (*DeploymentHash) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{27}
}

func (x *DeploymentHash) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

// Note: the response to this message, DeploymentHashListResponse, is chunked
// (streamed in gRPC parlance).
type DeploymentHashListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deployment we want to generate a hash over
	DeploymentId uint32 `protobuf:"varint,1,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	// The deployment UUID we want to generate a hash over.
	DeploymentUuid string `protobuf:"bytes,2,opt,name=deployment_uuid,json=deploymentUuid,proto3" json:"deployment_uuid,omitempty"`
	// Defines the byte offset into `deployment_id` at which we'll start hash list
	// generation.
	StartOffset uint64 `protobuf:"varint,3,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	// Defines the byte offset into `deployment_id` at which we'll end hash list
	// generation.
	EndOffset uint64 `protobuf:"varint,4,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	// When generating the hash list we do so by rolling together individual
	// block hashes into a region hash. This field defines the size of that
	// region in bytes. It must be multiple of RIXIO_BSIZE. By giving the option
	// for clients to specify this size they can optimise based on deployment size
	// and required sync granularity.
	RegionSize uint64 `protobuf:"varint,5,opt,name=region_size,json=regionSize,proto3" json:"region_size,omitempty"`
	// This field is redundant (i.e it's ignored) as of release v2.5.0. We've
	// had to keep it in order that we don't break older builds which pin the
	// service repo to origin/main rather than an explicit commit. See a more
	// thorough explanation on the Sync RPC documentation in this file (DP-452).
	IsCompressed bool `protobuf:"varint,6,opt,name=is_compressed,json=isCompressed,proto3" json:"is_compressed,omitempty"`
	// The SyncContext, initially generated by symmetra, associated with the
	// over-arching sync operation This field is purely used for logging, so
	// there's no harm in not setting it in test code
	SyncContext *SyncContext `protobuf:"bytes,7,opt,name=sync_context,json=syncContext,proto3" json:"sync_context,omitempty"`
}

func (x *DeploymentHashListRequest) Reset() {
	*x = DeploymentHashListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentHashListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentHashListRequest) ProtoMessage() {}

func (x *DeploymentHashListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentHashListRequest.ProtoReflect.Descriptor instead.
func (*DeploymentHashListRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{28}
}

func (x *DeploymentHashListRequest) GetDeploymentId() uint32 {
	if x != nil {
		return x.DeploymentId
	}
	return 0
}

func (x *DeploymentHashListRequest) GetDeploymentUuid() string {
	if x != nil {
		return x.DeploymentUuid
	}
	return ""
}

func (x *DeploymentHashListRequest) GetStartOffset() uint64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *DeploymentHashListRequest) GetEndOffset() uint64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *DeploymentHashListRequest) GetRegionSize() uint64 {
	if x != nil {
		return x.RegionSize
	}
	return 0
}

func (x *DeploymentHashListRequest) GetIsCompressed() bool {
	if x != nil {
		return x.IsCompressed
	}
	return false
}

func (x *DeploymentHashListRequest) GetSyncContext() *SyncContext {
	if x != nil {
		return x.SyncContext
	}
	return nil
}

// This message is streamed back to the client in response to a
// DeploymentHashListRequest message. As such the client should expect to receive
// many of these messages. Each DeploymentHashListResponse contains the hash list
// for a sequential portion of the deployment. For simplicity the deployment_hash -- i.e
// the hash for the range [start_offset, end_offset) as specified in the initial
// DeploymentHashListRequest
// -- is stored in every message.
type DeploymentHashListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash over the region [start_offset, end_offset) as specified in the
	// initial DeploymentHashListRequest
	DeploymentHash *DeploymentHash `protobuf:"bytes,1,opt,name=deployment_hash,json=deploymentHash,proto3" json:"deployment_hash,omitempty"`
	// Defines the byte offset into `deployment_id` at which hash_list[0] begins.
	StartOffset uint64 `protobuf:"varint,2,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	// Defines the byte offset into `deployment_id` at which hash_list[max] ends.
	EndOffset uint64 `protobuf:"varint,3,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	// A list of region hashes pertaining to the regions defined by the byte
	// range [start_offset, end_offset). The number of regions depends on the
	// `region_size` defined in the inital DeploymentHashListRequest.
	HashList []*DeploymentHash `protobuf:"bytes,4,rep,name=hash_list,json=hashList,proto3" json:"hash_list,omitempty"`
}

func (x *DeploymentHashListResponse) Reset() {
	*x = DeploymentHashListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentHashListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentHashListResponse) ProtoMessage() {}

func (x *DeploymentHashListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentHashListResponse.ProtoReflect.Descriptor instead.
func (*DeploymentHashListResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{29}
}

func (x *DeploymentHashListResponse) GetDeploymentHash() *DeploymentHash {
	if x != nil {
		return x.DeploymentHash
	}
	return nil
}

func (x *DeploymentHashListResponse) GetStartOffset() uint64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *DeploymentHashListResponse) GetEndOffset() uint64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *DeploymentHashListResponse) GetHashList() []*DeploymentHash {
	if x != nil {
		return x.HashList
	}
	return nil
}

type Metric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The metric name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Counter or gauge
	Type MetricType `protobuf:"varint,2,opt,name=type,proto3,enum=supervisor.v1.MetricType" json:"type,omitempty"`
	// Instantaneous value
	Value uint64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Metric) Reset() {
	*x = Metric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{30}
}

func (x *Metric) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metric) GetType() MetricType {
	if x != nil {
		return x.Type
	}
	return MetricType_COUNT
}

func (x *Metric) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type MetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of volumes to query (by internal ID). If this and uuids is left empty
	// we'll return metrics for all volumes which are configured.
	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	// A list of volume to query (by uuid). If this and uuids is left empty
	// we'll return metrircs for all volumes which are configured.
	Uuids []string `protobuf:"bytes,2,rep,name=uuids,proto3" json:"uuids,omitempty"`
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{31}
}

func (x *MetricsRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *MetricsRequest) GetUuids() []string {
	if x != nil {
		return x.Uuids
	}
	return nil
}

type VolumeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The volume this collection of metrics belongs to
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The volume this collection of metrics belongs to
	Uuid    string    `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Metrics []*Metric `protobuf:"bytes,3,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *VolumeMetrics) Reset() {
	*x = VolumeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VolumeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VolumeMetrics) ProtoMessage() {}

func (x *VolumeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VolumeMetrics.ProtoReflect.Descriptor instead.
func (*VolumeMetrics) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{32}
}

func (x *VolumeMetrics) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VolumeMetrics) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *VolumeMetrics) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// Node-level metrics are metrics which aren't specific to a volume.
type NodeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *NodeMetrics) Reset() {
	*x = NodeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMetrics) ProtoMessage() {}

func (x *NodeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMetrics.ProtoReflect.Descriptor instead.
func (*NodeMetrics) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{33}
}

func (x *NodeMetrics) GetMetrics() []*Metric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type MetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Per volume stats. One collection of metrics per requested volume.
	VolumeMetrics []*VolumeMetrics `protobuf:"bytes,1,rep,name=volume_metrics,json=volumeMetrics,proto3" json:"volume_metrics,omitempty"`
	// Per node stats. One collection per node.
	NodeMetrics *NodeMetrics `protobuf:"bytes,2,opt,name=node_metrics,json=nodeMetrics,proto3" json:"node_metrics,omitempty"`
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{34}
}

func (x *MetricsResponse) GetVolumeMetrics() []*VolumeMetrics {
	if x != nil {
		return x.VolumeMetrics
	}
	return nil
}

func (x *MetricsResponse) GetNodeMetrics() *NodeMetrics {
	if x != nil {
		return x.NodeMetrics
	}
	return nil
}

type ListConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListConnectionsRequest) Reset() {
	*x = ListConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionsRequest) ProtoMessage() {}

func (x *ListConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionsRequest.ProtoReflect.Descriptor instead.
func (*ListConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{35}
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The remote peer's UUID
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// The hostname of the remote peer
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The port of the remote peer normally 5703 (can be overriden by starting
	// the Dataplane with IO_BIND_PORT=<port>)
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// Whether or not a connection is established with the remote peer
	Connected bool `protobuf:"varint,4,opt,name=connected,proto3" json:"connected,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{36}
}

func (x *Connection) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Connection) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Connection) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Connection) GetConnected() bool {
	if x != nil {
		return x.Connected
	}
	return false
}

type ListConnectionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of connections keyed by UUID. That's the only field we can
	// guarantee is unique. hostname need not be (for example in DP unit
	// test which spin up multiple dataplanes on the same node)
	Connections map[string]*Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListConnectionsResponse) Reset() {
	*x = ListConnectionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConnectionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConnectionsResponse) ProtoMessage() {}

func (x *ListConnectionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConnectionsResponse.ProtoReflect.Descriptor instead.
func (*ListConnectionsResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{37}
}

func (x *ListConnectionsResponse) GetConnections() map[string]*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

// Rpcs used for debugging
type AddConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *NodeConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *AddConnectionRequest) Reset() {
	*x = AddConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddConnectionRequest) ProtoMessage() {}

func (x *AddConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddConnectionRequest.ProtoReflect.Descriptor instead.
func (*AddConnectionRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{38}
}

func (x *AddConnectionRequest) GetConfig() *NodeConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type AddConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult *v1.RpcResult `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
}

func (x *AddConnectionResponse) Reset() {
	*x = AddConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddConnectionResponse) ProtoMessage() {}

func (x *AddConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddConnectionResponse.ProtoReflect.Descriptor instead.
func (*AddConnectionResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{39}
}

func (x *AddConnectionResponse) GetRpcResult() *v1.RpcResult {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

type RemoveConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *NodeConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *RemoveConnectionRequest) Reset() {
	*x = RemoveConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConnectionRequest) ProtoMessage() {}

func (x *RemoveConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConnectionRequest.ProtoReflect.Descriptor instead.
func (*RemoveConnectionRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{40}
}

func (x *RemoveConnectionRequest) GetConfig() *NodeConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type RemoveConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcResult *v1.RpcResult `protobuf:"bytes,1,opt,name=rpc_result,json=rpcResult,proto3" json:"rpc_result,omitempty"`
}

func (x *RemoveConnectionResponse) Reset() {
	*x = RemoveConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveConnectionResponse) ProtoMessage() {}

func (x *RemoveConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveConnectionResponse.ProtoReflect.Descriptor instead.
func (*RemoveConnectionResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{41}
}

func (x *RemoveConnectionResponse) GetRpcResult() *v1.RpcResult {
	if x != nil {
		return x.RpcResult
	}
	return nil
}

type SyncRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartOffset uint64 `protobuf:"varint,1,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset   uint64 `protobuf:"varint,2,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
}

func (x *SyncRegion) Reset() {
	*x = SyncRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRegion) ProtoMessage() {}

func (x *SyncRegion) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRegion.ProtoReflect.Descriptor instead.
func (*SyncRegion) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{42}
}

func (x *SyncRegion) GetStartOffset() uint64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *SyncRegion) GetEndOffset() uint64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

type SyncRegionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source volume ID.
	SourceId uint32 `protobuf:"varint,1,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	// The source UUID.
	// This field is used as the volume identifier over destination_id if
	// destination_id is set to INVALID_INODE;
	SourceUuid string `protobuf:"bytes,2,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	// The destination volume ID.
	DestinationId uint32 `protobuf:"varint,3,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	// The destination UUID.
	// This field is used as the volume identifier over destination_volume if
	// destination_volume is set to INVALID_INODE;
	DestinationUuid string `protobuf:"bytes,4,opt,name=destination_uuid,json=destinationUuid,proto3" json:"destination_uuid,omitempty"`
	// The regions to sync
	Regions []*SyncRegion `protobuf:"bytes,5,rep,name=regions,proto3" json:"regions,omitempty"`
	// Whether the sync should be forced. If this flag is set we'll overwrite
	// every sync block transaction ID with TransactionId{node_cc, 0}, where
	// node_cc is the consumer count of the source volume. See sync2020.pdf for
	// the rationale behind this.
	Force bool `protobuf:"varint,6,opt,name=force,proto3" json:"force,omitempty"`
	// The SyncContext, initially generated by symmetra, associated with the
	// over-arching sync operation This field is purely used for logging, so
	// there's no harm in not setting it in test code
	SyncContext *SyncContext `protobuf:"bytes,7,opt,name=sync_context,json=syncContext,proto3" json:"sync_context,omitempty"`
	// If set we'll wait for the network connection between the sync source (the
	// master) and the sync target (the replica) to establish before trying to
	// sync any data. If the network connection never establishes then we'll
	// fail the operation. We'll wait for up to 1.5 times the directfs initiator
	// reconnection interval before giving up.
	//
	// This feature was added as a result of DP-280 and addresses the problem
	// where the CP configures the directfs initiator connection and starts the
	// sync operation before the connection is established. Something like this:
	// 1. CP configures connection from node A to node B
	// 2. Node B reboots
	// 3. Node A sits there in a retry loop trying to re-establish connection A
	// -> B,
	//    this happens every 5 seconds CP runs symmetra.
	// 4. The hash list generation succeeds on node A and node B in couple of
	// milliseconds
	// 5. Symmetra start's syncing data, and fails immediately as we still don't
	// have an
	//    established connection between A and B
	// 6. Eventually connection A -> B succeeds
	// 7. CP throws away the replica because the sync fails
	//
	// The intention is that this boolean will be set true for the first
	// SyncRegionsRequest sent by symmetra for a given sync operation. All
	// subsequent requests will set the boolean to false - we don't want to
	// stall the sync process by continually waiting for a flappy network.
	WaitForConnectionEstablished bool `protobuf:"varint,8,opt,name=wait_for_connection_established,json=waitForConnectionEstablished,proto3" json:"wait_for_connection_established,omitempty"`
}

func (x *SyncRegionsRequest) Reset() {
	*x = SyncRegionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRegionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRegionsRequest) ProtoMessage() {}

func (x *SyncRegionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRegionsRequest.ProtoReflect.Descriptor instead.
func (*SyncRegionsRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{43}
}

func (x *SyncRegionsRequest) GetSourceId() uint32 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *SyncRegionsRequest) GetSourceUuid() string {
	if x != nil {
		return x.SourceUuid
	}
	return ""
}

func (x *SyncRegionsRequest) GetDestinationId() uint32 {
	if x != nil {
		return x.DestinationId
	}
	return 0
}

func (x *SyncRegionsRequest) GetDestinationUuid() string {
	if x != nil {
		return x.DestinationUuid
	}
	return ""
}

func (x *SyncRegionsRequest) GetRegions() []*SyncRegion {
	if x != nil {
		return x.Regions
	}
	return nil
}

func (x *SyncRegionsRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *SyncRegionsRequest) GetSyncContext() *SyncContext {
	if x != nil {
		return x.SyncContext
	}
	return nil
}

func (x *SyncRegionsRequest) GetWaitForConnectionEstablished() bool {
	if x != nil {
		return x.WaitForConnectionEstablished
	}
	return false
}

type SyncRegionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the operation was successful.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// If the operation was not successful, this is an explanatory message as to
	// why.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SyncRegionsResponse) Reset() {
	*x = SyncRegionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRegionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRegionsResponse) ProtoMessage() {}

func (x *SyncRegionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRegionsResponse.ProtoReflect.Descriptor instead.
func (*SyncRegionsResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{44}
}

func (x *SyncRegionsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SyncRegionsResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// DEPRECATED post 2.5.0-ga see comment on SyncRegion RPC definition
type SyncRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source volume ID.
	SourceVolume uint64 `protobuf:"varint,1,opt,name=source_volume,json=sourceVolume,proto3" json:"source_volume,omitempty"`
	// The source UUID.
	// This field is used as the volume identifier over destination_volume if
	// destination_volume is set to INVALID_INODE;
	SourceUuid string `protobuf:"bytes,2,opt,name=source_uuid,json=sourceUuid,proto3" json:"source_uuid,omitempty"`
	// The destination volume ID.
	DestinationVolume uint64 `protobuf:"varint,3,opt,name=destination_volume,json=destinationVolume,proto3" json:"destination_volume,omitempty"`
	// The destination UUID.
	// This field is used as the volume identifier over destination_volume if
	// destination_volume is set to INVALID_INODE;
	DestinationUuid string `protobuf:"bytes,4,opt,name=destination_uuid,json=destinationUuid,proto3" json:"destination_uuid,omitempty"`
	// The start offset.
	Offset uint64 `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	// The length of region to sync.
	Length uint64 `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty"`
	// Whether the sync should be forced. If this flag is set we'll overwrite
	// every sync block transaction ID with TransactionId{node_cc, 0}, where
	// node_cc is the consumer count of the source volume. See sync2020.pdf for
	// the rationale behind this.
	Force bool `protobuf:"varint,7,opt,name=force,proto3" json:"force,omitempty"`
	// The SyncContext, initially generated by symmetra, associated with the
	// over-arching sync operation This field is purely used for logging, so
	// there's no harm in not setting it in test code
	SyncContext *SyncContext `protobuf:"bytes,8,opt,name=sync_context,json=syncContext,proto3" json:"sync_context,omitempty"`
	// If set we'll retry the write portion of a sync operation if it fails
	// because the directfs initiator has not established a connection to the
	// target node (the replica). We will do this for the first IO only.
	// Remember internally every SyncRegionRequest is broken down into multiple
	// 128k IOs. Any subsequent write failures due to a severed connection will
	// abort the sync process. The amount of time we'll wait before retrying
	// will always be greater than the cool-off period between connection
	// re-establish attempts. This is currently configured to 5 seconds.
	//
	// Note: symmetra should set this flag for the first SyncRegionRequest only.
	// The desired behaviour is that only the very first IO can elicit a retry.
	// We don't want per IO retries for sync operations.
	AllowFirstIoRetry bool `protobuf:"varint,9,opt,name=allow_first_io_retry,json=allowFirstIoRetry,proto3" json:"allow_first_io_retry,omitempty"`
}

func (x *SyncRegionRequest) Reset() {
	*x = SyncRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRegionRequest) ProtoMessage() {}

func (x *SyncRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRegionRequest.ProtoReflect.Descriptor instead.
func (*SyncRegionRequest) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{45}
}

func (x *SyncRegionRequest) GetSourceVolume() uint64 {
	if x != nil {
		return x.SourceVolume
	}
	return 0
}

func (x *SyncRegionRequest) GetSourceUuid() string {
	if x != nil {
		return x.SourceUuid
	}
	return ""
}

func (x *SyncRegionRequest) GetDestinationVolume() uint64 {
	if x != nil {
		return x.DestinationVolume
	}
	return 0
}

func (x *SyncRegionRequest) GetDestinationUuid() string {
	if x != nil {
		return x.DestinationUuid
	}
	return ""
}

func (x *SyncRegionRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SyncRegionRequest) GetLength() uint64 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *SyncRegionRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *SyncRegionRequest) GetSyncContext() *SyncContext {
	if x != nil {
		return x.SyncContext
	}
	return nil
}

func (x *SyncRegionRequest) GetAllowFirstIoRetry() bool {
	if x != nil {
		return x.AllowFirstIoRetry
	}
	return false
}

type SyncRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the operation was successful.
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// If the operation was not successful, this is an explanatory message as to
	// why.
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *SyncRegionResponse) Reset() {
	*x = SyncRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncRegionResponse) ProtoMessage() {}

func (x *SyncRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncRegionResponse.ProtoReflect.Descriptor instead.
func (*SyncRegionResponse) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{46}
}

func (x *SyncRegionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SyncRegionResponse) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// Wraps a replica and its location
type DeploymentConfig_ReplicaAndLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The replica deployment's UUID
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Not for CP use. The internal deployment ID used by the dataplane
	// Useful for dataplane testing and not much else
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// In practice this must always be present when the Dataplane is being
	// managed by the CP. There's no such thing as a local replica in
	// production. For the purpose of DP testing this feild can be empty,
	// which signifies the replica is local to the master
	OptNodeConfig *NodeConfig `protobuf:"bytes,3,opt,name=opt_node_config,json=optNodeConfig,proto3,oneof" json:"opt_node_config,omitempty"`
}

func (x *DeploymentConfig_ReplicaAndLocation) Reset() {
	*x = DeploymentConfig_ReplicaAndLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentConfig_ReplicaAndLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentConfig_ReplicaAndLocation) ProtoMessage() {}

func (x *DeploymentConfig_ReplicaAndLocation) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentConfig_ReplicaAndLocation.ProtoReflect.Descriptor instead.
func (*DeploymentConfig_ReplicaAndLocation) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{1, 0}
}

func (x *DeploymentConfig_ReplicaAndLocation) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DeploymentConfig_ReplicaAndLocation) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeploymentConfig_ReplicaAndLocation) GetOptNodeConfig() *NodeConfig {
	if x != nil {
		return x.OptNodeConfig
	}
	return nil
}

// We declare a wrapper type so we can easily add new fields in the future
type DumpConfigResponse_DeploymentConfigBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *DeploymentConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *DumpConfigResponse_DeploymentConfigBundle) Reset() {
	*x = DumpConfigResponse_DeploymentConfigBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpConfigResponse_DeploymentConfigBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpConfigResponse_DeploymentConfigBundle) ProtoMessage() {}

func (x *DumpConfigResponse_DeploymentConfigBundle) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpConfigResponse_DeploymentConfigBundle.ProtoReflect.Descriptor instead.
func (*DumpConfigResponse_DeploymentConfigBundle) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{21, 0}
}

func (x *DumpConfigResponse_DeploymentConfigBundle) GetConfig() *DeploymentConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type DumpConfigResponse_PresentationConfigBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *PresentationConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *DumpConfigResponse_PresentationConfigBundle) Reset() {
	*x = DumpConfigResponse_PresentationConfigBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_supervisor_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpConfigResponse_PresentationConfigBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpConfigResponse_PresentationConfigBundle) ProtoMessage() {}

func (x *DumpConfigResponse_PresentationConfigBundle) ProtoReflect() protoreflect.Message {
	mi := &file_supervisor_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpConfigResponse_PresentationConfigBundle.ProtoReflect.Descriptor instead.
func (*DumpConfigResponse_PresentationConfigBundle) Descriptor() ([]byte, []int) {
	return file_supervisor_proto_rawDescGZIP(), []int{21, 1}
}

func (x *DumpConfigResponse_PresentationConfigBundle) GetConfig() *PresentationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

var File_supervisor_proto protoreflect.FileDescriptor

var file_supervisor_proto_rawDesc = []byte{
	0x0a, 0x10, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbe, 0x01, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x11, 0x6f, 0x70, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x70, 0x74,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xba, 0x03, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x02,
	0x63, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x02, 0x63, 0x63, 0x12, 0x4e, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x1a, 0x94, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x41, 0x6e, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x46, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x70, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x70,
	0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xf9, 0x03,
	0x0a, 0x12, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x73,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x02, 0x63, 0x63, 0x12, 0x46, 0x0a,
	0x0f, 0x6f, 0x70, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x70, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x48, 0x01, 0x52, 0x0f, 0x6f, 0x70, 0x74,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x5f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x22, 0x44, 0x0a, 0x16, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x73, 0x69, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x22,
	0x19, 0x0a, 0x17, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x18, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x09, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a,
	0x0c, 0x69, 0x64, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0b, 0x69, 0x64, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3f, 0x0a, 0x09, 0x63, 0x63, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x63, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x55, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x52, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x09, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x42, 0x0a, 0x1c, 0x44,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x54, 0x0a, 0x1d, 0x44, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3d, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x59, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x9c, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x72, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x73, 0x69, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x76, 0x0a, 0x1e, 0x44, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x56, 0x0a, 0x1f, 0x44, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x70,
	0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x67, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28,
	0x0a, 0x02, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x02, 0x63, 0x63, 0x22, 0x79, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09,
	0x72, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x63, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x02, 0x63, 0x63, 0x22, 0x3d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x79, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x72, 0x70, 0x63, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x02, 0x63, 0x63, 0x22, 0x13, 0x0a,
	0x11, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x99, 0x06, 0x0a, 0x12, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0b, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x5a, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x51, 0x0a, 0x16, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x55, 0x0a, 0x18, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x39, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x78, 0x0a, 0x10, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7c, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x50, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x6d,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35,
	0x0a, 0x09, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x27, 0x0a, 0x07, 0x4d, 0x61, 0x70,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x53, 0x49, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4c, 0x49,
	0x10, 0x02, 0x22, 0x4a, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x03, 0x63, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x63, 0x63, 0x73, 0x22, 0x72,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x02,
	0x63, 0x63, 0x22, 0x21, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0xb0, 0x02,
	0x0a, 0x19, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x22, 0xe2, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e,
	0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x08, 0x68, 0x61, 0x73,
	0x68, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x0e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x75, 0x75, 0x69,
	0x64, 0x73, 0x22, 0x64, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x3e, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0f, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6e, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x59, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x49, 0x0a, 0x14,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4c, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x72, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4c, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x4f, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x33, 0x0a, 0x0a, 0x72, 0x70, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x09, 0x72, 0x70, 0x63, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x4e, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x22, 0xf5, 0x02, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x73, 0x74,
	0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c,
	0x77, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x47, 0x0a, 0x13,
	0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xe9, 0x02, 0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x52, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x2f, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x69, 0x6f, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6f, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x22, 0x46, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2a, 0x36, 0x0a, 0x0e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10,
	0x02, 0x2a, 0x22, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x41,
	0x55, 0x47, 0x45, 0x10, 0x01, 0x32, 0xa3, 0x13, 0x0a, 0x0a, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6e, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72,
	0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x74, 0x0a, 0x15, 0x44, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x17, 0x44, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x65, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x0a, 0x44, 0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x20, 0x2e, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x6d,
	0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x75, 0x6d, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x4b, 0x65, 0x79, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47, 0x65, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x17, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x47,
	0x65, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x1a, 0x1f,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x47, 0x65, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x4d, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x1a, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x62, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x25, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x10, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x63,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76,
	0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6d, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69,
	0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x4a, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x75, 0x70,
	0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x34, 0x5a, 0x32, 0x63,
	0x6f, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x6f, 0x73, 0x2e, 0x6e, 0x65,
	0x74, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x6f, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_supervisor_proto_rawDescOnce sync.Once
	file_supervisor_proto_rawDescData = file_supervisor_proto_rawDesc
)

func file_supervisor_proto_rawDescGZIP() []byte {
	file_supervisor_proto_rawDescOnce.Do(func() {
		file_supervisor_proto_rawDescData = protoimpl.X.CompressGZIP(file_supervisor_proto_rawDescData)
	})
	return file_supervisor_proto_rawDescData
}

var file_supervisor_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_supervisor_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_supervisor_proto_goTypes = []interface{}{
	(DeploymentType)(0),                                 // 0: supervisor.v1.DeploymentType
	(MetricType)(0),                                     // 1: supervisor.v1.MetricType
	(IdMapperStatus_MapMode)(0),                         // 2: supervisor.v1.IdMapperStatus.MapMode
	(*NodeConfig)(nil),                                  // 3: supervisor.v1.NodeConfig
	(*DeploymentConfig)(nil),                            // 4: supervisor.v1.DeploymentConfig
	(*PresentationConfig)(nil),                          // 5: supervisor.v1.PresentationConfig
	(*PresentationScsiDevice)(nil),                      // 6: supervisor.v1.PresentationScsiDevice
	(*SupervisorStatusRequest)(nil),                     // 7: supervisor.v1.SupervisorStatusRequest
	(*SupervisorStatusResponse)(nil),                    // 8: supervisor.v1.SupervisorStatusResponse
	(*ConfigureDeploymentRequest)(nil),                  // 9: supervisor.v1.ConfigureDeploymentRequest
	(*ConfigureDeploymentResponse)(nil),                 // 10: supervisor.v1.ConfigureDeploymentResponse
	(*DeconfigureDeploymentRequest)(nil),                // 11: supervisor.v1.DeconfigureDeploymentRequest
	(*DeconfigureDeploymentResponse)(nil),               // 12: supervisor.v1.DeconfigureDeploymentResponse
	(*DeleteDeploymentRequest)(nil),                     // 13: supervisor.v1.DeleteDeploymentRequest
	(*DeleteDeploymentResponse)(nil),                    // 14: supervisor.v1.DeleteDeploymentResponse
	(*ConfigurePresentationRequest)(nil),                // 15: supervisor.v1.ConfigurePresentationRequest
	(*ConfigurePresentationResponse)(nil),               // 16: supervisor.v1.ConfigurePresentationResponse
	(*DeconfigurePresentationRequest)(nil),              // 17: supervisor.v1.DeconfigurePresentationRequest
	(*DeconfigurePresentationResponse)(nil),             // 18: supervisor.v1.DeconfigurePresentationResponse
	(*SetConsumerCountRequest)(nil),                     // 19: supervisor.v1.SetConsumerCountRequest
	(*SetConsumerCountResponse)(nil),                    // 20: supervisor.v1.SetConsumerCountResponse
	(*GetConsumerCountRequest)(nil),                     // 21: supervisor.v1.GetConsumerCountRequest
	(*GetConsumerCountResponse)(nil),                    // 22: supervisor.v1.GetConsumerCountResponse
	(*DumpConfigRequest)(nil),                           // 23: supervisor.v1.DumpConfigRequest
	(*DumpConfigResponse)(nil),                          // 24: supervisor.v1.DumpConfigResponse
	(*IdMapping)(nil),                                   // 25: supervisor.v1.IdMapping
	(*IdMapperStatus)(nil),                              // 26: supervisor.v1.IdMapperStatus
	(*ConsumerCountStatus)(nil),                         // 27: supervisor.v1.ConsumerCountStatus
	(*ConsumerCountEntry)(nil),                          // 28: supervisor.v1.ConsumerCountEntry
	(*SyncContext)(nil),                                 // 29: supervisor.v1.SyncContext
	(*DeploymentHash)(nil),                              // 30: supervisor.v1.DeploymentHash
	(*DeploymentHashListRequest)(nil),                   // 31: supervisor.v1.DeploymentHashListRequest
	(*DeploymentHashListResponse)(nil),                  // 32: supervisor.v1.DeploymentHashListResponse
	(*Metric)(nil),                                      // 33: supervisor.v1.Metric
	(*MetricsRequest)(nil),                              // 34: supervisor.v1.MetricsRequest
	(*VolumeMetrics)(nil),                               // 35: supervisor.v1.VolumeMetrics
	(*NodeMetrics)(nil),                                 // 36: supervisor.v1.NodeMetrics
	(*MetricsResponse)(nil),                             // 37: supervisor.v1.MetricsResponse
	(*ListConnectionsRequest)(nil),                      // 38: supervisor.v1.ListConnectionsRequest
	(*Connection)(nil),                                  // 39: supervisor.v1.Connection
	(*ListConnectionsResponse)(nil),                     // 40: supervisor.v1.ListConnectionsResponse
	(*AddConnectionRequest)(nil),                        // 41: supervisor.v1.AddConnectionRequest
	(*AddConnectionResponse)(nil),                       // 42: supervisor.v1.AddConnectionResponse
	(*RemoveConnectionRequest)(nil),                     // 43: supervisor.v1.RemoveConnectionRequest
	(*RemoveConnectionResponse)(nil),                    // 44: supervisor.v1.RemoveConnectionResponse
	(*SyncRegion)(nil),                                  // 45: supervisor.v1.SyncRegion
	(*SyncRegionsRequest)(nil),                          // 46: supervisor.v1.SyncRegionsRequest
	(*SyncRegionsResponse)(nil),                         // 47: supervisor.v1.SyncRegionsResponse
	(*SyncRegionRequest)(nil),                           // 48: supervisor.v1.SyncRegionRequest
	(*SyncRegionResponse)(nil),                          // 49: supervisor.v1.SyncRegionResponse
	(*DeploymentConfig_ReplicaAndLocation)(nil),         // 50: supervisor.v1.DeploymentConfig.ReplicaAndLocation
	(*DumpConfigResponse_DeploymentConfigBundle)(nil),   // 51: supervisor.v1.DumpConfigResponse.DeploymentConfigBundle
	(*DumpConfigResponse_PresentationConfigBundle)(nil), // 52: supervisor.v1.DumpConfigResponse.PresentationConfigBundle
	nil,                             // 53: supervisor.v1.DumpConfigResponse.DeploymentsEntry
	nil,                             // 54: supervisor.v1.DumpConfigResponse.PresentationsEntry
	nil,                             // 55: supervisor.v1.DumpConfigResponse.ConnectionsEntry
	nil,                             // 56: supervisor.v1.ListConnectionsResponse.ConnectionsEntry
	(*v1.ConsumerCount)(nil),        // 57: common.v1.ConsumerCount
	(*v1.VolumeCrypto)(nil),         // 58: common.v1.VolumeCrypto
	(*v1.RpcResult)(nil),            // 59: common.v1.RpcResult
	(*v1.DaemonStatus)(nil),         // 60: common.v1.DaemonStatus
	(*v1.ConfigKey)(nil),            // 61: common.v1.ConfigKey
	(*v1.ConfigBool)(nil),           // 62: common.v1.ConfigBool
	(*v1.ConfigListQuery)(nil),      // 63: common.v1.ConfigListQuery
	(*v1.ConfigString)(nil),         // 64: common.v1.ConfigString
	(*v1.ConfigUint32)(nil),         // 65: common.v1.ConfigUint32
	(*v1.ConfigUint64)(nil),         // 66: common.v1.ConfigUint64
	(*v1.ConfigGetBoolReply)(nil),   // 67: common.v1.ConfigGetBoolReply
	(*v1.ConfigUpdateReply)(nil),    // 68: common.v1.ConfigUpdateReply
	(*v1.ConfigBoolList)(nil),       // 69: common.v1.ConfigBoolList
	(*v1.ConfigGetStringReply)(nil), // 70: common.v1.ConfigGetStringReply
	(*v1.ConfigStringList)(nil),     // 71: common.v1.ConfigStringList
	(*v1.ConfigGetUint32Reply)(nil), // 72: common.v1.ConfigGetUint32Reply
	(*v1.ConfigUint32List)(nil),     // 73: common.v1.ConfigUint32List
	(*v1.ConfigGetUint64Reply)(nil), // 74: common.v1.ConfigGetUint64Reply
	(*v1.ConfigUint64List)(nil),     // 75: common.v1.ConfigUint64List
}
var file_supervisor_proto_depIdxs = []int32{
	0,  // 0: supervisor.v1.DeploymentConfig.deployment_type:type_name -> supervisor.v1.DeploymentType
	57, // 1: supervisor.v1.DeploymentConfig.cc:type_name -> common.v1.ConsumerCount
	50, // 2: supervisor.v1.DeploymentConfig.replicas:type_name -> supervisor.v1.DeploymentConfig.ReplicaAndLocation
	57, // 3: supervisor.v1.PresentationConfig.cc:type_name -> common.v1.ConsumerCount
	3,  // 4: supervisor.v1.PresentationConfig.opt_node_config:type_name -> supervisor.v1.NodeConfig
	58, // 5: supervisor.v1.PresentationConfig.opt_volume_crypto:type_name -> common.v1.VolumeCrypto
	59, // 6: supervisor.v1.SupervisorStatusResponse.rpc_result:type_name -> common.v1.RpcResult
	60, // 7: supervisor.v1.SupervisorStatusResponse.status:type_name -> common.v1.DaemonStatus
	26, // 8: supervisor.v1.SupervisorStatusResponse.idmap_status:type_name -> supervisor.v1.IdMapperStatus
	27, // 9: supervisor.v1.SupervisorStatusResponse.cc_status:type_name -> supervisor.v1.ConsumerCountStatus
	4,  // 10: supervisor.v1.ConfigureDeploymentRequest.config:type_name -> supervisor.v1.DeploymentConfig
	59, // 11: supervisor.v1.ConfigureDeploymentResponse.rpc_result:type_name -> common.v1.RpcResult
	59, // 12: supervisor.v1.DeconfigureDeploymentResponse.rpc_result:type_name -> common.v1.RpcResult
	59, // 13: supervisor.v1.DeleteDeploymentResponse.rpc_result:type_name -> common.v1.RpcResult
	5,  // 14: supervisor.v1.ConfigurePresentationRequest.config:type_name -> supervisor.v1.PresentationConfig
	59, // 15: supervisor.v1.ConfigurePresentationResponse.rpc_result:type_name -> common.v1.RpcResult
	6,  // 16: supervisor.v1.ConfigurePresentationResponse.device_info:type_name -> supervisor.v1.PresentationScsiDevice
	59, // 17: supervisor.v1.DeconfigurePresentationResponse.rpc_result:type_name -> common.v1.RpcResult
	57, // 18: supervisor.v1.SetConsumerCountRequest.cc:type_name -> common.v1.ConsumerCount
	59, // 19: supervisor.v1.SetConsumerCountResponse.rpc_result:type_name -> common.v1.RpcResult
	57, // 20: supervisor.v1.SetConsumerCountResponse.cc:type_name -> common.v1.ConsumerCount
	59, // 21: supervisor.v1.GetConsumerCountResponse.rpc_result:type_name -> common.v1.RpcResult
	57, // 22: supervisor.v1.GetConsumerCountResponse.cc:type_name -> common.v1.ConsumerCount
	53, // 23: supervisor.v1.DumpConfigResponse.deployments:type_name -> supervisor.v1.DumpConfigResponse.DeploymentsEntry
	54, // 24: supervisor.v1.DumpConfigResponse.presentations:type_name -> supervisor.v1.DumpConfigResponse.PresentationsEntry
	55, // 25: supervisor.v1.DumpConfigResponse.connections:type_name -> supervisor.v1.DumpConfigResponse.ConnectionsEntry
	2,  // 26: supervisor.v1.IdMapperStatus.mode:type_name -> supervisor.v1.IdMapperStatus.MapMode
	25, // 27: supervisor.v1.IdMapperStatus.mappings:type_name -> supervisor.v1.IdMapping
	28, // 28: supervisor.v1.ConsumerCountStatus.ccs:type_name -> supervisor.v1.ConsumerCountEntry
	25, // 29: supervisor.v1.ConsumerCountEntry.mapping:type_name -> supervisor.v1.IdMapping
	57, // 30: supervisor.v1.ConsumerCountEntry.cc:type_name -> common.v1.ConsumerCount
	29, // 31: supervisor.v1.DeploymentHashListRequest.sync_context:type_name -> supervisor.v1.SyncContext
	30, // 32: supervisor.v1.DeploymentHashListResponse.deployment_hash:type_name -> supervisor.v1.DeploymentHash
	30, // 33: supervisor.v1.DeploymentHashListResponse.hash_list:type_name -> supervisor.v1.DeploymentHash
	1,  // 34: supervisor.v1.Metric.type:type_name -> supervisor.v1.MetricType
	33, // 35: supervisor.v1.VolumeMetrics.metrics:type_name -> supervisor.v1.Metric
	33, // 36: supervisor.v1.NodeMetrics.metrics:type_name -> supervisor.v1.Metric
	35, // 37: supervisor.v1.MetricsResponse.volume_metrics:type_name -> supervisor.v1.VolumeMetrics
	36, // 38: supervisor.v1.MetricsResponse.node_metrics:type_name -> supervisor.v1.NodeMetrics
	56, // 39: supervisor.v1.ListConnectionsResponse.connections:type_name -> supervisor.v1.ListConnectionsResponse.ConnectionsEntry
	3,  // 40: supervisor.v1.AddConnectionRequest.config:type_name -> supervisor.v1.NodeConfig
	59, // 41: supervisor.v1.AddConnectionResponse.rpc_result:type_name -> common.v1.RpcResult
	3,  // 42: supervisor.v1.RemoveConnectionRequest.config:type_name -> supervisor.v1.NodeConfig
	59, // 43: supervisor.v1.RemoveConnectionResponse.rpc_result:type_name -> common.v1.RpcResult
	45, // 44: supervisor.v1.SyncRegionsRequest.regions:type_name -> supervisor.v1.SyncRegion
	29, // 45: supervisor.v1.SyncRegionsRequest.sync_context:type_name -> supervisor.v1.SyncContext
	29, // 46: supervisor.v1.SyncRegionRequest.sync_context:type_name -> supervisor.v1.SyncContext
	3,  // 47: supervisor.v1.DeploymentConfig.ReplicaAndLocation.opt_node_config:type_name -> supervisor.v1.NodeConfig
	4,  // 48: supervisor.v1.DumpConfigResponse.DeploymentConfigBundle.config:type_name -> supervisor.v1.DeploymentConfig
	5,  // 49: supervisor.v1.DumpConfigResponse.PresentationConfigBundle.config:type_name -> supervisor.v1.PresentationConfig
	51, // 50: supervisor.v1.DumpConfigResponse.DeploymentsEntry.value:type_name -> supervisor.v1.DumpConfigResponse.DeploymentConfigBundle
	52, // 51: supervisor.v1.DumpConfigResponse.PresentationsEntry.value:type_name -> supervisor.v1.DumpConfigResponse.PresentationConfigBundle
	39, // 52: supervisor.v1.DumpConfigResponse.ConnectionsEntry.value:type_name -> supervisor.v1.Connection
	39, // 53: supervisor.v1.ListConnectionsResponse.ConnectionsEntry.value:type_name -> supervisor.v1.Connection
	7,  // 54: supervisor.v1.Supervisor.Status:input_type -> supervisor.v1.SupervisorStatusRequest
	9,  // 55: supervisor.v1.Supervisor.ConfigureDeployment:input_type -> supervisor.v1.ConfigureDeploymentRequest
	11, // 56: supervisor.v1.Supervisor.DeconfigureDeployment:input_type -> supervisor.v1.DeconfigureDeploymentRequest
	13, // 57: supervisor.v1.Supervisor.DeleteDeployment:input_type -> supervisor.v1.DeleteDeploymentRequest
	15, // 58: supervisor.v1.Supervisor.ConfigurePresentation:input_type -> supervisor.v1.ConfigurePresentationRequest
	17, // 59: supervisor.v1.Supervisor.DeconfigurePresentation:input_type -> supervisor.v1.DeconfigurePresentationRequest
	19, // 60: supervisor.v1.Supervisor.SetConsumerCount:input_type -> supervisor.v1.SetConsumerCountRequest
	21, // 61: supervisor.v1.Supervisor.GetConsumerCount:input_type -> supervisor.v1.GetConsumerCountRequest
	23, // 62: supervisor.v1.Supervisor.DumpConfig:input_type -> supervisor.v1.DumpConfigRequest
	61, // 63: supervisor.v1.Supervisor.ConfigGetBool:input_type -> common.v1.ConfigKey
	62, // 64: supervisor.v1.Supervisor.ConfigUpdateBool:input_type -> common.v1.ConfigBool
	63, // 65: supervisor.v1.Supervisor.ConfigListBool:input_type -> common.v1.ConfigListQuery
	61, // 66: supervisor.v1.Supervisor.ConfigGetString:input_type -> common.v1.ConfigKey
	64, // 67: supervisor.v1.Supervisor.ConfigUpdateString:input_type -> common.v1.ConfigString
	63, // 68: supervisor.v1.Supervisor.ConfigListString:input_type -> common.v1.ConfigListQuery
	61, // 69: supervisor.v1.Supervisor.ConfigGetUint32:input_type -> common.v1.ConfigKey
	65, // 70: supervisor.v1.Supervisor.ConfigUpdateUint32:input_type -> common.v1.ConfigUint32
	63, // 71: supervisor.v1.Supervisor.ConfigListUint32:input_type -> common.v1.ConfigListQuery
	61, // 72: supervisor.v1.Supervisor.ConfigGetUint64:input_type -> common.v1.ConfigKey
	66, // 73: supervisor.v1.Supervisor.ConfigUpdateUint64:input_type -> common.v1.ConfigUint64
	63, // 74: supervisor.v1.Supervisor.ConfigListUint64:input_type -> common.v1.ConfigListQuery
	38, // 75: supervisor.v1.Supervisor.ListConnections:input_type -> supervisor.v1.ListConnectionsRequest
	41, // 76: supervisor.v1.Supervisor.AddConnection:input_type -> supervisor.v1.AddConnectionRequest
	43, // 77: supervisor.v1.Supervisor.RemoveConnection:input_type -> supervisor.v1.RemoveConnectionRequest
	46, // 78: supervisor.v1.Supervisor.SyncRegions:input_type -> supervisor.v1.SyncRegionsRequest
	31, // 79: supervisor.v1.Supervisor.DeploymentHashList:input_type -> supervisor.v1.DeploymentHashListRequest
	34, // 80: supervisor.v1.Supervisor.Metrics:input_type -> supervisor.v1.MetricsRequest
	8,  // 81: supervisor.v1.Supervisor.Status:output_type -> supervisor.v1.SupervisorStatusResponse
	10, // 82: supervisor.v1.Supervisor.ConfigureDeployment:output_type -> supervisor.v1.ConfigureDeploymentResponse
	12, // 83: supervisor.v1.Supervisor.DeconfigureDeployment:output_type -> supervisor.v1.DeconfigureDeploymentResponse
	14, // 84: supervisor.v1.Supervisor.DeleteDeployment:output_type -> supervisor.v1.DeleteDeploymentResponse
	16, // 85: supervisor.v1.Supervisor.ConfigurePresentation:output_type -> supervisor.v1.ConfigurePresentationResponse
	18, // 86: supervisor.v1.Supervisor.DeconfigurePresentation:output_type -> supervisor.v1.DeconfigurePresentationResponse
	20, // 87: supervisor.v1.Supervisor.SetConsumerCount:output_type -> supervisor.v1.SetConsumerCountResponse
	22, // 88: supervisor.v1.Supervisor.GetConsumerCount:output_type -> supervisor.v1.GetConsumerCountResponse
	24, // 89: supervisor.v1.Supervisor.DumpConfig:output_type -> supervisor.v1.DumpConfigResponse
	67, // 90: supervisor.v1.Supervisor.ConfigGetBool:output_type -> common.v1.ConfigGetBoolReply
	68, // 91: supervisor.v1.Supervisor.ConfigUpdateBool:output_type -> common.v1.ConfigUpdateReply
	69, // 92: supervisor.v1.Supervisor.ConfigListBool:output_type -> common.v1.ConfigBoolList
	70, // 93: supervisor.v1.Supervisor.ConfigGetString:output_type -> common.v1.ConfigGetStringReply
	68, // 94: supervisor.v1.Supervisor.ConfigUpdateString:output_type -> common.v1.ConfigUpdateReply
	71, // 95: supervisor.v1.Supervisor.ConfigListString:output_type -> common.v1.ConfigStringList
	72, // 96: supervisor.v1.Supervisor.ConfigGetUint32:output_type -> common.v1.ConfigGetUint32Reply
	68, // 97: supervisor.v1.Supervisor.ConfigUpdateUint32:output_type -> common.v1.ConfigUpdateReply
	73, // 98: supervisor.v1.Supervisor.ConfigListUint32:output_type -> common.v1.ConfigUint32List
	74, // 99: supervisor.v1.Supervisor.ConfigGetUint64:output_type -> common.v1.ConfigGetUint64Reply
	68, // 100: supervisor.v1.Supervisor.ConfigUpdateUint64:output_type -> common.v1.ConfigUpdateReply
	75, // 101: supervisor.v1.Supervisor.ConfigListUint64:output_type -> common.v1.ConfigUint64List
	40, // 102: supervisor.v1.Supervisor.ListConnections:output_type -> supervisor.v1.ListConnectionsResponse
	42, // 103: supervisor.v1.Supervisor.AddConnection:output_type -> supervisor.v1.AddConnectionResponse
	44, // 104: supervisor.v1.Supervisor.RemoveConnection:output_type -> supervisor.v1.RemoveConnectionResponse
	47, // 105: supervisor.v1.Supervisor.SyncRegions:output_type -> supervisor.v1.SyncRegionsResponse
	32, // 106: supervisor.v1.Supervisor.DeploymentHashList:output_type -> supervisor.v1.DeploymentHashListResponse
	37, // 107: supervisor.v1.Supervisor.Metrics:output_type -> supervisor.v1.MetricsResponse
	81, // [81:108] is the sub-list for method output_type
	54, // [54:81] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_supervisor_proto_init() }
func file_supervisor_proto_init() {
	if File_supervisor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_supervisor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresentationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PresentationScsiDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupervisorStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupervisorStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigureDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeconfigureDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeconfigureDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeploymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurePresentationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurePresentationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeconfigurePresentationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeconfigurePresentationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConsumerCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetConsumerCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsumerCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConsumerCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdMapperStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerCountStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumerCountEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentHashListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentHashListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VolumeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListConnectionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRegionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRegionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentConfig_ReplicaAndLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpConfigResponse_DeploymentConfigBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_supervisor_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpConfigResponse_PresentationConfigBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_supervisor_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_supervisor_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_supervisor_proto_msgTypes[47].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_supervisor_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_supervisor_proto_goTypes,
		DependencyIndexes: file_supervisor_proto_depIdxs,
		EnumInfos:         file_supervisor_proto_enumTypes,
		MessageInfos:      file_supervisor_proto_msgTypes,
	}.Build()
	File_supervisor_proto = out.File
	file_supervisor_proto_rawDesc = nil
	file_supervisor_proto_goTypes = nil
	file_supervisor_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SupervisorClient is the client API for Supervisor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SupervisorClient interface {
	// Get various information about the state of the dataplane
	// We also bundle up information regarding the consumer counts
	//
	// On success rpc_result.success will be set to true. On failure it will
	// be set to false and rpc_result.code will be set to STATUS_*.
	// rpc_result.reason may be set.
	Status(ctx context.Context, in *SupervisorStatusRequest, opts ...grpc.CallOption) (*SupervisorStatusResponse, error)
	// Creates deployment. Either a master or a replica. The CP should signals
	// which by setting the `deployment_type` field within the DeploymentConfig
	// message type. Like all "Configure*" RPCs this method has "create if not
	// present, else update" semantics, i.e.:
	//
	//  - if no configuration exists for "uuid" we create the deployment
	//  - if configuration exists for "uuid" then we overwrite the current config.
	//
	// Creates will be rejected if: the CP tries to configure a replica deployment
	// which has replicas; the consumer count is zero.
	//
	// Overwites will be rejected if: the consumer count is decremented or the
	// compression flag has changed. Once specified compression can not be modified.
	//
	// Under the hood this method creates the blob files into which we'll store
	// user data and sets up the network connection to any replicas (master
	// deployments only).
	//
	// Note: this RPC does not configure the replicas it merely tells the
	// master about the existance and location of its replicas. To configure
	// the replicas call ConfigureReplica on the appropriate replica nodes,
	// prior to this call.
	//
	// On success rpc_result.success will be set to true. On failure it will
	// be set to false and rpc_result.code will be set to STATUS_*.
	// rpc_result.reason may be set.
	ConfigureDeployment(ctx context.Context, in *ConfigureDeploymentRequest, opts ...grpc.CallOption) (*ConfigureDeploymentResponse, error)
	// Deconfigure the deployment. This lets the dataplane know that we are done
	// with the deployment and allows the dataplane to release runtime resources
	// associated with the deployment. The CP would typically call this API when
	// a the volume is no longer in use.
	//
	// This RPC does not delete the block (meta)data associated with the
	// deployment. Call DeleteDeployment for that.
	//
	// On success rpc_result.success will be set to true. On failure it will be
	// set to false and rpc_result.code will be set accordingly. The only specific
	// code returned is STATUS_NOT_FOUND - this is set when the deployment you
	// asked to deconfigure is not configured. For all other errors rpc_result.code
	// will be set to STATUS_*. In all failure case rpc_result.reason may be set.
	DeconfigureDeployment(ctx context.Context, in *DeconfigureDeploymentRequest, opts ...grpc.CallOption) (*DeconfigureDeploymentResponse, error)
	// Irrevocably delete the deployment (meta)data.
	//
	// The deployment must be deconfigured, via DeconfigureDeployment, prior
	// to calling this method, or we'll reject the request with an error.
	//
	// On success rpc_result.success will be set to true. On failure it will be
	// set to false and rpc_result.code will be set accordingly. The only specific
	// code returned is STATUS_NOT_FOUND - this is set when the deployment you
	// asked to delete does no exist. For all other errors rpc_result.code will be
	// set to STATUS_*. In all failure case rpc_result.reason may be set.
	DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*DeleteDeploymentResponse, error)
	// Configure a presentation. This creates a block device which can be used
	// to access the volume. This RPC works for both local and remote
	// presentations. Like all "Configure*" RPCs this method has "create if not
	// present, else update" semantics, i.e.:
	//
	//  - if no configuration exists for "presentation_uuid" then create the
	//  presentation
	//  - if a presentation exists for "presentation_uuid" then apply any diffs
	//    against the existing config. Valid diffs include: increasing the
	//    volume size, changing the target deployment (useful during a fail
	//    over); and increasing the consumer count. It's not permitted to change
	//    the crypto config for obvious reasons.
	//
	// On success rpc_result.success will be set to true. On failure it will
	// be set to false and rpc_result.code will be set to STATUS_*.
	// rpc_result.reason may be set.
	ConfigurePresentation(ctx context.Context, in *ConfigurePresentationRequest, opts ...grpc.CallOption) (*ConfigurePresentationResponse, error)
	// Delete a previous created presentation
	//
	// On success rpc_result.success will be set to true. On failure it will
	// be set to false and rpc_result.code will be set accordingly. The only
	// specific code returned is STATUS_NOT_FOUND - this is set when the
	// presentation you asked to delete doesn't even exist. For all other errors
	// rpc_result.code will be set to STATUS_*. In all failure case
	// rpc_result.reason may be set.
	DeconfigurePresentation(ctx context.Context, in *DeconfigurePresentationRequest, opts ...grpc.CallOption) (*DeconfigurePresentationResponse, error)
	// Set the consumer count for a deployment. This should only ever be called
	// on the master deployment (we don't ever need to set the consumer count
	// on a replica). The CP only needs to call this API when it wants to
	// explicitly change the consumer count. The only time I believe this is
	// currently necessary is during a failover. Normally the consumer count value
	// is implicitly transmitted to the dataplane by calling ConfigureDeployment. The
	// ConfigureDeployment request contains the consumer count.
	//
	// On success rpc_result.success will be set to true. On failure it will
	// be set to false and rpc_result.code will be set accordingly. The only
	// specific code returned is STATUS_NOT_FOUND - this is set when the
	// master you asked to set the CC on doesn't even exist. For all other
	// errors rpc_result.code will be set to STATUS_*. In all failure case
	// rpc_result.reason may be set. If the consumer count which was requested
	// to be set is LOWER than the currently set value then this method will
	// set rpc_result.success to true. The actual value of the consumer count
	// - i.e. the current, higher value - will be returned in the response.
	SetConsumerCount(ctx context.Context, in *SetConsumerCountRequest, opts ...grpc.CallOption) (*SetConsumerCountResponse, error)
	// Get the consumer count for a given deployment
	//
	// Returns STATUS_NOT_FOUND if the deployment does not exist.
	// Returns STATUS_* for any other errors
	GetConsumerCount(ctx context.Context, in *GetConsumerCountRequest, opts ...grpc.CallOption) (*GetConsumerCountResponse, error)
	// Dump the dataplane's current configuration
	DumpConfig(ctx context.Context, in *DumpConfigRequest, opts ...grpc.CallOption) (*DumpConfigResponse, error)
	// Config services, from common.v1.
	ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error)
	ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error)
	ConfigGetUint32(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint32Reply, error)
	ConfigUpdateUint32(ctx context.Context, in *v1.ConfigUint32, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListUint32(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint32List, error)
	ConfigGetUint64(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint64Reply, error)
	ConfigUpdateUint64(ctx context.Context, in *v1.ConfigUint64, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListUint64(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint64List, error)
	// ----------------- DP INTERNAL RPCS -------------------------------
	// List all of the network connections which this node has with other dataplanes.
	// Established and un-established connections are shown. Users can drill down into
	// the individual connection to see its status.
	ListConnections(ctx context.Context, in *ListConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error)
	// Add new connections (for debugging purposes)
	AddConnection(ctx context.Context, in *AddConnectionRequest, opts ...grpc.CallOption) (*AddConnectionResponse, error)
	// Remove new connections (for debugging purposes)
	RemoveConnection(ctx context.Context, in *RemoveConnectionRequest, opts ...grpc.CallOption) (*RemoveConnectionResponse, error)
	// Sync the specified regions from the source deployment to the destination
	// deployment. Called by Symmetra.
	SyncRegions(ctx context.Context, in *SyncRegionsRequest, opts ...grpc.CallOption) (*SyncRegionsResponse, error)
	// Return a hash list for the specified deployment, over the specified range.
	// Note: this is a streaming RPC as the hash lists returned could
	// conceiveably be multiple megabytes in size.
	//
	// returns the hash list and deployment hash
	DeploymentHashList(ctx context.Context, in *DeploymentHashListRequest, opts ...grpc.CallOption) (Supervisor_DeploymentHashListClient, error)
	// Collect the dataplane node-level metrics and specific per-volume metrics.
	// NOTE: This is an experimental dataplane-only API. It's probably not quite
	// what the control-plane requires in terms of a metrics API, but it's fine
	// for dataplane tooling and tests.
	Metrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type supervisorClient struct {
	cc grpc.ClientConnInterface
}

func NewSupervisorClient(cc grpc.ClientConnInterface) SupervisorClient {
	return &supervisorClient{cc}
}

func (c *supervisorClient) Status(ctx context.Context, in *SupervisorStatusRequest, opts ...grpc.CallOption) (*SupervisorStatusResponse, error) {
	out := new(SupervisorStatusResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigureDeployment(ctx context.Context, in *ConfigureDeploymentRequest, opts ...grpc.CallOption) (*ConfigureDeploymentResponse, error) {
	out := new(ConfigureDeploymentResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigureDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) DeconfigureDeployment(ctx context.Context, in *DeconfigureDeploymentRequest, opts ...grpc.CallOption) (*DeconfigureDeploymentResponse, error) {
	out := new(DeconfigureDeploymentResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/DeconfigureDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) DeleteDeployment(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*DeleteDeploymentResponse, error) {
	out := new(DeleteDeploymentResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/DeleteDeployment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigurePresentation(ctx context.Context, in *ConfigurePresentationRequest, opts ...grpc.CallOption) (*ConfigurePresentationResponse, error) {
	out := new(ConfigurePresentationResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigurePresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) DeconfigurePresentation(ctx context.Context, in *DeconfigurePresentationRequest, opts ...grpc.CallOption) (*DeconfigurePresentationResponse, error) {
	out := new(DeconfigurePresentationResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/DeconfigurePresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) SetConsumerCount(ctx context.Context, in *SetConsumerCountRequest, opts ...grpc.CallOption) (*SetConsumerCountResponse, error) {
	out := new(SetConsumerCountResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/SetConsumerCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) GetConsumerCount(ctx context.Context, in *GetConsumerCountRequest, opts ...grpc.CallOption) (*GetConsumerCountResponse, error) {
	out := new(GetConsumerCountResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/GetConsumerCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) DumpConfig(ctx context.Context, in *DumpConfigRequest, opts ...grpc.CallOption) (*DumpConfigResponse, error) {
	out := new(DumpConfigResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/DumpConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error) {
	out := new(v1.ConfigGetBoolReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigGetBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigUpdateBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error) {
	out := new(v1.ConfigBoolList)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigListBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error) {
	out := new(v1.ConfigGetStringReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigGetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigUpdateString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error) {
	out := new(v1.ConfigStringList)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigListString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigGetUint32(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint32Reply, error) {
	out := new(v1.ConfigGetUint32Reply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigGetUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigUpdateUint32(ctx context.Context, in *v1.ConfigUint32, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigUpdateUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigListUint32(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint32List, error) {
	out := new(v1.ConfigUint32List)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigListUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigGetUint64(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint64Reply, error) {
	out := new(v1.ConfigGetUint64Reply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigGetUint64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigUpdateUint64(ctx context.Context, in *v1.ConfigUint64, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigUpdateUint64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ConfigListUint64(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint64List, error) {
	out := new(v1.ConfigUint64List)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ConfigListUint64", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) ListConnections(ctx context.Context, in *ListConnectionsRequest, opts ...grpc.CallOption) (*ListConnectionsResponse, error) {
	out := new(ListConnectionsResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/ListConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) AddConnection(ctx context.Context, in *AddConnectionRequest, opts ...grpc.CallOption) (*AddConnectionResponse, error) {
	out := new(AddConnectionResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/AddConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) RemoveConnection(ctx context.Context, in *RemoveConnectionRequest, opts ...grpc.CallOption) (*RemoveConnectionResponse, error) {
	out := new(RemoveConnectionResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/RemoveConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) SyncRegions(ctx context.Context, in *SyncRegionsRequest, opts ...grpc.CallOption) (*SyncRegionsResponse, error) {
	out := new(SyncRegionsResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/SyncRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supervisorClient) DeploymentHashList(ctx context.Context, in *DeploymentHashListRequest, opts ...grpc.CallOption) (Supervisor_DeploymentHashListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Supervisor_serviceDesc.Streams[0], "/supervisor.v1.Supervisor/DeploymentHashList", opts...)
	if err != nil {
		return nil, err
	}
	x := &supervisorDeploymentHashListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Supervisor_DeploymentHashListClient interface {
	Recv() (*DeploymentHashListResponse, error)
	grpc.ClientStream
}

type supervisorDeploymentHashListClient struct {
	grpc.ClientStream
}

func (x *supervisorDeploymentHashListClient) Recv() (*DeploymentHashListResponse, error) {
	m := new(DeploymentHashListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *supervisorClient) Metrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, "/supervisor.v1.Supervisor/Metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupervisorServer is the server API for Supervisor service.
type SupervisorServer interface {
	// Get various information about the state of the dataplane
	// We also bundle up information regarding the consumer counts
	//
	// On success rpc_result.success will be set to true. On failure it will
	// be set to false and rpc_result.code will be set to STATUS_*.
	// rpc_result.reason may be set.
	Status(context.Context, *SupervisorStatusRequest) (*SupervisorStatusResponse, error)
	// Creates deployment. Either a master or a replica. The CP should signals
	// which by setting the `deployment_type` field within the DeploymentConfig
	// message type. Like all "Configure*" RPCs this method has "create if not
	// present, else update" semantics, i.e.:
	//
	//  - if no configuration exists for "uuid" we create the deployment
	//  - if configuration exists for "uuid" then we overwrite the current config.
	//
	// Creates will be rejected if: the CP tries to configure a replica deployment
	// which has replicas; the consumer count is zero.
	//
	// Overwites will be rejected if: the consumer count is decremented or the
	// compression flag has changed. Once specified compression can not be modified.
	//
	// Under the hood this method creates the blob files into which we'll store
	// user data and sets up the network connection to any replicas (master
	// deployments only).
	//
	// Note: this RPC does not configure the replicas it merely tells the
	// master about the existance and location of its replicas. To configure
	// the replicas call ConfigureReplica on the appropriate replica nodes,
	// prior to this call.
	//
	// On success rpc_result.success will be set to true. On failure it will
	// be set to false and rpc_result.code will be set to STATUS_*.
	// rpc_result.reason may be set.
	ConfigureDeployment(context.Context, *ConfigureDeploymentRequest) (*ConfigureDeploymentResponse, error)
	// Deconfigure the deployment. This lets the dataplane know that we are done
	// with the deployment and allows the dataplane to release runtime resources
	// associated with the deployment. The CP would typically call this API when
	// a the volume is no longer in use.
	//
	// This RPC does not delete the block (meta)data associated with the
	// deployment. Call DeleteDeployment for that.
	//
	// On success rpc_result.success will be set to true. On failure it will be
	// set to false and rpc_result.code will be set accordingly. The only specific
	// code returned is STATUS_NOT_FOUND - this is set when the deployment you
	// asked to deconfigure is not configured. For all other errors rpc_result.code
	// will be set to STATUS_*. In all failure case rpc_result.reason may be set.
	DeconfigureDeployment(context.Context, *DeconfigureDeploymentRequest) (*DeconfigureDeploymentResponse, error)
	// Irrevocably delete the deployment (meta)data.
	//
	// The deployment must be deconfigured, via DeconfigureDeployment, prior
	// to calling this method, or we'll reject the request with an error.
	//
	// On success rpc_result.success will be set to true. On failure it will be
	// set to false and rpc_result.code will be set accordingly. The only specific
	// code returned is STATUS_NOT_FOUND - this is set when the deployment you
	// asked to delete does no exist. For all other errors rpc_result.code will be
	// set to STATUS_*. In all failure case rpc_result.reason may be set.
	DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*DeleteDeploymentResponse, error)
	// Configure a presentation. This creates a block device which can be used
	// to access the volume. This RPC works for both local and remote
	// presentations. Like all "Configure*" RPCs this method has "create if not
	// present, else update" semantics, i.e.:
	//
	//  - if no configuration exists for "presentation_uuid" then create the
	//  presentation
	//  - if a presentation exists for "presentation_uuid" then apply any diffs
	//    against the existing config. Valid diffs include: increasing the
	//    volume size, changing the target deployment (useful during a fail
	//    over); and increasing the consumer count. It's not permitted to change
	//    the crypto config for obvious reasons.
	//
	// On success rpc_result.success will be set to true. On failure it will
	// be set to false and rpc_result.code will be set to STATUS_*.
	// rpc_result.reason may be set.
	ConfigurePresentation(context.Context, *ConfigurePresentationRequest) (*ConfigurePresentationResponse, error)
	// Delete a previous created presentation
	//
	// On success rpc_result.success will be set to true. On failure it will
	// be set to false and rpc_result.code will be set accordingly. The only
	// specific code returned is STATUS_NOT_FOUND - this is set when the
	// presentation you asked to delete doesn't even exist. For all other errors
	// rpc_result.code will be set to STATUS_*. In all failure case
	// rpc_result.reason may be set.
	DeconfigurePresentation(context.Context, *DeconfigurePresentationRequest) (*DeconfigurePresentationResponse, error)
	// Set the consumer count for a deployment. This should only ever be called
	// on the master deployment (we don't ever need to set the consumer count
	// on a replica). The CP only needs to call this API when it wants to
	// explicitly change the consumer count. The only time I believe this is
	// currently necessary is during a failover. Normally the consumer count value
	// is implicitly transmitted to the dataplane by calling ConfigureDeployment. The
	// ConfigureDeployment request contains the consumer count.
	//
	// On success rpc_result.success will be set to true. On failure it will
	// be set to false and rpc_result.code will be set accordingly. The only
	// specific code returned is STATUS_NOT_FOUND - this is set when the
	// master you asked to set the CC on doesn't even exist. For all other
	// errors rpc_result.code will be set to STATUS_*. In all failure case
	// rpc_result.reason may be set. If the consumer count which was requested
	// to be set is LOWER than the currently set value then this method will
	// set rpc_result.success to true. The actual value of the consumer count
	// - i.e. the current, higher value - will be returned in the response.
	SetConsumerCount(context.Context, *SetConsumerCountRequest) (*SetConsumerCountResponse, error)
	// Get the consumer count for a given deployment
	//
	// Returns STATUS_NOT_FOUND if the deployment does not exist.
	// Returns STATUS_* for any other errors
	GetConsumerCount(context.Context, *GetConsumerCountRequest) (*GetConsumerCountResponse, error)
	// Dump the dataplane's current configuration
	DumpConfig(context.Context, *DumpConfigRequest) (*DumpConfigResponse, error)
	// Config services, from common.v1.
	ConfigGetBool(context.Context, *v1.ConfigKey) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(context.Context, *v1.ConfigBool) (*v1.ConfigUpdateReply, error)
	ConfigListBool(context.Context, *v1.ConfigListQuery) (*v1.ConfigBoolList, error)
	ConfigGetString(context.Context, *v1.ConfigKey) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(context.Context, *v1.ConfigString) (*v1.ConfigUpdateReply, error)
	ConfigListString(context.Context, *v1.ConfigListQuery) (*v1.ConfigStringList, error)
	ConfigGetUint32(context.Context, *v1.ConfigKey) (*v1.ConfigGetUint32Reply, error)
	ConfigUpdateUint32(context.Context, *v1.ConfigUint32) (*v1.ConfigUpdateReply, error)
	ConfigListUint32(context.Context, *v1.ConfigListQuery) (*v1.ConfigUint32List, error)
	ConfigGetUint64(context.Context, *v1.ConfigKey) (*v1.ConfigGetUint64Reply, error)
	ConfigUpdateUint64(context.Context, *v1.ConfigUint64) (*v1.ConfigUpdateReply, error)
	ConfigListUint64(context.Context, *v1.ConfigListQuery) (*v1.ConfigUint64List, error)
	// ----------------- DP INTERNAL RPCS -------------------------------
	// List all of the network connections which this node has with other dataplanes.
	// Established and un-established connections are shown. Users can drill down into
	// the individual connection to see its status.
	ListConnections(context.Context, *ListConnectionsRequest) (*ListConnectionsResponse, error)
	// Add new connections (for debugging purposes)
	AddConnection(context.Context, *AddConnectionRequest) (*AddConnectionResponse, error)
	// Remove new connections (for debugging purposes)
	RemoveConnection(context.Context, *RemoveConnectionRequest) (*RemoveConnectionResponse, error)
	// Sync the specified regions from the source deployment to the destination
	// deployment. Called by Symmetra.
	SyncRegions(context.Context, *SyncRegionsRequest) (*SyncRegionsResponse, error)
	// Return a hash list for the specified deployment, over the specified range.
	// Note: this is a streaming RPC as the hash lists returned could
	// conceiveably be multiple megabytes in size.
	//
	// returns the hash list and deployment hash
	DeploymentHashList(*DeploymentHashListRequest, Supervisor_DeploymentHashListServer) error
	// Collect the dataplane node-level metrics and specific per-volume metrics.
	// NOTE: This is an experimental dataplane-only API. It's probably not quite
	// what the control-plane requires in terms of a metrics API, but it's fine
	// for dataplane tooling and tests.
	Metrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
}

// UnimplementedSupervisorServer can be embedded to have forward compatible implementations.
type UnimplementedSupervisorServer struct {
}

func (*UnimplementedSupervisorServer) Status(context.Context, *SupervisorStatusRequest) (*SupervisorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedSupervisorServer) ConfigureDeployment(context.Context, *ConfigureDeploymentRequest) (*ConfigureDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureDeployment not implemented")
}
func (*UnimplementedSupervisorServer) DeconfigureDeployment(context.Context, *DeconfigureDeploymentRequest) (*DeconfigureDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeconfigureDeployment not implemented")
}
func (*UnimplementedSupervisorServer) DeleteDeployment(context.Context, *DeleteDeploymentRequest) (*DeleteDeploymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeployment not implemented")
}
func (*UnimplementedSupervisorServer) ConfigurePresentation(context.Context, *ConfigurePresentationRequest) (*ConfigurePresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurePresentation not implemented")
}
func (*UnimplementedSupervisorServer) DeconfigurePresentation(context.Context, *DeconfigurePresentationRequest) (*DeconfigurePresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeconfigurePresentation not implemented")
}
func (*UnimplementedSupervisorServer) SetConsumerCount(context.Context, *SetConsumerCountRequest) (*SetConsumerCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConsumerCount not implemented")
}
func (*UnimplementedSupervisorServer) GetConsumerCount(context.Context, *GetConsumerCountRequest) (*GetConsumerCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerCount not implemented")
}
func (*UnimplementedSupervisorServer) DumpConfig(context.Context, *DumpConfigRequest) (*DumpConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpConfig not implemented")
}
func (*UnimplementedSupervisorServer) ConfigGetBool(context.Context, *v1.ConfigKey) (*v1.ConfigGetBoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetBool not implemented")
}
func (*UnimplementedSupervisorServer) ConfigUpdateBool(context.Context, *v1.ConfigBool) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateBool not implemented")
}
func (*UnimplementedSupervisorServer) ConfigListBool(context.Context, *v1.ConfigListQuery) (*v1.ConfigBoolList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListBool not implemented")
}
func (*UnimplementedSupervisorServer) ConfigGetString(context.Context, *v1.ConfigKey) (*v1.ConfigGetStringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetString not implemented")
}
func (*UnimplementedSupervisorServer) ConfigUpdateString(context.Context, *v1.ConfigString) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateString not implemented")
}
func (*UnimplementedSupervisorServer) ConfigListString(context.Context, *v1.ConfigListQuery) (*v1.ConfigStringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListString not implemented")
}
func (*UnimplementedSupervisorServer) ConfigGetUint32(context.Context, *v1.ConfigKey) (*v1.ConfigGetUint32Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetUint32 not implemented")
}
func (*UnimplementedSupervisorServer) ConfigUpdateUint32(context.Context, *v1.ConfigUint32) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateUint32 not implemented")
}
func (*UnimplementedSupervisorServer) ConfigListUint32(context.Context, *v1.ConfigListQuery) (*v1.ConfigUint32List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListUint32 not implemented")
}
func (*UnimplementedSupervisorServer) ConfigGetUint64(context.Context, *v1.ConfigKey) (*v1.ConfigGetUint64Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetUint64 not implemented")
}
func (*UnimplementedSupervisorServer) ConfigUpdateUint64(context.Context, *v1.ConfigUint64) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateUint64 not implemented")
}
func (*UnimplementedSupervisorServer) ConfigListUint64(context.Context, *v1.ConfigListQuery) (*v1.ConfigUint64List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListUint64 not implemented")
}
func (*UnimplementedSupervisorServer) ListConnections(context.Context, *ListConnectionsRequest) (*ListConnectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnections not implemented")
}
func (*UnimplementedSupervisorServer) AddConnection(context.Context, *AddConnectionRequest) (*AddConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddConnection not implemented")
}
func (*UnimplementedSupervisorServer) RemoveConnection(context.Context, *RemoveConnectionRequest) (*RemoveConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveConnection not implemented")
}
func (*UnimplementedSupervisorServer) SyncRegions(context.Context, *SyncRegionsRequest) (*SyncRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncRegions not implemented")
}
func (*UnimplementedSupervisorServer) DeploymentHashList(*DeploymentHashListRequest, Supervisor_DeploymentHashListServer) error {
	return status.Errorf(codes.Unimplemented, "method DeploymentHashList not implemented")
}
func (*UnimplementedSupervisorServer) Metrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metrics not implemented")
}

func RegisterSupervisorServer(s *grpc.Server, srv SupervisorServer) {
	s.RegisterService(&_Supervisor_serviceDesc, srv)
}

func _Supervisor_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupervisorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).Status(ctx, req.(*SupervisorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigureDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigureDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigureDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigureDeployment(ctx, req.(*ConfigureDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_DeconfigureDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeconfigureDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).DeconfigureDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/DeconfigureDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).DeconfigureDeployment(ctx, req.(*DeconfigureDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_DeleteDeployment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).DeleteDeployment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/DeleteDeployment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).DeleteDeployment(ctx, req.(*DeleteDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigurePresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurePresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigurePresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigurePresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigurePresentation(ctx, req.(*ConfigurePresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_DeconfigurePresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeconfigurePresentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).DeconfigurePresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/DeconfigurePresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).DeconfigurePresentation(ctx, req.(*DeconfigurePresentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_SetConsumerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConsumerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).SetConsumerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/SetConsumerCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).SetConsumerCount(ctx, req.(*SetConsumerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_GetConsumerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsumerCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).GetConsumerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/GetConsumerCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).GetConsumerCount(ctx, req.(*GetConsumerCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_DumpConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).DumpConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/DumpConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).DumpConfig(ctx, req.(*DumpConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigGetBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigGetBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigGetBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigGetBool(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigUpdateBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigBool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigUpdateBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigUpdateBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigUpdateBool(ctx, req.(*v1.ConfigBool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigListBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigListBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigListBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigListBool(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigGetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigGetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigGetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigGetString(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigUpdateString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigUpdateString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigUpdateString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigUpdateString(ctx, req.(*v1.ConfigString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigListString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigListString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigListString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigListString(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigGetUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigGetUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigGetUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigGetUint32(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigUpdateUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigUint32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigUpdateUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigUpdateUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigUpdateUint32(ctx, req.(*v1.ConfigUint32))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigListUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigListUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigListUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigListUint32(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigGetUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigGetUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigGetUint64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigGetUint64(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigUpdateUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigUint64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigUpdateUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigUpdateUint64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigUpdateUint64(ctx, req.(*v1.ConfigUint64))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ConfigListUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ConfigListUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ConfigListUint64",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ConfigListUint64(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_ListConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).ListConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/ListConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).ListConnections(ctx, req.(*ListConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_AddConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).AddConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/AddConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).AddConnection(ctx, req.(*AddConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_RemoveConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).RemoveConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/RemoveConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).RemoveConnection(ctx, req.(*RemoveConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_SyncRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).SyncRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/SyncRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).SyncRegions(ctx, req.(*SyncRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Supervisor_DeploymentHashList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeploymentHashListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SupervisorServer).DeploymentHashList(m, &supervisorDeploymentHashListServer{stream})
}

type Supervisor_DeploymentHashListServer interface {
	Send(*DeploymentHashListResponse) error
	grpc.ServerStream
}

type supervisorDeploymentHashListServer struct {
	grpc.ServerStream
}

func (x *supervisorDeploymentHashListServer) Send(m *DeploymentHashListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Supervisor_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupervisorServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/supervisor.v1.Supervisor/Metrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupervisorServer).Metrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Supervisor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "supervisor.v1.Supervisor",
	HandlerType: (*SupervisorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Supervisor_Status_Handler,
		},
		{
			MethodName: "ConfigureDeployment",
			Handler:    _Supervisor_ConfigureDeployment_Handler,
		},
		{
			MethodName: "DeconfigureDeployment",
			Handler:    _Supervisor_DeconfigureDeployment_Handler,
		},
		{
			MethodName: "DeleteDeployment",
			Handler:    _Supervisor_DeleteDeployment_Handler,
		},
		{
			MethodName: "ConfigurePresentation",
			Handler:    _Supervisor_ConfigurePresentation_Handler,
		},
		{
			MethodName: "DeconfigurePresentation",
			Handler:    _Supervisor_DeconfigurePresentation_Handler,
		},
		{
			MethodName: "SetConsumerCount",
			Handler:    _Supervisor_SetConsumerCount_Handler,
		},
		{
			MethodName: "GetConsumerCount",
			Handler:    _Supervisor_GetConsumerCount_Handler,
		},
		{
			MethodName: "DumpConfig",
			Handler:    _Supervisor_DumpConfig_Handler,
		},
		{
			MethodName: "ConfigGetBool",
			Handler:    _Supervisor_ConfigGetBool_Handler,
		},
		{
			MethodName: "ConfigUpdateBool",
			Handler:    _Supervisor_ConfigUpdateBool_Handler,
		},
		{
			MethodName: "ConfigListBool",
			Handler:    _Supervisor_ConfigListBool_Handler,
		},
		{
			MethodName: "ConfigGetString",
			Handler:    _Supervisor_ConfigGetString_Handler,
		},
		{
			MethodName: "ConfigUpdateString",
			Handler:    _Supervisor_ConfigUpdateString_Handler,
		},
		{
			MethodName: "ConfigListString",
			Handler:    _Supervisor_ConfigListString_Handler,
		},
		{
			MethodName: "ConfigGetUint32",
			Handler:    _Supervisor_ConfigGetUint32_Handler,
		},
		{
			MethodName: "ConfigUpdateUint32",
			Handler:    _Supervisor_ConfigUpdateUint32_Handler,
		},
		{
			MethodName: "ConfigListUint32",
			Handler:    _Supervisor_ConfigListUint32_Handler,
		},
		{
			MethodName: "ConfigGetUint64",
			Handler:    _Supervisor_ConfigGetUint64_Handler,
		},
		{
			MethodName: "ConfigUpdateUint64",
			Handler:    _Supervisor_ConfigUpdateUint64_Handler,
		},
		{
			MethodName: "ConfigListUint64",
			Handler:    _Supervisor_ConfigListUint64_Handler,
		},
		{
			MethodName: "ListConnections",
			Handler:    _Supervisor_ListConnections_Handler,
		},
		{
			MethodName: "AddConnection",
			Handler:    _Supervisor_AddConnection_Handler,
		},
		{
			MethodName: "RemoveConnection",
			Handler:    _Supervisor_RemoveConnection_Handler,
		},
		{
			MethodName: "SyncRegions",
			Handler:    _Supervisor_SyncRegions_Handler,
		},
		{
			MethodName: "Metrics",
			Handler:    _Supervisor_Metrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeploymentHashList",
			Handler:       _Supervisor_DeploymentHashList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "supervisor.proto",
}
