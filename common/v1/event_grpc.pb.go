// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: common/v1/event.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventAPIClient is the client API for EventAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventAPIClient interface {
	// The Event service is used to send strongly-typed events from the dataplane
	// to the controlplane. Each event has its own APIs and its own semantics,
	// defined below.
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	// The Log service is used to send general-purpose log entries from the
	// dataplane to the controlplane. Context is sent as map<string,string>
	// key-value pairs with arbitrary keys, for the controlplane to dispose as it
	// sees fit.
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type eventAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewEventAPIClient(cc grpc.ClientConnInterface) EventAPIClient {
	return &eventAPIClient{cc}
}

func (c *eventAPIClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/service.common.v1.EventAPI/Event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAPIClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/service.common.v1.EventAPI/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventAPIServer is the server API for EventAPI service.
// All implementations should embed UnimplementedEventAPIServer
// for forward compatibility
type EventAPIServer interface {
	// The Event service is used to send strongly-typed events from the dataplane
	// to the controlplane. Each event has its own APIs and its own semantics,
	// defined below.
	Event(context.Context, *EventRequest) (*EventResponse, error)
	// The Log service is used to send general-purpose log entries from the
	// dataplane to the controlplane. Context is sent as map<string,string>
	// key-value pairs with arbitrary keys, for the controlplane to dispose as it
	// sees fit.
	Log(context.Context, *LogRequest) (*LogResponse, error)
}

// UnimplementedEventAPIServer should be embedded to have forward compatible implementations.
type UnimplementedEventAPIServer struct {
}

func (UnimplementedEventAPIServer) Event(context.Context, *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (UnimplementedEventAPIServer) Log(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}

// UnsafeEventAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventAPIServer will
// result in compilation errors.
type UnsafeEventAPIServer interface {
	mustEmbedUnimplementedEventAPIServer()
}

func RegisterEventAPIServer(s grpc.ServiceRegistrar, srv EventAPIServer) {
	s.RegisterService(&EventAPI_ServiceDesc, srv)
}

func _EventAPI_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAPIServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.common.v1.EventAPI/Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAPIServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAPI_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAPIServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.common.v1.EventAPI/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAPIServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventAPI_ServiceDesc is the grpc.ServiceDesc for EventAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.common.v1.EventAPI",
	HandlerType: (*EventAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Event",
			Handler:    _EventAPI_Event_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _EventAPI_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/v1/event.proto",
}
