syntax = "proto3";
package common.v1;

enum StatusCode {
    // Status code not set.
    STATUS_NONE = 0;
    // Generic 'no problem' response.
    STATUS_OK = 200;
    // Accepted, but might not take effect immediately.
    STATUS_ACCEPTED = 202;
    // Resource created.
    STATUS_CREATED = 201;
    // Generic 'huh?'.
    STATUS_BAD_REQUEST = 400;
    // Not permitted. We're unlikely to use this, it indicates authorization will help.
    STATUS_UNAUTHORIZED = 401;
    // Not allowed, authorization isn't the issue.
    STATUS_FORBIDDEN = 403;
    // Resource not found.
    STATUS_NOT_FOUND = 404;
    // Operation would cause a conflict somewhere.
    STATUS_CONFLICT = 409;
    // General serious failure.
    STATUS_SERVER_ERROR = 500;
}

message RpcResult {
    // Whether or not the operation was successful.
    bool success = 1;
    // If the operation was not successful, this is an explanatory message.
    string reason = 2;
    // An HTTP-like status code.
    StatusCode code = 3;
}

message DataplaneCommon {
    // // Item labels. Retired 20180206 ATL.
    // map<string, string> labels = 1;

    // // Human-readable info. Retired 20180206 ATL.
    // string description = 2;

    // UUID. An opaque string used by the controlplane as a unique ID.
    string uuid = 3;

    // The config 'revision', an opaque integer used by the controlplane to identify a configuration iteration.
    // This is deliberately matched to the revision field in etcd ResponseHeader.revision.
    int64 revision = 4;

    // Latch for the versioning system. If true, updates will fail unless the generation of the change
    // is newer than the existing value.
    bool versioned = 5;
}

/**
 ** Crypto.
 **/

// The base crypto types use a `bytes` type for simplicity. They each have an
// exact size or maximum size that they _must_ respect.

message Aes256Key {
    // 32 bytes (256 bits) of AES-256 key as raw bytes.
    bytes key = 1;
}

message Aes256IV {
    // 32 bytes (256 bits) of IV as raw bytes.
    bytes iv = 1;
}

message XtsAes256Key {
    // 64 bytes (512 bits) of key data for XTS-AES 256 as raw bytes.
    bytes key = 1;
}

message EncryptedXtsAesKey {
    // 64 bytes (512 bits) + up to 16 bytes of key data + padding for an
    // encrypted XTS-AES 256 key, as raw data.
    bytes ekey = 1;
}

message XtsKeyHMAC {
    // 64 bytes (512 bits) of HMAC data.
    bytes hmac = 1;
}

/*
 * The VolumeKeySet is the keying information the controlplane needs to provide
 * for crypto on the volume.
 *
 * Having a structure for this may seem overkill, but right now we're
 * implementing a very simplified version of our protocol. In the future we will
 * have multiple users, and the dataplane can independently derive the master
 * key.
 */

message VolumeKeySet {
    // The AES-XTS 256 volume master key.
    XtsAes256Key vmk = 1;
}

message VolumeCrypto {
    // The crypto stepping version. Current version is 1.
    uint32 crypto_version = 2;

    enum VolumeCryptoState {
        VCS_NONE = 0;               // No encryption at all.
        VCS_FULLY_ENCRYPTED = 1;    // All blocks encrypted.
    }

    // The current crypto state for this volume.
    VolumeCryptoState crypto_state = 3;

    // The set of keys required to use the volume.
    VolumeKeySet keyset = 4;
}

/**
 ** Status.
 **/

message DaemonStatus {
    enum ProgramState {
        DS_NONE = 0;        // Status not set.
        DS_STARTING = 1;    // Program is starting.
        DS_READY = 2;       // Program has started and is ready to process requests.
        DS_STOPPING = 3;    // Program has begun to shut down.
        DS_STOPPED = 4;     // Program has shut down and may be safely terminated.
        DS_ERROR = 5;       // Program has encountered an error and should be considered failed.
        DS_CRITICAL = 6;    // Program has encountered a serious error and requires intervention.
    }

    ProgramState program_state = 1;

    string program_state_message = 2;
}

enum ConfigGetStatus {
    GET_NONE = 0;       // Status not set.
    GET_OK = 1;         // Fetch ok.
    GET_MISSING = 2;    // Item not found.
    GET_FAILED = 3;     // Item fetch general failure.
}

enum ConfigUpdateStatus {
    SET_NONE = 0;       // Status not set.
    SET_OK = 1;         // Update succeeded.
    SET_IMMUTABLE = 2;  // Set on creation, cannot be written.
    SET_FAILED = 3;     // General update failure.
    SET_READ_ONLY = 4;  // Can only be set by server, not via RPC.
}

message ConfigUpdateReply {
    ConfigUpdateStatus status = 1;
    RpcResult result = 2;
}

// Config bool.

message ConfigBool {
    string key = 1;
    bool value = 2;
}

message ConfigGetBoolReply {
    ConfigGetStatus status = 1;
    RpcResult result = 3;
    ConfigBool item = 2;
}

message ConfigBoolList {
    repeated ConfigBool items = 1;
}

// Config uint32.

message ConfigUint32 {
    string key = 1;
    uint32 value = 2;
}

message ConfigGetUint32Reply {
    ConfigGetStatus status = 1;
    RpcResult result = 3;
    ConfigUint32 item = 2;
}

message ConfigUint32List {
    repeated ConfigUint32 items = 1;
}

// Config uint64.

message ConfigUint64 {
    string key = 1;
    uint64 value = 2;
}

message ConfigGetUint64Reply {
    ConfigGetStatus status = 1;
    RpcResult result = 3;
    ConfigUint64 item = 2;
}

message ConfigUint64List {
    repeated ConfigUint64 items = 1;
}

// Config string.

message ConfigString {
    string key = 1;
    string value = 2;
}

message ConfigGetStringReply {
    ConfigGetStatus status = 1;
    RpcResult result = 3;
    ConfigString item = 2;
}

message ConfigStringList {
    repeated ConfigString items = 1;
}

// Config generic.

message ConfigKey {
    string key = 1;
}

message ConfigListQuery {
    // Nothing yet.
}
