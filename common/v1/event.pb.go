// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Log_LogLevel int32

const (
	Log_UNKNOWN Log_LogLevel = 0
	Log_TRACE   Log_LogLevel = 1
	Log_DEBUG   Log_LogLevel = 2
	Log_INFO    Log_LogLevel = 3
	Log_WARN    Log_LogLevel = 4
	Log_ERROR   Log_LogLevel = 5
	Log_FATAL   Log_LogLevel = 6
	Log_PANIC   Log_LogLevel = 7
)

var Log_LogLevel_name = map[int32]string{
	0: "UNKNOWN",
	1: "TRACE",
	2: "DEBUG",
	3: "INFO",
	4: "WARN",
	5: "ERROR",
	6: "FATAL",
	7: "PANIC",
}

var Log_LogLevel_value = map[string]int32{
	"UNKNOWN": 0,
	"TRACE":   1,
	"DEBUG":   2,
	"INFO":    3,
	"WARN":    4,
	"ERROR":   5,
	"FATAL":   6,
	"PANIC":   7,
}

func (x Log_LogLevel) String() string {
	return proto.EnumName(Log_LogLevel_name, int32(x))
}

func (Log_LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{4, 0}
}

// A timestamped Event message.
type EventRequest struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Event                *Event               `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *EventRequest) Reset()         { *m = EventRequest{} }
func (m *EventRequest) String() string { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()    {}
func (*EventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{0}
}

func (m *EventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventRequest.Unmarshal(m, b)
}
func (m *EventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventRequest.Marshal(b, m, deterministic)
}
func (m *EventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRequest.Merge(m, src)
}
func (m *EventRequest) XXX_Size() int {
	return xxx_messageInfo_EventRequest.Size(m)
}
func (m *EventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EventRequest proto.InternalMessageInfo

func (m *EventRequest) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *EventRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventResponse) Reset()         { *m = EventResponse{} }
func (m *EventResponse) String() string { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()    {}
func (*EventResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{1}
}

func (m *EventResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventResponse.Unmarshal(m, b)
}
func (m *EventResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventResponse.Marshal(b, m, deterministic)
}
func (m *EventResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventResponse.Merge(m, src)
}
func (m *EventResponse) XXX_Size() int {
	return xxx_messageInfo_EventResponse.Size(m)
}
func (m *EventResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EventResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EventResponse proto.InternalMessageInfo

// A timestamped Log message.
type LogRequest struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Log                  *Log                 `protobuf:"bytes,2,opt,name=log,proto3" json:"log,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LogRequest) Reset()         { *m = LogRequest{} }
func (m *LogRequest) String() string { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()    {}
func (*LogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{2}
}

func (m *LogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRequest.Unmarshal(m, b)
}
func (m *LogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRequest.Marshal(b, m, deterministic)
}
func (m *LogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRequest.Merge(m, src)
}
func (m *LogRequest) XXX_Size() int {
	return xxx_messageInfo_LogRequest.Size(m)
}
func (m *LogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LogRequest proto.InternalMessageInfo

func (m *LogRequest) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *LogRequest) GetLog() *Log {
	if m != nil {
		return m.Log
	}
	return nil
}

type LogResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogResponse) Reset()         { *m = LogResponse{} }
func (m *LogResponse) String() string { return proto.CompactTextString(m) }
func (*LogResponse) ProtoMessage()    {}
func (*LogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{3}
}

func (m *LogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogResponse.Unmarshal(m, b)
}
func (m *LogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogResponse.Marshal(b, m, deterministic)
}
func (m *LogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogResponse.Merge(m, src)
}
func (m *LogResponse) XXX_Size() int {
	return xxx_messageInfo_LogResponse.Size(m)
}
func (m *LogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LogResponse proto.InternalMessageInfo

// A freeform log message with optional (but strongly recommended) string:string
// context.
type Log struct {
	// The log level, mapped to the syslog(3) levels.
	Level Log_LogLevel `protobuf:"varint,1,opt,name=level,proto3,enum=common.v1.Log_LogLevel" json:"level,omitempty"`
	// The log category, a string provided by the caller to help with filtering.
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	// The context, a map of zero or more string keys mapped to string values.
	// This helps users correlate log messages and should be populated with as
	// much (relevant) context as can be provided.
	Context map[string]string `protobuf:"bytes,3,rep,name=context,proto3" json:"context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The log message as a simple string. This is a std::string type in C++
	// mapped to protobuf's string. As a result, keeping the input to ASCII7
	// guarantees sane results.
	Message              string   `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Log) Reset()         { *m = Log{} }
func (m *Log) String() string { return proto.CompactTextString(m) }
func (*Log) ProtoMessage()    {}
func (*Log) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{4}
}

func (m *Log) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Log.Unmarshal(m, b)
}
func (m *Log) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Log.Marshal(b, m, deterministic)
}
func (m *Log) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Log.Merge(m, src)
}
func (m *Log) XXX_Size() int {
	return xxx_messageInfo_Log.Size(m)
}
func (m *Log) XXX_DiscardUnknown() {
	xxx_messageInfo_Log.DiscardUnknown(m)
}

var xxx_messageInfo_Log proto.InternalMessageInfo

func (m *Log) GetLevel() Log_LogLevel {
	if m != nil {
		return m.Level
	}
	return Log_UNKNOWN
}

func (m *Log) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Log) GetContext() map[string]string {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *Log) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// An Event message. This is a contract between the 'planes. DP sends these
// events with the prescribed parameters, for the CP to dispose appropriately.
//
// DP should not expect to get meaningful or timely responses from the CP to
// these events, past the generic gRPC response codes - it's not intended as a
// bidirectional communication mechanism.
type Event struct {
	// A text context for the event, intended to help the user and/or support.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Exactly one event. Consider all of the event type's fields to be mandatory.
	//
	// Types that are valid to be assigned to Event:
	//	*Event_Ping
	//	*Event_DataplaneStartupFinished
	//	*Event_DataplaneShutdownStarted
	//	*Event_DataplaneShutdownFinished
	//	*Event_ResponderConnLost
	//	*Event_ResponderConnEstablished
	//	*Event_InitiatorConnLost
	//	*Event_InitiatorConnEstablished
	Event                isEvent_Event `protobuf_oneof:"event"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{5}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type isEvent_Event interface {
	isEvent_Event()
}

type Event_Ping struct {
	Ping *EventPing `protobuf:"bytes,10,opt,name=ping,proto3,oneof"`
}

type Event_DataplaneStartupFinished struct {
	DataplaneStartupFinished *EventDataplaneStartupFinished `protobuf:"bytes,15,opt,name=dataplane_startup_finished,json=dataplaneStartupFinished,proto3,oneof"`
}

type Event_DataplaneShutdownStarted struct {
	DataplaneShutdownStarted *EventDataplaneShutdownStarted `protobuf:"bytes,16,opt,name=dataplane_shutdown_started,json=dataplaneShutdownStarted,proto3,oneof"`
}

type Event_DataplaneShutdownFinished struct {
	DataplaneShutdownFinished *EventDataplaneShutdownCompleted `protobuf:"bytes,17,opt,name=dataplane_shutdown_finished,json=dataplaneShutdownFinished,proto3,oneof"`
}

type Event_ResponderConnLost struct {
	ResponderConnLost *EventResponderConnectionLost `protobuf:"bytes,11,opt,name=responder_conn_lost,json=responderConnLost,proto3,oneof"`
}

type Event_ResponderConnEstablished struct {
	ResponderConnEstablished *EventResponderConnectionEstablished `protobuf:"bytes,13,opt,name=responder_conn_established,json=responderConnEstablished,proto3,oneof"`
}

type Event_InitiatorConnLost struct {
	InitiatorConnLost *EventInitiatorConnectionLost `protobuf:"bytes,12,opt,name=initiator_conn_lost,json=initiatorConnLost,proto3,oneof"`
}

type Event_InitiatorConnEstablished struct {
	InitiatorConnEstablished *EventInitiatorConnectionEstablished `protobuf:"bytes,14,opt,name=initiator_conn_established,json=initiatorConnEstablished,proto3,oneof"`
}

func (*Event_Ping) isEvent_Event() {}

func (*Event_DataplaneStartupFinished) isEvent_Event() {}

func (*Event_DataplaneShutdownStarted) isEvent_Event() {}

func (*Event_DataplaneShutdownFinished) isEvent_Event() {}

func (*Event_ResponderConnLost) isEvent_Event() {}

func (*Event_ResponderConnEstablished) isEvent_Event() {}

func (*Event_InitiatorConnLost) isEvent_Event() {}

func (*Event_InitiatorConnEstablished) isEvent_Event() {}

func (m *Event) GetEvent() isEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *Event) GetPing() *EventPing {
	if x, ok := m.GetEvent().(*Event_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *Event) GetDataplaneStartupFinished() *EventDataplaneStartupFinished {
	if x, ok := m.GetEvent().(*Event_DataplaneStartupFinished); ok {
		return x.DataplaneStartupFinished
	}
	return nil
}

func (m *Event) GetDataplaneShutdownStarted() *EventDataplaneShutdownStarted {
	if x, ok := m.GetEvent().(*Event_DataplaneShutdownStarted); ok {
		return x.DataplaneShutdownStarted
	}
	return nil
}

func (m *Event) GetDataplaneShutdownFinished() *EventDataplaneShutdownCompleted {
	if x, ok := m.GetEvent().(*Event_DataplaneShutdownFinished); ok {
		return x.DataplaneShutdownFinished
	}
	return nil
}

func (m *Event) GetResponderConnLost() *EventResponderConnectionLost {
	if x, ok := m.GetEvent().(*Event_ResponderConnLost); ok {
		return x.ResponderConnLost
	}
	return nil
}

func (m *Event) GetResponderConnEstablished() *EventResponderConnectionEstablished {
	if x, ok := m.GetEvent().(*Event_ResponderConnEstablished); ok {
		return x.ResponderConnEstablished
	}
	return nil
}

func (m *Event) GetInitiatorConnLost() *EventInitiatorConnectionLost {
	if x, ok := m.GetEvent().(*Event_InitiatorConnLost); ok {
		return x.InitiatorConnLost
	}
	return nil
}

func (m *Event) GetInitiatorConnEstablished() *EventInitiatorConnectionEstablished {
	if x, ok := m.GetEvent().(*Event_InitiatorConnEstablished); ok {
		return x.InitiatorConnEstablished
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Event) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Event_Ping)(nil),
		(*Event_DataplaneStartupFinished)(nil),
		(*Event_DataplaneShutdownStarted)(nil),
		(*Event_DataplaneShutdownFinished)(nil),
		(*Event_ResponderConnLost)(nil),
		(*Event_ResponderConnEstablished)(nil),
		(*Event_InitiatorConnLost)(nil),
		(*Event_InitiatorConnEstablished)(nil),
	}
}

// A diagnostic event that does nothing except send a few integers to the
// server.
type EventPing struct {
	// A sender-defined ID.
	RandomId uint32 `protobuf:"varint,1,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	// A sender-defined index.
	Index                uint32   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventPing) Reset()         { *m = EventPing{} }
func (m *EventPing) String() string { return proto.CompactTextString(m) }
func (*EventPing) ProtoMessage()    {}
func (*EventPing) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{6}
}

func (m *EventPing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventPing.Unmarshal(m, b)
}
func (m *EventPing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventPing.Marshal(b, m, deterministic)
}
func (m *EventPing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPing.Merge(m, src)
}
func (m *EventPing) XXX_Size() int {
	return xxx_messageInfo_EventPing.Size(m)
}
func (m *EventPing) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPing.DiscardUnknown(m)
}

var xxx_messageInfo_EventPing proto.InternalMessageInfo

func (m *EventPing) GetRandomId() uint32 {
	if m != nil {
		return m.RandomId
	}
	return 0
}

func (m *EventPing) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

// Notify the controlplane that the DFS responder has lost its
// connection with a remote initiator.
type EventResponderConnectionLost struct {
	// This node's node UUID.
	NodeUuid string `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty"`
	// The node UUID of the initiator this responder has lost its connection to.
	PeerUuid string `protobuf:"bytes,2,opt,name=peer_uuid,json=peerUuid,proto3" json:"peer_uuid,omitempty"`
	// The IP address of the initiator this responder has lost its connection to.
	// (liable to be garbage if we're behind a NAT).
	PeerAddress          string   `protobuf:"bytes,3,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventResponderConnectionLost) Reset()         { *m = EventResponderConnectionLost{} }
func (m *EventResponderConnectionLost) String() string { return proto.CompactTextString(m) }
func (*EventResponderConnectionLost) ProtoMessage()    {}
func (*EventResponderConnectionLost) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{7}
}

func (m *EventResponderConnectionLost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventResponderConnectionLost.Unmarshal(m, b)
}
func (m *EventResponderConnectionLost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventResponderConnectionLost.Marshal(b, m, deterministic)
}
func (m *EventResponderConnectionLost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventResponderConnectionLost.Merge(m, src)
}
func (m *EventResponderConnectionLost) XXX_Size() int {
	return xxx_messageInfo_EventResponderConnectionLost.Size(m)
}
func (m *EventResponderConnectionLost) XXX_DiscardUnknown() {
	xxx_messageInfo_EventResponderConnectionLost.DiscardUnknown(m)
}

var xxx_messageInfo_EventResponderConnectionLost proto.InternalMessageInfo

func (m *EventResponderConnectionLost) GetNodeUuid() string {
	if m != nil {
		return m.NodeUuid
	}
	return ""
}

func (m *EventResponderConnectionLost) GetPeerUuid() string {
	if m != nil {
		return m.PeerUuid
	}
	return ""
}

func (m *EventResponderConnectionLost) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

// Notify the controlplane that the DFS responder has established a
// connection with a remote initiator.
type EventResponderConnectionEstablished struct {
	// This node's node UUID.
	NodeUuid string `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty"`
	// The node UUID of the initiator this responder has connected to.
	PeerUuid string `protobuf:"bytes,2,opt,name=peer_uuid,json=peerUuid,proto3" json:"peer_uuid,omitempty"`
	// The IP address of the initiator this responder has connected to.
	// (liable to be garbage if we're behind a NAT).
	PeerAddress          string   `protobuf:"bytes,3,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventResponderConnectionEstablished) Reset()         { *m = EventResponderConnectionEstablished{} }
func (m *EventResponderConnectionEstablished) String() string { return proto.CompactTextString(m) }
func (*EventResponderConnectionEstablished) ProtoMessage()    {}
func (*EventResponderConnectionEstablished) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{8}
}

func (m *EventResponderConnectionEstablished) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventResponderConnectionEstablished.Unmarshal(m, b)
}
func (m *EventResponderConnectionEstablished) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventResponderConnectionEstablished.Marshal(b, m, deterministic)
}
func (m *EventResponderConnectionEstablished) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventResponderConnectionEstablished.Merge(m, src)
}
func (m *EventResponderConnectionEstablished) XXX_Size() int {
	return xxx_messageInfo_EventResponderConnectionEstablished.Size(m)
}
func (m *EventResponderConnectionEstablished) XXX_DiscardUnknown() {
	xxx_messageInfo_EventResponderConnectionEstablished.DiscardUnknown(m)
}

var xxx_messageInfo_EventResponderConnectionEstablished proto.InternalMessageInfo

func (m *EventResponderConnectionEstablished) GetNodeUuid() string {
	if m != nil {
		return m.NodeUuid
	}
	return ""
}

func (m *EventResponderConnectionEstablished) GetPeerUuid() string {
	if m != nil {
		return m.PeerUuid
	}
	return ""
}

func (m *EventResponderConnectionEstablished) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

// Notify the controlplane the the DFS initiator has lost its
// connection with a remote responder
type EventInitiatorConnectionLost struct {
	// This node's node UUID.
	NodeUuid string `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty"`
	// The node UUID of the responder this initiator has lost its connection to.
	PeerUuid string `protobuf:"bytes,2,opt,name=peer_uuid,json=peerUuid,proto3" json:"peer_uuid,omitempty"`
	// The IP address of the responder this initiator has lost its connection to.
	// (liable to be garbage if we're behind a NAT).
	PeerAddress          string   `protobuf:"bytes,3,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventInitiatorConnectionLost) Reset()         { *m = EventInitiatorConnectionLost{} }
func (m *EventInitiatorConnectionLost) String() string { return proto.CompactTextString(m) }
func (*EventInitiatorConnectionLost) ProtoMessage()    {}
func (*EventInitiatorConnectionLost) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{9}
}

func (m *EventInitiatorConnectionLost) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventInitiatorConnectionLost.Unmarshal(m, b)
}
func (m *EventInitiatorConnectionLost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventInitiatorConnectionLost.Marshal(b, m, deterministic)
}
func (m *EventInitiatorConnectionLost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInitiatorConnectionLost.Merge(m, src)
}
func (m *EventInitiatorConnectionLost) XXX_Size() int {
	return xxx_messageInfo_EventInitiatorConnectionLost.Size(m)
}
func (m *EventInitiatorConnectionLost) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInitiatorConnectionLost.DiscardUnknown(m)
}

var xxx_messageInfo_EventInitiatorConnectionLost proto.InternalMessageInfo

func (m *EventInitiatorConnectionLost) GetNodeUuid() string {
	if m != nil {
		return m.NodeUuid
	}
	return ""
}

func (m *EventInitiatorConnectionLost) GetPeerUuid() string {
	if m != nil {
		return m.PeerUuid
	}
	return ""
}

func (m *EventInitiatorConnectionLost) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

// Notify the controlplane that the DFS initiator has established a
// connection with a remote responder.
type EventInitiatorConnectionEstablished struct {
	// This node's node UUID.
	NodeUuid string `protobuf:"bytes,1,opt,name=node_uuid,json=nodeUuid,proto3" json:"node_uuid,omitempty"`
	// The node UUID of the responder this initiator has connected to.
	PeerUuid string `protobuf:"bytes,2,opt,name=peer_uuid,json=peerUuid,proto3" json:"peer_uuid,omitempty"`
	// The IP address of the responder this initiator has connected to
	// (liable to be garbage if we're behind a NAT).
	PeerAddress          string   `protobuf:"bytes,3,opt,name=peer_address,json=peerAddress,proto3" json:"peer_address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventInitiatorConnectionEstablished) Reset()         { *m = EventInitiatorConnectionEstablished{} }
func (m *EventInitiatorConnectionEstablished) String() string { return proto.CompactTextString(m) }
func (*EventInitiatorConnectionEstablished) ProtoMessage()    {}
func (*EventInitiatorConnectionEstablished) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{10}
}

func (m *EventInitiatorConnectionEstablished) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventInitiatorConnectionEstablished.Unmarshal(m, b)
}
func (m *EventInitiatorConnectionEstablished) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventInitiatorConnectionEstablished.Marshal(b, m, deterministic)
}
func (m *EventInitiatorConnectionEstablished) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInitiatorConnectionEstablished.Merge(m, src)
}
func (m *EventInitiatorConnectionEstablished) XXX_Size() int {
	return xxx_messageInfo_EventInitiatorConnectionEstablished.Size(m)
}
func (m *EventInitiatorConnectionEstablished) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInitiatorConnectionEstablished.DiscardUnknown(m)
}

var xxx_messageInfo_EventInitiatorConnectionEstablished proto.InternalMessageInfo

func (m *EventInitiatorConnectionEstablished) GetNodeUuid() string {
	if m != nil {
		return m.NodeUuid
	}
	return ""
}

func (m *EventInitiatorConnectionEstablished) GetPeerUuid() string {
	if m != nil {
		return m.PeerUuid
	}
	return ""
}

func (m *EventInitiatorConnectionEstablished) GetPeerAddress() string {
	if m != nil {
		return m.PeerAddress
	}
	return ""
}

// The dataplane startup has completed, and the runloop is about to be entered.
type EventDataplaneStartupFinished struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventDataplaneStartupFinished) Reset()         { *m = EventDataplaneStartupFinished{} }
func (m *EventDataplaneStartupFinished) String() string { return proto.CompactTextString(m) }
func (*EventDataplaneStartupFinished) ProtoMessage()    {}
func (*EventDataplaneStartupFinished) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{11}
}

func (m *EventDataplaneStartupFinished) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventDataplaneStartupFinished.Unmarshal(m, b)
}
func (m *EventDataplaneStartupFinished) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventDataplaneStartupFinished.Marshal(b, m, deterministic)
}
func (m *EventDataplaneStartupFinished) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDataplaneStartupFinished.Merge(m, src)
}
func (m *EventDataplaneStartupFinished) XXX_Size() int {
	return xxx_messageInfo_EventDataplaneStartupFinished.Size(m)
}
func (m *EventDataplaneStartupFinished) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDataplaneStartupFinished.DiscardUnknown(m)
}

var xxx_messageInfo_EventDataplaneStartupFinished proto.InternalMessageInfo

// The dataplane is shutting down. There may be multiple events of this type,
// think of it as 'shutdown in progress'.
type EventDataplaneShutdownStarted struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventDataplaneShutdownStarted) Reset()         { *m = EventDataplaneShutdownStarted{} }
func (m *EventDataplaneShutdownStarted) String() string { return proto.CompactTextString(m) }
func (*EventDataplaneShutdownStarted) ProtoMessage()    {}
func (*EventDataplaneShutdownStarted) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{12}
}

func (m *EventDataplaneShutdownStarted) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventDataplaneShutdownStarted.Unmarshal(m, b)
}
func (m *EventDataplaneShutdownStarted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventDataplaneShutdownStarted.Marshal(b, m, deterministic)
}
func (m *EventDataplaneShutdownStarted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDataplaneShutdownStarted.Merge(m, src)
}
func (m *EventDataplaneShutdownStarted) XXX_Size() int {
	return xxx_messageInfo_EventDataplaneShutdownStarted.Size(m)
}
func (m *EventDataplaneShutdownStarted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDataplaneShutdownStarted.DiscardUnknown(m)
}

var xxx_messageInfo_EventDataplaneShutdownStarted proto.InternalMessageInfo

// The dataplane has completely shut down and is about to exit.
type EventDataplaneShutdownCompleted struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventDataplaneShutdownCompleted) Reset()         { *m = EventDataplaneShutdownCompleted{} }
func (m *EventDataplaneShutdownCompleted) String() string { return proto.CompactTextString(m) }
func (*EventDataplaneShutdownCompleted) ProtoMessage()    {}
func (*EventDataplaneShutdownCompleted) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d17a9d3f0ddf27e, []int{13}
}

func (m *EventDataplaneShutdownCompleted) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventDataplaneShutdownCompleted.Unmarshal(m, b)
}
func (m *EventDataplaneShutdownCompleted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventDataplaneShutdownCompleted.Marshal(b, m, deterministic)
}
func (m *EventDataplaneShutdownCompleted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventDataplaneShutdownCompleted.Merge(m, src)
}
func (m *EventDataplaneShutdownCompleted) XXX_Size() int {
	return xxx_messageInfo_EventDataplaneShutdownCompleted.Size(m)
}
func (m *EventDataplaneShutdownCompleted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventDataplaneShutdownCompleted.DiscardUnknown(m)
}

var xxx_messageInfo_EventDataplaneShutdownCompleted proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("common.v1.Log_LogLevel", Log_LogLevel_name, Log_LogLevel_value)
	proto.RegisterType((*EventRequest)(nil), "common.v1.EventRequest")
	proto.RegisterType((*EventResponse)(nil), "common.v1.EventResponse")
	proto.RegisterType((*LogRequest)(nil), "common.v1.LogRequest")
	proto.RegisterType((*LogResponse)(nil), "common.v1.LogResponse")
	proto.RegisterType((*Log)(nil), "common.v1.Log")
	proto.RegisterMapType((map[string]string)(nil), "common.v1.Log.ContextEntry")
	proto.RegisterType((*Event)(nil), "common.v1.Event")
	proto.RegisterType((*EventPing)(nil), "common.v1.EventPing")
	proto.RegisterType((*EventResponderConnectionLost)(nil), "common.v1.EventResponderConnectionLost")
	proto.RegisterType((*EventResponderConnectionEstablished)(nil), "common.v1.EventResponderConnectionEstablished")
	proto.RegisterType((*EventInitiatorConnectionLost)(nil), "common.v1.EventInitiatorConnectionLost")
	proto.RegisterType((*EventInitiatorConnectionEstablished)(nil), "common.v1.EventInitiatorConnectionEstablished")
	proto.RegisterType((*EventDataplaneStartupFinished)(nil), "common.v1.EventDataplaneStartupFinished")
	proto.RegisterType((*EventDataplaneShutdownStarted)(nil), "common.v1.EventDataplaneShutdownStarted")
	proto.RegisterType((*EventDataplaneShutdownCompleted)(nil), "common.v1.EventDataplaneShutdownCompleted")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor_2d17a9d3f0ddf27e) }

var fileDescriptor_2d17a9d3f0ddf27e = []byte{
	// 841 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x51, 0x6f, 0xdb, 0x36,
	0x10, 0x8e, 0xe3, 0x38, 0xb6, 0xcf, 0x71, 0xaa, 0x72, 0xdd, 0xaa, 0x39, 0x1b, 0x92, 0x6a, 0xc0,
	0x16, 0x14, 0x98, 0xbc, 0x66, 0x1b, 0x50, 0xe4, 0x61, 0x80, 0xe3, 0x3a, 0x8b, 0x31, 0xc3, 0x09,
	0xd8, 0x04, 0xc5, 0xf6, 0x62, 0x28, 0xd6, 0x55, 0x11, 0x26, 0x93, 0x9a, 0x48, 0x79, 0x0d, 0xb6,
	0xa7, 0xfd, 0xa8, 0xbd, 0xef, 0x9f, 0x0d, 0x24, 0x25, 0x57, 0x96, 0xdd, 0xa4, 0xc0, 0xd0, 0x3d,
	0x18, 0x20, 0xef, 0xfb, 0xee, 0xbe, 0x3b, 0x91, 0x77, 0x34, 0xb4, 0x70, 0x8e, 0x4c, 0xba, 0x71,
	0xc2, 0x25, 0x27, 0xcd, 0x29, 0x9f, 0xcd, 0x38, 0x73, 0xe7, 0xcf, 0x3a, 0xfb, 0x01, 0xe7, 0x41,
	0x84, 0x5d, 0x0d, 0x5c, 0xa7, 0xaf, 0xbb, 0x32, 0x9c, 0xa1, 0x90, 0xde, 0x2c, 0x36, 0x5c, 0x27,
	0x86, 0x9d, 0x81, 0x72, 0xa5, 0xf8, 0x5b, 0x8a, 0x42, 0x92, 0xe7, 0xd0, 0x5c, 0x50, 0xec, 0xca,
	0x41, 0xe5, 0xb0, 0x75, 0xd4, 0x71, 0x4d, 0x10, 0x37, 0x0f, 0xe2, 0x5e, 0xe6, 0x0c, 0xfa, 0x96,
	0x4c, 0xbe, 0x84, 0x9a, 0x4e, 0xc2, 0xde, 0xd4, 0x5e, 0x96, 0xbb, 0xc8, 0xc2, 0x35, 0x0a, 0x06,
	0x76, 0x1e, 0x40, 0x3b, 0x53, 0x14, 0x31, 0x67, 0x02, 0x9d, 0x1b, 0x80, 0x11, 0x0f, 0xfe, 0x7b,
	0x02, 0x07, 0x50, 0x8d, 0x78, 0x90, 0xc9, 0xef, 0x16, 0xe4, 0x55, 0x74, 0x05, 0x39, 0x6d, 0x68,
	0x69, 0xa5, 0x4c, 0xf8, 0x9f, 0x4d, 0xa8, 0x8e, 0x78, 0x40, 0xbe, 0x86, 0x5a, 0x84, 0x73, 0x8c,
	0xb4, 0xdc, 0xee, 0xd1, 0xe3, 0x65, 0x57, 0xf5, 0x1b, 0x29, 0x98, 0x1a, 0x16, 0xe9, 0x40, 0x63,
	0xea, 0x49, 0x0c, 0x78, 0x72, 0xab, 0xc5, 0x9a, 0x74, 0xb1, 0x27, 0xdf, 0x43, 0x7d, 0xca, 0x99,
	0xc4, 0x37, 0xd2, 0xae, 0x1e, 0x54, 0x0f, 0x5b, 0x47, 0x7b, 0xa5, 0x60, 0x7d, 0x83, 0x0e, 0x98,
	0x4c, 0x6e, 0x69, 0xce, 0x25, 0x36, 0xd4, 0x67, 0x28, 0x84, 0x17, 0xa0, 0xbd, 0xa5, 0x23, 0xe6,
	0xdb, 0xce, 0x31, 0xec, 0x14, 0x5d, 0x88, 0x05, 0xd5, 0x5f, 0xf1, 0x56, 0x67, 0xda, 0xa4, 0x6a,
	0x49, 0x1e, 0x41, 0x6d, 0xee, 0x45, 0x29, 0x66, 0xb9, 0x98, 0xcd, 0xf1, 0xe6, 0xf3, 0x8a, 0x73,
	0x0d, 0x8d, 0x3c, 0x77, 0xd2, 0x82, 0xfa, 0xd5, 0xf8, 0xa7, 0xf1, 0xf9, 0xab, 0xb1, 0xb5, 0x41,
	0x9a, 0x50, 0xbb, 0xa4, 0xbd, 0xfe, 0xc0, 0xaa, 0xa8, 0xe5, 0x8b, 0xc1, 0xc9, 0xd5, 0x8f, 0xd6,
	0x26, 0x69, 0xc0, 0xd6, 0x70, 0x7c, 0x7a, 0x6e, 0x55, 0xd5, 0xea, 0x55, 0x8f, 0x8e, 0xad, 0x2d,
	0x05, 0x0f, 0x28, 0x3d, 0xa7, 0x56, 0x4d, 0x2d, 0x4f, 0x7b, 0x97, 0xbd, 0x91, 0xb5, 0xad, 0x96,
	0x17, 0xbd, 0xf1, 0xb0, 0x6f, 0xd5, 0x9d, 0xbf, 0xb7, 0xa1, 0xa6, 0x8f, 0x93, 0x1c, 0x40, 0xcb,
	0x47, 0x31, 0x4d, 0xc2, 0x58, 0x86, 0x9c, 0x65, 0xd9, 0x14, 0x4d, 0xe4, 0x29, 0x6c, 0xc5, 0x21,
	0x0b, 0x6c, 0xd0, 0x27, 0xf4, 0xa8, 0x7c, 0x41, 0x2e, 0x42, 0x16, 0x9c, 0x6d, 0x50, 0xcd, 0x21,
	0x37, 0xd0, 0xf1, 0x3d, 0xe9, 0xc5, 0x91, 0xc7, 0x70, 0x22, 0xa4, 0x97, 0xc8, 0x34, 0x9e, 0xbc,
	0x0e, 0x59, 0x28, 0x6e, 0xd0, 0xb7, 0x1f, 0xe8, 0x08, 0x87, 0xe5, 0x08, 0x2f, 0x72, 0x8f, 0x97,
	0xc6, 0xe1, 0x34, 0xe3, 0x9f, 0x6d, 0x50, 0xdb, 0x7f, 0x07, 0x56, 0x52, 0xba, 0x49, 0xa5, 0xcf,
	0x7f, 0x67, 0x46, 0x12, 0x7d, 0xdb, 0xba, 0x4f, 0x29, 0x73, 0x78, 0x69, 0xf8, 0xcb, 0x4a, 0xcb,
	0x18, 0x89, 0x60, 0x6f, 0x8d, 0xd2, 0xa2, 0xa8, 0x87, 0x5a, 0xea, 0xe9, 0xbd, 0x52, 0x7d, 0x3e,
	0x8b, 0x23, 0x34, 0x62, 0x9f, 0xae, 0x88, 0x2d, 0xea, 0xfa, 0x19, 0x3e, 0x4a, 0xf4, 0x4d, 0xf7,
	0x31, 0x99, 0x4c, 0x39, 0x63, 0x93, 0x88, 0x0b, 0x69, 0xb7, 0xb4, 0xca, 0x57, 0x2b, 0xdd, 0x99,
	0x53, 0xfb, 0x9c, 0x31, 0x9c, 0xaa, 0xf3, 0x1a, 0x71, 0x21, 0xcf, 0x36, 0xe8, 0xc3, 0xa4, 0x08,
	0x29, 0x23, 0x61, 0xd0, 0x29, 0x85, 0x56, 0x2d, 0x78, 0x1d, 0x99, 0x3a, 0xda, 0x5a, 0xc1, 0x7d,
	0x0f, 0x85, 0xc1, 0x5b, 0x2f, 0xf5, 0xe1, 0x96, 0x84, 0x0a, 0x98, 0x2a, 0x25, 0x64, 0xa1, 0x0c,
	0x3d, 0xc9, 0x8b, 0xa5, 0xec, 0xac, 0x2f, 0x65, 0x98, 0x53, 0x57, 0x4b, 0x09, 0x8b, 0x50, 0x5e,
	0x4a, 0x29, 0x74, 0xb1, 0x94, 0xdd, 0xf5, 0xa5, 0xac, 0x51, 0x28, 0x95, 0xb2, 0x24, 0x54, 0xc0,
	0x4e, 0xea, 0xd9, 0x94, 0x74, 0x7e, 0x80, 0xe6, 0xe2, 0xd6, 0x93, 0x3d, 0x68, 0x26, 0x1e, 0xf3,
	0xf9, 0x6c, 0x12, 0xfa, 0xba, 0xb7, 0xdb, 0xb4, 0x61, 0x0c, 0x43, 0x5f, 0x35, 0x78, 0xc8, 0x7c,
	0x7c, 0xa3, 0x5b, 0xaa, 0x4d, 0xcd, 0xc6, 0xf9, 0x03, 0x3e, 0xbb, 0xeb, 0xe0, 0x54, 0x48, 0xc6,
	0x7d, 0x9c, 0xa4, 0x69, 0x16, 0xb2, 0x49, 0x1b, 0xca, 0x70, 0x95, 0x86, 0xbe, 0x02, 0x63, 0xc4,
	0xc4, 0x80, 0xd9, 0x0c, 0x53, 0x06, 0x0d, 0x3e, 0x81, 0x1d, 0x0d, 0x7a, 0xbe, 0x9f, 0xa0, 0x10,
	0x76, 0xd5, 0x74, 0xb2, 0xb2, 0xf5, 0x8c, 0xc9, 0xf9, 0xab, 0x02, 0x5f, 0xbc, 0xc7, 0xa1, 0x7e,
	0xd8, 0x24, 0xf2, 0x2f, 0xf0, 0x8e, 0xf3, 0xfe, 0x9f, 0xbe, 0xc0, 0xdd, 0x77, 0xe1, 0xc3, 0x26,
	0xb1, 0x0f, 0x9f, 0xdf, 0x39, 0xf7, 0xd6, 0x10, 0x96, 0x47, 0x92, 0xf3, 0x04, 0xf6, 0xef, 0x19,
	0x32, 0x47, 0x7f, 0x42, 0x43, 0x53, 0x7a, 0x17, 0x43, 0x72, 0x9c, 0x0f, 0xfb, 0xc7, 0xab, 0xdd,
	0xad, 0x9f, 0xef, 0x8e, 0xbd, 0xbe, 0xed, 0x05, 0x92, 0xef, 0xcc, 0x63, 0xfb, 0x71, 0xe9, 0x61,
	0xce, 0xfc, 0x3e, 0x29, 0x9b, 0x8d, 0xd7, 0xc9, 0x37, 0xbf, 0xb8, 0x53, 0xee, 0xa3, 0x2b, 0x24,
	0x4f, 0xbc, 0x00, 0xb9, 0x70, 0x19, 0xca, 0xee, 0x62, 0xd7, 0x15, 0x98, 0xcc, 0xc3, 0x29, 0x76,
	0x8d, 0x77, 0x77, 0xfe, 0xec, 0x7a, 0x5b, 0xff, 0x4b, 0xf8, 0xf6, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xdf, 0x17, 0x70, 0xd5, 0x13, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventAPIClient is the client API for EventAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventAPIClient interface {
	// The Event service is used to send strongly-typed events from the dataplane
	// to the controlplane. Each event has its own APIs and its own semantics,
	// defined below.
	Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
	// The Log service is used to send general-purpose log entries from the
	// dataplane to the controlplane. Context is sent as map<string,string>
	// key-value pairs with arbitrary keys, for the controlplane to dispose as it
	// sees fit.
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
}

type eventAPIClient struct {
	cc *grpc.ClientConn
}

func NewEventAPIClient(cc *grpc.ClientConn) EventAPIClient {
	return &eventAPIClient{cc}
}

func (c *eventAPIClient) Event(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := c.cc.Invoke(ctx, "/common.v1.EventAPI/Event", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventAPIClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/common.v1.EventAPI/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventAPIServer is the server API for EventAPI service.
type EventAPIServer interface {
	// The Event service is used to send strongly-typed events from the dataplane
	// to the controlplane. Each event has its own APIs and its own semantics,
	// defined below.
	Event(context.Context, *EventRequest) (*EventResponse, error)
	// The Log service is used to send general-purpose log entries from the
	// dataplane to the controlplane. Context is sent as map<string,string>
	// key-value pairs with arbitrary keys, for the controlplane to dispose as it
	// sees fit.
	Log(context.Context, *LogRequest) (*LogResponse, error)
}

// UnimplementedEventAPIServer can be embedded to have forward compatible implementations.
type UnimplementedEventAPIServer struct {
}

func (*UnimplementedEventAPIServer) Event(ctx context.Context, req *EventRequest) (*EventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Event not implemented")
}
func (*UnimplementedEventAPIServer) Log(ctx context.Context, req *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}

func RegisterEventAPIServer(s *grpc.Server, srv EventAPIServer) {
	s.RegisterService(&_EventAPI_serviceDesc, srv)
}

func _EventAPI_Event_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAPIServer).Event(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.v1.EventAPI/Event",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAPIServer).Event(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventAPI_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventAPIServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/common.v1.EventAPI/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventAPIServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "common.v1.EventAPI",
	HandlerType: (*EventAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Event",
			Handler:    _EventAPI_Event_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _EventAPI_Log_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event.proto",
}
