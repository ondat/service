// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

/*
Package common_v1 is a generated protocol buffer package.

It is generated from these files:
	common.proto

It has these top-level messages:
	RpcResult
	DataplaneCommon
	Aes256Key
	Aes256IV
	XtsAes256Key
	EncryptedXtsAesKey
	XtsKeyHMAC
	VolumeKeySet
	VolumeCrypto
	DaemonStatus
	ConfigUpdateReply
	ConfigBool
	ConfigGetBoolReply
	ConfigBoolList
	ConfigUint32
	ConfigGetUint32Reply
	ConfigUint32List
	ConfigUint64
	ConfigGetUint64Reply
	ConfigUint64List
	ConfigString
	ConfigGetStringReply
	ConfigStringList
	ConfigKey
	ConfigListQuery
*/
package common_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatusCode int32

const (
	// Status code not set.
	StatusCode_STATUS_NONE StatusCode = 0
	// Generic 'no problem' response.
	StatusCode_STATUS_OK StatusCode = 200
	// Accepted, but might not take effect immediately.
	StatusCode_STATUS_ACCEPTED StatusCode = 202
	// Resource created.
	StatusCode_STATUS_CREATED StatusCode = 201
	// Generic 'huh?'.
	StatusCode_STATUS_BAD_REQUEST StatusCode = 400
	// Not permitted. We're unlikely to use this, it indicates authorization will help.
	StatusCode_STATUS_UNAUTHORIZED StatusCode = 401
	// Not allowed, authorization isn't the issue.
	StatusCode_STATUS_FORBIDDEN StatusCode = 403
	// Resource not found.
	StatusCode_STATUS_NOT_FOUND StatusCode = 404
	// Operation would cause a conflict somewhere.
	StatusCode_STATUS_CONFLICT StatusCode = 409
	// General serious failure.
	StatusCode_STATUS_SERVER_ERROR StatusCode = 500
)

var StatusCode_name = map[int32]string{
	0:   "STATUS_NONE",
	200: "STATUS_OK",
	202: "STATUS_ACCEPTED",
	201: "STATUS_CREATED",
	400: "STATUS_BAD_REQUEST",
	401: "STATUS_UNAUTHORIZED",
	403: "STATUS_FORBIDDEN",
	404: "STATUS_NOT_FOUND",
	409: "STATUS_CONFLICT",
	500: "STATUS_SERVER_ERROR",
}
var StatusCode_value = map[string]int32{
	"STATUS_NONE":         0,
	"STATUS_OK":           200,
	"STATUS_ACCEPTED":     202,
	"STATUS_CREATED":      201,
	"STATUS_BAD_REQUEST":  400,
	"STATUS_UNAUTHORIZED": 401,
	"STATUS_FORBIDDEN":    403,
	"STATUS_NOT_FOUND":    404,
	"STATUS_CONFLICT":     409,
	"STATUS_SERVER_ERROR": 500,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ConfigGetStatus int32

const (
	ConfigGetStatus_GET_NONE    ConfigGetStatus = 0
	ConfigGetStatus_GET_OK      ConfigGetStatus = 1
	ConfigGetStatus_GET_MISSING ConfigGetStatus = 2
	ConfigGetStatus_GET_FAILED  ConfigGetStatus = 3
)

var ConfigGetStatus_name = map[int32]string{
	0: "GET_NONE",
	1: "GET_OK",
	2: "GET_MISSING",
	3: "GET_FAILED",
}
var ConfigGetStatus_value = map[string]int32{
	"GET_NONE":    0,
	"GET_OK":      1,
	"GET_MISSING": 2,
	"GET_FAILED":  3,
}

func (x ConfigGetStatus) String() string {
	return proto.EnumName(ConfigGetStatus_name, int32(x))
}
func (ConfigGetStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ConfigUpdateStatus int32

const (
	ConfigUpdateStatus_SET_NONE      ConfigUpdateStatus = 0
	ConfigUpdateStatus_SET_OK        ConfigUpdateStatus = 1
	ConfigUpdateStatus_SET_IMMUTABLE ConfigUpdateStatus = 2
	ConfigUpdateStatus_SET_FAILED    ConfigUpdateStatus = 3
	ConfigUpdateStatus_SET_READ_ONLY ConfigUpdateStatus = 4
)

var ConfigUpdateStatus_name = map[int32]string{
	0: "SET_NONE",
	1: "SET_OK",
	2: "SET_IMMUTABLE",
	3: "SET_FAILED",
	4: "SET_READ_ONLY",
}
var ConfigUpdateStatus_value = map[string]int32{
	"SET_NONE":      0,
	"SET_OK":        1,
	"SET_IMMUTABLE": 2,
	"SET_FAILED":    3,
	"SET_READ_ONLY": 4,
}

func (x ConfigUpdateStatus) String() string {
	return proto.EnumName(ConfigUpdateStatus_name, int32(x))
}
func (ConfigUpdateStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type VolumeCrypto_VolumeCryptoState int32

const (
	VolumeCrypto_VCS_NONE            VolumeCrypto_VolumeCryptoState = 0
	VolumeCrypto_VCS_FULLY_ENCRYPTED VolumeCrypto_VolumeCryptoState = 1
)

var VolumeCrypto_VolumeCryptoState_name = map[int32]string{
	0: "VCS_NONE",
	1: "VCS_FULLY_ENCRYPTED",
}
var VolumeCrypto_VolumeCryptoState_value = map[string]int32{
	"VCS_NONE":            0,
	"VCS_FULLY_ENCRYPTED": 1,
}

func (x VolumeCrypto_VolumeCryptoState) String() string {
	return proto.EnumName(VolumeCrypto_VolumeCryptoState_name, int32(x))
}
func (VolumeCrypto_VolumeCryptoState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8, 0}
}

type DaemonStatus_ProgramState int32

const (
	DaemonStatus_DS_NONE     DaemonStatus_ProgramState = 0
	DaemonStatus_DS_STARTING DaemonStatus_ProgramState = 1
	DaemonStatus_DS_READY    DaemonStatus_ProgramState = 2
	DaemonStatus_DS_STOPPING DaemonStatus_ProgramState = 3
	DaemonStatus_DS_STOPPED  DaemonStatus_ProgramState = 4
	DaemonStatus_DS_ERROR    DaemonStatus_ProgramState = 5
	DaemonStatus_DS_CRITICAL DaemonStatus_ProgramState = 6
)

var DaemonStatus_ProgramState_name = map[int32]string{
	0: "DS_NONE",
	1: "DS_STARTING",
	2: "DS_READY",
	3: "DS_STOPPING",
	4: "DS_STOPPED",
	5: "DS_ERROR",
	6: "DS_CRITICAL",
}
var DaemonStatus_ProgramState_value = map[string]int32{
	"DS_NONE":     0,
	"DS_STARTING": 1,
	"DS_READY":    2,
	"DS_STOPPING": 3,
	"DS_STOPPED":  4,
	"DS_ERROR":    5,
	"DS_CRITICAL": 6,
}

func (x DaemonStatus_ProgramState) String() string {
	return proto.EnumName(DaemonStatus_ProgramState_name, int32(x))
}
func (DaemonStatus_ProgramState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{9, 0} }

type RpcResult struct {
	// Whether or not the operation was successful.
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	// If the operation was not successful, this is an explanatory message.
	Reason string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	// An HTTP-like status code.
	Code StatusCode `protobuf:"varint,3,opt,name=code,enum=common.v1.StatusCode" json:"code,omitempty"`
}

func (m *RpcResult) Reset()                    { *m = RpcResult{} }
func (m *RpcResult) String() string            { return proto.CompactTextString(m) }
func (*RpcResult) ProtoMessage()               {}
func (*RpcResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RpcResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RpcResult) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *RpcResult) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_STATUS_NONE
}

type DataplaneCommon struct {
	// UUID. An opaque string used by the controlplane as a unique ID.
	Uuid string `protobuf:"bytes,3,opt,name=uuid" json:"uuid,omitempty"`
	// The config 'revision', an opaque integer used by the controlplane to identify a configuration iteration.
	// This is deliberately matched to the revision field in etcd ResponseHeader.revision.
	Revision int64 `protobuf:"varint,4,opt,name=revision" json:"revision,omitempty"`
	// Latch for the versioning system. If true, updates will fail unless the generation of the change
	// is newer than the existing value.
	Versioned bool `protobuf:"varint,5,opt,name=versioned" json:"versioned,omitempty"`
}

func (m *DataplaneCommon) Reset()                    { *m = DataplaneCommon{} }
func (m *DataplaneCommon) String() string            { return proto.CompactTextString(m) }
func (*DataplaneCommon) ProtoMessage()               {}
func (*DataplaneCommon) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DataplaneCommon) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *DataplaneCommon) GetRevision() int64 {
	if m != nil {
		return m.Revision
	}
	return 0
}

func (m *DataplaneCommon) GetVersioned() bool {
	if m != nil {
		return m.Versioned
	}
	return false
}

type Aes256Key struct {
	// 32 bytes (256 bits) of AES-256 key as raw bytes.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *Aes256Key) Reset()                    { *m = Aes256Key{} }
func (m *Aes256Key) String() string            { return proto.CompactTextString(m) }
func (*Aes256Key) ProtoMessage()               {}
func (*Aes256Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Aes256Key) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type Aes256IV struct {
	// 32 bytes (256 bits) of IV as raw bytes.
	Iv []byte `protobuf:"bytes,1,opt,name=iv,proto3" json:"iv,omitempty"`
}

func (m *Aes256IV) Reset()                    { *m = Aes256IV{} }
func (m *Aes256IV) String() string            { return proto.CompactTextString(m) }
func (*Aes256IV) ProtoMessage()               {}
func (*Aes256IV) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Aes256IV) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

type XtsAes256Key struct {
	// 64 bytes (512 bits) of key data for XTS-AES 256 as raw bytes.
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *XtsAes256Key) Reset()                    { *m = XtsAes256Key{} }
func (m *XtsAes256Key) String() string            { return proto.CompactTextString(m) }
func (*XtsAes256Key) ProtoMessage()               {}
func (*XtsAes256Key) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *XtsAes256Key) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

type EncryptedXtsAesKey struct {
	// 64 bytes (512 bits) + up to 16 bytes of key data + padding for an
	// encrypted XTS-AES 256 key, as raw data.
	Ekey []byte `protobuf:"bytes,1,opt,name=ekey,proto3" json:"ekey,omitempty"`
}

func (m *EncryptedXtsAesKey) Reset()                    { *m = EncryptedXtsAesKey{} }
func (m *EncryptedXtsAesKey) String() string            { return proto.CompactTextString(m) }
func (*EncryptedXtsAesKey) ProtoMessage()               {}
func (*EncryptedXtsAesKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *EncryptedXtsAesKey) GetEkey() []byte {
	if m != nil {
		return m.Ekey
	}
	return nil
}

type XtsKeyHMAC struct {
	// 64 bytes (512 bits) of HMAC data.
	Hmac []byte `protobuf:"bytes,1,opt,name=hmac,proto3" json:"hmac,omitempty"`
}

func (m *XtsKeyHMAC) Reset()                    { *m = XtsKeyHMAC{} }
func (m *XtsKeyHMAC) String() string            { return proto.CompactTextString(m) }
func (*XtsKeyHMAC) ProtoMessage()               {}
func (*XtsKeyHMAC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *XtsKeyHMAC) GetHmac() []byte {
	if m != nil {
		return m.Hmac
	}
	return nil
}

type VolumeKeySet struct {
	// The AES-XTS 256 volume master key.
	Vmk *XtsAes256Key `protobuf:"bytes,1,opt,name=vmk" json:"vmk,omitempty"`
}

func (m *VolumeKeySet) Reset()                    { *m = VolumeKeySet{} }
func (m *VolumeKeySet) String() string            { return proto.CompactTextString(m) }
func (*VolumeKeySet) ProtoMessage()               {}
func (*VolumeKeySet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *VolumeKeySet) GetVmk() *XtsAes256Key {
	if m != nil {
		return m.Vmk
	}
	return nil
}

type VolumeCrypto struct {
	// The crypto stepping version. Current version is 1.
	CryptoVersion uint32 `protobuf:"varint,2,opt,name=crypto_version,json=cryptoVersion" json:"crypto_version,omitempty"`
	// The current crypto state for this volume.
	CryptoState VolumeCrypto_VolumeCryptoState `protobuf:"varint,3,opt,name=crypto_state,json=cryptoState,enum=common.v1.VolumeCrypto_VolumeCryptoState" json:"crypto_state,omitempty"`
	// The set of keys required to use the volume.
	Keyset *VolumeKeySet `protobuf:"bytes,4,opt,name=keyset" json:"keyset,omitempty"`
}

func (m *VolumeCrypto) Reset()                    { *m = VolumeCrypto{} }
func (m *VolumeCrypto) String() string            { return proto.CompactTextString(m) }
func (*VolumeCrypto) ProtoMessage()               {}
func (*VolumeCrypto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *VolumeCrypto) GetCryptoVersion() uint32 {
	if m != nil {
		return m.CryptoVersion
	}
	return 0
}

func (m *VolumeCrypto) GetCryptoState() VolumeCrypto_VolumeCryptoState {
	if m != nil {
		return m.CryptoState
	}
	return VolumeCrypto_VCS_NONE
}

func (m *VolumeCrypto) GetKeyset() *VolumeKeySet {
	if m != nil {
		return m.Keyset
	}
	return nil
}

type DaemonStatus struct {
	ProgramState        DaemonStatus_ProgramState `protobuf:"varint,1,opt,name=program_state,json=programState,enum=common.v1.DaemonStatus_ProgramState" json:"program_state,omitempty"`
	ProgramStateMessage string                    `protobuf:"bytes,2,opt,name=program_state_message,json=programStateMessage" json:"program_state_message,omitempty"`
}

func (m *DaemonStatus) Reset()                    { *m = DaemonStatus{} }
func (m *DaemonStatus) String() string            { return proto.CompactTextString(m) }
func (*DaemonStatus) ProtoMessage()               {}
func (*DaemonStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DaemonStatus) GetProgramState() DaemonStatus_ProgramState {
	if m != nil {
		return m.ProgramState
	}
	return DaemonStatus_DS_NONE
}

func (m *DaemonStatus) GetProgramStateMessage() string {
	if m != nil {
		return m.ProgramStateMessage
	}
	return ""
}

type ConfigUpdateReply struct {
	Status ConfigUpdateStatus `protobuf:"varint,1,opt,name=status,enum=common.v1.ConfigUpdateStatus" json:"status,omitempty"`
	Result *RpcResult         `protobuf:"bytes,2,opt,name=result" json:"result,omitempty"`
}

func (m *ConfigUpdateReply) Reset()                    { *m = ConfigUpdateReply{} }
func (m *ConfigUpdateReply) String() string            { return proto.CompactTextString(m) }
func (*ConfigUpdateReply) ProtoMessage()               {}
func (*ConfigUpdateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ConfigUpdateReply) GetStatus() ConfigUpdateStatus {
	if m != nil {
		return m.Status
	}
	return ConfigUpdateStatus_SET_NONE
}

func (m *ConfigUpdateReply) GetResult() *RpcResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type ConfigBool struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value bool   `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *ConfigBool) Reset()                    { *m = ConfigBool{} }
func (m *ConfigBool) String() string            { return proto.CompactTextString(m) }
func (*ConfigBool) ProtoMessage()               {}
func (*ConfigBool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ConfigBool) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ConfigBool) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

type ConfigGetBoolReply struct {
	Status ConfigGetStatus `protobuf:"varint,1,opt,name=status,enum=common.v1.ConfigGetStatus" json:"status,omitempty"`
	Result *RpcResult      `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	Item   *ConfigBool     `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *ConfigGetBoolReply) Reset()                    { *m = ConfigGetBoolReply{} }
func (m *ConfigGetBoolReply) String() string            { return proto.CompactTextString(m) }
func (*ConfigGetBoolReply) ProtoMessage()               {}
func (*ConfigGetBoolReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ConfigGetBoolReply) GetStatus() ConfigGetStatus {
	if m != nil {
		return m.Status
	}
	return ConfigGetStatus_GET_NONE
}

func (m *ConfigGetBoolReply) GetResult() *RpcResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ConfigGetBoolReply) GetItem() *ConfigBool {
	if m != nil {
		return m.Item
	}
	return nil
}

type ConfigBoolList struct {
	Items []*ConfigBool `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ConfigBoolList) Reset()                    { *m = ConfigBoolList{} }
func (m *ConfigBoolList) String() string            { return proto.CompactTextString(m) }
func (*ConfigBoolList) ProtoMessage()               {}
func (*ConfigBoolList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ConfigBoolList) GetItems() []*ConfigBool {
	if m != nil {
		return m.Items
	}
	return nil
}

type ConfigUint32 struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value uint32 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *ConfigUint32) Reset()                    { *m = ConfigUint32{} }
func (m *ConfigUint32) String() string            { return proto.CompactTextString(m) }
func (*ConfigUint32) ProtoMessage()               {}
func (*ConfigUint32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ConfigUint32) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ConfigUint32) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ConfigGetUint32Reply struct {
	Status ConfigGetStatus `protobuf:"varint,1,opt,name=status,enum=common.v1.ConfigGetStatus" json:"status,omitempty"`
	Result *RpcResult      `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	Item   *ConfigUint32   `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *ConfigGetUint32Reply) Reset()                    { *m = ConfigGetUint32Reply{} }
func (m *ConfigGetUint32Reply) String() string            { return proto.CompactTextString(m) }
func (*ConfigGetUint32Reply) ProtoMessage()               {}
func (*ConfigGetUint32Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ConfigGetUint32Reply) GetStatus() ConfigGetStatus {
	if m != nil {
		return m.Status
	}
	return ConfigGetStatus_GET_NONE
}

func (m *ConfigGetUint32Reply) GetResult() *RpcResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ConfigGetUint32Reply) GetItem() *ConfigUint32 {
	if m != nil {
		return m.Item
	}
	return nil
}

type ConfigUint32List struct {
	Items []*ConfigUint32 `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ConfigUint32List) Reset()                    { *m = ConfigUint32List{} }
func (m *ConfigUint32List) String() string            { return proto.CompactTextString(m) }
func (*ConfigUint32List) ProtoMessage()               {}
func (*ConfigUint32List) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ConfigUint32List) GetItems() []*ConfigUint32 {
	if m != nil {
		return m.Items
	}
	return nil
}

type ConfigUint64 struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value uint64 `protobuf:"varint,2,opt,name=value" json:"value,omitempty"`
}

func (m *ConfigUint64) Reset()                    { *m = ConfigUint64{} }
func (m *ConfigUint64) String() string            { return proto.CompactTextString(m) }
func (*ConfigUint64) ProtoMessage()               {}
func (*ConfigUint64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ConfigUint64) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ConfigUint64) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ConfigGetUint64Reply struct {
	Status ConfigGetStatus `protobuf:"varint,1,opt,name=status,enum=common.v1.ConfigGetStatus" json:"status,omitempty"`
	Result *RpcResult      `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	Item   *ConfigUint64   `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *ConfigGetUint64Reply) Reset()                    { *m = ConfigGetUint64Reply{} }
func (m *ConfigGetUint64Reply) String() string            { return proto.CompactTextString(m) }
func (*ConfigGetUint64Reply) ProtoMessage()               {}
func (*ConfigGetUint64Reply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ConfigGetUint64Reply) GetStatus() ConfigGetStatus {
	if m != nil {
		return m.Status
	}
	return ConfigGetStatus_GET_NONE
}

func (m *ConfigGetUint64Reply) GetResult() *RpcResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ConfigGetUint64Reply) GetItem() *ConfigUint64 {
	if m != nil {
		return m.Item
	}
	return nil
}

type ConfigUint64List struct {
	Items []*ConfigUint64 `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ConfigUint64List) Reset()                    { *m = ConfigUint64List{} }
func (m *ConfigUint64List) String() string            { return proto.CompactTextString(m) }
func (*ConfigUint64List) ProtoMessage()               {}
func (*ConfigUint64List) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ConfigUint64List) GetItems() []*ConfigUint64 {
	if m != nil {
		return m.Items
	}
	return nil
}

type ConfigString struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *ConfigString) Reset()                    { *m = ConfigString{} }
func (m *ConfigString) String() string            { return proto.CompactTextString(m) }
func (*ConfigString) ProtoMessage()               {}
func (*ConfigString) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ConfigString) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ConfigString) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type ConfigGetStringReply struct {
	Status ConfigGetStatus `protobuf:"varint,1,opt,name=status,enum=common.v1.ConfigGetStatus" json:"status,omitempty"`
	Result *RpcResult      `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	Item   *ConfigString   `protobuf:"bytes,2,opt,name=item" json:"item,omitempty"`
}

func (m *ConfigGetStringReply) Reset()                    { *m = ConfigGetStringReply{} }
func (m *ConfigGetStringReply) String() string            { return proto.CompactTextString(m) }
func (*ConfigGetStringReply) ProtoMessage()               {}
func (*ConfigGetStringReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ConfigGetStringReply) GetStatus() ConfigGetStatus {
	if m != nil {
		return m.Status
	}
	return ConfigGetStatus_GET_NONE
}

func (m *ConfigGetStringReply) GetResult() *RpcResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ConfigGetStringReply) GetItem() *ConfigString {
	if m != nil {
		return m.Item
	}
	return nil
}

type ConfigStringList struct {
	Items []*ConfigString `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *ConfigStringList) Reset()                    { *m = ConfigStringList{} }
func (m *ConfigStringList) String() string            { return proto.CompactTextString(m) }
func (*ConfigStringList) ProtoMessage()               {}
func (*ConfigStringList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ConfigStringList) GetItems() []*ConfigString {
	if m != nil {
		return m.Items
	}
	return nil
}

type ConfigKey struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *ConfigKey) Reset()                    { *m = ConfigKey{} }
func (m *ConfigKey) String() string            { return proto.CompactTextString(m) }
func (*ConfigKey) ProtoMessage()               {}
func (*ConfigKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ConfigKey) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ConfigListQuery struct {
}

func (m *ConfigListQuery) Reset()                    { *m = ConfigListQuery{} }
func (m *ConfigListQuery) String() string            { return proto.CompactTextString(m) }
func (*ConfigListQuery) ProtoMessage()               {}
func (*ConfigListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func init() {
	proto.RegisterType((*RpcResult)(nil), "common.v1.RpcResult")
	proto.RegisterType((*DataplaneCommon)(nil), "common.v1.DataplaneCommon")
	proto.RegisterType((*Aes256Key)(nil), "common.v1.Aes256Key")
	proto.RegisterType((*Aes256IV)(nil), "common.v1.Aes256IV")
	proto.RegisterType((*XtsAes256Key)(nil), "common.v1.XtsAes256Key")
	proto.RegisterType((*EncryptedXtsAesKey)(nil), "common.v1.EncryptedXtsAesKey")
	proto.RegisterType((*XtsKeyHMAC)(nil), "common.v1.XtsKeyHMAC")
	proto.RegisterType((*VolumeKeySet)(nil), "common.v1.VolumeKeySet")
	proto.RegisterType((*VolumeCrypto)(nil), "common.v1.VolumeCrypto")
	proto.RegisterType((*DaemonStatus)(nil), "common.v1.DaemonStatus")
	proto.RegisterType((*ConfigUpdateReply)(nil), "common.v1.ConfigUpdateReply")
	proto.RegisterType((*ConfigBool)(nil), "common.v1.ConfigBool")
	proto.RegisterType((*ConfigGetBoolReply)(nil), "common.v1.ConfigGetBoolReply")
	proto.RegisterType((*ConfigBoolList)(nil), "common.v1.ConfigBoolList")
	proto.RegisterType((*ConfigUint32)(nil), "common.v1.ConfigUint32")
	proto.RegisterType((*ConfigGetUint32Reply)(nil), "common.v1.ConfigGetUint32Reply")
	proto.RegisterType((*ConfigUint32List)(nil), "common.v1.ConfigUint32List")
	proto.RegisterType((*ConfigUint64)(nil), "common.v1.ConfigUint64")
	proto.RegisterType((*ConfigGetUint64Reply)(nil), "common.v1.ConfigGetUint64Reply")
	proto.RegisterType((*ConfigUint64List)(nil), "common.v1.ConfigUint64List")
	proto.RegisterType((*ConfigString)(nil), "common.v1.ConfigString")
	proto.RegisterType((*ConfigGetStringReply)(nil), "common.v1.ConfigGetStringReply")
	proto.RegisterType((*ConfigStringList)(nil), "common.v1.ConfigStringList")
	proto.RegisterType((*ConfigKey)(nil), "common.v1.ConfigKey")
	proto.RegisterType((*ConfigListQuery)(nil), "common.v1.ConfigListQuery")
	proto.RegisterEnum("common.v1.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("common.v1.ConfigGetStatus", ConfigGetStatus_name, ConfigGetStatus_value)
	proto.RegisterEnum("common.v1.ConfigUpdateStatus", ConfigUpdateStatus_name, ConfigUpdateStatus_value)
	proto.RegisterEnum("common.v1.VolumeCrypto_VolumeCryptoState", VolumeCrypto_VolumeCryptoState_name, VolumeCrypto_VolumeCryptoState_value)
	proto.RegisterEnum("common.v1.DaemonStatus_ProgramState", DaemonStatus_ProgramState_name, DaemonStatus_ProgramState_value)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1045 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4f, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x71, 0x9a, 0x6d, 0x5e, 0xd3, 0xd4, 0x9d, 0xb6, 0x34, 0x5a, 0x51, 0x29, 0xb2, 0x40,
	0x6a, 0xbb, 0x50, 0x44, 0x36, 0x1b, 0x09, 0x24, 0x0e, 0xae, 0xed, 0x76, 0xad, 0xa6, 0x76, 0x77,
	0xec, 0x54, 0x5b, 0x2e, 0x96, 0x49, 0x86, 0xae, 0xd5, 0x24, 0x8e, 0x62, 0x27, 0x22, 0x7c, 0x03,
	0x6e, 0x20, 0xb8, 0x70, 0xe4, 0xc0, 0x77, 0x01, 0xbe, 0x09, 0x37, 0x0e, 0x7c, 0x00, 0x34, 0x7f,
	0x9c, 0x4e, 0x9a, 0x96, 0xee, 0x09, 0xed, 0x6d, 0xde, 0x7b, 0xbf, 0xf7, 0xcb, 0xef, 0xfd, 0xc6,
	0x33, 0x13, 0xa8, 0x74, 0x93, 0xc1, 0x20, 0x19, 0x1e, 0x8d, 0xc6, 0x49, 0x96, 0xa0, 0xb2, 0x88,
	0xa6, 0x9f, 0xe9, 0x6f, 0xa0, 0x8c, 0x47, 0x5d, 0x4c, 0xd2, 0x49, 0x3f, 0x43, 0x35, 0x78, 0x92,
	0x4e, 0xba, 0x5d, 0x92, 0xa6, 0x35, 0xa5, 0xae, 0xec, 0xaf, 0xe2, 0x3c, 0x44, 0xef, 0x43, 0x69,
	0x4c, 0xa2, 0x34, 0x19, 0xd6, 0x0a, 0x75, 0x65, 0xbf, 0x8c, 0x45, 0x84, 0x0e, 0xa0, 0xd8, 0x4d,
	0x7a, 0xa4, 0xa6, 0xd6, 0x95, 0xfd, 0x6a, 0x63, 0xe7, 0x68, 0x4e, 0x7c, 0xe4, 0x67, 0x51, 0x36,
	0x49, 0xcd, 0xa4, 0x47, 0x30, 0x83, 0xe8, 0x21, 0x6c, 0x58, 0x51, 0x16, 0x8d, 0xfa, 0xd1, 0x90,
	0x98, 0x0c, 0x86, 0x10, 0x14, 0x27, 0x93, 0xb8, 0xc7, 0xba, 0xcb, 0x98, 0xad, 0xd1, 0x53, 0x58,
	0x1d, 0x93, 0x69, 0x9c, 0xc6, 0xc9, 0xb0, 0x56, 0xac, 0x2b, 0xfb, 0x2a, 0x9e, 0xc7, 0xe8, 0x03,
	0x28, 0x4f, 0xc9, 0x98, 0x2e, 0x49, 0xaf, 0xb6, 0xc2, 0x14, 0xde, 0x26, 0xf4, 0x3d, 0x28, 0x1b,
	0x24, 0x6d, 0xbc, 0x68, 0x9d, 0x91, 0x19, 0xd2, 0x40, 0xbd, 0x21, 0x33, 0x36, 0x46, 0x05, 0xd3,
	0xa5, 0xfe, 0x14, 0x56, 0x79, 0xd9, 0xb9, 0x44, 0x55, 0x28, 0xc4, 0x53, 0x51, 0x2c, 0xc4, 0x53,
	0xbd, 0x0e, 0x95, 0xd7, 0x59, 0xfa, 0x5f, 0xdd, 0xfb, 0x80, 0xec, 0x61, 0x77, 0x3c, 0x1b, 0x65,
	0xa4, 0xc7, 0xa1, 0x14, 0x87, 0xa0, 0x48, 0x6e, 0x81, 0x6c, 0xad, 0xd7, 0x01, 0x5e, 0x67, 0xb4,
	0xfa, 0xf2, 0xdc, 0x30, 0x29, 0xe2, 0xcd, 0x20, 0xea, 0xe6, 0x08, 0xba, 0xd6, 0x3f, 0x87, 0xca,
	0x65, 0xd2, 0x9f, 0x0c, 0xc8, 0x19, 0x99, 0xf9, 0x24, 0x43, 0x07, 0xa0, 0x4e, 0x07, 0x37, 0x0c,
	0xb2, 0xd6, 0xd8, 0x95, 0x3c, 0x94, 0x35, 0x61, 0x8a, 0xd1, 0xff, 0x56, 0xf2, 0x5e, 0x93, 0x6a,
	0x49, 0xd0, 0x47, 0x50, 0x65, 0xaa, 0x92, 0x50, 0x18, 0xc1, 0x36, 0x68, 0x1d, 0xaf, 0xf3, 0xec,
	0x25, 0x4f, 0xa2, 0x36, 0x54, 0x04, 0x2c, 0xcd, 0xa2, 0x2c, 0xdf, 0xaf, 0x03, 0xe9, 0xb7, 0x64,
	0xd6, 0x85, 0x80, 0x6e, 0x24, 0xc1, 0x6b, 0xdd, 0xdb, 0x00, 0x7d, 0x0a, 0xa5, 0x1b, 0x32, 0x4b,
	0x49, 0xc6, 0x76, 0x68, 0x51, 0xb3, 0x3c, 0x19, 0x16, 0x30, 0xfd, 0x0b, 0xd8, 0x5c, 0xa2, 0x44,
	0x15, 0x58, 0xbd, 0x34, 0xfd, 0xd0, 0xf5, 0x5c, 0x5b, 0x7b, 0x0f, 0xed, 0xc2, 0x16, 0x8d, 0x4e,
	0x3a, 0xed, 0xf6, 0x55, 0x68, 0xbb, 0x26, 0xbe, 0xba, 0x08, 0x6c, 0x4b, 0x53, 0xf4, 0xef, 0x0b,
	0x50, 0xb1, 0x22, 0x32, 0x48, 0x86, 0xfc, 0x93, 0x42, 0x0e, 0xac, 0x8f, 0xc6, 0xc9, 0xf5, 0x38,
	0x1a, 0x88, 0x61, 0x14, 0x36, 0xcc, 0x87, 0x92, 0x08, 0x19, 0x7f, 0x74, 0xc1, 0xc1, 0x7c, 0x8e,
	0xca, 0x48, 0x8a, 0x50, 0x03, 0x76, 0x16, 0xa8, 0xc2, 0x01, 0x49, 0xd3, 0xe8, 0x9a, 0x88, 0xaf,
	0x7c, 0x4b, 0x06, 0x9f, 0xf3, 0x92, 0xfe, 0x1d, 0x54, 0x64, 0x46, 0xb4, 0x06, 0x4f, 0xac, 0xf9,
	0x14, 0x1b, 0xb0, 0x66, 0xf9, 0xa1, 0x1f, 0x18, 0x38, 0x70, 0xdc, 0x53, 0x4d, 0xa1, 0x43, 0x5a,
	0x7e, 0x88, 0x6d, 0xc3, 0xba, 0xd2, 0x0a, 0xf3, 0xb2, 0x77, 0x71, 0x41, 0xcb, 0x2a, 0xaa, 0x02,
	0xe4, 0x09, 0xdb, 0xd2, 0x8a, 0x02, 0x6e, 0x63, 0xec, 0x61, 0x6d, 0x45, 0xc0, 0x4d, 0xec, 0x04,
	0x8e, 0x69, 0xb4, 0xb5, 0x92, 0xfe, 0x2d, 0x6c, 0x9a, 0xc9, 0xf0, 0x9b, 0xf8, 0xba, 0x33, 0xea,
	0xd1, 0x69, 0xc8, 0xa8, 0x3f, 0x43, 0x2f, 0xa0, 0x94, 0xb2, 0x49, 0x85, 0x11, 0x7b, 0x92, 0x11,
	0x32, 0x9a, 0xdb, 0x81, 0x05, 0x18, 0x7d, 0x4c, 0x8f, 0x34, 0x3d, 0xf6, 0x6c, 0xd8, 0xb5, 0xc6,
	0xb6, 0xd4, 0x36, 0xbf, 0x12, 0xb0, 0xc0, 0xe8, 0x4d, 0x00, 0xce, 0x75, 0x9c, 0x24, 0x7d, 0xf9,
	0x7c, 0x94, 0xd9, 0xf9, 0x40, 0xdb, 0xb0, 0x32, 0x8d, 0xfa, 0x13, 0xee, 0xdc, 0x2a, 0xe6, 0x81,
	0xfe, 0xab, 0x02, 0x88, 0xb7, 0x9d, 0x92, 0x8c, 0x76, 0x72, 0xc5, 0x8d, 0x3b, 0x8a, 0x9f, 0x2e,
	0x29, 0x3e, 0x25, 0xd9, 0x83, 0x72, 0xd5, 0xc7, 0xe5, 0xd2, 0x7b, 0x29, 0xce, 0xc8, 0x40, 0x8c,
	0xb6, 0xb3, 0xc4, 0xcf, 0xb4, 0x30, 0x88, 0xfe, 0x25, 0x54, 0x6f, 0x73, 0xed, 0x38, 0xcd, 0xd0,
	0x33, 0x58, 0xa1, 0x15, 0xaa, 0x4e, 0x7d, 0xb8, 0x9b, 0x63, 0xf4, 0x16, 0x54, 0x84, 0xc9, 0xf1,
	0x30, 0x7b, 0xde, 0x78, 0xcc, 0x9a, 0xf5, 0xdc, 0x9a, 0xdf, 0x14, 0xd8, 0x9e, 0xcf, 0xca, 0x7b,
	0xff, 0x2f, 0x73, 0x9e, 0x2d, 0x98, 0xb3, 0xbb, 0xfc, 0xb9, 0x70, 0x35, 0xdc, 0x1e, 0x03, 0x34,
	0x39, 0xcb, 0x0c, 0xfa, 0x64, 0xd1, 0xa0, 0x07, 0x19, 0xee, 0xb3, 0xa8, 0xd5, 0x7c, 0xcc, 0xa2,
	0xe2, 0x83, 0x16, 0xb5, 0x9a, 0xef, 0x92, 0x45, 0xad, 0xe6, 0x7d, 0x16, 0xb5, 0x9a, 0x6f, 0x6f,
	0x51, 0xab, 0xb9, 0x64, 0x91, 0x9f, 0x8d, 0xe3, 0xe1, 0xf5, 0x63, 0x16, 0x95, 0xef, 0xb5, 0x88,
	0xf7, 0xbe, 0x2b, 0x16, 0x09, 0x35, 0x77, 0x2c, 0xe2, 0xd9, 0xb7, 0xb3, 0x48, 0x30, 0x08, 0x8b,
	0xf6, 0xa0, 0xcc, 0xd3, 0x77, 0x1e, 0x68, 0xee, 0x8f, 0xbe, 0x09, 0x1b, 0xbc, 0x4c, 0xb9, 0x5f,
	0x4d, 0xc8, 0x78, 0x76, 0xf8, 0x97, 0x02, 0x70, 0xfb, 0x37, 0x84, 0xde, 0xa6, 0x7e, 0x60, 0x04,
	0x9d, 0xf9, 0x65, 0x5d, 0x85, 0xb2, 0x48, 0x78, 0x67, 0xda, 0xef, 0x0a, 0xda, 0x86, 0x0d, 0x11,
	0x1b, 0xa6, 0x69, 0xb3, 0xe7, 0xe7, 0x4f, 0x05, 0x6d, 0x41, 0x55, 0x64, 0x4d, 0x6c, 0x1b, 0x34,
	0xf9, 0x87, 0x82, 0x76, 0x01, 0x89, 0xe4, 0xb1, 0x61, 0x85, 0xd8, 0x7e, 0xd5, 0xb1, 0xfd, 0x40,
	0xfb, 0x41, 0x45, 0x35, 0xd8, 0x12, 0x85, 0x8e, 0x6b, 0x74, 0x82, 0x97, 0x1e, 0x76, 0xbe, 0xb2,
	0x2d, 0xed, 0x47, 0x15, 0xed, 0x80, 0x26, 0x2a, 0x27, 0x1e, 0x3e, 0x76, 0x2c, 0xcb, 0x76, 0xb5,
	0x9f, 0xe4, 0xb4, 0xeb, 0x05, 0xe1, 0x89, 0xd7, 0x71, 0x2d, 0xed, 0x67, 0x55, 0xd2, 0x62, 0x7a,
	0xee, 0x49, 0xdb, 0x31, 0x03, 0xed, 0x17, 0x99, 0xdd, 0xb7, 0xf1, 0xa5, 0x8d, 0xc5, 0x4b, 0xf1,
	0x8f, 0x7a, 0xd8, 0xce, 0xc7, 0x9f, 0x6f, 0x2b, 0x7d, 0x4b, 0x4e, 0xed, 0x20, 0x1f, 0x16, 0xa0,
	0x44, 0x23, 0xef, 0x4c, 0x53, 0xa8, 0x13, 0x74, 0x7d, 0xee, 0xf8, 0x3e, 0x7d, 0x86, 0x0a, 0xf4,
	0x19, 0xa2, 0x89, 0x13, 0xc3, 0x69, 0xdb, 0x96, 0xa6, 0x1e, 0xf6, 0xf2, 0x6b, 0x5b, 0x7e, 0x39,
	0x28, 0xa1, 0xbf, 0x40, 0xe8, 0xe7, 0x84, 0x9b, 0xb0, 0x4e, 0xd7, 0xce, 0xf9, 0x79, 0x27, 0x30,
	0x8e, 0xdb, 0x36, 0xa7, 0xf4, 0x25, 0xca, 0x1c, 0x42, 0x5f, 0xc2, 0xd0, 0x73, 0xdb, 0x57, 0x5a,
	0xf1, 0xeb, 0x12, 0xfb, 0x37, 0xfa, 0xfc, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x38, 0xfe,
	0x40, 0x9d, 0x0a, 0x00, 0x00,
}
