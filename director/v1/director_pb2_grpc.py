# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2
import director_pb2 as director__pb2


class DirectorStub(object):
  """*
  Director configuration and status service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Status = channel.unary_unary(
        '/director.v1.Director/Status',
        request_serializer=director__pb2.DirectorStatusRequest.SerializeToString,
        response_deserializer=director__pb2.DirectorStatus.FromString,
        )
    self.VolumeCreate = channel.unary_unary(
        '/director.v1.Director/VolumeCreate',
        request_serializer=director__pb2.DirectorVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeUpdate = channel.unary_unary(
        '/director.v1.Director/VolumeUpdate',
        request_serializer=director__pb2.DirectorVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeDelete = channel.unary_unary(
        '/director.v1.Director/VolumeDelete',
        request_serializer=director__pb2.DirectorVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeList = channel.unary_unary(
        '/director.v1.Director/VolumeList',
        request_serializer=director__pb2.DirectorVolumeListQuery.SerializeToString,
        response_deserializer=director__pb2.DirectorVolumeList.FromString,
        )
    self.PresentationCreate = channel.unary_unary(
        '/director.v1.Director/PresentationCreate',
        request_serializer=director__pb2.DirectorPresentation.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.PresentationUpdate = channel.unary_unary(
        '/director.v1.Director/PresentationUpdate',
        request_serializer=director__pb2.DirectorPresentation.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.PresentationDelete = channel.unary_unary(
        '/director.v1.Director/PresentationDelete',
        request_serializer=director__pb2.DirectorPresentation.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.PresentationList = channel.unary_unary(
        '/director.v1.Director/PresentationList',
        request_serializer=director__pb2.DirectorPresentationListQuery.SerializeToString,
        response_deserializer=director__pb2.DirectorPresentationList.FromString,
        )


class DirectorServicer(object):
  """*
  Director configuration and status service.
  """

  def Status(self, request, context):
    """*
    Get program status.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeCreate(self, request, context):
    """*
    Add configuration for the given DirectorVolume message.

    @return  RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeUpdate(self, request, context):
    """*
    Update configuration for the given DirectorVolume message.

    @return  RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeDelete(self, request, context):
    """*
    Remove configuration for the given DirectorVolume message.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeList(self, request, context):
    """*
    List configured volumes, optionally filtered using a DirectorVolumeListQuery
    message.

    returns  A DirectorVolumeList message containing DirectorVolume objects,
    if any are found matching the filter
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PresentationCreate(self, request, context):
    """*
    Add configuration for a Presentation volume specified in the DirectorPresentation message.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PresentationUpdate(self, request, context):
    """*
    Update configuration for a Presentation volume specified in the DirectorPresentation message.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PresentationDelete(self, request, context):
    """*
    Remove configuration for the Presentation volume specified in the DirectorPresentation message.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PresentationList(self, request, context):
    """*
    List configured Presentation volumes, optionally filtered using a DirectorPresentationListQuery
    message.

    returns A DirectorPresentationList message containing DirectorPresentation mesages,
    if any are found matching the filter.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DirectorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Status': grpc.unary_unary_rpc_method_handler(
          servicer.Status,
          request_deserializer=director__pb2.DirectorStatusRequest.FromString,
          response_serializer=director__pb2.DirectorStatus.SerializeToString,
      ),
      'VolumeCreate': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeCreate,
          request_deserializer=director__pb2.DirectorVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeUpdate,
          request_deserializer=director__pb2.DirectorVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeDelete': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeDelete,
          request_deserializer=director__pb2.DirectorVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeList': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeList,
          request_deserializer=director__pb2.DirectorVolumeListQuery.FromString,
          response_serializer=director__pb2.DirectorVolumeList.SerializeToString,
      ),
      'PresentationCreate': grpc.unary_unary_rpc_method_handler(
          servicer.PresentationCreate,
          request_deserializer=director__pb2.DirectorPresentation.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'PresentationUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.PresentationUpdate,
          request_deserializer=director__pb2.DirectorPresentation.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'PresentationDelete': grpc.unary_unary_rpc_method_handler(
          servicer.PresentationDelete,
          request_deserializer=director__pb2.DirectorPresentation.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'PresentationList': grpc.unary_unary_rpc_method_handler(
          servicer.PresentationList,
          request_deserializer=director__pb2.DirectorPresentationListQuery.FromString,
          response_serializer=director__pb2.DirectorPresentationList.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'director.v1.Director', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
