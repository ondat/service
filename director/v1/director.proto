syntax = "proto3";
package director.v1;

import "common.proto";

/**
 * Director configuration and status service.
 */
service Director {
    /**
     * Get program status.
     */
    rpc Status(DirectorStatusRequest) returns (DirectorStatus) {}

    /**
     * Add configuration for the given DirectorVolume message.
     *
     * @return  RpcResult
     */
    rpc VolumeCreate(DirectorVolume) returns (common.v1.RpcResult) {}

    /**
     * Update configuration for the given DirectorVolume message.
     *
     * @return  RpcResult
     */
    rpc VolumeUpdate(DirectorVolume) returns (common.v1.RpcResult) {}

    /**
     * Remove configuration for the given DirectorVolume message.
     *
     * returns RpcResult
     */
    rpc VolumeDelete(DirectorVolume) returns (common.v1.RpcResult) {}

    /**
     * List configured volumes, optionally filtered using a DirectorVolumeListQuery
     * message.
     *
     * returns  A DirectorVolumeList message containing DirectorVolume objects,
     *          if any are found matching the filter
     */
    rpc VolumeList(DirectorVolumeListQuery) returns (DirectorVolumeList) {}

    /**
     * Add configuration for a Presentation volume specified in the DirectorPresentation message.
     *
     * returns RpcResult
     */
    rpc PresentationCreate(DirectorPresentation) returns (common.v1.RpcResult) {}

    /**
     * Update configuration for a Presentation volume specified in the DirectorPresentation message.
     *
     * returns RpcResult
     */
    rpc PresentationUpdate(DirectorPresentation) returns (common.v1.RpcResult) {}

    /**
     * Remove configuration for the Presentation volume specified in the DirectorPresentation message.
     *
     * returns RpcResult
     */
    rpc PresentationDelete(DirectorPresentation) returns (common.v1.RpcResult) {}

    /**
     * List configured Presentation volumes, optionally filtered using a DirectorPresentationListQuery
     * message.
     *
     * returns A DirectorPresentationList message containing DirectorPresentation mesages,
     *         if any are found matching the filter.
     */
    rpc PresentationList(DirectorPresentationListQuery) returns (DirectorPresentationList) {}

    // Config services, from common.v1.
    rpc ConfigGetUint32(common.v1.ConfigKey) returns (common.v1.ConfigGetUint32Reply) {}
    rpc ConfigUpdateUint32(common.v1.ConfigUint32) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListUint32(common.v1.ConfigListQuery) returns (common.v1.ConfigUint32List) {}

    rpc ConfigGetBool(common.v1.ConfigKey) returns (common.v1.ConfigGetBoolReply) {}
    rpc ConfigUpdateBool(common.v1.ConfigBool) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListBool(common.v1.ConfigListQuery) returns (common.v1.ConfigBoolList) {}

    rpc ConfigGetString(common.v1.ConfigKey) returns (common.v1.ConfigGetStringReply) {}
    rpc ConfigUpdateString(common.v1.ConfigString) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListString(common.v1.ConfigListQuery) returns (common.v1.ConfigStringList) {}
}

message DirectorStatusRequest {
    // Empty for now.
}

message DirectorStatus {
    // The version control info string.
    string version_info = 1;

    // Generic daemon status.
    common.v1.DaemonStatus status = 2;

}


message DirectorVolumeListQuery {
    // A possibly-empty list of volume IDs to query.
    repeated uint32 volume_ids = 1;
}

message DirectorVolumeStatistics {
    // Empty for now.
}

message DirectorVolumeStatus {
    // Empty for now.
}

/**
 * Volume message for Director RPCs.
 *
 * Note this does should not be used to configure Presentation inodes, volumes that point
 * at other volumes. Use DirectorPresentation for that.
 */
message DirectorVolume {
    common.v1.DataplaneCommon cc = 1;

    // The volume ID.
    uint32 volume_id = 2;

    // The write_pipe (identifies the plugin).
    uint32 write_pipe = 3;
    // The read pipe (should be write_pipe + 1 in all current plugins).
    uint32 read_pipe = 4;

    // Quality of service indicator.
    uint32 qos = 5;

    // List of replica inodes.
    repeated uint32 replica_ids = 6;

    // Number of times this volume has been mounted (used for cache consistency).
    uint32 mount_count = 9;

    // Volume statistics.
    DirectorVolumeStatistics stats = 7;

    // Volume status, e.g. retry condition.
    DirectorVolumeStatus status = 8;

    // Disable block compression.
    bool no_compress = 10;
    // Disable all block caching.
    bool no_cache = 11;
    // Disable caching of writes.
    bool no_write_cache = 12;
    // Enable QoS throttling.
    bool throttle = 13;

    // Crypto config.
    common.v1.VolumeCrypto volume_crypto = 15;

    // Is the volume read-only?
    bool read_only = 16;
}

message DirectorVolumeList {
    repeated DirectorVolume volumes = 1;
}


message DirectorPresentationListQuery {
    // A possibly-empty list of volume IDs to query.
    repeated uint32 presentation_ids = 1;
}

/**
 * Presentation volume message for Director RPCs.
 *
 * The minimum amount of information required to specify the 'presentation' or source volume,
 * the volume that is presented to the user and (usually) mounted. All actual work
 * is done on the target volume, which has actual storage associated with it.
 */
message DirectorPresentation {
    common.v1.DataplaneCommon cc = 1;

    // The inode the user mounts or opens.
    uint32 presentation_id = 2;

    // The underlying inode of the StorageOS volume.
    uint32 target_id = 3;
}

message DirectorPresentationList {
    repeated DirectorPresentation presentations = 1;
}
