syntax = "proto3";
package director.v1;
option go_package = "code.storageos.net/storageos/service/director/v1";

import "common.proto";

/**
 * Director configuration and status service.
 */
service Director {
    /**
     * Get program status.
     */
    rpc Status(DirectorStatusRequest) returns (DirectorStatus) {}

    /**
     * Add configuration for the given DirectorVolume message.
     *
     * @return  RpcResult
     */
    rpc VolumeCreate(DirectorVolume) returns (common.v1.RpcResult) {}

    /**
     * Update configuration for the given DirectorVolume message.
     *
     * @return  RpcResult
     */
    rpc VolumeUpdate(DirectorVolume) returns (common.v1.RpcResult) {}

    /**
     * Remove configuration for the given DirectorVolume message.
     *
     * returns RpcResult
     */
    rpc VolumeDelete(DirectorVolume) returns (common.v1.RpcResult) {}

    /**
     * List configured volumes, optionally filtered using a DirectorVolumeListQuery
     * message.
     *
     * returns  A DirectorVolumeList message containing DirectorVolume objects,
     *          if any are found matching the filter
     */
    rpc VolumeList(DirectorVolumeListQuery) returns (DirectorVolumeList) {}

    /**
     * Perform actions that really only make sense for very low-level testing.
     */
    rpc Poke(common.v1.PokeQuery) returns (common.v1.PokeResponse) {}

    /**
     * Return a metadata bitmap in a standard format. The actual bitmap returned
     * is based on the spec field of the Query.
     */
    rpc MetadataGetBitmap(common.v1.MetadataBitmapQuery) returns (common.v1.MetadataBitmapReply) {}
    rpc MetadataResetBitmap(common.v1.MetadataBitmapResetQuery) returns (common.v1.MetadataBitmapResetReply) {}

    // Config services, from common.v1.
    rpc ConfigGetUint32(common.v1.ConfigKey) returns (common.v1.ConfigGetUint32Reply) {}
    rpc ConfigUpdateUint32(common.v1.ConfigUint32) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListUint32(common.v1.ConfigListQuery) returns (common.v1.ConfigUint32List) {}

    rpc ConfigGetBool(common.v1.ConfigKey) returns (common.v1.ConfigGetBoolReply) {}
    rpc ConfigUpdateBool(common.v1.ConfigBool) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListBool(common.v1.ConfigListQuery) returns (common.v1.ConfigBoolList) {}

    rpc ConfigGetString(common.v1.ConfigKey) returns (common.v1.ConfigGetStringReply) {}
    rpc ConfigUpdateString(common.v1.ConfigString) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListString(common.v1.ConfigListQuery) returns (common.v1.ConfigStringList) {}
}

message DirectorStatusRequest {
    // Empty for now.
}

message DirectorStatus {
    // The version control info string.
    string version_info = 1;

    // The git branch name.
    string branch = 3;

    // Generic daemon status.
    common.v1.DaemonStatus status = 2;
}

message DirectorVolumeListQuery {
    // A possibly-empty list of volume IDs to query.
    repeated uint32 volume_ids = 1;
    // A possibly-empty list of volume UUIDs to query.
    repeated string volume_uuids = 2;
}

message DirectorVolumeStatistics {
    // Empty for now.
}

message DirectorVolumeStatus {
    // Empty for now.
}

/**
 * Volume message for Director RPCs.
 */
message DirectorVolume {
    common.v1.DataplaneCommon cc = 1;

    // The volume ID.
    uint32 volume_id = 2;

    // The write_pipe (identifies the plugin).
    uint32 write_pipe = 3;
    // The read pipe (should be write_pipe + 1 in all current plugins).
    uint32 read_pipe = 4;

    // Quality of service indicator.
    uint32 qos = 5;

    // List of replica inodes.
    repeated uint32 replica_ids = 6;

    // List of replica uuids.
    repeated string replica_uuids = 17;

    // Number of times this volume has been mounted (used for cache consistency).
    uint32 mount_count = 9 [deprecated = true];

    // Volume statistics.
    DirectorVolumeStatistics stats = 7;

    // Volume status, e.g. retry condition.
    DirectorVolumeStatus status = 8;

    // Disable block compression.
    bool no_compress = 10;
    // Disable all block caching.
    bool no_cache = 11;
    // Disable caching of writes.
    bool no_write_cache = 12;
    // Enable QoS throttling.
    bool throttle = 13;

    // This is now set on the FsPresentation object.
    //common.v1.VolumeCrypto volume_crypto = 15;
    reserved 15;

    // Is the volume read-only?
    bool read_only = 16;
}

message DirectorVolumeList {
    repeated DirectorVolume volumes = 1;
}
