// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: director.proto

#ifndef PROTOBUF_director_2eproto__INCLUDED
#define PROTOBUF_director_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace director {
namespace v1 {
class DirectorPresentation;
class DirectorPresentationDefaultTypeInternal;
extern DirectorPresentationDefaultTypeInternal _DirectorPresentation_default_instance_;
class DirectorPresentationList;
class DirectorPresentationListDefaultTypeInternal;
extern DirectorPresentationListDefaultTypeInternal _DirectorPresentationList_default_instance_;
class DirectorPresentationListQuery;
class DirectorPresentationListQueryDefaultTypeInternal;
extern DirectorPresentationListQueryDefaultTypeInternal _DirectorPresentationListQuery_default_instance_;
class DirectorStatus;
class DirectorStatusDefaultTypeInternal;
extern DirectorStatusDefaultTypeInternal _DirectorStatus_default_instance_;
class DirectorStatusRequest;
class DirectorStatusRequestDefaultTypeInternal;
extern DirectorStatusRequestDefaultTypeInternal _DirectorStatusRequest_default_instance_;
class DirectorVolume;
class DirectorVolumeDefaultTypeInternal;
extern DirectorVolumeDefaultTypeInternal _DirectorVolume_default_instance_;
class DirectorVolumeList;
class DirectorVolumeListDefaultTypeInternal;
extern DirectorVolumeListDefaultTypeInternal _DirectorVolumeList_default_instance_;
class DirectorVolumeListQuery;
class DirectorVolumeListQueryDefaultTypeInternal;
extern DirectorVolumeListQueryDefaultTypeInternal _DirectorVolumeListQuery_default_instance_;
class DirectorVolumeStatistics;
class DirectorVolumeStatisticsDefaultTypeInternal;
extern DirectorVolumeStatisticsDefaultTypeInternal _DirectorVolumeStatistics_default_instance_;
class DirectorVolumeStatus;
class DirectorVolumeStatusDefaultTypeInternal;
extern DirectorVolumeStatusDefaultTypeInternal _DirectorVolumeStatus_default_instance_;
}  // namespace v1
}  // namespace director

namespace director {
namespace v1 {

namespace protobuf_director_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_director_2eproto

// ===================================================================

class DirectorStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:director.v1.DirectorStatusRequest) */ {
 public:
  DirectorStatusRequest();
  virtual ~DirectorStatusRequest();

  DirectorStatusRequest(const DirectorStatusRequest& from);

  inline DirectorStatusRequest& operator=(const DirectorStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorStatusRequest(DirectorStatusRequest&& from) noexcept
    : DirectorStatusRequest() {
    *this = ::std::move(from);
  }

  inline DirectorStatusRequest& operator=(DirectorStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorStatusRequest& default_instance();

  static inline const DirectorStatusRequest* internal_default_instance() {
    return reinterpret_cast<const DirectorStatusRequest*>(
               &_DirectorStatusRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DirectorStatusRequest* other);
  friend void swap(DirectorStatusRequest& a, DirectorStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorStatusRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorStatusRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorStatusRequest& from);
  void MergeFrom(const DirectorStatusRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:director.v1.DirectorStatusRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:director.v1.DirectorStatus) */ {
 public:
  DirectorStatus();
  virtual ~DirectorStatus();

  DirectorStatus(const DirectorStatus& from);

  inline DirectorStatus& operator=(const DirectorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorStatus(DirectorStatus&& from) noexcept
    : DirectorStatus() {
    *this = ::std::move(from);
  }

  inline DirectorStatus& operator=(DirectorStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorStatus& default_instance();

  static inline const DirectorStatus* internal_default_instance() {
    return reinterpret_cast<const DirectorStatus*>(
               &_DirectorStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DirectorStatus* other);
  friend void swap(DirectorStatus& a, DirectorStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorStatus& from);
  void MergeFrom(const DirectorStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string version_info = 1;
  void clear_version_info();
  static const int kVersionInfoFieldNumber = 1;
  const ::std::string& version_info() const;
  void set_version_info(const ::std::string& value);
  #if LANG_CXX11
  void set_version_info(::std::string&& value);
  #endif
  void set_version_info(const char* value);
  void set_version_info(const char* value, size_t size);
  ::std::string* mutable_version_info();
  ::std::string* release_version_info();
  void set_allocated_version_info(::std::string* version_info);

  // @@protoc_insertion_point(class_scope:director.v1.DirectorStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr version_info_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorVolumeListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:director.v1.DirectorVolumeListQuery) */ {
 public:
  DirectorVolumeListQuery();
  virtual ~DirectorVolumeListQuery();

  DirectorVolumeListQuery(const DirectorVolumeListQuery& from);

  inline DirectorVolumeListQuery& operator=(const DirectorVolumeListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorVolumeListQuery(DirectorVolumeListQuery&& from) noexcept
    : DirectorVolumeListQuery() {
    *this = ::std::move(from);
  }

  inline DirectorVolumeListQuery& operator=(DirectorVolumeListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorVolumeListQuery& default_instance();

  static inline const DirectorVolumeListQuery* internal_default_instance() {
    return reinterpret_cast<const DirectorVolumeListQuery*>(
               &_DirectorVolumeListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DirectorVolumeListQuery* other);
  friend void swap(DirectorVolumeListQuery& a, DirectorVolumeListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorVolumeListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorVolumeListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorVolumeListQuery& from);
  void MergeFrom(const DirectorVolumeListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorVolumeListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 volume_ids = 1;
  int volume_ids_size() const;
  void clear_volume_ids();
  static const int kVolumeIdsFieldNumber = 1;
  ::google::protobuf::uint32 volume_ids(int index) const;
  void set_volume_ids(int index, ::google::protobuf::uint32 value);
  void add_volume_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      volume_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_volume_ids();

  // @@protoc_insertion_point(class_scope:director.v1.DirectorVolumeListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > volume_ids_;
  mutable int _volume_ids_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorVolumeStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:director.v1.DirectorVolumeStatistics) */ {
 public:
  DirectorVolumeStatistics();
  virtual ~DirectorVolumeStatistics();

  DirectorVolumeStatistics(const DirectorVolumeStatistics& from);

  inline DirectorVolumeStatistics& operator=(const DirectorVolumeStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorVolumeStatistics(DirectorVolumeStatistics&& from) noexcept
    : DirectorVolumeStatistics() {
    *this = ::std::move(from);
  }

  inline DirectorVolumeStatistics& operator=(DirectorVolumeStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorVolumeStatistics& default_instance();

  static inline const DirectorVolumeStatistics* internal_default_instance() {
    return reinterpret_cast<const DirectorVolumeStatistics*>(
               &_DirectorVolumeStatistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DirectorVolumeStatistics* other);
  friend void swap(DirectorVolumeStatistics& a, DirectorVolumeStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorVolumeStatistics* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorVolumeStatistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorVolumeStatistics& from);
  void MergeFrom(const DirectorVolumeStatistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorVolumeStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:director.v1.DirectorVolumeStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorVolumeStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:director.v1.DirectorVolumeStatus) */ {
 public:
  DirectorVolumeStatus();
  virtual ~DirectorVolumeStatus();

  DirectorVolumeStatus(const DirectorVolumeStatus& from);

  inline DirectorVolumeStatus& operator=(const DirectorVolumeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorVolumeStatus(DirectorVolumeStatus&& from) noexcept
    : DirectorVolumeStatus() {
    *this = ::std::move(from);
  }

  inline DirectorVolumeStatus& operator=(DirectorVolumeStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorVolumeStatus& default_instance();

  static inline const DirectorVolumeStatus* internal_default_instance() {
    return reinterpret_cast<const DirectorVolumeStatus*>(
               &_DirectorVolumeStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DirectorVolumeStatus* other);
  friend void swap(DirectorVolumeStatus& a, DirectorVolumeStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorVolumeStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorVolumeStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorVolumeStatus& from);
  void MergeFrom(const DirectorVolumeStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorVolumeStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:director.v1.DirectorVolumeStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorVolume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:director.v1.DirectorVolume) */ {
 public:
  DirectorVolume();
  virtual ~DirectorVolume();

  DirectorVolume(const DirectorVolume& from);

  inline DirectorVolume& operator=(const DirectorVolume& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorVolume(DirectorVolume&& from) noexcept
    : DirectorVolume() {
    *this = ::std::move(from);
  }

  inline DirectorVolume& operator=(DirectorVolume&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorVolume& default_instance();

  static inline const DirectorVolume* internal_default_instance() {
    return reinterpret_cast<const DirectorVolume*>(
               &_DirectorVolume_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DirectorVolume* other);
  friend void swap(DirectorVolume& a, DirectorVolume& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorVolume* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorVolume* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorVolume& from);
  void MergeFrom(const DirectorVolume& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorVolume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 replica_ids = 6;
  int replica_ids_size() const;
  void clear_replica_ids();
  static const int kReplicaIdsFieldNumber = 6;
  ::google::protobuf::uint32 replica_ids(int index) const;
  void set_replica_ids(int index, ::google::protobuf::uint32 value);
  void add_replica_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      replica_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_replica_ids();

  // .common.v1.DataplaneCommon cc = 1;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 1;
  const ::common::v1::DataplaneCommon& cc() const;
  ::common::v1::DataplaneCommon* mutable_cc();
  ::common::v1::DataplaneCommon* release_cc();
  void set_allocated_cc(::common::v1::DataplaneCommon* cc);

  // .director.v1.DirectorVolumeStatistics stats = 7;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 7;
  const ::director::v1::DirectorVolumeStatistics& stats() const;
  ::director::v1::DirectorVolumeStatistics* mutable_stats();
  ::director::v1::DirectorVolumeStatistics* release_stats();
  void set_allocated_stats(::director::v1::DirectorVolumeStatistics* stats);

  // .director.v1.DirectorVolumeStatus status = 8;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 8;
  const ::director::v1::DirectorVolumeStatus& status() const;
  ::director::v1::DirectorVolumeStatus* mutable_status();
  ::director::v1::DirectorVolumeStatus* release_status();
  void set_allocated_status(::director::v1::DirectorVolumeStatus* status);

  // uint32 volume_id = 2;
  void clear_volume_id();
  static const int kVolumeIdFieldNumber = 2;
  ::google::protobuf::uint32 volume_id() const;
  void set_volume_id(::google::protobuf::uint32 value);

  // uint32 write_pipe = 3;
  void clear_write_pipe();
  static const int kWritePipeFieldNumber = 3;
  ::google::protobuf::uint32 write_pipe() const;
  void set_write_pipe(::google::protobuf::uint32 value);

  // uint64 qos = 5;
  void clear_qos();
  static const int kQosFieldNumber = 5;
  ::google::protobuf::uint64 qos() const;
  void set_qos(::google::protobuf::uint64 value);

  // uint32 read_pipe = 4;
  void clear_read_pipe();
  static const int kReadPipeFieldNumber = 4;
  ::google::protobuf::uint32 read_pipe() const;
  void set_read_pipe(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:director.v1.DirectorVolume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > replica_ids_;
  mutable int _replica_ids_cached_byte_size_;
  ::common::v1::DataplaneCommon* cc_;
  ::director::v1::DirectorVolumeStatistics* stats_;
  ::director::v1::DirectorVolumeStatus* status_;
  ::google::protobuf::uint32 volume_id_;
  ::google::protobuf::uint32 write_pipe_;
  ::google::protobuf::uint64 qos_;
  ::google::protobuf::uint32 read_pipe_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorVolumeList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:director.v1.DirectorVolumeList) */ {
 public:
  DirectorVolumeList();
  virtual ~DirectorVolumeList();

  DirectorVolumeList(const DirectorVolumeList& from);

  inline DirectorVolumeList& operator=(const DirectorVolumeList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorVolumeList(DirectorVolumeList&& from) noexcept
    : DirectorVolumeList() {
    *this = ::std::move(from);
  }

  inline DirectorVolumeList& operator=(DirectorVolumeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorVolumeList& default_instance();

  static inline const DirectorVolumeList* internal_default_instance() {
    return reinterpret_cast<const DirectorVolumeList*>(
               &_DirectorVolumeList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DirectorVolumeList* other);
  friend void swap(DirectorVolumeList& a, DirectorVolumeList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorVolumeList* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorVolumeList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorVolumeList& from);
  void MergeFrom(const DirectorVolumeList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorVolumeList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .director.v1.DirectorVolume volumes = 1;
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 1;
  const ::director::v1::DirectorVolume& volumes(int index) const;
  ::director::v1::DirectorVolume* mutable_volumes(int index);
  ::director::v1::DirectorVolume* add_volumes();
  ::google::protobuf::RepeatedPtrField< ::director::v1::DirectorVolume >*
      mutable_volumes();
  const ::google::protobuf::RepeatedPtrField< ::director::v1::DirectorVolume >&
      volumes() const;

  // @@protoc_insertion_point(class_scope:director.v1.DirectorVolumeList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::director::v1::DirectorVolume > volumes_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorPresentationListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:director.v1.DirectorPresentationListQuery) */ {
 public:
  DirectorPresentationListQuery();
  virtual ~DirectorPresentationListQuery();

  DirectorPresentationListQuery(const DirectorPresentationListQuery& from);

  inline DirectorPresentationListQuery& operator=(const DirectorPresentationListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorPresentationListQuery(DirectorPresentationListQuery&& from) noexcept
    : DirectorPresentationListQuery() {
    *this = ::std::move(from);
  }

  inline DirectorPresentationListQuery& operator=(DirectorPresentationListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorPresentationListQuery& default_instance();

  static inline const DirectorPresentationListQuery* internal_default_instance() {
    return reinterpret_cast<const DirectorPresentationListQuery*>(
               &_DirectorPresentationListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DirectorPresentationListQuery* other);
  friend void swap(DirectorPresentationListQuery& a, DirectorPresentationListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorPresentationListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorPresentationListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorPresentationListQuery& from);
  void MergeFrom(const DirectorPresentationListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorPresentationListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 presentation_id = 1;
  int presentation_id_size() const;
  void clear_presentation_id();
  static const int kPresentationIdFieldNumber = 1;
  ::google::protobuf::uint32 presentation_id(int index) const;
  void set_presentation_id(int index, ::google::protobuf::uint32 value);
  void add_presentation_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      presentation_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_presentation_id();

  // @@protoc_insertion_point(class_scope:director.v1.DirectorPresentationListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > presentation_id_;
  mutable int _presentation_id_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorPresentation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:director.v1.DirectorPresentation) */ {
 public:
  DirectorPresentation();
  virtual ~DirectorPresentation();

  DirectorPresentation(const DirectorPresentation& from);

  inline DirectorPresentation& operator=(const DirectorPresentation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorPresentation(DirectorPresentation&& from) noexcept
    : DirectorPresentation() {
    *this = ::std::move(from);
  }

  inline DirectorPresentation& operator=(DirectorPresentation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorPresentation& default_instance();

  static inline const DirectorPresentation* internal_default_instance() {
    return reinterpret_cast<const DirectorPresentation*>(
               &_DirectorPresentation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DirectorPresentation* other);
  friend void swap(DirectorPresentation& a, DirectorPresentation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorPresentation* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorPresentation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorPresentation& from);
  void MergeFrom(const DirectorPresentation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorPresentation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .common.v1.DataplaneCommon cc = 1;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 1;
  const ::common::v1::DataplaneCommon& cc() const;
  ::common::v1::DataplaneCommon* mutable_cc();
  ::common::v1::DataplaneCommon* release_cc();
  void set_allocated_cc(::common::v1::DataplaneCommon* cc);

  // uint32 source_id = 2;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  ::google::protobuf::uint32 source_id() const;
  void set_source_id(::google::protobuf::uint32 value);

  // uint32 target_id = 3;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 3;
  ::google::protobuf::uint32 target_id() const;
  void set_target_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:director.v1.DirectorPresentation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::common::v1::DataplaneCommon* cc_;
  ::google::protobuf::uint32 source_id_;
  ::google::protobuf::uint32 target_id_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorPresentationList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:director.v1.DirectorPresentationList) */ {
 public:
  DirectorPresentationList();
  virtual ~DirectorPresentationList();

  DirectorPresentationList(const DirectorPresentationList& from);

  inline DirectorPresentationList& operator=(const DirectorPresentationList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorPresentationList(DirectorPresentationList&& from) noexcept
    : DirectorPresentationList() {
    *this = ::std::move(from);
  }

  inline DirectorPresentationList& operator=(DirectorPresentationList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorPresentationList& default_instance();

  static inline const DirectorPresentationList* internal_default_instance() {
    return reinterpret_cast<const DirectorPresentationList*>(
               &_DirectorPresentationList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DirectorPresentationList* other);
  friend void swap(DirectorPresentationList& a, DirectorPresentationList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorPresentationList* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorPresentationList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorPresentationList& from);
  void MergeFrom(const DirectorPresentationList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorPresentationList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .director.v1.DirectorPresentation presentations = 1;
  int presentations_size() const;
  void clear_presentations();
  static const int kPresentationsFieldNumber = 1;
  const ::director::v1::DirectorPresentation& presentations(int index) const;
  ::director::v1::DirectorPresentation* mutable_presentations(int index);
  ::director::v1::DirectorPresentation* add_presentations();
  ::google::protobuf::RepeatedPtrField< ::director::v1::DirectorPresentation >*
      mutable_presentations();
  const ::google::protobuf::RepeatedPtrField< ::director::v1::DirectorPresentation >&
      presentations() const;

  // @@protoc_insertion_point(class_scope:director.v1.DirectorPresentationList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::director::v1::DirectorPresentation > presentations_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DirectorStatusRequest

// -------------------------------------------------------------------

// DirectorStatus

// string version_info = 1;
inline void DirectorStatus::clear_version_info() {
  version_info_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DirectorStatus::version_info() const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorStatus.version_info)
  return version_info_.GetNoArena();
}
inline void DirectorStatus::set_version_info(const ::std::string& value) {
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:director.v1.DirectorStatus.version_info)
}
#if LANG_CXX11
inline void DirectorStatus::set_version_info(::std::string&& value) {
  
  version_info_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:director.v1.DirectorStatus.version_info)
}
#endif
inline void DirectorStatus::set_version_info(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:director.v1.DirectorStatus.version_info)
}
inline void DirectorStatus::set_version_info(const char* value, size_t size) {
  
  version_info_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:director.v1.DirectorStatus.version_info)
}
inline ::std::string* DirectorStatus::mutable_version_info() {
  
  // @@protoc_insertion_point(field_mutable:director.v1.DirectorStatus.version_info)
  return version_info_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DirectorStatus::release_version_info() {
  // @@protoc_insertion_point(field_release:director.v1.DirectorStatus.version_info)
  
  return version_info_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DirectorStatus::set_allocated_version_info(::std::string* version_info) {
  if (version_info != NULL) {
    
  } else {
    
  }
  version_info_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version_info);
  // @@protoc_insertion_point(field_set_allocated:director.v1.DirectorStatus.version_info)
}

// -------------------------------------------------------------------

// DirectorVolumeListQuery

// repeated uint32 volume_ids = 1;
inline int DirectorVolumeListQuery::volume_ids_size() const {
  return volume_ids_.size();
}
inline void DirectorVolumeListQuery::clear_volume_ids() {
  volume_ids_.Clear();
}
inline ::google::protobuf::uint32 DirectorVolumeListQuery::volume_ids(int index) const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorVolumeListQuery.volume_ids)
  return volume_ids_.Get(index);
}
inline void DirectorVolumeListQuery::set_volume_ids(int index, ::google::protobuf::uint32 value) {
  volume_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:director.v1.DirectorVolumeListQuery.volume_ids)
}
inline void DirectorVolumeListQuery::add_volume_ids(::google::protobuf::uint32 value) {
  volume_ids_.Add(value);
  // @@protoc_insertion_point(field_add:director.v1.DirectorVolumeListQuery.volume_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DirectorVolumeListQuery::volume_ids() const {
  // @@protoc_insertion_point(field_list:director.v1.DirectorVolumeListQuery.volume_ids)
  return volume_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DirectorVolumeListQuery::mutable_volume_ids() {
  // @@protoc_insertion_point(field_mutable_list:director.v1.DirectorVolumeListQuery.volume_ids)
  return &volume_ids_;
}

// -------------------------------------------------------------------

// DirectorVolumeStatistics

// -------------------------------------------------------------------

// DirectorVolumeStatus

// -------------------------------------------------------------------

// DirectorVolume

// .common.v1.DataplaneCommon cc = 1;
inline bool DirectorVolume::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline void DirectorVolume::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
inline const ::common::v1::DataplaneCommon& DirectorVolume::cc() const {
  const ::common::v1::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:director.v1.DirectorVolume.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::common::v1::DataplaneCommon*>(
      &::common::v1::_DataplaneCommon_default_instance_);
}
inline ::common::v1::DataplaneCommon* DirectorVolume::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::common::v1::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:director.v1.DirectorVolume.cc)
  return cc_;
}
inline ::common::v1::DataplaneCommon* DirectorVolume::release_cc() {
  // @@protoc_insertion_point(field_release:director.v1.DirectorVolume.cc)
  
  ::common::v1::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void DirectorVolume::set_allocated_cc(::common::v1::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:director.v1.DirectorVolume.cc)
}

// uint32 volume_id = 2;
inline void DirectorVolume::clear_volume_id() {
  volume_id_ = 0u;
}
inline ::google::protobuf::uint32 DirectorVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorVolume.volume_id)
  return volume_id_;
}
inline void DirectorVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:director.v1.DirectorVolume.volume_id)
}

// uint32 write_pipe = 3;
inline void DirectorVolume::clear_write_pipe() {
  write_pipe_ = 0u;
}
inline ::google::protobuf::uint32 DirectorVolume::write_pipe() const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorVolume.write_pipe)
  return write_pipe_;
}
inline void DirectorVolume::set_write_pipe(::google::protobuf::uint32 value) {
  
  write_pipe_ = value;
  // @@protoc_insertion_point(field_set:director.v1.DirectorVolume.write_pipe)
}

// uint32 read_pipe = 4;
inline void DirectorVolume::clear_read_pipe() {
  read_pipe_ = 0u;
}
inline ::google::protobuf::uint32 DirectorVolume::read_pipe() const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorVolume.read_pipe)
  return read_pipe_;
}
inline void DirectorVolume::set_read_pipe(::google::protobuf::uint32 value) {
  
  read_pipe_ = value;
  // @@protoc_insertion_point(field_set:director.v1.DirectorVolume.read_pipe)
}

// uint64 qos = 5;
inline void DirectorVolume::clear_qos() {
  qos_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DirectorVolume::qos() const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorVolume.qos)
  return qos_;
}
inline void DirectorVolume::set_qos(::google::protobuf::uint64 value) {
  
  qos_ = value;
  // @@protoc_insertion_point(field_set:director.v1.DirectorVolume.qos)
}

// repeated uint32 replica_ids = 6;
inline int DirectorVolume::replica_ids_size() const {
  return replica_ids_.size();
}
inline void DirectorVolume::clear_replica_ids() {
  replica_ids_.Clear();
}
inline ::google::protobuf::uint32 DirectorVolume::replica_ids(int index) const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorVolume.replica_ids)
  return replica_ids_.Get(index);
}
inline void DirectorVolume::set_replica_ids(int index, ::google::protobuf::uint32 value) {
  replica_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:director.v1.DirectorVolume.replica_ids)
}
inline void DirectorVolume::add_replica_ids(::google::protobuf::uint32 value) {
  replica_ids_.Add(value);
  // @@protoc_insertion_point(field_add:director.v1.DirectorVolume.replica_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DirectorVolume::replica_ids() const {
  // @@protoc_insertion_point(field_list:director.v1.DirectorVolume.replica_ids)
  return replica_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DirectorVolume::mutable_replica_ids() {
  // @@protoc_insertion_point(field_mutable_list:director.v1.DirectorVolume.replica_ids)
  return &replica_ids_;
}

// .director.v1.DirectorVolumeStatistics stats = 7;
inline bool DirectorVolume::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
inline void DirectorVolume::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
inline const ::director::v1::DirectorVolumeStatistics& DirectorVolume::stats() const {
  const ::director::v1::DirectorVolumeStatistics* p = stats_;
  // @@protoc_insertion_point(field_get:director.v1.DirectorVolume.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::director::v1::DirectorVolumeStatistics*>(
      &::director::v1::_DirectorVolumeStatistics_default_instance_);
}
inline ::director::v1::DirectorVolumeStatistics* DirectorVolume::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::director::v1::DirectorVolumeStatistics;
  }
  // @@protoc_insertion_point(field_mutable:director.v1.DirectorVolume.stats)
  return stats_;
}
inline ::director::v1::DirectorVolumeStatistics* DirectorVolume::release_stats() {
  // @@protoc_insertion_point(field_release:director.v1.DirectorVolume.stats)
  
  ::director::v1::DirectorVolumeStatistics* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void DirectorVolume::set_allocated_stats(::director::v1::DirectorVolumeStatistics* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:director.v1.DirectorVolume.stats)
}

// .director.v1.DirectorVolumeStatus status = 8;
inline bool DirectorVolume::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void DirectorVolume::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::director::v1::DirectorVolumeStatus& DirectorVolume::status() const {
  const ::director::v1::DirectorVolumeStatus* p = status_;
  // @@protoc_insertion_point(field_get:director.v1.DirectorVolume.status)
  return p != NULL ? *p : *reinterpret_cast<const ::director::v1::DirectorVolumeStatus*>(
      &::director::v1::_DirectorVolumeStatus_default_instance_);
}
inline ::director::v1::DirectorVolumeStatus* DirectorVolume::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::director::v1::DirectorVolumeStatus;
  }
  // @@protoc_insertion_point(field_mutable:director.v1.DirectorVolume.status)
  return status_;
}
inline ::director::v1::DirectorVolumeStatus* DirectorVolume::release_status() {
  // @@protoc_insertion_point(field_release:director.v1.DirectorVolume.status)
  
  ::director::v1::DirectorVolumeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void DirectorVolume::set_allocated_status(::director::v1::DirectorVolumeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:director.v1.DirectorVolume.status)
}

// -------------------------------------------------------------------

// DirectorVolumeList

// repeated .director.v1.DirectorVolume volumes = 1;
inline int DirectorVolumeList::volumes_size() const {
  return volumes_.size();
}
inline void DirectorVolumeList::clear_volumes() {
  volumes_.Clear();
}
inline const ::director::v1::DirectorVolume& DirectorVolumeList::volumes(int index) const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorVolumeList.volumes)
  return volumes_.Get(index);
}
inline ::director::v1::DirectorVolume* DirectorVolumeList::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:director.v1.DirectorVolumeList.volumes)
  return volumes_.Mutable(index);
}
inline ::director::v1::DirectorVolume* DirectorVolumeList::add_volumes() {
  // @@protoc_insertion_point(field_add:director.v1.DirectorVolumeList.volumes)
  return volumes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::director::v1::DirectorVolume >*
DirectorVolumeList::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:director.v1.DirectorVolumeList.volumes)
  return &volumes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::director::v1::DirectorVolume >&
DirectorVolumeList::volumes() const {
  // @@protoc_insertion_point(field_list:director.v1.DirectorVolumeList.volumes)
  return volumes_;
}

// -------------------------------------------------------------------

// DirectorPresentationListQuery

// repeated uint32 presentation_id = 1;
inline int DirectorPresentationListQuery::presentation_id_size() const {
  return presentation_id_.size();
}
inline void DirectorPresentationListQuery::clear_presentation_id() {
  presentation_id_.Clear();
}
inline ::google::protobuf::uint32 DirectorPresentationListQuery::presentation_id(int index) const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorPresentationListQuery.presentation_id)
  return presentation_id_.Get(index);
}
inline void DirectorPresentationListQuery::set_presentation_id(int index, ::google::protobuf::uint32 value) {
  presentation_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:director.v1.DirectorPresentationListQuery.presentation_id)
}
inline void DirectorPresentationListQuery::add_presentation_id(::google::protobuf::uint32 value) {
  presentation_id_.Add(value);
  // @@protoc_insertion_point(field_add:director.v1.DirectorPresentationListQuery.presentation_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DirectorPresentationListQuery::presentation_id() const {
  // @@protoc_insertion_point(field_list:director.v1.DirectorPresentationListQuery.presentation_id)
  return presentation_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DirectorPresentationListQuery::mutable_presentation_id() {
  // @@protoc_insertion_point(field_mutable_list:director.v1.DirectorPresentationListQuery.presentation_id)
  return &presentation_id_;
}

// -------------------------------------------------------------------

// DirectorPresentation

// .common.v1.DataplaneCommon cc = 1;
inline bool DirectorPresentation::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline void DirectorPresentation::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
inline const ::common::v1::DataplaneCommon& DirectorPresentation::cc() const {
  const ::common::v1::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:director.v1.DirectorPresentation.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::common::v1::DataplaneCommon*>(
      &::common::v1::_DataplaneCommon_default_instance_);
}
inline ::common::v1::DataplaneCommon* DirectorPresentation::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::common::v1::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:director.v1.DirectorPresentation.cc)
  return cc_;
}
inline ::common::v1::DataplaneCommon* DirectorPresentation::release_cc() {
  // @@protoc_insertion_point(field_release:director.v1.DirectorPresentation.cc)
  
  ::common::v1::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void DirectorPresentation::set_allocated_cc(::common::v1::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:director.v1.DirectorPresentation.cc)
}

// uint32 source_id = 2;
inline void DirectorPresentation::clear_source_id() {
  source_id_ = 0u;
}
inline ::google::protobuf::uint32 DirectorPresentation::source_id() const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorPresentation.source_id)
  return source_id_;
}
inline void DirectorPresentation::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:director.v1.DirectorPresentation.source_id)
}

// uint32 target_id = 3;
inline void DirectorPresentation::clear_target_id() {
  target_id_ = 0u;
}
inline ::google::protobuf::uint32 DirectorPresentation::target_id() const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorPresentation.target_id)
  return target_id_;
}
inline void DirectorPresentation::set_target_id(::google::protobuf::uint32 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:director.v1.DirectorPresentation.target_id)
}

// -------------------------------------------------------------------

// DirectorPresentationList

// repeated .director.v1.DirectorPresentation presentations = 1;
inline int DirectorPresentationList::presentations_size() const {
  return presentations_.size();
}
inline void DirectorPresentationList::clear_presentations() {
  presentations_.Clear();
}
inline const ::director::v1::DirectorPresentation& DirectorPresentationList::presentations(int index) const {
  // @@protoc_insertion_point(field_get:director.v1.DirectorPresentationList.presentations)
  return presentations_.Get(index);
}
inline ::director::v1::DirectorPresentation* DirectorPresentationList::mutable_presentations(int index) {
  // @@protoc_insertion_point(field_mutable:director.v1.DirectorPresentationList.presentations)
  return presentations_.Mutable(index);
}
inline ::director::v1::DirectorPresentation* DirectorPresentationList::add_presentations() {
  // @@protoc_insertion_point(field_add:director.v1.DirectorPresentationList.presentations)
  return presentations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::director::v1::DirectorPresentation >*
DirectorPresentationList::mutable_presentations() {
  // @@protoc_insertion_point(field_mutable_list:director.v1.DirectorPresentationList.presentations)
  return &presentations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::director::v1::DirectorPresentation >&
DirectorPresentationList::presentations() const {
  // @@protoc_insertion_point(field_list:director.v1.DirectorPresentationList.presentations)
  return presentations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v1
}  // namespace director

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_director_2eproto__INCLUDED
