// Code generated by protoc-gen-go. DO NOT EDIT.
// source: director.proto

package v1

import (
	v1 "code.storageos.net/storageos/service/common/v1"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DirectorStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectorStatusRequest) Reset()         { *m = DirectorStatusRequest{} }
func (m *DirectorStatusRequest) String() string { return proto.CompactTextString(m) }
func (*DirectorStatusRequest) ProtoMessage()    {}
func (*DirectorStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bb3702600586b0, []int{0}
}

func (m *DirectorStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectorStatusRequest.Unmarshal(m, b)
}
func (m *DirectorStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectorStatusRequest.Marshal(b, m, deterministic)
}
func (m *DirectorStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectorStatusRequest.Merge(m, src)
}
func (m *DirectorStatusRequest) XXX_Size() int {
	return xxx_messageInfo_DirectorStatusRequest.Size(m)
}
func (m *DirectorStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectorStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DirectorStatusRequest proto.InternalMessageInfo

type DirectorStatus struct {
	// The version control info string.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	// Generic daemon status.
	Status               *v1.DaemonStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DirectorStatus) Reset()         { *m = DirectorStatus{} }
func (m *DirectorStatus) String() string { return proto.CompactTextString(m) }
func (*DirectorStatus) ProtoMessage()    {}
func (*DirectorStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bb3702600586b0, []int{1}
}

func (m *DirectorStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectorStatus.Unmarshal(m, b)
}
func (m *DirectorStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectorStatus.Marshal(b, m, deterministic)
}
func (m *DirectorStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectorStatus.Merge(m, src)
}
func (m *DirectorStatus) XXX_Size() int {
	return xxx_messageInfo_DirectorStatus.Size(m)
}
func (m *DirectorStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectorStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DirectorStatus proto.InternalMessageInfo

func (m *DirectorStatus) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

func (m *DirectorStatus) GetStatus() *v1.DaemonStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type DirectorVolumeListQuery struct {
	// A possibly-empty list of volume IDs to query.
	VolumeIds []uint32 `protobuf:"varint,1,rep,packed,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
	// A possibly-empty list of volume UUIDs to query.
	VolumeUuids          []string `protobuf:"bytes,2,rep,name=volume_uuids,json=volumeUuids,proto3" json:"volume_uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectorVolumeListQuery) Reset()         { *m = DirectorVolumeListQuery{} }
func (m *DirectorVolumeListQuery) String() string { return proto.CompactTextString(m) }
func (*DirectorVolumeListQuery) ProtoMessage()    {}
func (*DirectorVolumeListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bb3702600586b0, []int{2}
}

func (m *DirectorVolumeListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectorVolumeListQuery.Unmarshal(m, b)
}
func (m *DirectorVolumeListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectorVolumeListQuery.Marshal(b, m, deterministic)
}
func (m *DirectorVolumeListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectorVolumeListQuery.Merge(m, src)
}
func (m *DirectorVolumeListQuery) XXX_Size() int {
	return xxx_messageInfo_DirectorVolumeListQuery.Size(m)
}
func (m *DirectorVolumeListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectorVolumeListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DirectorVolumeListQuery proto.InternalMessageInfo

func (m *DirectorVolumeListQuery) GetVolumeIds() []uint32 {
	if m != nil {
		return m.VolumeIds
	}
	return nil
}

func (m *DirectorVolumeListQuery) GetVolumeUuids() []string {
	if m != nil {
		return m.VolumeUuids
	}
	return nil
}

type DirectorVolumeStatistics struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectorVolumeStatistics) Reset()         { *m = DirectorVolumeStatistics{} }
func (m *DirectorVolumeStatistics) String() string { return proto.CompactTextString(m) }
func (*DirectorVolumeStatistics) ProtoMessage()    {}
func (*DirectorVolumeStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bb3702600586b0, []int{3}
}

func (m *DirectorVolumeStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectorVolumeStatistics.Unmarshal(m, b)
}
func (m *DirectorVolumeStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectorVolumeStatistics.Marshal(b, m, deterministic)
}
func (m *DirectorVolumeStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectorVolumeStatistics.Merge(m, src)
}
func (m *DirectorVolumeStatistics) XXX_Size() int {
	return xxx_messageInfo_DirectorVolumeStatistics.Size(m)
}
func (m *DirectorVolumeStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectorVolumeStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_DirectorVolumeStatistics proto.InternalMessageInfo

type DirectorVolumeStatus struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectorVolumeStatus) Reset()         { *m = DirectorVolumeStatus{} }
func (m *DirectorVolumeStatus) String() string { return proto.CompactTextString(m) }
func (*DirectorVolumeStatus) ProtoMessage()    {}
func (*DirectorVolumeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bb3702600586b0, []int{4}
}

func (m *DirectorVolumeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectorVolumeStatus.Unmarshal(m, b)
}
func (m *DirectorVolumeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectorVolumeStatus.Marshal(b, m, deterministic)
}
func (m *DirectorVolumeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectorVolumeStatus.Merge(m, src)
}
func (m *DirectorVolumeStatus) XXX_Size() int {
	return xxx_messageInfo_DirectorVolumeStatus.Size(m)
}
func (m *DirectorVolumeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectorVolumeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DirectorVolumeStatus proto.InternalMessageInfo

//*
// Volume message for Director RPCs.
//
// Note this does should not be used to configure Presentation inodes, volumes that point
// at other volumes. Use DirectorPresentation for that.
type DirectorVolume struct {
	Cc *v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc,proto3" json:"cc,omitempty"`
	// The volume ID.
	VolumeId uint32 `protobuf:"varint,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The write_pipe (identifies the plugin).
	WritePipe uint32 `protobuf:"varint,3,opt,name=write_pipe,json=writePipe,proto3" json:"write_pipe,omitempty"`
	// The read pipe (should be write_pipe + 1 in all current plugins).
	ReadPipe uint32 `protobuf:"varint,4,opt,name=read_pipe,json=readPipe,proto3" json:"read_pipe,omitempty"`
	// Quality of service indicator.
	Qos uint32 `protobuf:"varint,5,opt,name=qos,proto3" json:"qos,omitempty"`
	// List of replica inodes.
	ReplicaIds []uint32 `protobuf:"varint,6,rep,packed,name=replica_ids,json=replicaIds,proto3" json:"replica_ids,omitempty"`
	// List of replica uuids.
	ReplicaUuids []string `protobuf:"bytes,17,rep,name=replica_uuids,json=replicaUuids,proto3" json:"replica_uuids,omitempty"`
	// Number of times this volume has been mounted (used for cache consistency).
	MountCount uint32 `protobuf:"varint,9,opt,name=mount_count,json=mountCount,proto3" json:"mount_count,omitempty"` // Deprecated: Do not use.
	// Volume statistics.
	Stats *DirectorVolumeStatistics `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
	// Volume status, e.g. retry condition.
	Status *DirectorVolumeStatus `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	// Disable block compression.
	NoCompress bool `protobuf:"varint,10,opt,name=no_compress,json=noCompress,proto3" json:"no_compress,omitempty"`
	// Disable all block caching.
	NoCache bool `protobuf:"varint,11,opt,name=no_cache,json=noCache,proto3" json:"no_cache,omitempty"`
	// Disable caching of writes.
	NoWriteCache bool `protobuf:"varint,12,opt,name=no_write_cache,json=noWriteCache,proto3" json:"no_write_cache,omitempty"`
	// Enable QoS throttling.
	Throttle bool `protobuf:"varint,13,opt,name=throttle,proto3" json:"throttle,omitempty"`
	// Crypto config.
	VolumeCrypto *v1.VolumeCrypto `protobuf:"bytes,15,opt,name=volume_crypto,json=volumeCrypto,proto3" json:"volume_crypto,omitempty"`
	// Is the volume read-only?
	ReadOnly             bool     `protobuf:"varint,16,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectorVolume) Reset()         { *m = DirectorVolume{} }
func (m *DirectorVolume) String() string { return proto.CompactTextString(m) }
func (*DirectorVolume) ProtoMessage()    {}
func (*DirectorVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bb3702600586b0, []int{5}
}

func (m *DirectorVolume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectorVolume.Unmarshal(m, b)
}
func (m *DirectorVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectorVolume.Marshal(b, m, deterministic)
}
func (m *DirectorVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectorVolume.Merge(m, src)
}
func (m *DirectorVolume) XXX_Size() int {
	return xxx_messageInfo_DirectorVolume.Size(m)
}
func (m *DirectorVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectorVolume.DiscardUnknown(m)
}

var xxx_messageInfo_DirectorVolume proto.InternalMessageInfo

func (m *DirectorVolume) GetCc() *v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DirectorVolume) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *DirectorVolume) GetWritePipe() uint32 {
	if m != nil {
		return m.WritePipe
	}
	return 0
}

func (m *DirectorVolume) GetReadPipe() uint32 {
	if m != nil {
		return m.ReadPipe
	}
	return 0
}

func (m *DirectorVolume) GetQos() uint32 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *DirectorVolume) GetReplicaIds() []uint32 {
	if m != nil {
		return m.ReplicaIds
	}
	return nil
}

func (m *DirectorVolume) GetReplicaUuids() []string {
	if m != nil {
		return m.ReplicaUuids
	}
	return nil
}

// Deprecated: Do not use.
func (m *DirectorVolume) GetMountCount() uint32 {
	if m != nil {
		return m.MountCount
	}
	return 0
}

func (m *DirectorVolume) GetStats() *DirectorVolumeStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *DirectorVolume) GetStatus() *DirectorVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *DirectorVolume) GetNoCompress() bool {
	if m != nil {
		return m.NoCompress
	}
	return false
}

func (m *DirectorVolume) GetNoCache() bool {
	if m != nil {
		return m.NoCache
	}
	return false
}

func (m *DirectorVolume) GetNoWriteCache() bool {
	if m != nil {
		return m.NoWriteCache
	}
	return false
}

func (m *DirectorVolume) GetThrottle() bool {
	if m != nil {
		return m.Throttle
	}
	return false
}

func (m *DirectorVolume) GetVolumeCrypto() *v1.VolumeCrypto {
	if m != nil {
		return m.VolumeCrypto
	}
	return nil
}

func (m *DirectorVolume) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

type DirectorVolumeList struct {
	Volumes              []*DirectorVolume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DirectorVolumeList) Reset()         { *m = DirectorVolumeList{} }
func (m *DirectorVolumeList) String() string { return proto.CompactTextString(m) }
func (*DirectorVolumeList) ProtoMessage()    {}
func (*DirectorVolumeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bb3702600586b0, []int{6}
}

func (m *DirectorVolumeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectorVolumeList.Unmarshal(m, b)
}
func (m *DirectorVolumeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectorVolumeList.Marshal(b, m, deterministic)
}
func (m *DirectorVolumeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectorVolumeList.Merge(m, src)
}
func (m *DirectorVolumeList) XXX_Size() int {
	return xxx_messageInfo_DirectorVolumeList.Size(m)
}
func (m *DirectorVolumeList) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectorVolumeList.DiscardUnknown(m)
}

var xxx_messageInfo_DirectorVolumeList proto.InternalMessageInfo

func (m *DirectorVolumeList) GetVolumes() []*DirectorVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type DirectorPresentationListQuery struct {
	// A possibly-empty list of presentation IDs to query.
	PresentationIds []uint32 `protobuf:"varint,1,rep,packed,name=presentation_ids,json=presentationIds,proto3" json:"presentation_ids,omitempty"`
	// A possibly-empty list of presentation UUIDs to query.
	PresentationUuids    []string `protobuf:"bytes,2,rep,name=presentation_uuids,json=presentationUuids,proto3" json:"presentation_uuids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectorPresentationListQuery) Reset()         { *m = DirectorPresentationListQuery{} }
func (m *DirectorPresentationListQuery) String() string { return proto.CompactTextString(m) }
func (*DirectorPresentationListQuery) ProtoMessage()    {}
func (*DirectorPresentationListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bb3702600586b0, []int{7}
}

func (m *DirectorPresentationListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectorPresentationListQuery.Unmarshal(m, b)
}
func (m *DirectorPresentationListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectorPresentationListQuery.Marshal(b, m, deterministic)
}
func (m *DirectorPresentationListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectorPresentationListQuery.Merge(m, src)
}
func (m *DirectorPresentationListQuery) XXX_Size() int {
	return xxx_messageInfo_DirectorPresentationListQuery.Size(m)
}
func (m *DirectorPresentationListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectorPresentationListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DirectorPresentationListQuery proto.InternalMessageInfo

func (m *DirectorPresentationListQuery) GetPresentationIds() []uint32 {
	if m != nil {
		return m.PresentationIds
	}
	return nil
}

func (m *DirectorPresentationListQuery) GetPresentationUuids() []string {
	if m != nil {
		return m.PresentationUuids
	}
	return nil
}

//*
// Presentation volume message for Director RPCs.
//
// The minimum amount of information required to specify the 'presentation' or source volume,
// the volume that is presented to the user and (usually) mounted. All actual work
// is done on the target volume, which has actual storage associated with it.
type DirectorPresentation struct {
	Cc *v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc,proto3" json:"cc,omitempty"`
	// The inode the user mounts or opens.
	PresentationId uint32 `protobuf:"varint,2,opt,name=presentation_id,json=presentationId,proto3" json:"presentation_id,omitempty"`
	// The underlying inode of the StorageOS volume. Required in GSI mode,
	// should be INVALID_INODE(0) in NLI mode.
	TargetId uint32 `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// The UUID of the underlying volume to which we point. Required in NLI
	// mode, ignored in GSI mode.
	TargetUuid           string   `protobuf:"bytes,4,opt,name=target_uuid,json=targetUuid,proto3" json:"target_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DirectorPresentation) Reset()         { *m = DirectorPresentation{} }
func (m *DirectorPresentation) String() string { return proto.CompactTextString(m) }
func (*DirectorPresentation) ProtoMessage()    {}
func (*DirectorPresentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bb3702600586b0, []int{8}
}

func (m *DirectorPresentation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectorPresentation.Unmarshal(m, b)
}
func (m *DirectorPresentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectorPresentation.Marshal(b, m, deterministic)
}
func (m *DirectorPresentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectorPresentation.Merge(m, src)
}
func (m *DirectorPresentation) XXX_Size() int {
	return xxx_messageInfo_DirectorPresentation.Size(m)
}
func (m *DirectorPresentation) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectorPresentation.DiscardUnknown(m)
}

var xxx_messageInfo_DirectorPresentation proto.InternalMessageInfo

func (m *DirectorPresentation) GetCc() *v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DirectorPresentation) GetPresentationId() uint32 {
	if m != nil {
		return m.PresentationId
	}
	return 0
}

func (m *DirectorPresentation) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

func (m *DirectorPresentation) GetTargetUuid() string {
	if m != nil {
		return m.TargetUuid
	}
	return ""
}

type DirectorPresentationList struct {
	Presentations        []*DirectorPresentation `protobuf:"bytes,1,rep,name=presentations,proto3" json:"presentations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *DirectorPresentationList) Reset()         { *m = DirectorPresentationList{} }
func (m *DirectorPresentationList) String() string { return proto.CompactTextString(m) }
func (*DirectorPresentationList) ProtoMessage()    {}
func (*DirectorPresentationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_29bb3702600586b0, []int{9}
}

func (m *DirectorPresentationList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DirectorPresentationList.Unmarshal(m, b)
}
func (m *DirectorPresentationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DirectorPresentationList.Marshal(b, m, deterministic)
}
func (m *DirectorPresentationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DirectorPresentationList.Merge(m, src)
}
func (m *DirectorPresentationList) XXX_Size() int {
	return xxx_messageInfo_DirectorPresentationList.Size(m)
}
func (m *DirectorPresentationList) XXX_DiscardUnknown() {
	xxx_messageInfo_DirectorPresentationList.DiscardUnknown(m)
}

var xxx_messageInfo_DirectorPresentationList proto.InternalMessageInfo

func (m *DirectorPresentationList) GetPresentations() []*DirectorPresentation {
	if m != nil {
		return m.Presentations
	}
	return nil
}

func init() {
	proto.RegisterType((*DirectorStatusRequest)(nil), "director.v1.DirectorStatusRequest")
	proto.RegisterType((*DirectorStatus)(nil), "director.v1.DirectorStatus")
	proto.RegisterType((*DirectorVolumeListQuery)(nil), "director.v1.DirectorVolumeListQuery")
	proto.RegisterType((*DirectorVolumeStatistics)(nil), "director.v1.DirectorVolumeStatistics")
	proto.RegisterType((*DirectorVolumeStatus)(nil), "director.v1.DirectorVolumeStatus")
	proto.RegisterType((*DirectorVolume)(nil), "director.v1.DirectorVolume")
	proto.RegisterType((*DirectorVolumeList)(nil), "director.v1.DirectorVolumeList")
	proto.RegisterType((*DirectorPresentationListQuery)(nil), "director.v1.DirectorPresentationListQuery")
	proto.RegisterType((*DirectorPresentation)(nil), "director.v1.DirectorPresentation")
	proto.RegisterType((*DirectorPresentationList)(nil), "director.v1.DirectorPresentationList")
}

func init() { proto.RegisterFile("director.proto", fileDescriptor_29bb3702600586b0) }

var fileDescriptor_29bb3702600586b0 = []byte{
	// 1021 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x6d, 0x6f, 0x1b, 0x45,
	0x10, 0x8e, 0x93, 0x36, 0xb1, 0xc7, 0x2f, 0x71, 0x96, 0x16, 0x5f, 0x1c, 0x42, 0xdd, 0x4b, 0x2b,
	0x42, 0x25, 0x6c, 0xe2, 0x0a, 0x21, 0x04, 0x9f, 0xe2, 0xa8, 0x91, 0x09, 0x55, 0xc3, 0x55, 0x06,
	0x09, 0x3e, 0x58, 0xc7, 0x79, 0xe2, 0x9e, 0x38, 0xef, 0x5e, 0x6f, 0xd7, 0x46, 0xfe, 0x49, 0xfc,
	0x11, 0xfe, 0x08, 0x7f, 0x04, 0xed, 0xcb, 0x9d, 0xd7, 0xef, 0x84, 0xf2, 0xc5, 0xca, 0x3e, 0xcf,
	0xcc, 0xb3, 0x33, 0xcf, 0xcc, 0x9e, 0x14, 0xa8, 0x0c, 0xc2, 0x04, 0x03, 0xc1, 0x92, 0x66, 0x9c,
	0x30, 0xc1, 0x48, 0x31, 0x3b, 0x4f, 0x2e, 0xea, 0xa5, 0x80, 0x8d, 0x46, 0x8c, 0x6a, 0xca, 0xad,
	0xc1, 0xe3, 0x2b, 0x43, 0xbe, 0x15, 0xbe, 0x18, 0x73, 0x0f, 0xdf, 0x8f, 0x91, 0x0b, 0x77, 0x00,
	0x95, 0x79, 0x82, 0x3c, 0x85, 0xd2, 0x04, 0x13, 0x1e, 0x32, 0xda, 0x0f, 0xe9, 0x1d, 0x73, 0x72,
	0x8d, 0xdc, 0x79, 0xc1, 0x2b, 0x1a, 0xac, 0x4b, 0xef, 0x18, 0x69, 0xc1, 0x3e, 0x57, 0xc1, 0xce,
	0x6e, 0x23, 0x77, 0x5e, 0x6c, 0xd7, 0x9a, 0xe6, 0xb2, 0xc9, 0x45, 0xf3, 0xca, 0xc7, 0x11, 0xa3,
	0xe6, 0x12, 0x13, 0xe6, 0xfe, 0x0a, 0xb5, 0xf4, 0x96, 0x9f, 0x58, 0x34, 0x1e, 0xe1, 0x0f, 0x21,
	0x17, 0x3f, 0x8e, 0x31, 0x99, 0x92, 0x53, 0x80, 0x89, 0x82, 0xfa, 0xe1, 0x80, 0x3b, 0xb9, 0xc6,
	0xde, 0x79, 0xd9, 0x2b, 0x68, 0xa4, 0x3b, 0xd0, 0xd5, 0x68, 0x7a, 0x3c, 0x96, 0x01, 0xbb, 0x8d,
	0x3d, 0x55, 0x8d, 0xc2, 0x7a, 0x12, 0x72, 0xeb, 0xe0, 0xcc, 0x8b, 0xcb, 0xcb, 0x43, 0x2e, 0xc2,
	0x80, 0xbb, 0x1f, 0xc3, 0xa3, 0x65, 0x6e, 0xcc, 0xdd, 0xbf, 0x1f, 0xcc, 0xfa, 0xd6, 0x04, 0x79,
	0x01, 0xbb, 0x41, 0xa0, 0xba, 0x2d, 0xb6, 0xeb, 0x73, 0x0d, 0x09, 0x3f, 0x8e, 0x7c, 0x8a, 0x1d,
	0x05, 0x79, 0xbb, 0x41, 0x40, 0x4e, 0xa0, 0x90, 0x15, 0xad, 0x3c, 0x28, 0x7b, 0xf9, 0xb4, 0x66,
	0xd9, 0xd1, 0x1f, 0x49, 0x28, 0xb0, 0x1f, 0x87, 0x31, 0x3a, 0x7b, 0x8a, 0x2d, 0x28, 0xe4, 0x36,
	0x8c, 0x51, 0xe6, 0x26, 0xe8, 0x0f, 0x34, 0xfb, 0x40, 0xe7, 0x4a, 0x40, 0x91, 0x55, 0xd8, 0x7b,
	0xcf, 0xb8, 0xf3, 0x50, 0xc1, 0xf2, 0x4f, 0xf2, 0x04, 0x8a, 0x09, 0xc6, 0x51, 0x18, 0xf8, 0xca,
	0xa0, 0x7d, 0x65, 0x10, 0x18, 0x48, 0x3a, 0x74, 0x06, 0xe5, 0x34, 0x40, 0x5b, 0x74, 0xa4, 0x2c,
	0x2a, 0x19, 0x50, 0x79, 0x44, 0xce, 0xa0, 0x38, 0x62, 0x63, 0x2a, 0xfa, 0x81, 0xfc, 0x75, 0x0a,
	0x52, 0xff, 0x72, 0xd7, 0xc9, 0x79, 0xa0, 0xe0, 0x8e, 0xfc, 0x21, 0xdf, 0xc2, 0x43, 0x39, 0x2f,
	0xee, 0x1c, 0x28, 0x13, 0x9e, 0x37, 0xad, 0x7d, 0x6a, 0xae, 0xb3, 0xd8, 0xd3, 0x39, 0xe4, 0x9b,
	0x6c, 0x27, 0xf2, 0x2a, 0xfb, 0xe9, 0x96, 0xec, 0xd9, 0x76, 0xc8, 0x16, 0x29, 0xeb, 0x07, 0x6c,
	0x14, 0x27, 0xc8, 0xb9, 0x03, 0x8d, 0xdc, 0x79, 0xde, 0x03, 0xca, 0x3a, 0x06, 0x21, 0xc7, 0x90,
	0x97, 0x01, 0x7e, 0xf0, 0x0e, 0x9d, 0xa2, 0x62, 0x0f, 0x28, 0xeb, 0xc8, 0x23, 0x79, 0x06, 0x15,
	0xca, 0xfa, 0xda, 0x6f, 0x1d, 0x50, 0x52, 0x01, 0x25, 0xca, 0x7e, 0x96, 0xa0, 0x8e, 0xaa, 0x43,
	0x5e, 0xbc, 0x4b, 0x98, 0x10, 0x11, 0x3a, 0x65, 0xc5, 0x67, 0x67, 0xf2, 0x1d, 0x94, 0xcd, 0x2c,
	0x83, 0x64, 0x1a, 0x0b, 0xe6, 0x1c, 0x2e, 0xed, 0xb4, 0xae, 0xba, 0xa3, 0x68, 0xcf, 0xec, 0xa3,
	0x3e, 0x65, 0xd3, 0x64, 0x34, 0x9a, 0x3a, 0x55, 0x2d, 0x2d, 0x81, 0x37, 0x34, 0x9a, 0xba, 0x37,
	0x40, 0x96, 0xd7, 0x9e, 0x7c, 0x05, 0x07, 0x5a, 0x42, 0xaf, 0x7b, 0xb1, 0x7d, 0xb2, 0xc1, 0x2a,
	0x2f, 0x8d, 0x75, 0xa7, 0x70, 0x9a, 0x52, 0xb7, 0x09, 0x72, 0xa4, 0x72, 0x04, 0x8c, 0xce, 0x5e,
	0xd2, 0xe7, 0x50, 0x8d, 0x2d, 0xc2, 0x7a, 0x4f, 0x87, 0x36, 0x2e, 0x77, 0xe6, 0x0b, 0x20, 0x73,
	0xa1, 0xf6, 0xdb, 0x3a, 0xb2, 0x19, 0xfd, 0xc2, 0xfe, 0xcc, 0xcd, 0x9e, 0x91, 0x7d, 0xf7, 0xbd,
	0xde, 0xcc, 0x67, 0x70, 0xb8, 0x50, 0x9e, 0x79, 0x39, 0x95, 0xf9, 0xea, 0xa4, 0xa5, 0xc2, 0x4f,
	0x86, 0x28, 0x64, 0x88, 0x7e, 0x3e, 0x79, 0x0d, 0x74, 0x07, 0x72, 0x57, 0x0c, 0x29, 0x6b, 0x56,
	0xef, 0xa7, 0xe0, 0x81, 0x86, 0x64, 0xb1, 0x6e, 0x30, 0xfb, 0x1a, 0x2c, 0xda, 0x44, 0xae, 0xa1,
	0x6c, 0xdf, 0x95, 0xfa, 0xbf, 0x7a, 0x55, 0xed, 0x6c, 0x6f, 0x3e, 0xaf, 0xfd, 0x57, 0x19, 0xf2,
	0x69, 0x1c, 0xb9, 0x81, 0x7d, 0xf3, 0xe9, 0x74, 0x57, 0x0a, 0xcd, 0x7d, 0x70, 0xeb, 0x27, 0x1b,
	0x62, 0xdc, 0x1d, 0xd2, 0x81, 0x52, 0xba, 0x6d, 0xe8, 0x0b, 0x24, 0x9b, 0x76, 0xa3, 0xfe, 0xc8,
	0xb2, 0xdc, 0x8b, 0x03, 0x0f, 0xf9, 0x38, 0x12, 0xb6, 0x48, 0x2f, 0x1e, 0x7c, 0xb8, 0xc8, 0x15,
	0x46, 0xf8, 0x5f, 0x45, 0x7a, 0x00, 0xd6, 0xe6, 0x3f, 0xdb, 0x20, 0x91, 0xed, 0x71, 0xfd, 0xc9,
	0x96, 0x28, 0x77, 0x87, 0xbc, 0x01, 0x62, 0x8f, 0xc7, 0x78, 0xb5, 0x7d, 0x8e, 0x6b, 0xeb, 0x5c,
	0x10, 0x34, 0xbe, 0xfd, 0x7f, 0x82, 0xc6, 0xc3, 0x0f, 0x10, 0x1c, 0x42, 0x75, 0x69, 0x9f, 0x5f,
	0x6c, 0x95, 0x9b, 0xb9, 0xfa, 0xfc, 0x5f, 0xc5, 0xba, 0x3b, 0xe4, 0x6b, 0x78, 0x70, 0xcb, 0x7e,
	0x47, 0x62, 0x17, 0x22, 0x01, 0x2d, 0x53, 0x5b, 0x40, 0x3d, 0xe4, 0x31, 0xa3, 0x1c, 0xdd, 0x1d,
	0xf2, 0x0a, 0x0a, 0x72, 0x8d, 0xb9, 0x2a, 0xed, 0xd8, 0x8a, 0xcb, 0x50, 0x2d, 0xf1, 0xc9, 0x2a,
	0xca, 0xd2, 0xe9, 0xc1, 0xd1, 0x6b, 0x14, 0xfe, 0xc0, 0x17, 0xfe, 0x35, 0x8a, 0xcb, 0x50, 0x8c,
	0xfc, 0x98, 0x7c, 0x6a, 0x25, 0xa5, 0xac, 0xa6, 0xb4, 0xe8, 0x7a, 0xde, 0xc3, 0x38, 0x9a, 0xba,
	0x3b, 0xc4, 0x87, 0x8f, 0x52, 0xc2, 0x43, 0x9e, 0x09, 0x9f, 0x6d, 0x48, 0xe4, 0x68, 0x4a, 0xde,
	0x12, 0x94, 0x5e, 0xf1, 0x3d, 0x1c, 0x76, 0x18, 0xbd, 0x0b, 0x87, 0xd7, 0x28, 0x7a, 0x21, 0x15,
	0x2f, 0xdb, 0x73, 0x2e, 0x6a, 0xee, 0x06, 0xe5, 0x8a, 0x2f, 0xa2, 0x59, 0x46, 0xaa, 0xf5, 0x1a,
	0x88, 0x66, 0xf4, 0x2e, 0x1a, 0xb9, 0xda, 0x52, 0xa2, 0x26, 0xe6, 0x4c, 0xb5, 0xf3, 0x66, 0x72,
	0x55, 0x0d, 0x4b, 0xb3, 0x8d, 0x58, 0x7d, 0x29, 0x67, 0x36, 0xa4, 0x93, 0x35, 0x17, 0x99, 0x25,
	0x79, 0x05, 0xe5, 0xac, 0xee, 0x4b, 0xc6, 0xa2, 0x35, 0x7d, 0x9e, 0xae, 0xea, 0x53, 0xc6, 0xa7,
	0x65, 0x75, 0xd3, 0xb2, 0x74, 0xb5, 0x4a, 0xea, 0xf1, 0x52, 0x92, 0x84, 0xb7, 0x76, 0xd8, 0x85,
	0xca, 0xac, 0x09, 0x25, 0xb4, 0xa9, 0xbf, 0xe3, 0x95, 0x97, 0x98, 0xee, 0xec, 0x39, 0xbe, 0x15,
	0x49, 0x48, 0x87, 0xf7, 0x99, 0xa3, 0xce, 0x58, 0x33, 0x47, 0x23, 0xb7, 0x3c, 0x47, 0x4d, 0xdc,
	0x6f, 0x8e, 0x46, 0xec, 0x7e, 0x73, 0xd4, 0x49, 0xba, 0xd3, 0xcb, 0xf6, 0x2f, 0x5f, 0x06, 0x6c,
	0x80, 0x4d, 0x2e, 0x58, 0xe2, 0x0f, 0x91, 0xf1, 0x26, 0x45, 0xd1, 0xca, 0x4e, 0x2d, 0x8e, 0xc9,
	0x24, 0x0c, 0xb0, 0x95, 0x7e, 0x3b, 0x5a, 0x93, 0x8b, 0xdf, 0xf6, 0xd5, 0xbf, 0x14, 0x2f, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x87, 0xce, 0x15, 0xab, 0x7f, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DirectorClient is the client API for Director service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DirectorClient interface {
	//*
	// Get program status.
	Status(ctx context.Context, in *DirectorStatusRequest, opts ...grpc.CallOption) (*DirectorStatus, error)
	//*
	// Add configuration for the given DirectorVolume message.
	//
	// @return  RpcResult
	VolumeCreate(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Update configuration for the given DirectorVolume message.
	//
	// @return  RpcResult
	VolumeUpdate(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Remove configuration for the given DirectorVolume message.
	//
	// returns RpcResult
	VolumeDelete(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// List configured volumes, optionally filtered using a DirectorVolumeListQuery
	// message.
	//
	// returns  A DirectorVolumeList message containing DirectorVolume objects,
	//          if any are found matching the filter
	VolumeList(ctx context.Context, in *DirectorVolumeListQuery, opts ...grpc.CallOption) (*DirectorVolumeList, error)
	//*
	// Add configuration for a Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationCreate(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Update configuration for a Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationUpdate(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// Remove configuration for the Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationDelete(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error)
	//*
	// List configured Presentation volumes, optionally filtered using a DirectorPresentationListQuery
	// message.
	//
	// returns A DirectorPresentationList message containing DirectorPresentation mesages,
	//         if any are found matching the filter.
	PresentationList(ctx context.Context, in *DirectorPresentationListQuery, opts ...grpc.CallOption) (*DirectorPresentationList, error)
	//*
	// Perform actions that really only make sense for very low-level testing.
	Poke(ctx context.Context, in *v1.PokeQuery, opts ...grpc.CallOption) (*v1.PokeResponse, error)
	//*
	// List data-plane stats, optionally filtered using a StatsListQuery message.
	//
	// returns A StatsListResponse containing Statistic messages, if any are
	// found matching the filter.
	StatsList(ctx context.Context, in *v1.StatsListQuery, opts ...grpc.CallOption) (*v1.StatsListResponse, error)
	//*
	// Return a metadata bitmap in a standard format. The actual bitmap returned
	// is based on the spec field of the Query.
	MetadataGetBitmap(ctx context.Context, in *v1.MetadataBitmapQuery, opts ...grpc.CallOption) (*v1.MetadataBitmapReply, error)
	MetadataResetBitmap(ctx context.Context, in *v1.MetadataBitmapResetQuery, opts ...grpc.CallOption) (*v1.MetadataBitmapResetReply, error)
	// Config services, from common.v1.
	ConfigGetUint32(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint32Reply, error)
	ConfigUpdateUint32(ctx context.Context, in *v1.ConfigUint32, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListUint32(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint32List, error)
	ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error)
	ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error)
}

type directorClient struct {
	cc *grpc.ClientConn
}

func NewDirectorClient(cc *grpc.ClientConn) DirectorClient {
	return &directorClient{cc}
}

func (c *directorClient) Status(ctx context.Context, in *DirectorStatusRequest, opts ...grpc.CallOption) (*DirectorStatus, error) {
	out := new(DirectorStatus)
	err := c.cc.Invoke(ctx, "/director.v1.Director/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) VolumeCreate(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/director.v1.Director/VolumeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) VolumeUpdate(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/director.v1.Director/VolumeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) VolumeDelete(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/director.v1.Director/VolumeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) VolumeList(ctx context.Context, in *DirectorVolumeListQuery, opts ...grpc.CallOption) (*DirectorVolumeList, error) {
	out := new(DirectorVolumeList)
	err := c.cc.Invoke(ctx, "/director.v1.Director/VolumeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) PresentationCreate(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/director.v1.Director/PresentationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) PresentationUpdate(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/director.v1.Director/PresentationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) PresentationDelete(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/director.v1.Director/PresentationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) PresentationList(ctx context.Context, in *DirectorPresentationListQuery, opts ...grpc.CallOption) (*DirectorPresentationList, error) {
	out := new(DirectorPresentationList)
	err := c.cc.Invoke(ctx, "/director.v1.Director/PresentationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) Poke(ctx context.Context, in *v1.PokeQuery, opts ...grpc.CallOption) (*v1.PokeResponse, error) {
	out := new(v1.PokeResponse)
	err := c.cc.Invoke(ctx, "/director.v1.Director/Poke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) StatsList(ctx context.Context, in *v1.StatsListQuery, opts ...grpc.CallOption) (*v1.StatsListResponse, error) {
	out := new(v1.StatsListResponse)
	err := c.cc.Invoke(ctx, "/director.v1.Director/StatsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) MetadataGetBitmap(ctx context.Context, in *v1.MetadataBitmapQuery, opts ...grpc.CallOption) (*v1.MetadataBitmapReply, error) {
	out := new(v1.MetadataBitmapReply)
	err := c.cc.Invoke(ctx, "/director.v1.Director/MetadataGetBitmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) MetadataResetBitmap(ctx context.Context, in *v1.MetadataBitmapResetQuery, opts ...grpc.CallOption) (*v1.MetadataBitmapResetReply, error) {
	out := new(v1.MetadataBitmapResetReply)
	err := c.cc.Invoke(ctx, "/director.v1.Director/MetadataResetBitmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ConfigGetUint32(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetUint32Reply, error) {
	out := new(v1.ConfigGetUint32Reply)
	err := c.cc.Invoke(ctx, "/director.v1.Director/ConfigGetUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ConfigUpdateUint32(ctx context.Context, in *v1.ConfigUint32, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/director.v1.Director/ConfigUpdateUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ConfigListUint32(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigUint32List, error) {
	out := new(v1.ConfigUint32List)
	err := c.cc.Invoke(ctx, "/director.v1.Director/ConfigListUint32", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error) {
	out := new(v1.ConfigGetBoolReply)
	err := c.cc.Invoke(ctx, "/director.v1.Director/ConfigGetBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/director.v1.Director/ConfigUpdateBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error) {
	out := new(v1.ConfigBoolList)
	err := c.cc.Invoke(ctx, "/director.v1.Director/ConfigListBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error) {
	out := new(v1.ConfigGetStringReply)
	err := c.cc.Invoke(ctx, "/director.v1.Director/ConfigGetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/director.v1.Director/ConfigUpdateString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error) {
	out := new(v1.ConfigStringList)
	err := c.cc.Invoke(ctx, "/director.v1.Director/ConfigListString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectorServer is the server API for Director service.
type DirectorServer interface {
	//*
	// Get program status.
	Status(context.Context, *DirectorStatusRequest) (*DirectorStatus, error)
	//*
	// Add configuration for the given DirectorVolume message.
	//
	// @return  RpcResult
	VolumeCreate(context.Context, *DirectorVolume) (*v1.RpcResult, error)
	//*
	// Update configuration for the given DirectorVolume message.
	//
	// @return  RpcResult
	VolumeUpdate(context.Context, *DirectorVolume) (*v1.RpcResult, error)
	//*
	// Remove configuration for the given DirectorVolume message.
	//
	// returns RpcResult
	VolumeDelete(context.Context, *DirectorVolume) (*v1.RpcResult, error)
	//*
	// List configured volumes, optionally filtered using a DirectorVolumeListQuery
	// message.
	//
	// returns  A DirectorVolumeList message containing DirectorVolume objects,
	//          if any are found matching the filter
	VolumeList(context.Context, *DirectorVolumeListQuery) (*DirectorVolumeList, error)
	//*
	// Add configuration for a Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationCreate(context.Context, *DirectorPresentation) (*v1.RpcResult, error)
	//*
	// Update configuration for a Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationUpdate(context.Context, *DirectorPresentation) (*v1.RpcResult, error)
	//*
	// Remove configuration for the Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationDelete(context.Context, *DirectorPresentation) (*v1.RpcResult, error)
	//*
	// List configured Presentation volumes, optionally filtered using a DirectorPresentationListQuery
	// message.
	//
	// returns A DirectorPresentationList message containing DirectorPresentation mesages,
	//         if any are found matching the filter.
	PresentationList(context.Context, *DirectorPresentationListQuery) (*DirectorPresentationList, error)
	//*
	// Perform actions that really only make sense for very low-level testing.
	Poke(context.Context, *v1.PokeQuery) (*v1.PokeResponse, error)
	//*
	// List data-plane stats, optionally filtered using a StatsListQuery message.
	//
	// returns A StatsListResponse containing Statistic messages, if any are
	// found matching the filter.
	StatsList(context.Context, *v1.StatsListQuery) (*v1.StatsListResponse, error)
	//*
	// Return a metadata bitmap in a standard format. The actual bitmap returned
	// is based on the spec field of the Query.
	MetadataGetBitmap(context.Context, *v1.MetadataBitmapQuery) (*v1.MetadataBitmapReply, error)
	MetadataResetBitmap(context.Context, *v1.MetadataBitmapResetQuery) (*v1.MetadataBitmapResetReply, error)
	// Config services, from common.v1.
	ConfigGetUint32(context.Context, *v1.ConfigKey) (*v1.ConfigGetUint32Reply, error)
	ConfigUpdateUint32(context.Context, *v1.ConfigUint32) (*v1.ConfigUpdateReply, error)
	ConfigListUint32(context.Context, *v1.ConfigListQuery) (*v1.ConfigUint32List, error)
	ConfigGetBool(context.Context, *v1.ConfigKey) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(context.Context, *v1.ConfigBool) (*v1.ConfigUpdateReply, error)
	ConfigListBool(context.Context, *v1.ConfigListQuery) (*v1.ConfigBoolList, error)
	ConfigGetString(context.Context, *v1.ConfigKey) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(context.Context, *v1.ConfigString) (*v1.ConfigUpdateReply, error)
	ConfigListString(context.Context, *v1.ConfigListQuery) (*v1.ConfigStringList, error)
}

// UnimplementedDirectorServer can be embedded to have forward compatible implementations.
type UnimplementedDirectorServer struct {
}

func (*UnimplementedDirectorServer) Status(ctx context.Context, req *DirectorStatusRequest) (*DirectorStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedDirectorServer) VolumeCreate(ctx context.Context, req *DirectorVolume) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeCreate not implemented")
}
func (*UnimplementedDirectorServer) VolumeUpdate(ctx context.Context, req *DirectorVolume) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeUpdate not implemented")
}
func (*UnimplementedDirectorServer) VolumeDelete(ctx context.Context, req *DirectorVolume) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeDelete not implemented")
}
func (*UnimplementedDirectorServer) VolumeList(ctx context.Context, req *DirectorVolumeListQuery) (*DirectorVolumeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VolumeList not implemented")
}
func (*UnimplementedDirectorServer) PresentationCreate(ctx context.Context, req *DirectorPresentation) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresentationCreate not implemented")
}
func (*UnimplementedDirectorServer) PresentationUpdate(ctx context.Context, req *DirectorPresentation) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresentationUpdate not implemented")
}
func (*UnimplementedDirectorServer) PresentationDelete(ctx context.Context, req *DirectorPresentation) (*v1.RpcResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresentationDelete not implemented")
}
func (*UnimplementedDirectorServer) PresentationList(ctx context.Context, req *DirectorPresentationListQuery) (*DirectorPresentationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PresentationList not implemented")
}
func (*UnimplementedDirectorServer) Poke(ctx context.Context, req *v1.PokeQuery) (*v1.PokeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poke not implemented")
}
func (*UnimplementedDirectorServer) StatsList(ctx context.Context, req *v1.StatsListQuery) (*v1.StatsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatsList not implemented")
}
func (*UnimplementedDirectorServer) MetadataGetBitmap(ctx context.Context, req *v1.MetadataBitmapQuery) (*v1.MetadataBitmapReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetadataGetBitmap not implemented")
}
func (*UnimplementedDirectorServer) MetadataResetBitmap(ctx context.Context, req *v1.MetadataBitmapResetQuery) (*v1.MetadataBitmapResetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetadataResetBitmap not implemented")
}
func (*UnimplementedDirectorServer) ConfigGetUint32(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetUint32Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetUint32 not implemented")
}
func (*UnimplementedDirectorServer) ConfigUpdateUint32(ctx context.Context, req *v1.ConfigUint32) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateUint32 not implemented")
}
func (*UnimplementedDirectorServer) ConfigListUint32(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigUint32List, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListUint32 not implemented")
}
func (*UnimplementedDirectorServer) ConfigGetBool(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetBoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetBool not implemented")
}
func (*UnimplementedDirectorServer) ConfigUpdateBool(ctx context.Context, req *v1.ConfigBool) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateBool not implemented")
}
func (*UnimplementedDirectorServer) ConfigListBool(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigBoolList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListBool not implemented")
}
func (*UnimplementedDirectorServer) ConfigGetString(ctx context.Context, req *v1.ConfigKey) (*v1.ConfigGetStringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGetString not implemented")
}
func (*UnimplementedDirectorServer) ConfigUpdateString(ctx context.Context, req *v1.ConfigString) (*v1.ConfigUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigUpdateString not implemented")
}
func (*UnimplementedDirectorServer) ConfigListString(ctx context.Context, req *v1.ConfigListQuery) (*v1.ConfigStringList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigListString not implemented")
}

func RegisterDirectorServer(s *grpc.Server, srv DirectorServer) {
	s.RegisterService(&_Director_serviceDesc, srv)
}

func _Director_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).Status(ctx, req.(*DirectorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).VolumeCreate(ctx, req.(*DirectorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_VolumeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).VolumeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/VolumeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).VolumeUpdate(ctx, req.(*DirectorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).VolumeDelete(ctx, req.(*DirectorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorVolumeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).VolumeList(ctx, req.(*DirectorVolumeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_PresentationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorPresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).PresentationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/PresentationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).PresentationCreate(ctx, req.(*DirectorPresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_PresentationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorPresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).PresentationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/PresentationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).PresentationUpdate(ctx, req.(*DirectorPresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_PresentationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorPresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).PresentationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/PresentationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).PresentationDelete(ctx, req.(*DirectorPresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_PresentationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorPresentationListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).PresentationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/PresentationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).PresentationList(ctx, req.(*DirectorPresentationListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_Poke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PokeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).Poke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/Poke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).Poke(ctx, req.(*v1.PokeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_StatsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.StatsListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).StatsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/StatsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).StatsList(ctx, req.(*v1.StatsListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_MetadataGetBitmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MetadataBitmapQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).MetadataGetBitmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/MetadataGetBitmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).MetadataGetBitmap(ctx, req.(*v1.MetadataBitmapQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_MetadataResetBitmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MetadataBitmapResetQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).MetadataResetBitmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/MetadataResetBitmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).MetadataResetBitmap(ctx, req.(*v1.MetadataBitmapResetQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ConfigGetUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ConfigGetUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/ConfigGetUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ConfigGetUint32(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ConfigUpdateUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigUint32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ConfigUpdateUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/ConfigUpdateUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ConfigUpdateUint32(ctx, req.(*v1.ConfigUint32))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ConfigListUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ConfigListUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/ConfigListUint32",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ConfigListUint32(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ConfigGetBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ConfigGetBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/ConfigGetBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ConfigGetBool(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ConfigUpdateBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigBool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ConfigUpdateBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/ConfigUpdateBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ConfigUpdateBool(ctx, req.(*v1.ConfigBool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ConfigListBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ConfigListBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/ConfigListBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ConfigListBool(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ConfigGetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ConfigGetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/ConfigGetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ConfigGetString(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ConfigUpdateString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ConfigUpdateString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/ConfigUpdateString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ConfigUpdateString(ctx, req.(*v1.ConfigString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_ConfigListString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).ConfigListString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/director.v1.Director/ConfigListString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).ConfigListString(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Director_serviceDesc = grpc.ServiceDesc{
	ServiceName: "director.v1.Director",
	HandlerType: (*DirectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Director_Status_Handler,
		},
		{
			MethodName: "VolumeCreate",
			Handler:    _Director_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeUpdate",
			Handler:    _Director_VolumeUpdate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _Director_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _Director_VolumeList_Handler,
		},
		{
			MethodName: "PresentationCreate",
			Handler:    _Director_PresentationCreate_Handler,
		},
		{
			MethodName: "PresentationUpdate",
			Handler:    _Director_PresentationUpdate_Handler,
		},
		{
			MethodName: "PresentationDelete",
			Handler:    _Director_PresentationDelete_Handler,
		},
		{
			MethodName: "PresentationList",
			Handler:    _Director_PresentationList_Handler,
		},
		{
			MethodName: "Poke",
			Handler:    _Director_Poke_Handler,
		},
		{
			MethodName: "StatsList",
			Handler:    _Director_StatsList_Handler,
		},
		{
			MethodName: "MetadataGetBitmap",
			Handler:    _Director_MetadataGetBitmap_Handler,
		},
		{
			MethodName: "MetadataResetBitmap",
			Handler:    _Director_MetadataResetBitmap_Handler,
		},
		{
			MethodName: "ConfigGetUint32",
			Handler:    _Director_ConfigGetUint32_Handler,
		},
		{
			MethodName: "ConfigUpdateUint32",
			Handler:    _Director_ConfigUpdateUint32_Handler,
		},
		{
			MethodName: "ConfigListUint32",
			Handler:    _Director_ConfigListUint32_Handler,
		},
		{
			MethodName: "ConfigGetBool",
			Handler:    _Director_ConfigGetBool_Handler,
		},
		{
			MethodName: "ConfigUpdateBool",
			Handler:    _Director_ConfigUpdateBool_Handler,
		},
		{
			MethodName: "ConfigListBool",
			Handler:    _Director_ConfigListBool_Handler,
		},
		{
			MethodName: "ConfigGetString",
			Handler:    _Director_ConfigGetString_Handler,
		},
		{
			MethodName: "ConfigUpdateString",
			Handler:    _Director_ConfigUpdateString_Handler,
		},
		{
			MethodName: "ConfigListString",
			Handler:    _Director_ConfigListString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "director.proto",
}
