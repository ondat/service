// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataplane.proto

#ifndef PROTOBUF_dataplane_2eproto__INCLUDED
#define PROTOBUF_dataplane_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
namespace dataplane {
class Host;
class HostDefaultTypeInternal;
extern HostDefaultTypeInternal _Host_default_instance_;
class NodeConfiguration;
class NodeConfigurationDefaultTypeInternal;
extern NodeConfigurationDefaultTypeInternal _NodeConfiguration_default_instance_;
class ObjectMeta;
class ObjectMetaDefaultTypeInternal;
extern ObjectMetaDefaultTypeInternal _ObjectMeta_default_instance_;
class ObjectMeta_AnnotationsEntry;
class ObjectMeta_AnnotationsEntryDefaultTypeInternal;
extern ObjectMeta_AnnotationsEntryDefaultTypeInternal _ObjectMeta_AnnotationsEntry_default_instance_;
class ObjectMeta_LabelsEntry;
class ObjectMeta_LabelsEntryDefaultTypeInternal;
extern ObjectMeta_LabelsEntryDefaultTypeInternal _ObjectMeta_LabelsEntry_default_instance_;
class PresentationSpec;
class PresentationSpecDefaultTypeInternal;
extern PresentationSpecDefaultTypeInternal _PresentationSpec_default_instance_;
class Volume;
class VolumeDefaultTypeInternal;
extern VolumeDefaultTypeInternal _Volume_default_instance_;
class VolumeSpec;
class VolumeSpecDefaultTypeInternal;
extern VolumeSpecDefaultTypeInternal _VolumeSpec_default_instance_;
}  // namespace dataplane
namespace google {
namespace protobuf {
class Timestamp;
class TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
}  // namespace protobuf
}  // namespace google

namespace dataplane {

namespace protobuf_dataplane_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_dataplane_2eproto

enum PresentationSpec_VolumeReadiness {
  PresentationSpec_VolumeReadiness_READINESS_UNKNOWN = 0,
  PresentationSpec_VolumeReadiness_READINESS_PENDING = 1,
  PresentationSpec_VolumeReadiness_READINESS_READY = 2,
  PresentationSpec_VolumeReadiness_PresentationSpec_VolumeReadiness_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PresentationSpec_VolumeReadiness_PresentationSpec_VolumeReadiness_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PresentationSpec_VolumeReadiness_IsValid(int value);
const PresentationSpec_VolumeReadiness PresentationSpec_VolumeReadiness_VolumeReadiness_MIN = PresentationSpec_VolumeReadiness_READINESS_UNKNOWN;
const PresentationSpec_VolumeReadiness PresentationSpec_VolumeReadiness_VolumeReadiness_MAX = PresentationSpec_VolumeReadiness_READINESS_READY;
const int PresentationSpec_VolumeReadiness_VolumeReadiness_ARRAYSIZE = PresentationSpec_VolumeReadiness_VolumeReadiness_MAX + 1;

const ::google::protobuf::EnumDescriptor* PresentationSpec_VolumeReadiness_descriptor();
inline const ::std::string& PresentationSpec_VolumeReadiness_Name(PresentationSpec_VolumeReadiness value) {
  return ::google::protobuf::internal::NameOfEnum(
    PresentationSpec_VolumeReadiness_descriptor(), value);
}
inline bool PresentationSpec_VolumeReadiness_Parse(
    const ::std::string& name, PresentationSpec_VolumeReadiness* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PresentationSpec_VolumeReadiness>(
    PresentationSpec_VolumeReadiness_descriptor(), name, value);
}
enum VolumeSpec_VolumeStatus {
  VolumeSpec_VolumeStatus_STATUS_UNKNOWN = 0,
  VolumeSpec_VolumeStatus_STATUS_PENDING = 1,
  VolumeSpec_VolumeStatus_STATUS_ACTIVE = 2,
  VolumeSpec_VolumeStatus_STATUS_UNAVAILABLE = 3,
  VolumeSpec_VolumeStatus_STATUS_FAILED = 4,
  VolumeSpec_VolumeStatus_STATUS_DELETING = 5,
  VolumeSpec_VolumeStatus_VolumeSpec_VolumeStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VolumeSpec_VolumeStatus_VolumeSpec_VolumeStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VolumeSpec_VolumeStatus_IsValid(int value);
const VolumeSpec_VolumeStatus VolumeSpec_VolumeStatus_VolumeStatus_MIN = VolumeSpec_VolumeStatus_STATUS_UNKNOWN;
const VolumeSpec_VolumeStatus VolumeSpec_VolumeStatus_VolumeStatus_MAX = VolumeSpec_VolumeStatus_STATUS_DELETING;
const int VolumeSpec_VolumeStatus_VolumeStatus_ARRAYSIZE = VolumeSpec_VolumeStatus_VolumeStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* VolumeSpec_VolumeStatus_descriptor();
inline const ::std::string& VolumeSpec_VolumeStatus_Name(VolumeSpec_VolumeStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    VolumeSpec_VolumeStatus_descriptor(), value);
}
inline bool VolumeSpec_VolumeStatus_Parse(
    const ::std::string& name, VolumeSpec_VolumeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VolumeSpec_VolumeStatus>(
    VolumeSpec_VolumeStatus_descriptor(), name, value);
}
enum VolumeSpec_VolumeHealth {
  VolumeSpec_VolumeHealth_HEALTH_UNKNOWN = 0,
  VolumeSpec_VolumeHealth_HEALTH_SYNCHRONISING = 1,
  VolumeSpec_VolumeHealth_HEALTH_HEALTHY = 2,
  VolumeSpec_VolumeHealth_HEALTH_SUSPECT = 3,
  VolumeSpec_VolumeHealth_HEALTH_DEGRADED = 4,
  VolumeSpec_VolumeHealth_HEALTH_FAILED = 5,
  VolumeSpec_VolumeHealth_VolumeSpec_VolumeHealth_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VolumeSpec_VolumeHealth_VolumeSpec_VolumeHealth_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VolumeSpec_VolumeHealth_IsValid(int value);
const VolumeSpec_VolumeHealth VolumeSpec_VolumeHealth_VolumeHealth_MIN = VolumeSpec_VolumeHealth_HEALTH_UNKNOWN;
const VolumeSpec_VolumeHealth VolumeSpec_VolumeHealth_VolumeHealth_MAX = VolumeSpec_VolumeHealth_HEALTH_FAILED;
const int VolumeSpec_VolumeHealth_VolumeHealth_ARRAYSIZE = VolumeSpec_VolumeHealth_VolumeHealth_MAX + 1;

const ::google::protobuf::EnumDescriptor* VolumeSpec_VolumeHealth_descriptor();
inline const ::std::string& VolumeSpec_VolumeHealth_Name(VolumeSpec_VolumeHealth value) {
  return ::google::protobuf::internal::NameOfEnum(
    VolumeSpec_VolumeHealth_descriptor(), value);
}
inline bool VolumeSpec_VolumeHealth_Parse(
    const ::std::string& name, VolumeSpec_VolumeHealth* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VolumeSpec_VolumeHealth>(
    VolumeSpec_VolumeHealth_descriptor(), name, value);
}
// ===================================================================

class NodeConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataplane.NodeConfiguration) */ {
 public:
  NodeConfiguration();
  virtual ~NodeConfiguration();

  NodeConfiguration(const NodeConfiguration& from);

  inline NodeConfiguration& operator=(const NodeConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeConfiguration& default_instance();

  static inline const NodeConfiguration* internal_default_instance() {
    return reinterpret_cast<const NodeConfiguration*>(
               &_NodeConfiguration_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(NodeConfiguration* other);

  // implements Message ----------------------------------------------

  inline NodeConfiguration* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeConfiguration* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeConfiguration& from);
  void MergeFrom(const NodeConfiguration& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 host = 4;
  void clear_host();
  static const int kHostFieldNumber = 4;
  ::google::protobuf::uint32 host() const;
  void set_host(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dataplane.NodeConfiguration)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 host_;
  mutable int _cached_size_;
  friend struct protobuf_dataplane_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class ObjectMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataplane.ObjectMeta) */ {
 public:
  ObjectMeta();
  virtual ~ObjectMeta();

  ObjectMeta(const ObjectMeta& from);

  inline ObjectMeta& operator=(const ObjectMeta& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObjectMeta& default_instance();

  static inline const ObjectMeta* internal_default_instance() {
    return reinterpret_cast<const ObjectMeta*>(
               &_ObjectMeta_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ObjectMeta* other);

  // implements Message ----------------------------------------------

  inline ObjectMeta* New() const PROTOBUF_FINAL { return New(NULL); }

  ObjectMeta* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ObjectMeta& from);
  void MergeFrom(const ObjectMeta& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ObjectMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 7;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // map<string, string> annotations = 8;
  int annotations_size() const;
  void clear_annotations();
  static const int kAnnotationsFieldNumber = 8;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      annotations() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_annotations();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string uid = 2;
  void clear_uid();
  static const int kUidFieldNumber = 2;
  const ::std::string& uid() const;
  void set_uid(const ::std::string& value);
  #if LANG_CXX11
  void set_uid(::std::string&& value);
  #endif
  void set_uid(const char* value);
  void set_uid(const char* value, size_t size);
  ::std::string* mutable_uid();
  ::std::string* release_uid();
  void set_allocated_uid(::std::string* uid);

  // string resourceVersion = 3;
  void clear_resourceversion();
  static const int kResourceVersionFieldNumber = 3;
  const ::std::string& resourceversion() const;
  void set_resourceversion(const ::std::string& value);
  #if LANG_CXX11
  void set_resourceversion(::std::string&& value);
  #endif
  void set_resourceversion(const char* value);
  void set_resourceversion(const char* value, size_t size);
  ::std::string* mutable_resourceversion();
  ::std::string* release_resourceversion();
  void set_allocated_resourceversion(::std::string* resourceversion);

  // .google.protobuf.Timestamp creationTimestamp = 4;
  bool has_creationtimestamp() const;
  void clear_creationtimestamp();
  static const int kCreationTimestampFieldNumber = 4;
  const ::google::protobuf::Timestamp& creationtimestamp() const;
  ::google::protobuf::Timestamp* mutable_creationtimestamp();
  ::google::protobuf::Timestamp* release_creationtimestamp();
  void set_allocated_creationtimestamp(::google::protobuf::Timestamp* creationtimestamp);

  // .google.protobuf.Timestamp deletionTimestamp = 5;
  bool has_deletiontimestamp() const;
  void clear_deletiontimestamp();
  static const int kDeletionTimestampFieldNumber = 5;
  const ::google::protobuf::Timestamp& deletiontimestamp() const;
  ::google::protobuf::Timestamp* mutable_deletiontimestamp();
  ::google::protobuf::Timestamp* release_deletiontimestamp();
  void set_allocated_deletiontimestamp(::google::protobuf::Timestamp* deletiontimestamp);

  // int64 deletionGracePeriodSeconds = 6;
  void clear_deletiongraceperiodseconds();
  static const int kDeletionGracePeriodSecondsFieldNumber = 6;
  ::google::protobuf::int64 deletiongraceperiodseconds() const;
  void set_deletiongraceperiodseconds(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:dataplane.ObjectMeta)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class ObjectMeta_LabelsEntry : public ::google::protobuf::internal::MapEntry<ObjectMeta_LabelsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<ObjectMeta_LabelsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    ObjectMeta_LabelsEntry();
    ObjectMeta_LabelsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const ObjectMeta_LabelsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_ObjectMeta_LabelsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      ObjectMeta_LabelsEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  private:
  public:
  class ObjectMeta_AnnotationsEntry : public ::google::protobuf::internal::MapEntry<ObjectMeta_AnnotationsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<ObjectMeta_AnnotationsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    ObjectMeta_AnnotationsEntry();
    ObjectMeta_AnnotationsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const ObjectMeta_AnnotationsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_ObjectMeta_AnnotationsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  ::google::protobuf::internal::MapField<
      ObjectMeta_AnnotationsEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > annotations_;
  private:
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr uid_;
  ::google::protobuf::internal::ArenaStringPtr resourceversion_;
  ::google::protobuf::Timestamp* creationtimestamp_;
  ::google::protobuf::Timestamp* deletiontimestamp_;
  ::google::protobuf::int64 deletiongraceperiodseconds_;
  mutable int _cached_size_;
  friend struct protobuf_dataplane_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Host : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataplane.Host) */ {
 public:
  Host();
  virtual ~Host();

  Host(const Host& from);

  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Host& default_instance();

  static inline const Host* internal_default_instance() {
    return reinterpret_cast<const Host*>(
               &_Host_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Host* other);

  // implements Message ----------------------------------------------

  inline Host* New() const PROTOBUF_FINAL { return New(NULL); }

  Host* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Host& from);
  void MergeFrom(const Host& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Host* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string address = 4;
  void clear_address();
  static const int kAddressFieldNumber = 4;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // .dataplane.ObjectMeta metadata = 1;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::dataplane::ObjectMeta& metadata() const;
  ::dataplane::ObjectMeta* mutable_metadata();
  ::dataplane::ObjectMeta* release_metadata();
  void set_allocated_metadata(::dataplane::ObjectMeta* metadata);

  // uint32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // bool active = 3;
  void clear_active();
  static const int kActiveFieldNumber = 3;
  bool active() const;
  void set_active(bool value);

  // int32 port = 5;
  void clear_port();
  static const int kPortFieldNumber = 5;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dataplane.Host)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::dataplane::ObjectMeta* metadata_;
  ::google::protobuf::uint32 id_;
  bool active_;
  ::google::protobuf::int32 port_;
  mutable int _cached_size_;
  friend struct protobuf_dataplane_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Volume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataplane.Volume) */ {
 public:
  Volume();
  virtual ~Volume();

  Volume(const Volume& from);

  inline Volume& operator=(const Volume& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Volume& default_instance();

  static inline const Volume* internal_default_instance() {
    return reinterpret_cast<const Volume*>(
               &_Volume_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Volume* other);

  // implements Message ----------------------------------------------

  inline Volume* New() const PROTOBUF_FINAL { return New(NULL); }

  Volume* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Volume& from);
  void MergeFrom(const Volume& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Volume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dataplane.VolumeSpec replicas = 5;
  int replicas_size() const;
  void clear_replicas();
  static const int kReplicasFieldNumber = 5;
  const ::dataplane::VolumeSpec& replicas(int index) const;
  ::dataplane::VolumeSpec* mutable_replicas(int index);
  ::dataplane::VolumeSpec* add_replicas();
  ::google::protobuf::RepeatedPtrField< ::dataplane::VolumeSpec >*
      mutable_replicas();
  const ::google::protobuf::RepeatedPtrField< ::dataplane::VolumeSpec >&
      replicas() const;

  // .dataplane.ObjectMeta metadata = 1;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::dataplane::ObjectMeta& metadata() const;
  ::dataplane::ObjectMeta* mutable_metadata();
  ::dataplane::ObjectMeta* release_metadata();
  void set_allocated_metadata(::dataplane::ObjectMeta* metadata);

  // .dataplane.PresentationSpec presentation = 3;
  bool has_presentation() const;
  void clear_presentation();
  static const int kPresentationFieldNumber = 3;
  const ::dataplane::PresentationSpec& presentation() const;
  ::dataplane::PresentationSpec* mutable_presentation();
  ::dataplane::PresentationSpec* release_presentation();
  void set_allocated_presentation(::dataplane::PresentationSpec* presentation);

  // .dataplane.VolumeSpec master = 4;
  bool has_master() const;
  void clear_master();
  static const int kMasterFieldNumber = 4;
  const ::dataplane::VolumeSpec& master() const;
  ::dataplane::VolumeSpec* mutable_master();
  ::dataplane::VolumeSpec* release_master();
  void set_allocated_master(::dataplane::VolumeSpec* master);

  // uint64 size = 2;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:dataplane.Volume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dataplane::VolumeSpec > replicas_;
  ::dataplane::ObjectMeta* metadata_;
  ::dataplane::PresentationSpec* presentation_;
  ::dataplane::VolumeSpec* master_;
  ::google::protobuf::uint64 size_;
  mutable int _cached_size_;
  friend struct protobuf_dataplane_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PresentationSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataplane.PresentationSpec) */ {
 public:
  PresentationSpec();
  virtual ~PresentationSpec();

  PresentationSpec(const PresentationSpec& from);

  inline PresentationSpec& operator=(const PresentationSpec& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PresentationSpec& default_instance();

  static inline const PresentationSpec* internal_default_instance() {
    return reinterpret_cast<const PresentationSpec*>(
               &_PresentationSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PresentationSpec* other);

  // implements Message ----------------------------------------------

  inline PresentationSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  PresentationSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PresentationSpec& from);
  void MergeFrom(const PresentationSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PresentationSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PresentationSpec_VolumeReadiness VolumeReadiness;
  static const VolumeReadiness READINESS_UNKNOWN =
    PresentationSpec_VolumeReadiness_READINESS_UNKNOWN;
  static const VolumeReadiness READINESS_PENDING =
    PresentationSpec_VolumeReadiness_READINESS_PENDING;
  static const VolumeReadiness READINESS_READY =
    PresentationSpec_VolumeReadiness_READINESS_READY;
  static inline bool VolumeReadiness_IsValid(int value) {
    return PresentationSpec_VolumeReadiness_IsValid(value);
  }
  static const VolumeReadiness VolumeReadiness_MIN =
    PresentationSpec_VolumeReadiness_VolumeReadiness_MIN;
  static const VolumeReadiness VolumeReadiness_MAX =
    PresentationSpec_VolumeReadiness_VolumeReadiness_MAX;
  static const int VolumeReadiness_ARRAYSIZE =
    PresentationSpec_VolumeReadiness_VolumeReadiness_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VolumeReadiness_descriptor() {
    return PresentationSpec_VolumeReadiness_descriptor();
  }
  static inline const ::std::string& VolumeReadiness_Name(VolumeReadiness value) {
    return PresentationSpec_VolumeReadiness_Name(value);
  }
  static inline bool VolumeReadiness_Parse(const ::std::string& name,
      VolumeReadiness* value) {
    return PresentationSpec_VolumeReadiness_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // uint32 deviceNumber = 2;
  void clear_devicenumber();
  static const int kDeviceNumberFieldNumber = 2;
  ::google::protobuf::uint32 devicenumber() const;
  void set_devicenumber(::google::protobuf::uint32 value);

  // .dataplane.PresentationSpec.VolumeReadiness readiness = 3;
  void clear_readiness();
  static const int kReadinessFieldNumber = 3;
  ::dataplane::PresentationSpec_VolumeReadiness readiness() const;
  void set_readiness(::dataplane::PresentationSpec_VolumeReadiness value);

  // int32 mounts = 4;
  void clear_mounts();
  static const int kMountsFieldNumber = 4;
  ::google::protobuf::int32 mounts() const;
  void set_mounts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dataplane.PresentationSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 devicenumber_;
  int readiness_;
  ::google::protobuf::int32 mounts_;
  mutable int _cached_size_;
  friend struct protobuf_dataplane_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VolumeSpec : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataplane.VolumeSpec) */ {
 public:
  VolumeSpec();
  virtual ~VolumeSpec();

  VolumeSpec(const VolumeSpec& from);

  inline VolumeSpec& operator=(const VolumeSpec& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VolumeSpec& default_instance();

  static inline const VolumeSpec* internal_default_instance() {
    return reinterpret_cast<const VolumeSpec*>(
               &_VolumeSpec_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(VolumeSpec* other);

  // implements Message ----------------------------------------------

  inline VolumeSpec* New() const PROTOBUF_FINAL { return New(NULL); }

  VolumeSpec* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const VolumeSpec& from);
  void MergeFrom(const VolumeSpec& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(VolumeSpec* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VolumeSpec_VolumeStatus VolumeStatus;
  static const VolumeStatus STATUS_UNKNOWN =
    VolumeSpec_VolumeStatus_STATUS_UNKNOWN;
  static const VolumeStatus STATUS_PENDING =
    VolumeSpec_VolumeStatus_STATUS_PENDING;
  static const VolumeStatus STATUS_ACTIVE =
    VolumeSpec_VolumeStatus_STATUS_ACTIVE;
  static const VolumeStatus STATUS_UNAVAILABLE =
    VolumeSpec_VolumeStatus_STATUS_UNAVAILABLE;
  static const VolumeStatus STATUS_FAILED =
    VolumeSpec_VolumeStatus_STATUS_FAILED;
  static const VolumeStatus STATUS_DELETING =
    VolumeSpec_VolumeStatus_STATUS_DELETING;
  static inline bool VolumeStatus_IsValid(int value) {
    return VolumeSpec_VolumeStatus_IsValid(value);
  }
  static const VolumeStatus VolumeStatus_MIN =
    VolumeSpec_VolumeStatus_VolumeStatus_MIN;
  static const VolumeStatus VolumeStatus_MAX =
    VolumeSpec_VolumeStatus_VolumeStatus_MAX;
  static const int VolumeStatus_ARRAYSIZE =
    VolumeSpec_VolumeStatus_VolumeStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VolumeStatus_descriptor() {
    return VolumeSpec_VolumeStatus_descriptor();
  }
  static inline const ::std::string& VolumeStatus_Name(VolumeStatus value) {
    return VolumeSpec_VolumeStatus_Name(value);
  }
  static inline bool VolumeStatus_Parse(const ::std::string& name,
      VolumeStatus* value) {
    return VolumeSpec_VolumeStatus_Parse(name, value);
  }

  typedef VolumeSpec_VolumeHealth VolumeHealth;
  static const VolumeHealth HEALTH_UNKNOWN =
    VolumeSpec_VolumeHealth_HEALTH_UNKNOWN;
  static const VolumeHealth HEALTH_SYNCHRONISING =
    VolumeSpec_VolumeHealth_HEALTH_SYNCHRONISING;
  static const VolumeHealth HEALTH_HEALTHY =
    VolumeSpec_VolumeHealth_HEALTH_HEALTHY;
  static const VolumeHealth HEALTH_SUSPECT =
    VolumeSpec_VolumeHealth_HEALTH_SUSPECT;
  static const VolumeHealth HEALTH_DEGRADED =
    VolumeSpec_VolumeHealth_HEALTH_DEGRADED;
  static const VolumeHealth HEALTH_FAILED =
    VolumeSpec_VolumeHealth_HEALTH_FAILED;
  static inline bool VolumeHealth_IsValid(int value) {
    return VolumeSpec_VolumeHealth_IsValid(value);
  }
  static const VolumeHealth VolumeHealth_MIN =
    VolumeSpec_VolumeHealth_VolumeHealth_MIN;
  static const VolumeHealth VolumeHealth_MAX =
    VolumeSpec_VolumeHealth_VolumeHealth_MAX;
  static const int VolumeHealth_ARRAYSIZE =
    VolumeSpec_VolumeHealth_VolumeHealth_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VolumeHealth_descriptor() {
    return VolumeSpec_VolumeHealth_descriptor();
  }
  static inline const ::std::string& VolumeHealth_Name(VolumeHealth value) {
    return VolumeSpec_VolumeHealth_Name(value);
  }
  static inline bool VolumeHealth_Parse(const ::std::string& name,
      VolumeHealth* value) {
    return VolumeSpec_VolumeHealth_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // .dataplane.VolumeSpec.VolumeStatus status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::dataplane::VolumeSpec_VolumeStatus status() const;
  void set_status(::dataplane::VolumeSpec_VolumeStatus value);

  // .dataplane.VolumeSpec.VolumeHealth health = 3;
  void clear_health();
  static const int kHealthFieldNumber = 3;
  ::dataplane::VolumeSpec_VolumeHealth health() const;
  void set_health(::dataplane::VolumeSpec_VolumeHealth value);

  // uint32 host = 4;
  void clear_host();
  static const int kHostFieldNumber = 4;
  ::google::protobuf::uint32 host() const;
  void set_host(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dataplane.VolumeSpec)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 id_;
  int status_;
  int health_;
  ::google::protobuf::uint32 host_;
  mutable int _cached_size_;
  friend struct protobuf_dataplane_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeConfiguration

// uint32 host = 4;
inline void NodeConfiguration::clear_host() {
  host_ = 0u;
}
inline ::google::protobuf::uint32 NodeConfiguration::host() const {
  // @@protoc_insertion_point(field_get:dataplane.NodeConfiguration.host)
  return host_;
}
inline void NodeConfiguration::set_host(::google::protobuf::uint32 value) {
  
  host_ = value;
  // @@protoc_insertion_point(field_set:dataplane.NodeConfiguration.host)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ObjectMeta

// string name = 1;
inline void ObjectMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectMeta::name() const {
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.name)
  return name_.GetNoArena();
}
inline void ObjectMeta::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataplane.ObjectMeta.name)
}
#if LANG_CXX11
inline void ObjectMeta::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataplane.ObjectMeta.name)
}
#endif
inline void ObjectMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataplane.ObjectMeta.name)
}
inline void ObjectMeta::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataplane.ObjectMeta.name)
}
inline ::std::string* ObjectMeta::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dataplane.ObjectMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectMeta::release_name() {
  // @@protoc_insertion_point(field_release:dataplane.ObjectMeta.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dataplane.ObjectMeta.name)
}

// string uid = 2;
inline void ObjectMeta::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectMeta::uid() const {
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.uid)
  return uid_.GetNoArena();
}
inline void ObjectMeta::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataplane.ObjectMeta.uid)
}
#if LANG_CXX11
inline void ObjectMeta::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataplane.ObjectMeta.uid)
}
#endif
inline void ObjectMeta::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataplane.ObjectMeta.uid)
}
inline void ObjectMeta::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataplane.ObjectMeta.uid)
}
inline ::std::string* ObjectMeta::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:dataplane.ObjectMeta.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectMeta::release_uid() {
  // @@protoc_insertion_point(field_release:dataplane.ObjectMeta.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectMeta::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:dataplane.ObjectMeta.uid)
}

// string resourceVersion = 3;
inline void ObjectMeta::clear_resourceversion() {
  resourceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ObjectMeta::resourceversion() const {
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.resourceVersion)
  return resourceversion_.GetNoArena();
}
inline void ObjectMeta::set_resourceversion(const ::std::string& value) {
  
  resourceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataplane.ObjectMeta.resourceVersion)
}
#if LANG_CXX11
inline void ObjectMeta::set_resourceversion(::std::string&& value) {
  
  resourceversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataplane.ObjectMeta.resourceVersion)
}
#endif
inline void ObjectMeta::set_resourceversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resourceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataplane.ObjectMeta.resourceVersion)
}
inline void ObjectMeta::set_resourceversion(const char* value, size_t size) {
  
  resourceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataplane.ObjectMeta.resourceVersion)
}
inline ::std::string* ObjectMeta::mutable_resourceversion() {
  
  // @@protoc_insertion_point(field_mutable:dataplane.ObjectMeta.resourceVersion)
  return resourceversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ObjectMeta::release_resourceversion() {
  // @@protoc_insertion_point(field_release:dataplane.ObjectMeta.resourceVersion)
  
  return resourceversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ObjectMeta::set_allocated_resourceversion(::std::string* resourceversion) {
  if (resourceversion != NULL) {
    
  } else {
    
  }
  resourceversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourceversion);
  // @@protoc_insertion_point(field_set_allocated:dataplane.ObjectMeta.resourceVersion)
}

// .google.protobuf.Timestamp creationTimestamp = 4;
inline bool ObjectMeta::has_creationtimestamp() const {
  return this != internal_default_instance() && creationtimestamp_ != NULL;
}
inline void ObjectMeta::clear_creationtimestamp() {
  if (GetArenaNoVirtual() == NULL && creationtimestamp_ != NULL) delete creationtimestamp_;
  creationtimestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& ObjectMeta::creationtimestamp() const {
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.creationTimestamp)
  return creationtimestamp_ != NULL ? *creationtimestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* ObjectMeta::mutable_creationtimestamp() {
  
  if (creationtimestamp_ == NULL) {
    creationtimestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.ObjectMeta.creationTimestamp)
  return creationtimestamp_;
}
inline ::google::protobuf::Timestamp* ObjectMeta::release_creationtimestamp() {
  // @@protoc_insertion_point(field_release:dataplane.ObjectMeta.creationTimestamp)
  
  ::google::protobuf::Timestamp* temp = creationtimestamp_;
  creationtimestamp_ = NULL;
  return temp;
}
inline void ObjectMeta::set_allocated_creationtimestamp(::google::protobuf::Timestamp* creationtimestamp) {
  delete creationtimestamp_;
  if (creationtimestamp != NULL && creationtimestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_creationtimestamp = new ::google::protobuf::Timestamp;
    new_creationtimestamp->CopyFrom(*creationtimestamp);
    creationtimestamp = new_creationtimestamp;
  }
  creationtimestamp_ = creationtimestamp;
  if (creationtimestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.ObjectMeta.creationTimestamp)
}

// .google.protobuf.Timestamp deletionTimestamp = 5;
inline bool ObjectMeta::has_deletiontimestamp() const {
  return this != internal_default_instance() && deletiontimestamp_ != NULL;
}
inline void ObjectMeta::clear_deletiontimestamp() {
  if (GetArenaNoVirtual() == NULL && deletiontimestamp_ != NULL) delete deletiontimestamp_;
  deletiontimestamp_ = NULL;
}
inline const ::google::protobuf::Timestamp& ObjectMeta::deletiontimestamp() const {
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.deletionTimestamp)
  return deletiontimestamp_ != NULL ? *deletiontimestamp_
                         : *::google::protobuf::Timestamp::internal_default_instance();
}
inline ::google::protobuf::Timestamp* ObjectMeta::mutable_deletiontimestamp() {
  
  if (deletiontimestamp_ == NULL) {
    deletiontimestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.ObjectMeta.deletionTimestamp)
  return deletiontimestamp_;
}
inline ::google::protobuf::Timestamp* ObjectMeta::release_deletiontimestamp() {
  // @@protoc_insertion_point(field_release:dataplane.ObjectMeta.deletionTimestamp)
  
  ::google::protobuf::Timestamp* temp = deletiontimestamp_;
  deletiontimestamp_ = NULL;
  return temp;
}
inline void ObjectMeta::set_allocated_deletiontimestamp(::google::protobuf::Timestamp* deletiontimestamp) {
  delete deletiontimestamp_;
  if (deletiontimestamp != NULL && deletiontimestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_deletiontimestamp = new ::google::protobuf::Timestamp;
    new_deletiontimestamp->CopyFrom(*deletiontimestamp);
    deletiontimestamp = new_deletiontimestamp;
  }
  deletiontimestamp_ = deletiontimestamp;
  if (deletiontimestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.ObjectMeta.deletionTimestamp)
}

// int64 deletionGracePeriodSeconds = 6;
inline void ObjectMeta::clear_deletiongraceperiodseconds() {
  deletiongraceperiodseconds_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ObjectMeta::deletiongraceperiodseconds() const {
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.deletionGracePeriodSeconds)
  return deletiongraceperiodseconds_;
}
inline void ObjectMeta::set_deletiongraceperiodseconds(::google::protobuf::int64 value) {
  
  deletiongraceperiodseconds_ = value;
  // @@protoc_insertion_point(field_set:dataplane.ObjectMeta.deletionGracePeriodSeconds)
}

// map<string, string> labels = 7;
inline int ObjectMeta::labels_size() const {
  return labels_.size();
}
inline void ObjectMeta::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ObjectMeta::labels() const {
  // @@protoc_insertion_point(field_map:dataplane.ObjectMeta.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ObjectMeta::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:dataplane.ObjectMeta.labels)
  return labels_.MutableMap();
}

// map<string, string> annotations = 8;
inline int ObjectMeta::annotations_size() const {
  return annotations_.size();
}
inline void ObjectMeta::clear_annotations() {
  annotations_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ObjectMeta::annotations() const {
  // @@protoc_insertion_point(field_map:dataplane.ObjectMeta.annotations)
  return annotations_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ObjectMeta::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:dataplane.ObjectMeta.annotations)
  return annotations_.MutableMap();
}

// -------------------------------------------------------------------

// Host

// .dataplane.ObjectMeta metadata = 1;
inline bool Host::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline void Host::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::dataplane::ObjectMeta& Host::metadata() const {
  // @@protoc_insertion_point(field_get:dataplane.Host.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::dataplane::ObjectMeta::internal_default_instance();
}
inline ::dataplane::ObjectMeta* Host::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::dataplane::ObjectMeta;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.Host.metadata)
  return metadata_;
}
inline ::dataplane::ObjectMeta* Host::release_metadata() {
  // @@protoc_insertion_point(field_release:dataplane.Host.metadata)
  
  ::dataplane::ObjectMeta* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void Host::set_allocated_metadata(::dataplane::ObjectMeta* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.Host.metadata)
}

// uint32 id = 2;
inline void Host::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 Host::id() const {
  // @@protoc_insertion_point(field_get:dataplane.Host.id)
  return id_;
}
inline void Host::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dataplane.Host.id)
}

// bool active = 3;
inline void Host::clear_active() {
  active_ = false;
}
inline bool Host::active() const {
  // @@protoc_insertion_point(field_get:dataplane.Host.active)
  return active_;
}
inline void Host::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:dataplane.Host.active)
}

// string address = 4;
inline void Host::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Host::address() const {
  // @@protoc_insertion_point(field_get:dataplane.Host.address)
  return address_.GetNoArena();
}
inline void Host::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataplane.Host.address)
}
#if LANG_CXX11
inline void Host::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataplane.Host.address)
}
#endif
inline void Host::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataplane.Host.address)
}
inline void Host::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataplane.Host.address)
}
inline ::std::string* Host::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:dataplane.Host.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Host::release_address() {
  // @@protoc_insertion_point(field_release:dataplane.Host.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Host::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:dataplane.Host.address)
}

// int32 port = 5;
inline void Host::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 Host::port() const {
  // @@protoc_insertion_point(field_get:dataplane.Host.port)
  return port_;
}
inline void Host::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:dataplane.Host.port)
}

// -------------------------------------------------------------------

// Volume

// .dataplane.ObjectMeta metadata = 1;
inline bool Volume::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
inline void Volume::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
inline const ::dataplane::ObjectMeta& Volume::metadata() const {
  // @@protoc_insertion_point(field_get:dataplane.Volume.metadata)
  return metadata_ != NULL ? *metadata_
                         : *::dataplane::ObjectMeta::internal_default_instance();
}
inline ::dataplane::ObjectMeta* Volume::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::dataplane::ObjectMeta;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.Volume.metadata)
  return metadata_;
}
inline ::dataplane::ObjectMeta* Volume::release_metadata() {
  // @@protoc_insertion_point(field_release:dataplane.Volume.metadata)
  
  ::dataplane::ObjectMeta* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
inline void Volume::set_allocated_metadata(::dataplane::ObjectMeta* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.Volume.metadata)
}

// uint64 size = 2;
inline void Volume::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Volume::size() const {
  // @@protoc_insertion_point(field_get:dataplane.Volume.size)
  return size_;
}
inline void Volume::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dataplane.Volume.size)
}

// .dataplane.PresentationSpec presentation = 3;
inline bool Volume::has_presentation() const {
  return this != internal_default_instance() && presentation_ != NULL;
}
inline void Volume::clear_presentation() {
  if (GetArenaNoVirtual() == NULL && presentation_ != NULL) delete presentation_;
  presentation_ = NULL;
}
inline const ::dataplane::PresentationSpec& Volume::presentation() const {
  // @@protoc_insertion_point(field_get:dataplane.Volume.presentation)
  return presentation_ != NULL ? *presentation_
                         : *::dataplane::PresentationSpec::internal_default_instance();
}
inline ::dataplane::PresentationSpec* Volume::mutable_presentation() {
  
  if (presentation_ == NULL) {
    presentation_ = new ::dataplane::PresentationSpec;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.Volume.presentation)
  return presentation_;
}
inline ::dataplane::PresentationSpec* Volume::release_presentation() {
  // @@protoc_insertion_point(field_release:dataplane.Volume.presentation)
  
  ::dataplane::PresentationSpec* temp = presentation_;
  presentation_ = NULL;
  return temp;
}
inline void Volume::set_allocated_presentation(::dataplane::PresentationSpec* presentation) {
  delete presentation_;
  presentation_ = presentation;
  if (presentation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.Volume.presentation)
}

// .dataplane.VolumeSpec master = 4;
inline bool Volume::has_master() const {
  return this != internal_default_instance() && master_ != NULL;
}
inline void Volume::clear_master() {
  if (GetArenaNoVirtual() == NULL && master_ != NULL) delete master_;
  master_ = NULL;
}
inline const ::dataplane::VolumeSpec& Volume::master() const {
  // @@protoc_insertion_point(field_get:dataplane.Volume.master)
  return master_ != NULL ? *master_
                         : *::dataplane::VolumeSpec::internal_default_instance();
}
inline ::dataplane::VolumeSpec* Volume::mutable_master() {
  
  if (master_ == NULL) {
    master_ = new ::dataplane::VolumeSpec;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.Volume.master)
  return master_;
}
inline ::dataplane::VolumeSpec* Volume::release_master() {
  // @@protoc_insertion_point(field_release:dataplane.Volume.master)
  
  ::dataplane::VolumeSpec* temp = master_;
  master_ = NULL;
  return temp;
}
inline void Volume::set_allocated_master(::dataplane::VolumeSpec* master) {
  delete master_;
  master_ = master;
  if (master) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.Volume.master)
}

// repeated .dataplane.VolumeSpec replicas = 5;
inline int Volume::replicas_size() const {
  return replicas_.size();
}
inline void Volume::clear_replicas() {
  replicas_.Clear();
}
inline const ::dataplane::VolumeSpec& Volume::replicas(int index) const {
  // @@protoc_insertion_point(field_get:dataplane.Volume.replicas)
  return replicas_.Get(index);
}
inline ::dataplane::VolumeSpec* Volume::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:dataplane.Volume.replicas)
  return replicas_.Mutable(index);
}
inline ::dataplane::VolumeSpec* Volume::add_replicas() {
  // @@protoc_insertion_point(field_add:dataplane.Volume.replicas)
  return replicas_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::dataplane::VolumeSpec >*
Volume::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:dataplane.Volume.replicas)
  return &replicas_;
}
inline const ::google::protobuf::RepeatedPtrField< ::dataplane::VolumeSpec >&
Volume::replicas() const {
  // @@protoc_insertion_point(field_list:dataplane.Volume.replicas)
  return replicas_;
}

// -------------------------------------------------------------------

// PresentationSpec

// uint32 id = 1;
inline void PresentationSpec::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 PresentationSpec::id() const {
  // @@protoc_insertion_point(field_get:dataplane.PresentationSpec.id)
  return id_;
}
inline void PresentationSpec::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dataplane.PresentationSpec.id)
}

// uint32 deviceNumber = 2;
inline void PresentationSpec::clear_devicenumber() {
  devicenumber_ = 0u;
}
inline ::google::protobuf::uint32 PresentationSpec::devicenumber() const {
  // @@protoc_insertion_point(field_get:dataplane.PresentationSpec.deviceNumber)
  return devicenumber_;
}
inline void PresentationSpec::set_devicenumber(::google::protobuf::uint32 value) {
  
  devicenumber_ = value;
  // @@protoc_insertion_point(field_set:dataplane.PresentationSpec.deviceNumber)
}

// .dataplane.PresentationSpec.VolumeReadiness readiness = 3;
inline void PresentationSpec::clear_readiness() {
  readiness_ = 0;
}
inline ::dataplane::PresentationSpec_VolumeReadiness PresentationSpec::readiness() const {
  // @@protoc_insertion_point(field_get:dataplane.PresentationSpec.readiness)
  return static_cast< ::dataplane::PresentationSpec_VolumeReadiness >(readiness_);
}
inline void PresentationSpec::set_readiness(::dataplane::PresentationSpec_VolumeReadiness value) {
  
  readiness_ = value;
  // @@protoc_insertion_point(field_set:dataplane.PresentationSpec.readiness)
}

// int32 mounts = 4;
inline void PresentationSpec::clear_mounts() {
  mounts_ = 0;
}
inline ::google::protobuf::int32 PresentationSpec::mounts() const {
  // @@protoc_insertion_point(field_get:dataplane.PresentationSpec.mounts)
  return mounts_;
}
inline void PresentationSpec::set_mounts(::google::protobuf::int32 value) {
  
  mounts_ = value;
  // @@protoc_insertion_point(field_set:dataplane.PresentationSpec.mounts)
}

// -------------------------------------------------------------------

// VolumeSpec

// uint32 id = 1;
inline void VolumeSpec::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 VolumeSpec::id() const {
  // @@protoc_insertion_point(field_get:dataplane.VolumeSpec.id)
  return id_;
}
inline void VolumeSpec::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dataplane.VolumeSpec.id)
}

// .dataplane.VolumeSpec.VolumeStatus status = 2;
inline void VolumeSpec::clear_status() {
  status_ = 0;
}
inline ::dataplane::VolumeSpec_VolumeStatus VolumeSpec::status() const {
  // @@protoc_insertion_point(field_get:dataplane.VolumeSpec.status)
  return static_cast< ::dataplane::VolumeSpec_VolumeStatus >(status_);
}
inline void VolumeSpec::set_status(::dataplane::VolumeSpec_VolumeStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dataplane.VolumeSpec.status)
}

// .dataplane.VolumeSpec.VolumeHealth health = 3;
inline void VolumeSpec::clear_health() {
  health_ = 0;
}
inline ::dataplane::VolumeSpec_VolumeHealth VolumeSpec::health() const {
  // @@protoc_insertion_point(field_get:dataplane.VolumeSpec.health)
  return static_cast< ::dataplane::VolumeSpec_VolumeHealth >(health_);
}
inline void VolumeSpec::set_health(::dataplane::VolumeSpec_VolumeHealth value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:dataplane.VolumeSpec.health)
}

// uint32 host = 4;
inline void VolumeSpec::clear_host() {
  host_ = 0u;
}
inline ::google::protobuf::uint32 VolumeSpec::host() const {
  // @@protoc_insertion_point(field_get:dataplane.VolumeSpec.host)
  return host_;
}
inline void VolumeSpec::set_host(::google::protobuf::uint32 value) {
  
  host_ = value;
  // @@protoc_insertion_point(field_set:dataplane.VolumeSpec.host)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dataplane

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dataplane::PresentationSpec_VolumeReadiness> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dataplane::PresentationSpec_VolumeReadiness>() {
  return ::dataplane::PresentationSpec_VolumeReadiness_descriptor();
}
template <> struct is_proto_enum< ::dataplane::VolumeSpec_VolumeStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dataplane::VolumeSpec_VolumeStatus>() {
  return ::dataplane::VolumeSpec_VolumeStatus_descriptor();
}
template <> struct is_proto_enum< ::dataplane::VolumeSpec_VolumeHealth> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dataplane::VolumeSpec_VolumeHealth>() {
  return ::dataplane::VolumeSpec_VolumeHealth_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dataplane_2eproto__INCLUDED
