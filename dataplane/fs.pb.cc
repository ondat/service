// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace storageos_rpc {
class FsVolumeListQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsVolumeListQuery>
     _instance;
} _FsVolumeListQuery_default_instance_;
class FsVolumeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FsVolume>
     _instance;
} _FsVolume_default_instance_;

namespace protobuf_fs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolumeListQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, volume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, node_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, device_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, linked_volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, target_volume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FsVolume, volume_size_bytes_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(FsVolumeListQuery)},
  { 5, -1, sizeof(FsVolume)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsVolumeListQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FsVolume_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "fs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::storageos_rpc::protobuf_common_2eproto::InitDefaults();
  _FsVolumeListQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsVolumeListQuery_default_instance_);_FsVolume_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FsVolume_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\010fs.proto\022\rstorageos_rpc\032\014common.proto\""
      "\023\n\021FsVolumeListQuery\"\374\001\n\010FsVolume\022\021\n\tvol"
      "ume_id\030\001 \001(\r\022;\n\tnode_type\030\002 \001(\0162(.storag"
      "eos_rpc.FsVolume.VolumeDeviceType\022\025\n\rdev"
      "ice_number\030\003 \001(\r\022\020\n\010filename\030\004 \001(\t\022\025\n\rli"
      "nked_volume\030\005 \001(\010\022\030\n\020target_volume_id\030\006 "
      "\001(\r\022\031\n\021volume_size_bytes\030\007 \001(\004\"+\n\020Volume"
      "DeviceType\022\010\n\004FILE\020\000\022\r\n\tNBD_BLOCK\020\0012\351\001\n\010"
      "FsConfig\022F\n\017VolumeConfigure\022\027.storageos_"
      "rpc.FsVolume\032\030.storageos_rpc.RpcResult\"\000"
      "\022H\n\021VolumeUnconfigure\022\027.storageos_rpc.Fs"
      "Volume\032\030.storageos_rpc.RpcResult\"\000\022K\n\nVo"
      "lumeList\022 .storageos_rpc.FsVolumeListQue"
      "ry\032\027.storageos_rpc.FsVolume\"\0000\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fs.proto", &protobuf_RegisterTypes);
  ::storageos_rpc::protobuf_common_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_fs_2eproto

const ::google::protobuf::EnumDescriptor* FsVolume_VolumeDeviceType_descriptor() {
  protobuf_fs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fs_2eproto::file_level_enum_descriptors[0];
}
bool FsVolume_VolumeDeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FsVolume_VolumeDeviceType FsVolume::FILE;
const FsVolume_VolumeDeviceType FsVolume::NBD_BLOCK;
const FsVolume_VolumeDeviceType FsVolume::VolumeDeviceType_MIN;
const FsVolume_VolumeDeviceType FsVolume::VolumeDeviceType_MAX;
const int FsVolume::VolumeDeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsVolumeListQuery::FsVolumeListQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.FsVolumeListQuery)
}
FsVolumeListQuery::FsVolumeListQuery(const FsVolumeListQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.FsVolumeListQuery)
}

void FsVolumeListQuery::SharedCtor() {
  _cached_size_ = 0;
}

FsVolumeListQuery::~FsVolumeListQuery() {
  // @@protoc_insertion_point(destructor:storageos_rpc.FsVolumeListQuery)
  SharedDtor();
}

void FsVolumeListQuery::SharedDtor() {
}

void FsVolumeListQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsVolumeListQuery::descriptor() {
  protobuf_fs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsVolumeListQuery& FsVolumeListQuery::default_instance() {
  protobuf_fs_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsVolumeListQuery* FsVolumeListQuery::New(::google::protobuf::Arena* arena) const {
  FsVolumeListQuery* n = new FsVolumeListQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsVolumeListQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.FsVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool FsVolumeListQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.FsVolumeListQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.FsVolumeListQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.FsVolumeListQuery)
  return false;
#undef DO_
}

void FsVolumeListQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.FsVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.FsVolumeListQuery)
}

::google::protobuf::uint8* FsVolumeListQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.FsVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.FsVolumeListQuery)
  return target;
}

size_t FsVolumeListQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.FsVolumeListQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsVolumeListQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.FsVolumeListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const FsVolumeListQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsVolumeListQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.FsVolumeListQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.FsVolumeListQuery)
    MergeFrom(*source);
  }
}

void FsVolumeListQuery::MergeFrom(const FsVolumeListQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.FsVolumeListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FsVolumeListQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.FsVolumeListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsVolumeListQuery::CopyFrom(const FsVolumeListQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.FsVolumeListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsVolumeListQuery::IsInitialized() const {
  return true;
}

void FsVolumeListQuery::Swap(FsVolumeListQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsVolumeListQuery::InternalSwap(FsVolumeListQuery* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsVolumeListQuery::GetMetadata() const {
  protobuf_fs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsVolumeListQuery

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FsVolume::kVolumeIdFieldNumber;
const int FsVolume::kNodeTypeFieldNumber;
const int FsVolume::kDeviceNumberFieldNumber;
const int FsVolume::kFilenameFieldNumber;
const int FsVolume::kLinkedVolumeFieldNumber;
const int FsVolume::kTargetVolumeIdFieldNumber;
const int FsVolume::kVolumeSizeBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FsVolume::FsVolume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_fs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.FsVolume)
}
FsVolume::FsVolume(const FsVolume& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&volume_id_, &from.volume_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_volume_id_) -
    reinterpret_cast<char*>(&volume_id_)) + sizeof(target_volume_id_));
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.FsVolume)
}

void FsVolume::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&volume_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_volume_id_) -
      reinterpret_cast<char*>(&volume_id_)) + sizeof(target_volume_id_));
  _cached_size_ = 0;
}

FsVolume::~FsVolume() {
  // @@protoc_insertion_point(destructor:storageos_rpc.FsVolume)
  SharedDtor();
}

void FsVolume::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FsVolume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FsVolume::descriptor() {
  protobuf_fs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FsVolume& FsVolume::default_instance() {
  protobuf_fs_2eproto::InitDefaults();
  return *internal_default_instance();
}

FsVolume* FsVolume::New(::google::protobuf::Arena* arena) const {
  FsVolume* n = new FsVolume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FsVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.FsVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&volume_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_volume_id_) -
      reinterpret_cast<char*>(&volume_id_)) + sizeof(target_volume_id_));
  _internal_metadata_.Clear();
}

bool FsVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.FsVolume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 volume_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .storageos_rpc.FsVolume.VolumeDeviceType node_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_node_type(static_cast< ::storageos_rpc::FsVolume_VolumeDeviceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 device_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &device_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "storageos_rpc.FsVolume.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool linked_volume = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linked_volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_volume_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_volume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 volume_size_bytes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.FsVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.FsVolume)
  return false;
#undef DO_
}

void FsVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.FsVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 volume_id = 1;
  if (this->volume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->volume_id(), output);
  }

  // .storageos_rpc.FsVolume.VolumeDeviceType node_type = 2;
  if (this->node_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->node_type(), output);
  }

  // uint32 device_number = 3;
  if (this->device_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->device_number(), output);
  }

  // string filename = 4;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "storageos_rpc.FsVolume.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->filename(), output);
  }

  // bool linked_volume = 5;
  if (this->linked_volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->linked_volume(), output);
  }

  // uint32 target_volume_id = 6;
  if (this->target_volume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->target_volume_id(), output);
  }

  // uint64 volume_size_bytes = 7;
  if (this->volume_size_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->volume_size_bytes(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.FsVolume)
}

::google::protobuf::uint8* FsVolume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.FsVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 volume_id = 1;
  if (this->volume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->volume_id(), target);
  }

  // .storageos_rpc.FsVolume.VolumeDeviceType node_type = 2;
  if (this->node_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->node_type(), target);
  }

  // uint32 device_number = 3;
  if (this->device_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->device_number(), target);
  }

  // string filename = 4;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "storageos_rpc.FsVolume.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filename(), target);
  }

  // bool linked_volume = 5;
  if (this->linked_volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->linked_volume(), target);
  }

  // uint32 target_volume_id = 6;
  if (this->target_volume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->target_volume_id(), target);
  }

  // uint64 volume_size_bytes = 7;
  if (this->volume_size_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->volume_size_bytes(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.FsVolume)
  return target;
}

size_t FsVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.FsVolume)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 4;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // uint32 volume_id = 1;
  if (this->volume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->volume_id());
  }

  // .storageos_rpc.FsVolume.VolumeDeviceType node_type = 2;
  if (this->node_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_type());
  }

  // uint32 device_number = 3;
  if (this->device_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->device_number());
  }

  // bool linked_volume = 5;
  if (this->linked_volume() != 0) {
    total_size += 1 + 1;
  }

  // uint64 volume_size_bytes = 7;
  if (this->volume_size_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->volume_size_bytes());
  }

  // uint32 target_volume_id = 6;
  if (this->target_volume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_volume_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FsVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.FsVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const FsVolume* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FsVolume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.FsVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.FsVolume)
    MergeFrom(*source);
  }
}

void FsVolume::MergeFrom(const FsVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.FsVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.volume_id() != 0) {
    set_volume_id(from.volume_id());
  }
  if (from.node_type() != 0) {
    set_node_type(from.node_type());
  }
  if (from.device_number() != 0) {
    set_device_number(from.device_number());
  }
  if (from.linked_volume() != 0) {
    set_linked_volume(from.linked_volume());
  }
  if (from.volume_size_bytes() != 0) {
    set_volume_size_bytes(from.volume_size_bytes());
  }
  if (from.target_volume_id() != 0) {
    set_target_volume_id(from.target_volume_id());
  }
}

void FsVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.FsVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FsVolume::CopyFrom(const FsVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.FsVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsVolume::IsInitialized() const {
  return true;
}

void FsVolume::Swap(FsVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FsVolume::InternalSwap(FsVolume* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  swap(volume_id_, other->volume_id_);
  swap(node_type_, other->node_type_);
  swap(device_number_, other->device_number_);
  swap(linked_volume_, other->linked_volume_);
  swap(volume_size_bytes_, other->volume_size_bytes_);
  swap(target_volume_id_, other->target_volume_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FsVolume::GetMetadata() const {
  protobuf_fs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FsVolume

// uint32 volume_id = 1;
void FsVolume::clear_volume_id() {
  volume_id_ = 0u;
}
::google::protobuf::uint32 FsVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.volume_id)
  return volume_id_;
}
void FsVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.volume_id)
}

// .storageos_rpc.FsVolume.VolumeDeviceType node_type = 2;
void FsVolume::clear_node_type() {
  node_type_ = 0;
}
::storageos_rpc::FsVolume_VolumeDeviceType FsVolume::node_type() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.node_type)
  return static_cast< ::storageos_rpc::FsVolume_VolumeDeviceType >(node_type_);
}
void FsVolume::set_node_type(::storageos_rpc::FsVolume_VolumeDeviceType value) {
  
  node_type_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.node_type)
}

// uint32 device_number = 3;
void FsVolume::clear_device_number() {
  device_number_ = 0u;
}
::google::protobuf::uint32 FsVolume::device_number() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.device_number)
  return device_number_;
}
void FsVolume::set_device_number(::google::protobuf::uint32 value) {
  
  device_number_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.device_number)
}

// string filename = 4;
void FsVolume::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FsVolume::filename() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.filename)
  return filename_.GetNoArena();
}
void FsVolume::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.filename)
}
#if LANG_CXX11
void FsVolume::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storageos_rpc.FsVolume.filename)
}
#endif
void FsVolume::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storageos_rpc.FsVolume.filename)
}
void FsVolume::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storageos_rpc.FsVolume.filename)
}
::std::string* FsVolume::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:storageos_rpc.FsVolume.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FsVolume::release_filename() {
  // @@protoc_insertion_point(field_release:storageos_rpc.FsVolume.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FsVolume::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.FsVolume.filename)
}

// bool linked_volume = 5;
void FsVolume::clear_linked_volume() {
  linked_volume_ = false;
}
bool FsVolume::linked_volume() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.linked_volume)
  return linked_volume_;
}
void FsVolume::set_linked_volume(bool value) {
  
  linked_volume_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.linked_volume)
}

// uint32 target_volume_id = 6;
void FsVolume::clear_target_volume_id() {
  target_volume_id_ = 0u;
}
::google::protobuf::uint32 FsVolume::target_volume_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.target_volume_id)
  return target_volume_id_;
}
void FsVolume::set_target_volume_id(::google::protobuf::uint32 value) {
  
  target_volume_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.target_volume_id)
}

// uint64 volume_size_bytes = 7;
void FsVolume::clear_volume_size_bytes() {
  volume_size_bytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FsVolume::volume_size_bytes() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.volume_size_bytes)
  return volume_size_bytes_;
}
void FsVolume::set_volume_size_bytes(::google::protobuf::uint64 value) {
  
  volume_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.volume_size_bytes)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace storageos_rpc

// @@protoc_insertion_point(global_scope)
