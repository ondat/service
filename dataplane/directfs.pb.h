// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directfs.proto

#ifndef PROTOBUF_directfs_2eproto__INCLUDED
#define PROTOBUF_directfs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace storageos_rpc {
class DfsHost;
class DfsHostDefaultTypeInternal;
extern DfsHostDefaultTypeInternal _DfsHost_default_instance_;
class DfsHostCredentials;
class DfsHostCredentialsDefaultTypeInternal;
extern DfsHostCredentialsDefaultTypeInternal _DfsHostCredentials_default_instance_;
class DfsHostListQuery;
class DfsHostListQueryDefaultTypeInternal;
extern DfsHostListQueryDefaultTypeInternal _DfsHostListQuery_default_instance_;
class DfsVolume;
class DfsVolumeDefaultTypeInternal;
extern DfsVolumeDefaultTypeInternal _DfsVolume_default_instance_;
class DfsVolumeCredentials;
class DfsVolumeCredentialsDefaultTypeInternal;
extern DfsVolumeCredentialsDefaultTypeInternal _DfsVolumeCredentials_default_instance_;
class DfsVolumeListQuery;
class DfsVolumeListQueryDefaultTypeInternal;
extern DfsVolumeListQueryDefaultTypeInternal _DfsVolumeListQuery_default_instance_;
class DfsVolumeStats;
class DfsVolumeStatsDefaultTypeInternal;
extern DfsVolumeStatsDefaultTypeInternal _DfsVolumeStats_default_instance_;
}  // namespace storageos_rpc

namespace storageos_rpc {

namespace protobuf_directfs_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_directfs_2eproto

// ===================================================================

class DfsHostCredentials : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DfsHostCredentials) */ {
 public:
  DfsHostCredentials();
  virtual ~DfsHostCredentials();

  DfsHostCredentials(const DfsHostCredentials& from);

  inline DfsHostCredentials& operator=(const DfsHostCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsHostCredentials(DfsHostCredentials&& from) noexcept
    : DfsHostCredentials() {
    *this = ::std::move(from);
  }

  inline DfsHostCredentials& operator=(DfsHostCredentials&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsHostCredentials& default_instance();

  static inline const DfsHostCredentials* internal_default_instance() {
    return reinterpret_cast<const DfsHostCredentials*>(
               &_DfsHostCredentials_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DfsHostCredentials* other);
  friend void swap(DfsHostCredentials& a, DfsHostCredentials& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsHostCredentials* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsHostCredentials* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsHostCredentials& from);
  void MergeFrom(const DfsHostCredentials& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsHostCredentials* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:storageos_rpc.DfsHostCredentials)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsHost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DfsHost) */ {
 public:
  DfsHost();
  virtual ~DfsHost();

  DfsHost(const DfsHost& from);

  inline DfsHost& operator=(const DfsHost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsHost(DfsHost&& from) noexcept
    : DfsHost() {
    *this = ::std::move(from);
  }

  inline DfsHost& operator=(DfsHost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsHost& default_instance();

  static inline const DfsHost* internal_default_instance() {
    return reinterpret_cast<const DfsHost*>(
               &_DfsHost_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DfsHost* other);
  friend void swap(DfsHost& a, DfsHost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsHost* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsHost* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsHost& from);
  void MergeFrom(const DfsHost& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hostname = 3;
  void clear_hostname();
  static const int kHostnameFieldNumber = 3;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // .storageos_rpc.DataplaneCommonConfig cc = 1;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 1;
  const ::storageos_rpc::DataplaneCommonConfig& cc() const;
  ::storageos_rpc::DataplaneCommonConfig* mutable_cc();
  ::storageos_rpc::DataplaneCommonConfig* release_cc();
  void set_allocated_cc(::storageos_rpc::DataplaneCommonConfig* cc);

  // .storageos_rpc.DfsHostCredentials credentials = 5;
  bool has_credentials() const;
  void clear_credentials();
  static const int kCredentialsFieldNumber = 5;
  const ::storageos_rpc::DfsHostCredentials& credentials() const;
  ::storageos_rpc::DfsHostCredentials* mutable_credentials();
  ::storageos_rpc::DfsHostCredentials* release_credentials();
  void set_allocated_credentials(::storageos_rpc::DfsHostCredentials* credentials);

  // uint32 host_id = 2;
  void clear_host_id();
  static const int kHostIdFieldNumber = 2;
  ::google::protobuf::uint32 host_id() const;
  void set_host_id(::google::protobuf::uint32 value);

  // uint32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:storageos_rpc.DfsHost)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::storageos_rpc::DataplaneCommonConfig* cc_;
  ::storageos_rpc::DfsHostCredentials* credentials_;
  ::google::protobuf::uint32 host_id_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsHostListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DfsHostListQuery) */ {
 public:
  DfsHostListQuery();
  virtual ~DfsHostListQuery();

  DfsHostListQuery(const DfsHostListQuery& from);

  inline DfsHostListQuery& operator=(const DfsHostListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsHostListQuery(DfsHostListQuery&& from) noexcept
    : DfsHostListQuery() {
    *this = ::std::move(from);
  }

  inline DfsHostListQuery& operator=(DfsHostListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsHostListQuery& default_instance();

  static inline const DfsHostListQuery* internal_default_instance() {
    return reinterpret_cast<const DfsHostListQuery*>(
               &_DfsHostListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DfsHostListQuery* other);
  friend void swap(DfsHostListQuery& a, DfsHostListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsHostListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsHostListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsHostListQuery& from);
  void MergeFrom(const DfsHostListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsHostListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .storageos_rpc.DfsHost host_ids = 1;
  int host_ids_size() const;
  void clear_host_ids();
  static const int kHostIdsFieldNumber = 1;
  const ::storageos_rpc::DfsHost& host_ids(int index) const;
  ::storageos_rpc::DfsHost* mutable_host_ids(int index);
  ::storageos_rpc::DfsHost* add_host_ids();
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsHost >*
      mutable_host_ids();
  const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsHost >&
      host_ids() const;

  // @@protoc_insertion_point(class_scope:storageos_rpc.DfsHostListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsHost > host_ids_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsVolumeCredentials : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DfsVolumeCredentials) */ {
 public:
  DfsVolumeCredentials();
  virtual ~DfsVolumeCredentials();

  DfsVolumeCredentials(const DfsVolumeCredentials& from);

  inline DfsVolumeCredentials& operator=(const DfsVolumeCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsVolumeCredentials(DfsVolumeCredentials&& from) noexcept
    : DfsVolumeCredentials() {
    *this = ::std::move(from);
  }

  inline DfsVolumeCredentials& operator=(DfsVolumeCredentials&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsVolumeCredentials& default_instance();

  static inline const DfsVolumeCredentials* internal_default_instance() {
    return reinterpret_cast<const DfsVolumeCredentials*>(
               &_DfsVolumeCredentials_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DfsVolumeCredentials* other);
  friend void swap(DfsVolumeCredentials& a, DfsVolumeCredentials& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsVolumeCredentials* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsVolumeCredentials* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsVolumeCredentials& from);
  void MergeFrom(const DfsVolumeCredentials& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsVolumeCredentials* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:storageos_rpc.DfsVolumeCredentials)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsVolumeStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DfsVolumeStats) */ {
 public:
  DfsVolumeStats();
  virtual ~DfsVolumeStats();

  DfsVolumeStats(const DfsVolumeStats& from);

  inline DfsVolumeStats& operator=(const DfsVolumeStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsVolumeStats(DfsVolumeStats&& from) noexcept
    : DfsVolumeStats() {
    *this = ::std::move(from);
  }

  inline DfsVolumeStats& operator=(DfsVolumeStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsVolumeStats& default_instance();

  static inline const DfsVolumeStats* internal_default_instance() {
    return reinterpret_cast<const DfsVolumeStats*>(
               &_DfsVolumeStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DfsVolumeStats* other);
  friend void swap(DfsVolumeStats& a, DfsVolumeStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsVolumeStats* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsVolumeStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsVolumeStats& from);
  void MergeFrom(const DfsVolumeStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsVolumeStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:storageos_rpc.DfsVolumeStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsVolume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DfsVolume) */ {
 public:
  DfsVolume();
  virtual ~DfsVolume();

  DfsVolume(const DfsVolume& from);

  inline DfsVolume& operator=(const DfsVolume& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsVolume(DfsVolume&& from) noexcept
    : DfsVolume() {
    *this = ::std::move(from);
  }

  inline DfsVolume& operator=(DfsVolume&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsVolume& default_instance();

  static inline const DfsVolume* internal_default_instance() {
    return reinterpret_cast<const DfsVolume*>(
               &_DfsVolume_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DfsVolume* other);
  friend void swap(DfsVolume& a, DfsVolume& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsVolume* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsVolume* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsVolume& from);
  void MergeFrom(const DfsVolume& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsVolume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .storageos_rpc.DataplaneCommonConfig cc = 1;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 1;
  const ::storageos_rpc::DataplaneCommonConfig& cc() const;
  ::storageos_rpc::DataplaneCommonConfig* mutable_cc();
  ::storageos_rpc::DataplaneCommonConfig* release_cc();
  void set_allocated_cc(::storageos_rpc::DataplaneCommonConfig* cc);

  // .storageos_rpc.DfsVolumeCredentials credentials = 4;
  bool has_credentials() const;
  void clear_credentials();
  static const int kCredentialsFieldNumber = 4;
  const ::storageos_rpc::DfsVolumeCredentials& credentials() const;
  ::storageos_rpc::DfsVolumeCredentials* mutable_credentials();
  ::storageos_rpc::DfsVolumeCredentials* release_credentials();
  void set_allocated_credentials(::storageos_rpc::DfsVolumeCredentials* credentials);

  // .storageos_rpc.DfsVolumeStats stats = 5;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 5;
  const ::storageos_rpc::DfsVolumeStats& stats() const;
  ::storageos_rpc::DfsVolumeStats* mutable_stats();
  ::storageos_rpc::DfsVolumeStats* release_stats();
  void set_allocated_stats(::storageos_rpc::DfsVolumeStats* stats);

  // uint32 volume_id = 2;
  void clear_volume_id();
  static const int kVolumeIdFieldNumber = 2;
  ::google::protobuf::uint32 volume_id() const;
  void set_volume_id(::google::protobuf::uint32 value);

  // uint32 host_id = 3;
  void clear_host_id();
  static const int kHostIdFieldNumber = 3;
  ::google::protobuf::uint32 host_id() const;
  void set_host_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:storageos_rpc.DfsVolume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::storageos_rpc::DataplaneCommonConfig* cc_;
  ::storageos_rpc::DfsVolumeCredentials* credentials_;
  ::storageos_rpc::DfsVolumeStats* stats_;
  ::google::protobuf::uint32 volume_id_;
  ::google::protobuf::uint32 host_id_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsVolumeListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DfsVolumeListQuery) */ {
 public:
  DfsVolumeListQuery();
  virtual ~DfsVolumeListQuery();

  DfsVolumeListQuery(const DfsVolumeListQuery& from);

  inline DfsVolumeListQuery& operator=(const DfsVolumeListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsVolumeListQuery(DfsVolumeListQuery&& from) noexcept
    : DfsVolumeListQuery() {
    *this = ::std::move(from);
  }

  inline DfsVolumeListQuery& operator=(DfsVolumeListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsVolumeListQuery& default_instance();

  static inline const DfsVolumeListQuery* internal_default_instance() {
    return reinterpret_cast<const DfsVolumeListQuery*>(
               &_DfsVolumeListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DfsVolumeListQuery* other);
  friend void swap(DfsVolumeListQuery& a, DfsVolumeListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsVolumeListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsVolumeListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsVolumeListQuery& from);
  void MergeFrom(const DfsVolumeListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsVolumeListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .storageos_rpc.DfsVolume volume_ids = 1;
  int volume_ids_size() const;
  void clear_volume_ids();
  static const int kVolumeIdsFieldNumber = 1;
  const ::storageos_rpc::DfsVolume& volume_ids(int index) const;
  ::storageos_rpc::DfsVolume* mutable_volume_ids(int index);
  ::storageos_rpc::DfsVolume* add_volume_ids();
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsVolume >*
      mutable_volume_ids();
  const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsVolume >&
      volume_ids() const;

  // @@protoc_insertion_point(class_scope:storageos_rpc.DfsVolumeListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsVolume > volume_ids_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DfsHostCredentials

// -------------------------------------------------------------------

// DfsHost

// .storageos_rpc.DataplaneCommonConfig cc = 1;
inline bool DfsHost::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline void DfsHost::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
inline const ::storageos_rpc::DataplaneCommonConfig& DfsHost::cc() const {
  const ::storageos_rpc::DataplaneCommonConfig* p = cc_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHost.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DataplaneCommonConfig*>(
      &::storageos_rpc::_DataplaneCommonConfig_default_instance_);
}
inline ::storageos_rpc::DataplaneCommonConfig* DfsHost::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::storageos_rpc::DataplaneCommonConfig;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsHost.cc)
  return cc_;
}
inline ::storageos_rpc::DataplaneCommonConfig* DfsHost::release_cc() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsHost.cc)
  
  ::storageos_rpc::DataplaneCommonConfig* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void DfsHost::set_allocated_cc(::storageos_rpc::DataplaneCommonConfig* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsHost.cc)
}

// uint32 host_id = 2;
inline void DfsHost::clear_host_id() {
  host_id_ = 0u;
}
inline ::google::protobuf::uint32 DfsHost::host_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHost.host_id)
  return host_id_;
}
inline void DfsHost::set_host_id(::google::protobuf::uint32 value) {
  
  host_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsHost.host_id)
}

// string hostname = 3;
inline void DfsHost::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DfsHost::hostname() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHost.hostname)
  return hostname_.GetNoArena();
}
inline void DfsHost::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsHost.hostname)
}
#if LANG_CXX11
inline void DfsHost::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storageos_rpc.DfsHost.hostname)
}
#endif
inline void DfsHost::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storageos_rpc.DfsHost.hostname)
}
inline void DfsHost::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storageos_rpc.DfsHost.hostname)
}
inline ::std::string* DfsHost::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsHost.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DfsHost::release_hostname() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsHost.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DfsHost::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsHost.hostname)
}

// uint32 port = 4;
inline void DfsHost::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 DfsHost::port() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHost.port)
  return port_;
}
inline void DfsHost::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsHost.port)
}

// .storageos_rpc.DfsHostCredentials credentials = 5;
inline bool DfsHost::has_credentials() const {
  return this != internal_default_instance() && credentials_ != NULL;
}
inline void DfsHost::clear_credentials() {
  if (GetArenaNoVirtual() == NULL && credentials_ != NULL) delete credentials_;
  credentials_ = NULL;
}
inline const ::storageos_rpc::DfsHostCredentials& DfsHost::credentials() const {
  const ::storageos_rpc::DfsHostCredentials* p = credentials_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHost.credentials)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DfsHostCredentials*>(
      &::storageos_rpc::_DfsHostCredentials_default_instance_);
}
inline ::storageos_rpc::DfsHostCredentials* DfsHost::mutable_credentials() {
  
  if (credentials_ == NULL) {
    credentials_ = new ::storageos_rpc::DfsHostCredentials;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsHost.credentials)
  return credentials_;
}
inline ::storageos_rpc::DfsHostCredentials* DfsHost::release_credentials() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsHost.credentials)
  
  ::storageos_rpc::DfsHostCredentials* temp = credentials_;
  credentials_ = NULL;
  return temp;
}
inline void DfsHost::set_allocated_credentials(::storageos_rpc::DfsHostCredentials* credentials) {
  delete credentials_;
  credentials_ = credentials;
  if (credentials) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsHost.credentials)
}

// -------------------------------------------------------------------

// DfsHostListQuery

// repeated .storageos_rpc.DfsHost host_ids = 1;
inline int DfsHostListQuery::host_ids_size() const {
  return host_ids_.size();
}
inline void DfsHostListQuery::clear_host_ids() {
  host_ids_.Clear();
}
inline const ::storageos_rpc::DfsHost& DfsHostListQuery::host_ids(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHostListQuery.host_ids)
  return host_ids_.Get(index);
}
inline ::storageos_rpc::DfsHost* DfsHostListQuery::mutable_host_ids(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsHostListQuery.host_ids)
  return host_ids_.Mutable(index);
}
inline ::storageos_rpc::DfsHost* DfsHostListQuery::add_host_ids() {
  // @@protoc_insertion_point(field_add:storageos_rpc.DfsHostListQuery.host_ids)
  return host_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsHost >*
DfsHostListQuery::mutable_host_ids() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DfsHostListQuery.host_ids)
  return &host_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsHost >&
DfsHostListQuery::host_ids() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DfsHostListQuery.host_ids)
  return host_ids_;
}

// -------------------------------------------------------------------

// DfsVolumeCredentials

// -------------------------------------------------------------------

// DfsVolumeStats

// -------------------------------------------------------------------

// DfsVolume

// .storageos_rpc.DataplaneCommonConfig cc = 1;
inline bool DfsVolume::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline void DfsVolume::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
inline const ::storageos_rpc::DataplaneCommonConfig& DfsVolume::cc() const {
  const ::storageos_rpc::DataplaneCommonConfig* p = cc_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolume.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DataplaneCommonConfig*>(
      &::storageos_rpc::_DataplaneCommonConfig_default_instance_);
}
inline ::storageos_rpc::DataplaneCommonConfig* DfsVolume::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::storageos_rpc::DataplaneCommonConfig;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsVolume.cc)
  return cc_;
}
inline ::storageos_rpc::DataplaneCommonConfig* DfsVolume::release_cc() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsVolume.cc)
  
  ::storageos_rpc::DataplaneCommonConfig* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void DfsVolume::set_allocated_cc(::storageos_rpc::DataplaneCommonConfig* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsVolume.cc)
}

// uint32 volume_id = 2;
inline void DfsVolume::clear_volume_id() {
  volume_id_ = 0u;
}
inline ::google::protobuf::uint32 DfsVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolume.volume_id)
  return volume_id_;
}
inline void DfsVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsVolume.volume_id)
}

// uint32 host_id = 3;
inline void DfsVolume::clear_host_id() {
  host_id_ = 0u;
}
inline ::google::protobuf::uint32 DfsVolume::host_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolume.host_id)
  return host_id_;
}
inline void DfsVolume::set_host_id(::google::protobuf::uint32 value) {
  
  host_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsVolume.host_id)
}

// .storageos_rpc.DfsVolumeCredentials credentials = 4;
inline bool DfsVolume::has_credentials() const {
  return this != internal_default_instance() && credentials_ != NULL;
}
inline void DfsVolume::clear_credentials() {
  if (GetArenaNoVirtual() == NULL && credentials_ != NULL) delete credentials_;
  credentials_ = NULL;
}
inline const ::storageos_rpc::DfsVolumeCredentials& DfsVolume::credentials() const {
  const ::storageos_rpc::DfsVolumeCredentials* p = credentials_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolume.credentials)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DfsVolumeCredentials*>(
      &::storageos_rpc::_DfsVolumeCredentials_default_instance_);
}
inline ::storageos_rpc::DfsVolumeCredentials* DfsVolume::mutable_credentials() {
  
  if (credentials_ == NULL) {
    credentials_ = new ::storageos_rpc::DfsVolumeCredentials;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsVolume.credentials)
  return credentials_;
}
inline ::storageos_rpc::DfsVolumeCredentials* DfsVolume::release_credentials() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsVolume.credentials)
  
  ::storageos_rpc::DfsVolumeCredentials* temp = credentials_;
  credentials_ = NULL;
  return temp;
}
inline void DfsVolume::set_allocated_credentials(::storageos_rpc::DfsVolumeCredentials* credentials) {
  delete credentials_;
  credentials_ = credentials;
  if (credentials) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsVolume.credentials)
}

// .storageos_rpc.DfsVolumeStats stats = 5;
inline bool DfsVolume::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
inline void DfsVolume::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
inline const ::storageos_rpc::DfsVolumeStats& DfsVolume::stats() const {
  const ::storageos_rpc::DfsVolumeStats* p = stats_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolume.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DfsVolumeStats*>(
      &::storageos_rpc::_DfsVolumeStats_default_instance_);
}
inline ::storageos_rpc::DfsVolumeStats* DfsVolume::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::storageos_rpc::DfsVolumeStats;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsVolume.stats)
  return stats_;
}
inline ::storageos_rpc::DfsVolumeStats* DfsVolume::release_stats() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsVolume.stats)
  
  ::storageos_rpc::DfsVolumeStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void DfsVolume::set_allocated_stats(::storageos_rpc::DfsVolumeStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsVolume.stats)
}

// -------------------------------------------------------------------

// DfsVolumeListQuery

// repeated .storageos_rpc.DfsVolume volume_ids = 1;
inline int DfsVolumeListQuery::volume_ids_size() const {
  return volume_ids_.size();
}
inline void DfsVolumeListQuery::clear_volume_ids() {
  volume_ids_.Clear();
}
inline const ::storageos_rpc::DfsVolume& DfsVolumeListQuery::volume_ids(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolumeListQuery.volume_ids)
  return volume_ids_.Get(index);
}
inline ::storageos_rpc::DfsVolume* DfsVolumeListQuery::mutable_volume_ids(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsVolumeListQuery.volume_ids)
  return volume_ids_.Mutable(index);
}
inline ::storageos_rpc::DfsVolume* DfsVolumeListQuery::add_volume_ids() {
  // @@protoc_insertion_point(field_add:storageos_rpc.DfsVolumeListQuery.volume_ids)
  return volume_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsVolume >*
DfsVolumeListQuery::mutable_volume_ids() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DfsVolumeListQuery.volume_ids)
  return &volume_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsVolume >&
DfsVolumeListQuery::volume_ids() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DfsVolumeListQuery.volume_ids)
  return volume_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace storageos_rpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_directfs_2eproto__INCLUDED
