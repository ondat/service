// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: director.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "director.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace storageos_rpc {
class DirectorVolumeListQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DirectorVolumeListQuery>
     _instance;
} _DirectorVolumeListQuery_default_instance_;
class DirectorVolumeStatisticsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DirectorVolumeStatistics>
     _instance;
} _DirectorVolumeStatistics_default_instance_;
class DirectorVolumeStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DirectorVolumeStatus>
     _instance;
} _DirectorVolumeStatus_default_instance_;
class DirectorVolumeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DirectorVolume>
     _instance;
} _DirectorVolume_default_instance_;
class DirectorVolumeListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DirectorVolumeList>
     _instance;
} _DirectorVolumeList_default_instance_;
class DirectorPresentationListQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DirectorPresentationListQuery>
     _instance;
} _DirectorPresentationListQuery_default_instance_;
class DirectorPresentationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DirectorPresentation>
     _instance;
} _DirectorPresentation_default_instance_;
class DirectorPresentationListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DirectorPresentationList>
     _instance;
} _DirectorPresentationList_default_instance_;

namespace protobuf_director_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolumeListQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolumeListQuery, volume_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolumeStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolumeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolume, cc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolume, volume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolume, write_pipe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolume, read_pipe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolume, qos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolume, replica_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolume, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolume, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolumeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorVolumeList, volumes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorPresentationListQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorPresentationListQuery, presentation_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorPresentation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorPresentation, cc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorPresentation, source_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorPresentation, target_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorPresentationList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectorPresentationList, presentations_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(DirectorVolumeListQuery)},
  { 6, -1, sizeof(DirectorVolumeStatistics)},
  { 11, -1, sizeof(DirectorVolumeStatus)},
  { 16, -1, sizeof(DirectorVolume)},
  { 29, -1, sizeof(DirectorVolumeList)},
  { 35, -1, sizeof(DirectorPresentationListQuery)},
  { 41, -1, sizeof(DirectorPresentation)},
  { 49, -1, sizeof(DirectorPresentationList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DirectorVolumeListQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DirectorVolumeStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DirectorVolumeStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DirectorVolume_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DirectorVolumeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DirectorPresentationListQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DirectorPresentation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DirectorPresentationList_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "director.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::storageos_rpc::protobuf_common_2eproto::InitDefaults();
  _DirectorVolumeListQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DirectorVolumeListQuery_default_instance_);_DirectorVolumeStatistics_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DirectorVolumeStatistics_default_instance_);_DirectorVolumeStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DirectorVolumeStatus_default_instance_);_DirectorVolume_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DirectorVolume_default_instance_);_DirectorVolumeList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DirectorVolumeList_default_instance_);_DirectorPresentationListQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DirectorPresentationListQuery_default_instance_);_DirectorPresentation_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DirectorPresentation_default_instance_);_DirectorPresentationList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DirectorPresentationList_default_instance_);_DirectorVolume_default_instance_._instance.get_mutable()->cc_ = const_cast< ::storageos_rpc::DataplaneCommon*>(
      ::storageos_rpc::DataplaneCommon::internal_default_instance());
  _DirectorVolume_default_instance_._instance.get_mutable()->stats_ = const_cast< ::storageos_rpc::DirectorVolumeStatistics*>(
      ::storageos_rpc::DirectorVolumeStatistics::internal_default_instance());
  _DirectorVolume_default_instance_._instance.get_mutable()->status_ = const_cast< ::storageos_rpc::DirectorVolumeStatus*>(
      ::storageos_rpc::DirectorVolumeStatus::internal_default_instance());
  _DirectorPresentation_default_instance_._instance.get_mutable()->cc_ = const_cast< ::storageos_rpc::DataplaneCommon*>(
      ::storageos_rpc::DataplaneCommon::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016director.proto\022\rstorageos_rpc\032\014common."
      "proto\"-\n\027DirectorVolumeListQuery\022\022\n\nvolu"
      "me_ids\030\001 \003(\r\"\032\n\030DirectorVolumeStatistics"
      "\"\026\n\024DirectorVolumeStatus\"\205\002\n\016DirectorVol"
      "ume\022*\n\002cc\030\001 \001(\0132\036.storageos_rpc.Dataplan"
      "eCommon\022\021\n\tvolume_id\030\002 \001(\r\022\022\n\nwrite_pipe"
      "\030\003 \001(\r\022\021\n\tread_pipe\030\004 \001(\r\022\013\n\003qos\030\005 \001(\004\022\023"
      "\n\013replica_ids\030\006 \003(\r\0226\n\005stats\030\007 \001(\0132\'.sto"
      "rageos_rpc.DirectorVolumeStatistics\0223\n\006s"
      "tatus\030\010 \001(\0132#.storageos_rpc.DirectorVolu"
      "meStatus\"D\n\022DirectorVolumeList\022.\n\007volume"
      "s\030\001 \003(\0132\035.storageos_rpc.DirectorVolume\"8"
      "\n\035DirectorPresentationListQuery\022\027\n\017prese"
      "ntation_id\030\001 \003(\r\"h\n\024DirectorPresentation"
      "\022*\n\002cc\030\001 \001(\0132\036.storageos_rpc.DataplaneCo"
      "mmon\022\021\n\tsource_id\030\002 \001(\r\022\021\n\ttarget_id\030\003 \001"
      "(\r\"V\n\030DirectorPresentationList\022:\n\rpresen"
      "tations\030\001 \003(\0132#.storageos_rpc.DirectorPr"
      "esentation2\270\005\n\010Director\022I\n\014VolumeCreate\022"
      "\035.storageos_rpc.DirectorVolume\032\030.storage"
      "os_rpc.RpcResult\"\000\022I\n\014VolumeUpdate\022\035.sto"
      "rageos_rpc.DirectorVolume\032\030.storageos_rp"
      "c.RpcResult\"\000\022I\n\014VolumeDelete\022\035.storageo"
      "s_rpc.DirectorVolume\032\030.storageos_rpc.Rpc"
      "Result\"\000\022Y\n\nVolumeList\022&.storageos_rpc.D"
      "irectorVolumeListQuery\032!.storageos_rpc.D"
      "irectorVolumeList\"\000\022U\n\022PresentationCreat"
      "e\022#.storageos_rpc.DirectorPresentation\032\030"
      ".storageos_rpc.RpcResult\"\000\022U\n\022Presentati"
      "onUpdate\022#.storageos_rpc.DirectorPresent"
      "ation\032\030.storageos_rpc.RpcResult\"\000\022U\n\022Pre"
      "sentationDelete\022#.storageos_rpc.Director"
      "Presentation\032\030.storageos_rpc.RpcResult\"\000"
      "\022k\n\020PresentationList\022,.storageos_rpc.Dir"
      "ectorPresentationListQuery\032\'.storageos_r"
      "pc.DirectorPresentationList\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1437);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "director.proto", &protobuf_RegisterTypes);
  ::storageos_rpc::protobuf_common_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_director_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectorVolumeListQuery::kVolumeIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectorVolumeListQuery::DirectorVolumeListQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_director_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DirectorVolumeListQuery)
}
DirectorVolumeListQuery::DirectorVolumeListQuery(const DirectorVolumeListQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      volume_ids_(from.volume_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DirectorVolumeListQuery)
}

void DirectorVolumeListQuery::SharedCtor() {
  _cached_size_ = 0;
}

DirectorVolumeListQuery::~DirectorVolumeListQuery() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DirectorVolumeListQuery)
  SharedDtor();
}

void DirectorVolumeListQuery::SharedDtor() {
}

void DirectorVolumeListQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectorVolumeListQuery::descriptor() {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectorVolumeListQuery& DirectorVolumeListQuery::default_instance() {
  protobuf_director_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectorVolumeListQuery* DirectorVolumeListQuery::New(::google::protobuf::Arena* arena) const {
  DirectorVolumeListQuery* n = new DirectorVolumeListQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectorVolumeListQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DirectorVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_ids_.Clear();
  _internal_metadata_.Clear();
}

bool DirectorVolumeListQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DirectorVolumeListQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 volume_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_volume_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_volume_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DirectorVolumeListQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DirectorVolumeListQuery)
  return false;
#undef DO_
}

void DirectorVolumeListQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DirectorVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 volume_ids = 1;
  if (this->volume_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _volume_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->volume_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->volume_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DirectorVolumeListQuery)
}

::google::protobuf::uint8* DirectorVolumeListQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DirectorVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 volume_ids = 1;
  if (this->volume_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _volume_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->volume_ids_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DirectorVolumeListQuery)
  return target;
}

size_t DirectorVolumeListQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DirectorVolumeListQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 volume_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->volume_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _volume_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectorVolumeListQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DirectorVolumeListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectorVolumeListQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectorVolumeListQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DirectorVolumeListQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DirectorVolumeListQuery)
    MergeFrom(*source);
  }
}

void DirectorVolumeListQuery::MergeFrom(const DirectorVolumeListQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DirectorVolumeListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_ids_.MergeFrom(from.volume_ids_);
}

void DirectorVolumeListQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DirectorVolumeListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectorVolumeListQuery::CopyFrom(const DirectorVolumeListQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DirectorVolumeListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectorVolumeListQuery::IsInitialized() const {
  return true;
}

void DirectorVolumeListQuery::Swap(DirectorVolumeListQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectorVolumeListQuery::InternalSwap(DirectorVolumeListQuery* other) {
  using std::swap;
  volume_ids_.InternalSwap(&other->volume_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectorVolumeListQuery::GetMetadata() const {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectorVolumeListQuery

// repeated uint32 volume_ids = 1;
int DirectorVolumeListQuery::volume_ids_size() const {
  return volume_ids_.size();
}
void DirectorVolumeListQuery::clear_volume_ids() {
  volume_ids_.Clear();
}
::google::protobuf::uint32 DirectorVolumeListQuery::volume_ids(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolumeListQuery.volume_ids)
  return volume_ids_.Get(index);
}
void DirectorVolumeListQuery::set_volume_ids(int index, ::google::protobuf::uint32 value) {
  volume_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolumeListQuery.volume_ids)
}
void DirectorVolumeListQuery::add_volume_ids(::google::protobuf::uint32 value) {
  volume_ids_.Add(value);
  // @@protoc_insertion_point(field_add:storageos_rpc.DirectorVolumeListQuery.volume_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DirectorVolumeListQuery::volume_ids() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DirectorVolumeListQuery.volume_ids)
  return volume_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DirectorVolumeListQuery::mutable_volume_ids() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DirectorVolumeListQuery.volume_ids)
  return &volume_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectorVolumeStatistics::DirectorVolumeStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_director_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DirectorVolumeStatistics)
}
DirectorVolumeStatistics::DirectorVolumeStatistics(const DirectorVolumeStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DirectorVolumeStatistics)
}

void DirectorVolumeStatistics::SharedCtor() {
  _cached_size_ = 0;
}

DirectorVolumeStatistics::~DirectorVolumeStatistics() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DirectorVolumeStatistics)
  SharedDtor();
}

void DirectorVolumeStatistics::SharedDtor() {
}

void DirectorVolumeStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectorVolumeStatistics::descriptor() {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectorVolumeStatistics& DirectorVolumeStatistics::default_instance() {
  protobuf_director_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectorVolumeStatistics* DirectorVolumeStatistics::New(::google::protobuf::Arena* arena) const {
  DirectorVolumeStatistics* n = new DirectorVolumeStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectorVolumeStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DirectorVolumeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DirectorVolumeStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DirectorVolumeStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DirectorVolumeStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DirectorVolumeStatistics)
  return false;
#undef DO_
}

void DirectorVolumeStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DirectorVolumeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DirectorVolumeStatistics)
}

::google::protobuf::uint8* DirectorVolumeStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DirectorVolumeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DirectorVolumeStatistics)
  return target;
}

size_t DirectorVolumeStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DirectorVolumeStatistics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectorVolumeStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DirectorVolumeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectorVolumeStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectorVolumeStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DirectorVolumeStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DirectorVolumeStatistics)
    MergeFrom(*source);
  }
}

void DirectorVolumeStatistics::MergeFrom(const DirectorVolumeStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DirectorVolumeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DirectorVolumeStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DirectorVolumeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectorVolumeStatistics::CopyFrom(const DirectorVolumeStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DirectorVolumeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectorVolumeStatistics::IsInitialized() const {
  return true;
}

void DirectorVolumeStatistics::Swap(DirectorVolumeStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectorVolumeStatistics::InternalSwap(DirectorVolumeStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectorVolumeStatistics::GetMetadata() const {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectorVolumeStatistics

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectorVolumeStatus::DirectorVolumeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_director_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DirectorVolumeStatus)
}
DirectorVolumeStatus::DirectorVolumeStatus(const DirectorVolumeStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DirectorVolumeStatus)
}

void DirectorVolumeStatus::SharedCtor() {
  _cached_size_ = 0;
}

DirectorVolumeStatus::~DirectorVolumeStatus() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DirectorVolumeStatus)
  SharedDtor();
}

void DirectorVolumeStatus::SharedDtor() {
}

void DirectorVolumeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectorVolumeStatus::descriptor() {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectorVolumeStatus& DirectorVolumeStatus::default_instance() {
  protobuf_director_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectorVolumeStatus* DirectorVolumeStatus::New(::google::protobuf::Arena* arena) const {
  DirectorVolumeStatus* n = new DirectorVolumeStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectorVolumeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DirectorVolumeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DirectorVolumeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DirectorVolumeStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DirectorVolumeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DirectorVolumeStatus)
  return false;
#undef DO_
}

void DirectorVolumeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DirectorVolumeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DirectorVolumeStatus)
}

::google::protobuf::uint8* DirectorVolumeStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DirectorVolumeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DirectorVolumeStatus)
  return target;
}

size_t DirectorVolumeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DirectorVolumeStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectorVolumeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DirectorVolumeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectorVolumeStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectorVolumeStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DirectorVolumeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DirectorVolumeStatus)
    MergeFrom(*source);
  }
}

void DirectorVolumeStatus::MergeFrom(const DirectorVolumeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DirectorVolumeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DirectorVolumeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DirectorVolumeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectorVolumeStatus::CopyFrom(const DirectorVolumeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DirectorVolumeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectorVolumeStatus::IsInitialized() const {
  return true;
}

void DirectorVolumeStatus::Swap(DirectorVolumeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectorVolumeStatus::InternalSwap(DirectorVolumeStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectorVolumeStatus::GetMetadata() const {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectorVolumeStatus

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectorVolume::kCcFieldNumber;
const int DirectorVolume::kVolumeIdFieldNumber;
const int DirectorVolume::kWritePipeFieldNumber;
const int DirectorVolume::kReadPipeFieldNumber;
const int DirectorVolume::kQosFieldNumber;
const int DirectorVolume::kReplicaIdsFieldNumber;
const int DirectorVolume::kStatsFieldNumber;
const int DirectorVolume::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectorVolume::DirectorVolume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_director_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DirectorVolume)
}
DirectorVolume::DirectorVolume(const DirectorVolume& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      replica_ids_(from.replica_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cc()) {
    cc_ = new ::storageos_rpc::DataplaneCommon(*from.cc_);
  } else {
    cc_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::storageos_rpc::DirectorVolumeStatistics(*from.stats_);
  } else {
    stats_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::storageos_rpc::DirectorVolumeStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  ::memcpy(&volume_id_, &from.volume_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_pipe_) -
    reinterpret_cast<char*>(&volume_id_)) + sizeof(read_pipe_));
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DirectorVolume)
}

void DirectorVolume::SharedCtor() {
  ::memset(&cc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_pipe_) -
      reinterpret_cast<char*>(&cc_)) + sizeof(read_pipe_));
  _cached_size_ = 0;
}

DirectorVolume::~DirectorVolume() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DirectorVolume)
  SharedDtor();
}

void DirectorVolume::SharedDtor() {
  if (this != internal_default_instance()) delete cc_;
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete status_;
}

void DirectorVolume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectorVolume::descriptor() {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectorVolume& DirectorVolume::default_instance() {
  protobuf_director_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectorVolume* DirectorVolume::New(::google::protobuf::Arena* arena) const {
  DirectorVolume* n = new DirectorVolume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectorVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DirectorVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replica_ids_.Clear();
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) {
    delete cc_;
  }
  cc_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  ::memset(&volume_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_pipe_) -
      reinterpret_cast<char*>(&volume_id_)) + sizeof(read_pipe_));
  _internal_metadata_.Clear();
}

bool DirectorVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DirectorVolume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .storageos_rpc.DataplaneCommon cc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 volume_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 write_pipe = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &write_pipe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 read_pipe = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &read_pipe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 qos = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &qos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 replica_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_replica_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_replica_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .storageos_rpc.DirectorVolumeStatistics stats = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .storageos_rpc.DirectorVolumeStatus status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DirectorVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DirectorVolume)
  return false;
#undef DO_
}

void DirectorVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DirectorVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cc_, output);
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->volume_id(), output);
  }

  // uint32 write_pipe = 3;
  if (this->write_pipe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->write_pipe(), output);
  }

  // uint32 read_pipe = 4;
  if (this->read_pipe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->read_pipe(), output);
  }

  // uint64 qos = 5;
  if (this->qos() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->qos(), output);
  }

  // repeated uint32 replica_ids = 6;
  if (this->replica_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _replica_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->replica_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->replica_ids(i), output);
  }

  // .storageos_rpc.DirectorVolumeStatistics stats = 7;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->stats_, output);
  }

  // .storageos_rpc.DirectorVolumeStatus status = 8;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->status_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DirectorVolume)
}

::google::protobuf::uint8* DirectorVolume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DirectorVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cc_, deterministic, target);
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->volume_id(), target);
  }

  // uint32 write_pipe = 3;
  if (this->write_pipe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->write_pipe(), target);
  }

  // uint32 read_pipe = 4;
  if (this->read_pipe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->read_pipe(), target);
  }

  // uint64 qos = 5;
  if (this->qos() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->qos(), target);
  }

  // repeated uint32 replica_ids = 6;
  if (this->replica_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _replica_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->replica_ids_, target);
  }

  // .storageos_rpc.DirectorVolumeStatistics stats = 7;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->stats_, deterministic, target);
  }

  // .storageos_rpc.DirectorVolumeStatus status = 8;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->status_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DirectorVolume)
  return target;
}

size_t DirectorVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DirectorVolume)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 replica_ids = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->replica_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _replica_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cc_);
  }

  // .storageos_rpc.DirectorVolumeStatistics stats = 7;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // .storageos_rpc.DirectorVolumeStatus status = 8;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->volume_id());
  }

  // uint32 write_pipe = 3;
  if (this->write_pipe() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->write_pipe());
  }

  // uint64 qos = 5;
  if (this->qos() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->qos());
  }

  // uint32 read_pipe = 4;
  if (this->read_pipe() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->read_pipe());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectorVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DirectorVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectorVolume* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectorVolume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DirectorVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DirectorVolume)
    MergeFrom(*source);
  }
}

void DirectorVolume::MergeFrom(const DirectorVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DirectorVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replica_ids_.MergeFrom(from.replica_ids_);
  if (from.has_cc()) {
    mutable_cc()->::storageos_rpc::DataplaneCommon::MergeFrom(from.cc());
  }
  if (from.has_stats()) {
    mutable_stats()->::storageos_rpc::DirectorVolumeStatistics::MergeFrom(from.stats());
  }
  if (from.has_status()) {
    mutable_status()->::storageos_rpc::DirectorVolumeStatus::MergeFrom(from.status());
  }
  if (from.volume_id() != 0) {
    set_volume_id(from.volume_id());
  }
  if (from.write_pipe() != 0) {
    set_write_pipe(from.write_pipe());
  }
  if (from.qos() != 0) {
    set_qos(from.qos());
  }
  if (from.read_pipe() != 0) {
    set_read_pipe(from.read_pipe());
  }
}

void DirectorVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DirectorVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectorVolume::CopyFrom(const DirectorVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DirectorVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectorVolume::IsInitialized() const {
  return true;
}

void DirectorVolume::Swap(DirectorVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectorVolume::InternalSwap(DirectorVolume* other) {
  using std::swap;
  replica_ids_.InternalSwap(&other->replica_ids_);
  swap(cc_, other->cc_);
  swap(stats_, other->stats_);
  swap(status_, other->status_);
  swap(volume_id_, other->volume_id_);
  swap(write_pipe_, other->write_pipe_);
  swap(qos_, other->qos_);
  swap(read_pipe_, other->read_pipe_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectorVolume::GetMetadata() const {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectorVolume

// .storageos_rpc.DataplaneCommon cc = 1;
bool DirectorVolume::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
void DirectorVolume::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
const ::storageos_rpc::DataplaneCommon& DirectorVolume::cc() const {
  const ::storageos_rpc::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DataplaneCommon*>(
      &::storageos_rpc::_DataplaneCommon_default_instance_);
}
::storageos_rpc::DataplaneCommon* DirectorVolume::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::storageos_rpc::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DirectorVolume.cc)
  return cc_;
}
::storageos_rpc::DataplaneCommon* DirectorVolume::release_cc() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DirectorVolume.cc)
  
  ::storageos_rpc::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
void DirectorVolume::set_allocated_cc(::storageos_rpc::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DirectorVolume.cc)
}

// uint32 volume_id = 2;
void DirectorVolume::clear_volume_id() {
  volume_id_ = 0u;
}
::google::protobuf::uint32 DirectorVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.volume_id)
  return volume_id_;
}
void DirectorVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.volume_id)
}

// uint32 write_pipe = 3;
void DirectorVolume::clear_write_pipe() {
  write_pipe_ = 0u;
}
::google::protobuf::uint32 DirectorVolume::write_pipe() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.write_pipe)
  return write_pipe_;
}
void DirectorVolume::set_write_pipe(::google::protobuf::uint32 value) {
  
  write_pipe_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.write_pipe)
}

// uint32 read_pipe = 4;
void DirectorVolume::clear_read_pipe() {
  read_pipe_ = 0u;
}
::google::protobuf::uint32 DirectorVolume::read_pipe() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.read_pipe)
  return read_pipe_;
}
void DirectorVolume::set_read_pipe(::google::protobuf::uint32 value) {
  
  read_pipe_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.read_pipe)
}

// uint64 qos = 5;
void DirectorVolume::clear_qos() {
  qos_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 DirectorVolume::qos() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.qos)
  return qos_;
}
void DirectorVolume::set_qos(::google::protobuf::uint64 value) {
  
  qos_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.qos)
}

// repeated uint32 replica_ids = 6;
int DirectorVolume::replica_ids_size() const {
  return replica_ids_.size();
}
void DirectorVolume::clear_replica_ids() {
  replica_ids_.Clear();
}
::google::protobuf::uint32 DirectorVolume::replica_ids(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.replica_ids)
  return replica_ids_.Get(index);
}
void DirectorVolume::set_replica_ids(int index, ::google::protobuf::uint32 value) {
  replica_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.replica_ids)
}
void DirectorVolume::add_replica_ids(::google::protobuf::uint32 value) {
  replica_ids_.Add(value);
  // @@protoc_insertion_point(field_add:storageos_rpc.DirectorVolume.replica_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DirectorVolume::replica_ids() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DirectorVolume.replica_ids)
  return replica_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DirectorVolume::mutable_replica_ids() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DirectorVolume.replica_ids)
  return &replica_ids_;
}

// .storageos_rpc.DirectorVolumeStatistics stats = 7;
bool DirectorVolume::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void DirectorVolume::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::storageos_rpc::DirectorVolumeStatistics& DirectorVolume::stats() const {
  const ::storageos_rpc::DirectorVolumeStatistics* p = stats_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DirectorVolumeStatistics*>(
      &::storageos_rpc::_DirectorVolumeStatistics_default_instance_);
}
::storageos_rpc::DirectorVolumeStatistics* DirectorVolume::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::storageos_rpc::DirectorVolumeStatistics;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DirectorVolume.stats)
  return stats_;
}
::storageos_rpc::DirectorVolumeStatistics* DirectorVolume::release_stats() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DirectorVolume.stats)
  
  ::storageos_rpc::DirectorVolumeStatistics* temp = stats_;
  stats_ = NULL;
  return temp;
}
void DirectorVolume::set_allocated_stats(::storageos_rpc::DirectorVolumeStatistics* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DirectorVolume.stats)
}

// .storageos_rpc.DirectorVolumeStatus status = 8;
bool DirectorVolume::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void DirectorVolume::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::storageos_rpc::DirectorVolumeStatus& DirectorVolume::status() const {
  const ::storageos_rpc::DirectorVolumeStatus* p = status_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.status)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DirectorVolumeStatus*>(
      &::storageos_rpc::_DirectorVolumeStatus_default_instance_);
}
::storageos_rpc::DirectorVolumeStatus* DirectorVolume::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::storageos_rpc::DirectorVolumeStatus;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DirectorVolume.status)
  return status_;
}
::storageos_rpc::DirectorVolumeStatus* DirectorVolume::release_status() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DirectorVolume.status)
  
  ::storageos_rpc::DirectorVolumeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void DirectorVolume::set_allocated_status(::storageos_rpc::DirectorVolumeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DirectorVolume.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectorVolumeList::kVolumesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectorVolumeList::DirectorVolumeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_director_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DirectorVolumeList)
}
DirectorVolumeList::DirectorVolumeList(const DirectorVolumeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      volumes_(from.volumes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DirectorVolumeList)
}

void DirectorVolumeList::SharedCtor() {
  _cached_size_ = 0;
}

DirectorVolumeList::~DirectorVolumeList() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DirectorVolumeList)
  SharedDtor();
}

void DirectorVolumeList::SharedDtor() {
}

void DirectorVolumeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectorVolumeList::descriptor() {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectorVolumeList& DirectorVolumeList::default_instance() {
  protobuf_director_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectorVolumeList* DirectorVolumeList::New(::google::protobuf::Arena* arena) const {
  DirectorVolumeList* n = new DirectorVolumeList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectorVolumeList::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DirectorVolumeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volumes_.Clear();
  _internal_metadata_.Clear();
}

bool DirectorVolumeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DirectorVolumeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .storageos_rpc.DirectorVolume volumes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volumes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DirectorVolumeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DirectorVolumeList)
  return false;
#undef DO_
}

void DirectorVolumeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DirectorVolumeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DirectorVolume volumes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volumes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->volumes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DirectorVolumeList)
}

::google::protobuf::uint8* DirectorVolumeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DirectorVolumeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DirectorVolume volumes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volumes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->volumes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DirectorVolumeList)
  return target;
}

size_t DirectorVolumeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DirectorVolumeList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .storageos_rpc.DirectorVolume volumes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->volumes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volumes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectorVolumeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DirectorVolumeList)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectorVolumeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectorVolumeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DirectorVolumeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DirectorVolumeList)
    MergeFrom(*source);
  }
}

void DirectorVolumeList::MergeFrom(const DirectorVolumeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DirectorVolumeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volumes_.MergeFrom(from.volumes_);
}

void DirectorVolumeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DirectorVolumeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectorVolumeList::CopyFrom(const DirectorVolumeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DirectorVolumeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectorVolumeList::IsInitialized() const {
  return true;
}

void DirectorVolumeList::Swap(DirectorVolumeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectorVolumeList::InternalSwap(DirectorVolumeList* other) {
  using std::swap;
  volumes_.InternalSwap(&other->volumes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectorVolumeList::GetMetadata() const {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectorVolumeList

// repeated .storageos_rpc.DirectorVolume volumes = 1;
int DirectorVolumeList::volumes_size() const {
  return volumes_.size();
}
void DirectorVolumeList::clear_volumes() {
  volumes_.Clear();
}
const ::storageos_rpc::DirectorVolume& DirectorVolumeList::volumes(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolumeList.volumes)
  return volumes_.Get(index);
}
::storageos_rpc::DirectorVolume* DirectorVolumeList::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DirectorVolumeList.volumes)
  return volumes_.Mutable(index);
}
::storageos_rpc::DirectorVolume* DirectorVolumeList::add_volumes() {
  // @@protoc_insertion_point(field_add:storageos_rpc.DirectorVolumeList.volumes)
  return volumes_.Add();
}
::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorVolume >*
DirectorVolumeList::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DirectorVolumeList.volumes)
  return &volumes_;
}
const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorVolume >&
DirectorVolumeList::volumes() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DirectorVolumeList.volumes)
  return volumes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectorPresentationListQuery::kPresentationIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectorPresentationListQuery::DirectorPresentationListQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_director_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DirectorPresentationListQuery)
}
DirectorPresentationListQuery::DirectorPresentationListQuery(const DirectorPresentationListQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      presentation_id_(from.presentation_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DirectorPresentationListQuery)
}

void DirectorPresentationListQuery::SharedCtor() {
  _cached_size_ = 0;
}

DirectorPresentationListQuery::~DirectorPresentationListQuery() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DirectorPresentationListQuery)
  SharedDtor();
}

void DirectorPresentationListQuery::SharedDtor() {
}

void DirectorPresentationListQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectorPresentationListQuery::descriptor() {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectorPresentationListQuery& DirectorPresentationListQuery::default_instance() {
  protobuf_director_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectorPresentationListQuery* DirectorPresentationListQuery::New(::google::protobuf::Arena* arena) const {
  DirectorPresentationListQuery* n = new DirectorPresentationListQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectorPresentationListQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DirectorPresentationListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presentation_id_.Clear();
  _internal_metadata_.Clear();
}

bool DirectorPresentationListQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DirectorPresentationListQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 presentation_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_presentation_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_presentation_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DirectorPresentationListQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DirectorPresentationListQuery)
  return false;
#undef DO_
}

void DirectorPresentationListQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DirectorPresentationListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 presentation_id = 1;
  if (this->presentation_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _presentation_id_cached_byte_size_));
  }
  for (int i = 0, n = this->presentation_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->presentation_id(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DirectorPresentationListQuery)
}

::google::protobuf::uint8* DirectorPresentationListQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DirectorPresentationListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 presentation_id = 1;
  if (this->presentation_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _presentation_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->presentation_id_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DirectorPresentationListQuery)
  return target;
}

size_t DirectorPresentationListQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DirectorPresentationListQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 presentation_id = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->presentation_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _presentation_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectorPresentationListQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DirectorPresentationListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectorPresentationListQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectorPresentationListQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DirectorPresentationListQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DirectorPresentationListQuery)
    MergeFrom(*source);
  }
}

void DirectorPresentationListQuery::MergeFrom(const DirectorPresentationListQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DirectorPresentationListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  presentation_id_.MergeFrom(from.presentation_id_);
}

void DirectorPresentationListQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DirectorPresentationListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectorPresentationListQuery::CopyFrom(const DirectorPresentationListQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DirectorPresentationListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectorPresentationListQuery::IsInitialized() const {
  return true;
}

void DirectorPresentationListQuery::Swap(DirectorPresentationListQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectorPresentationListQuery::InternalSwap(DirectorPresentationListQuery* other) {
  using std::swap;
  presentation_id_.InternalSwap(&other->presentation_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectorPresentationListQuery::GetMetadata() const {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectorPresentationListQuery

// repeated uint32 presentation_id = 1;
int DirectorPresentationListQuery::presentation_id_size() const {
  return presentation_id_.size();
}
void DirectorPresentationListQuery::clear_presentation_id() {
  presentation_id_.Clear();
}
::google::protobuf::uint32 DirectorPresentationListQuery::presentation_id(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorPresentationListQuery.presentation_id)
  return presentation_id_.Get(index);
}
void DirectorPresentationListQuery::set_presentation_id(int index, ::google::protobuf::uint32 value) {
  presentation_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorPresentationListQuery.presentation_id)
}
void DirectorPresentationListQuery::add_presentation_id(::google::protobuf::uint32 value) {
  presentation_id_.Add(value);
  // @@protoc_insertion_point(field_add:storageos_rpc.DirectorPresentationListQuery.presentation_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DirectorPresentationListQuery::presentation_id() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DirectorPresentationListQuery.presentation_id)
  return presentation_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DirectorPresentationListQuery::mutable_presentation_id() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DirectorPresentationListQuery.presentation_id)
  return &presentation_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectorPresentation::kCcFieldNumber;
const int DirectorPresentation::kSourceIdFieldNumber;
const int DirectorPresentation::kTargetIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectorPresentation::DirectorPresentation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_director_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DirectorPresentation)
}
DirectorPresentation::DirectorPresentation(const DirectorPresentation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cc()) {
    cc_ = new ::storageos_rpc::DataplaneCommon(*from.cc_);
  } else {
    cc_ = NULL;
  }
  ::memcpy(&source_id_, &from.source_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&source_id_)) + sizeof(target_id_));
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DirectorPresentation)
}

void DirectorPresentation::SharedCtor() {
  ::memset(&cc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&cc_)) + sizeof(target_id_));
  _cached_size_ = 0;
}

DirectorPresentation::~DirectorPresentation() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DirectorPresentation)
  SharedDtor();
}

void DirectorPresentation::SharedDtor() {
  if (this != internal_default_instance()) delete cc_;
}

void DirectorPresentation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectorPresentation::descriptor() {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectorPresentation& DirectorPresentation::default_instance() {
  protobuf_director_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectorPresentation* DirectorPresentation::New(::google::protobuf::Arena* arena) const {
  DirectorPresentation* n = new DirectorPresentation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectorPresentation::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DirectorPresentation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cc_ != NULL) {
    delete cc_;
  }
  cc_ = NULL;
  ::memset(&source_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&source_id_)) + sizeof(target_id_));
  _internal_metadata_.Clear();
}

bool DirectorPresentation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DirectorPresentation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .storageos_rpc.DataplaneCommon cc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 source_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 target_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DirectorPresentation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DirectorPresentation)
  return false;
#undef DO_
}

void DirectorPresentation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DirectorPresentation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cc_, output);
  }

  // uint32 source_id = 2;
  if (this->source_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_id(), output);
  }

  // uint32 target_id = 3;
  if (this->target_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->target_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DirectorPresentation)
}

::google::protobuf::uint8* DirectorPresentation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DirectorPresentation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cc_, deterministic, target);
  }

  // uint32 source_id = 2;
  if (this->source_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_id(), target);
  }

  // uint32 target_id = 3;
  if (this->target_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->target_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DirectorPresentation)
  return target;
}

size_t DirectorPresentation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DirectorPresentation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cc_);
  }

  // uint32 source_id = 2;
  if (this->source_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_id());
  }

  // uint32 target_id = 3;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->target_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectorPresentation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DirectorPresentation)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectorPresentation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectorPresentation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DirectorPresentation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DirectorPresentation)
    MergeFrom(*source);
  }
}

void DirectorPresentation::MergeFrom(const DirectorPresentation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DirectorPresentation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cc()) {
    mutable_cc()->::storageos_rpc::DataplaneCommon::MergeFrom(from.cc());
  }
  if (from.source_id() != 0) {
    set_source_id(from.source_id());
  }
  if (from.target_id() != 0) {
    set_target_id(from.target_id());
  }
}

void DirectorPresentation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DirectorPresentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectorPresentation::CopyFrom(const DirectorPresentation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DirectorPresentation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectorPresentation::IsInitialized() const {
  return true;
}

void DirectorPresentation::Swap(DirectorPresentation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectorPresentation::InternalSwap(DirectorPresentation* other) {
  using std::swap;
  swap(cc_, other->cc_);
  swap(source_id_, other->source_id_);
  swap(target_id_, other->target_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectorPresentation::GetMetadata() const {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectorPresentation

// .storageos_rpc.DataplaneCommon cc = 1;
bool DirectorPresentation::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
void DirectorPresentation::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
const ::storageos_rpc::DataplaneCommon& DirectorPresentation::cc() const {
  const ::storageos_rpc::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorPresentation.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DataplaneCommon*>(
      &::storageos_rpc::_DataplaneCommon_default_instance_);
}
::storageos_rpc::DataplaneCommon* DirectorPresentation::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::storageos_rpc::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DirectorPresentation.cc)
  return cc_;
}
::storageos_rpc::DataplaneCommon* DirectorPresentation::release_cc() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DirectorPresentation.cc)
  
  ::storageos_rpc::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
void DirectorPresentation::set_allocated_cc(::storageos_rpc::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DirectorPresentation.cc)
}

// uint32 source_id = 2;
void DirectorPresentation::clear_source_id() {
  source_id_ = 0u;
}
::google::protobuf::uint32 DirectorPresentation::source_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorPresentation.source_id)
  return source_id_;
}
void DirectorPresentation::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorPresentation.source_id)
}

// uint32 target_id = 3;
void DirectorPresentation::clear_target_id() {
  target_id_ = 0u;
}
::google::protobuf::uint32 DirectorPresentation::target_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorPresentation.target_id)
  return target_id_;
}
void DirectorPresentation::set_target_id(::google::protobuf::uint32 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorPresentation.target_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DirectorPresentationList::kPresentationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DirectorPresentationList::DirectorPresentationList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_director_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DirectorPresentationList)
}
DirectorPresentationList::DirectorPresentationList(const DirectorPresentationList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      presentations_(from.presentations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DirectorPresentationList)
}

void DirectorPresentationList::SharedCtor() {
  _cached_size_ = 0;
}

DirectorPresentationList::~DirectorPresentationList() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DirectorPresentationList)
  SharedDtor();
}

void DirectorPresentationList::SharedDtor() {
}

void DirectorPresentationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectorPresentationList::descriptor() {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DirectorPresentationList& DirectorPresentationList::default_instance() {
  protobuf_director_2eproto::InitDefaults();
  return *internal_default_instance();
}

DirectorPresentationList* DirectorPresentationList::New(::google::protobuf::Arena* arena) const {
  DirectorPresentationList* n = new DirectorPresentationList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DirectorPresentationList::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DirectorPresentationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  presentations_.Clear();
  _internal_metadata_.Clear();
}

bool DirectorPresentationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DirectorPresentationList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .storageos_rpc.DirectorPresentation presentations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_presentations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DirectorPresentationList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DirectorPresentationList)
  return false;
#undef DO_
}

void DirectorPresentationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DirectorPresentationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DirectorPresentation presentations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->presentations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->presentations(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DirectorPresentationList)
}

::google::protobuf::uint8* DirectorPresentationList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DirectorPresentationList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DirectorPresentation presentations = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->presentations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->presentations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DirectorPresentationList)
  return target;
}

size_t DirectorPresentationList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DirectorPresentationList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .storageos_rpc.DirectorPresentation presentations = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->presentations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presentations(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectorPresentationList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DirectorPresentationList)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectorPresentationList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DirectorPresentationList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DirectorPresentationList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DirectorPresentationList)
    MergeFrom(*source);
  }
}

void DirectorPresentationList::MergeFrom(const DirectorPresentationList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DirectorPresentationList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  presentations_.MergeFrom(from.presentations_);
}

void DirectorPresentationList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DirectorPresentationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectorPresentationList::CopyFrom(const DirectorPresentationList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DirectorPresentationList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectorPresentationList::IsInitialized() const {
  return true;
}

void DirectorPresentationList::Swap(DirectorPresentationList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DirectorPresentationList::InternalSwap(DirectorPresentationList* other) {
  using std::swap;
  presentations_.InternalSwap(&other->presentations_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DirectorPresentationList::GetMetadata() const {
  protobuf_director_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_director_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DirectorPresentationList

// repeated .storageos_rpc.DirectorPresentation presentations = 1;
int DirectorPresentationList::presentations_size() const {
  return presentations_.size();
}
void DirectorPresentationList::clear_presentations() {
  presentations_.Clear();
}
const ::storageos_rpc::DirectorPresentation& DirectorPresentationList::presentations(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorPresentationList.presentations)
  return presentations_.Get(index);
}
::storageos_rpc::DirectorPresentation* DirectorPresentationList::mutable_presentations(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DirectorPresentationList.presentations)
  return presentations_.Mutable(index);
}
::storageos_rpc::DirectorPresentation* DirectorPresentationList::add_presentations() {
  // @@protoc_insertion_point(field_add:storageos_rpc.DirectorPresentationList.presentations)
  return presentations_.Add();
}
::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorPresentation >*
DirectorPresentationList::mutable_presentations() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DirectorPresentationList.presentations)
  return &presentations_;
}
const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorPresentation >&
DirectorPresentationList::presentations() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DirectorPresentationList.presentations)
  return presentations_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace storageos_rpc

// @@protoc_insertion_point(global_scope)
