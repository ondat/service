// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataplane.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dataplane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dataplane {
class NodeConfigurationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NodeConfiguration>
     _instance;
} _NodeConfiguration_default_instance_;
class ObjectMeta_LabelsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectMeta::ObjectMeta_LabelsEntry>
     _instance;
} _ObjectMeta_LabelsEntry_default_instance_;
class ObjectMeta_AnnotationsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectMeta::ObjectMeta_AnnotationsEntry>
     _instance;
} _ObjectMeta_AnnotationsEntry_default_instance_;
class ObjectMetaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ObjectMeta>
     _instance;
} _ObjectMeta_default_instance_;
class HostDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Host>
     _instance;
} _Host_default_instance_;
class VolumeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Volume>
     _instance;
} _Volume_default_instance_;
class PresentationSpecDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PresentationSpec>
     _instance;
} _PresentationSpec_default_instance_;
class VolumeSpecDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<VolumeSpec>
     _instance;
} _VolumeSpec_default_instance_;

namespace protobuf_dataplane_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeConfiguration, host_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMeta, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMeta, uid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMeta, resourceversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMeta, creationtimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMeta, deletiontimestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMeta, deletiongraceperiodseconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMeta, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectMeta, annotations_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, metadata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, presentation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, master_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Volume, replicas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresentationSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresentationSpec, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresentationSpec, devicenumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresentationSpec, readiness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresentationSpec, mounts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeSpec, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeSpec, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeSpec, health_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VolumeSpec, host_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(NodeConfiguration)},
  { 6, -1, sizeof(ObjectMeta)},
  { 19, -1, sizeof(Host)},
  { 29, -1, sizeof(Volume)},
  { 39, -1, sizeof(PresentationSpec)},
  { 48, -1, sizeof(VolumeSpec)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NodeConfiguration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectMeta_LabelsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectMeta_AnnotationsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ObjectMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Host_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Volume_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PresentationSpec_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_VolumeSpec_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "dataplane.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[1].reflection = ObjectMeta::ObjectMeta_LabelsEntry::CreateReflection(file_level_metadata[1].descriptor, _ObjectMeta_LabelsEntry_default_instance_._instance.get_mutable());
file_level_metadata[2].reflection = ObjectMeta::ObjectMeta_AnnotationsEntry::CreateReflection(file_level_metadata[2].descriptor, _ObjectMeta_AnnotationsEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaults();
  _NodeConfiguration_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NodeConfiguration_default_instance_);_ObjectMeta_LabelsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectMeta_LabelsEntry_default_instance_);_ObjectMeta_AnnotationsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectMeta_AnnotationsEntry_default_instance_);_ObjectMeta_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ObjectMeta_default_instance_);_Host_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Host_default_instance_);_Volume_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Volume_default_instance_);_PresentationSpec_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PresentationSpec_default_instance_);_VolumeSpec_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_VolumeSpec_default_instance_);_ObjectMeta_LabelsEntry_default_instance_._instance.get_mutable()->set_default_instance(_ObjectMeta_LabelsEntry_default_instance_._instance.get_mutable());
  _ObjectMeta_LabelsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ObjectMeta_AnnotationsEntry_default_instance_._instance.get_mutable()->set_default_instance(_ObjectMeta_AnnotationsEntry_default_instance_._instance.get_mutable());
  _ObjectMeta_AnnotationsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _ObjectMeta_default_instance_._instance.get_mutable()->creationtimestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _ObjectMeta_default_instance_._instance.get_mutable()->deletiontimestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  _Host_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::dataplane::ObjectMeta*>(
      ::dataplane::ObjectMeta::internal_default_instance());
  _Volume_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::dataplane::ObjectMeta*>(
      ::dataplane::ObjectMeta::internal_default_instance());
  _Volume_default_instance_._instance.get_mutable()->presentation_ = const_cast< ::dataplane::PresentationSpec*>(
      ::dataplane::PresentationSpec::internal_default_instance());
  _Volume_default_instance_._instance.get_mutable()->master_ = const_cast< ::dataplane::VolumeSpec*>(
      ::dataplane::VolumeSpec::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017dataplane.proto\022\tdataplane\032\037google/pro"
      "tobuf/timestamp.proto\"!\n\021NodeConfigurati"
      "on\022\014\n\004host\030\004 \001(\r\"\245\003\n\nObjectMeta\022\014\n\004name\030"
      "\001 \001(\t\022\013\n\003uid\030\002 \001(\t\022\027\n\017resourceVersion\030\003 "
      "\001(\t\0225\n\021creationTimestamp\030\004 \001(\0132\032.google."
      "protobuf.Timestamp\0225\n\021deletionTimestamp\030"
      "\005 \001(\0132\032.google.protobuf.Timestamp\022\"\n\032del"
      "etionGracePeriodSeconds\030\006 \001(\003\0221\n\006labels\030"
      "\007 \003(\0132!.dataplane.ObjectMeta.LabelsEntry"
      "\022;\n\013annotations\030\010 \003(\0132&.dataplane.Object"
      "Meta.AnnotationsEntry\032-\n\013LabelsEntry\022\013\n\003"
      "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0322\n\020Annotati"
      "onsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
      "\"j\n\004Host\022\'\n\010metadata\030\001 \001(\0132\025.dataplane.O"
      "bjectMeta\022\n\n\002id\030\002 \001(\r\022\016\n\006active\030\003 \001(\010\022\017\n"
      "\007address\030\004 \001(\t\022\014\n\004port\030\005 \001(\005\"\302\001\n\006Volume\022"
      "\'\n\010metadata\030\001 \001(\0132\025.dataplane.ObjectMeta"
      "\022\014\n\004size\030\002 \001(\004\0221\n\014presentation\030\003 \001(\0132\033.d"
      "ataplane.PresentationSpec\022%\n\006master\030\004 \001("
      "\0132\025.dataplane.VolumeSpec\022\'\n\010replicas\030\005 \003"
      "(\0132\025.dataplane.VolumeSpec\"\332\001\n\020Presentati"
      "onSpec\022\n\n\002id\030\001 \001(\r\022\024\n\014deviceNumber\030\002 \001(\r"
      "\022>\n\treadiness\030\003 \001(\0162+.dataplane.Presenta"
      "tionSpec.VolumeReadiness\022\016\n\006mounts\030\004 \001(\005"
      "\"T\n\017VolumeReadiness\022\025\n\021READINESS_UNKNOWN"
      "\020\000\022\025\n\021READINESS_PENDING\020\001\022\023\n\017READINESS_R"
      "EADY\020\002\"\251\003\n\nVolumeSpec\022\n\n\002id\030\001 \001(\r\0222\n\006sta"
      "tus\030\002 \001(\0162\".dataplane.VolumeSpec.VolumeS"
      "tatus\0222\n\006health\030\003 \001(\0162\".dataplane.Volume"
      "Spec.VolumeHealth\022\014\n\004host\030\004 \001(\r\"\211\001\n\014Volu"
      "meStatus\022\022\n\016STATUS_UNKNOWN\020\000\022\022\n\016STATUS_P"
      "ENDING\020\001\022\021\n\rSTATUS_ACTIVE\020\002\022\026\n\022STATUS_UN"
      "AVAILABLE\020\003\022\021\n\rSTATUS_FAILED\020\004\022\023\n\017STATUS"
      "_DELETING\020\005\"\214\001\n\014VolumeHealth\022\022\n\016HEALTH_U"
      "NKNOWN\020\000\022\030\n\024HEALTH_SYNCHRONISING\020\001\022\022\n\016HE"
      "ALTH_HEALTHY\020\002\022\022\n\016HEALTH_SUSPECT\020\003\022\023\n\017HE"
      "ALTH_DEGRADED\020\004\022\021\n\rHEALTH_FAILED\020\005b\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dataplane.proto", &protobuf_RegisterTypes);
  ::google::protobuf::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_dataplane_2eproto

const ::google::protobuf::EnumDescriptor* PresentationSpec_VolumeReadiness_descriptor() {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_enum_descriptors[0];
}
bool PresentationSpec_VolumeReadiness_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PresentationSpec_VolumeReadiness PresentationSpec::READINESS_UNKNOWN;
const PresentationSpec_VolumeReadiness PresentationSpec::READINESS_PENDING;
const PresentationSpec_VolumeReadiness PresentationSpec::READINESS_READY;
const PresentationSpec_VolumeReadiness PresentationSpec::VolumeReadiness_MIN;
const PresentationSpec_VolumeReadiness PresentationSpec::VolumeReadiness_MAX;
const int PresentationSpec::VolumeReadiness_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VolumeSpec_VolumeStatus_descriptor() {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_enum_descriptors[1];
}
bool VolumeSpec_VolumeStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VolumeSpec_VolumeStatus VolumeSpec::STATUS_UNKNOWN;
const VolumeSpec_VolumeStatus VolumeSpec::STATUS_PENDING;
const VolumeSpec_VolumeStatus VolumeSpec::STATUS_ACTIVE;
const VolumeSpec_VolumeStatus VolumeSpec::STATUS_UNAVAILABLE;
const VolumeSpec_VolumeStatus VolumeSpec::STATUS_FAILED;
const VolumeSpec_VolumeStatus VolumeSpec::STATUS_DELETING;
const VolumeSpec_VolumeStatus VolumeSpec::VolumeStatus_MIN;
const VolumeSpec_VolumeStatus VolumeSpec::VolumeStatus_MAX;
const int VolumeSpec::VolumeStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* VolumeSpec_VolumeHealth_descriptor() {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_enum_descriptors[2];
}
bool VolumeSpec_VolumeHealth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VolumeSpec_VolumeHealth VolumeSpec::HEALTH_UNKNOWN;
const VolumeSpec_VolumeHealth VolumeSpec::HEALTH_SYNCHRONISING;
const VolumeSpec_VolumeHealth VolumeSpec::HEALTH_HEALTHY;
const VolumeSpec_VolumeHealth VolumeSpec::HEALTH_SUSPECT;
const VolumeSpec_VolumeHealth VolumeSpec::HEALTH_DEGRADED;
const VolumeSpec_VolumeHealth VolumeSpec::HEALTH_FAILED;
const VolumeSpec_VolumeHealth VolumeSpec::VolumeHealth_MIN;
const VolumeSpec_VolumeHealth VolumeSpec::VolumeHealth_MAX;
const int VolumeSpec::VolumeHealth_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeConfiguration::kHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeConfiguration::NodeConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dataplane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dataplane.NodeConfiguration)
}
NodeConfiguration::NodeConfiguration(const NodeConfiguration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_ = from.host_;
  // @@protoc_insertion_point(copy_constructor:dataplane.NodeConfiguration)
}

void NodeConfiguration::SharedCtor() {
  host_ = 0u;
  _cached_size_ = 0;
}

NodeConfiguration::~NodeConfiguration() {
  // @@protoc_insertion_point(destructor:dataplane.NodeConfiguration)
  SharedDtor();
}

void NodeConfiguration::SharedDtor() {
}

void NodeConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeConfiguration::descriptor() {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeConfiguration& NodeConfiguration::default_instance() {
  protobuf_dataplane_2eproto::InitDefaults();
  return *internal_default_instance();
}

NodeConfiguration* NodeConfiguration::New(::google::protobuf::Arena* arena) const {
  NodeConfiguration* n = new NodeConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:dataplane.NodeConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_ = 0u;
  _internal_metadata_.Clear();
}

bool NodeConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dataplane.NodeConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dataplane.NodeConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dataplane.NodeConfiguration)
  return false;
#undef DO_
}

void NodeConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dataplane.NodeConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 host = 4;
  if (this->host() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->host(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dataplane.NodeConfiguration)
}

::google::protobuf::uint8* NodeConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dataplane.NodeConfiguration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 host = 4;
  if (this->host() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->host(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataplane.NodeConfiguration)
  return target;
}

size_t NodeConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataplane.NodeConfiguration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 host = 4;
  if (this->host() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->host());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataplane.NodeConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeConfiguration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataplane.NodeConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataplane.NodeConfiguration)
    MergeFrom(*source);
  }
}

void NodeConfiguration::MergeFrom(const NodeConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataplane.NodeConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.host() != 0) {
    set_host(from.host());
  }
}

void NodeConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataplane.NodeConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeConfiguration::CopyFrom(const NodeConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataplane.NodeConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeConfiguration::IsInitialized() const {
  return true;
}

void NodeConfiguration::Swap(NodeConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeConfiguration::InternalSwap(NodeConfiguration* other) {
  using std::swap;
  swap(host_, other->host_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeConfiguration::GetMetadata() const {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeConfiguration

// uint32 host = 4;
void NodeConfiguration::clear_host() {
  host_ = 0u;
}
::google::protobuf::uint32 NodeConfiguration::host() const {
  // @@protoc_insertion_point(field_get:dataplane.NodeConfiguration.host)
  return host_;
}
void NodeConfiguration::set_host(::google::protobuf::uint32 value) {
  
  host_ = value;
  // @@protoc_insertion_point(field_set:dataplane.NodeConfiguration.host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ObjectMeta::ObjectMeta_LabelsEntry::ObjectMeta_LabelsEntry() {}
ObjectMeta::ObjectMeta_LabelsEntry::ObjectMeta_LabelsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ObjectMeta::ObjectMeta_LabelsEntry::GetMetadata() const {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[1];
}
void ObjectMeta::ObjectMeta_LabelsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ObjectMeta::ObjectMeta_LabelsEntry::MergeFrom(const ObjectMeta_LabelsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

ObjectMeta::ObjectMeta_AnnotationsEntry::ObjectMeta_AnnotationsEntry() {}
ObjectMeta::ObjectMeta_AnnotationsEntry::ObjectMeta_AnnotationsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata ObjectMeta::ObjectMeta_AnnotationsEntry::GetMetadata() const {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[2];
}
void ObjectMeta::ObjectMeta_AnnotationsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void ObjectMeta::ObjectMeta_AnnotationsEntry::MergeFrom(const ObjectMeta_AnnotationsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjectMeta::kNameFieldNumber;
const int ObjectMeta::kUidFieldNumber;
const int ObjectMeta::kResourceVersionFieldNumber;
const int ObjectMeta::kCreationTimestampFieldNumber;
const int ObjectMeta::kDeletionTimestampFieldNumber;
const int ObjectMeta::kDeletionGracePeriodSecondsFieldNumber;
const int ObjectMeta::kLabelsFieldNumber;
const int ObjectMeta::kAnnotationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjectMeta::ObjectMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dataplane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dataplane.ObjectMeta)
}
ObjectMeta::ObjectMeta(const ObjectMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.uid().size() > 0) {
    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  resourceversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resourceversion().size() > 0) {
    resourceversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resourceversion_);
  }
  if (from.has_creationtimestamp()) {
    creationtimestamp_ = new ::google::protobuf::Timestamp(*from.creationtimestamp_);
  } else {
    creationtimestamp_ = NULL;
  }
  if (from.has_deletiontimestamp()) {
    deletiontimestamp_ = new ::google::protobuf::Timestamp(*from.deletiontimestamp_);
  } else {
    deletiontimestamp_ = NULL;
  }
  deletiongraceperiodseconds_ = from.deletiongraceperiodseconds_;
  // @@protoc_insertion_point(copy_constructor:dataplane.ObjectMeta)
}

void ObjectMeta::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourceversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creationtimestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deletiongraceperiodseconds_) -
      reinterpret_cast<char*>(&creationtimestamp_)) + sizeof(deletiongraceperiodseconds_));
  _cached_size_ = 0;
}

ObjectMeta::~ObjectMeta() {
  // @@protoc_insertion_point(destructor:dataplane.ObjectMeta)
  SharedDtor();
}

void ObjectMeta::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourceversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete creationtimestamp_;
  if (this != internal_default_instance()) delete deletiontimestamp_;
}

void ObjectMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectMeta::descriptor() {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ObjectMeta& ObjectMeta::default_instance() {
  protobuf_dataplane_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjectMeta* ObjectMeta::New(::google::protobuf::Arena* arena) const {
  ObjectMeta* n = new ObjectMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjectMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:dataplane.ObjectMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  annotations_.Clear();
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && creationtimestamp_ != NULL) {
    delete creationtimestamp_;
  }
  creationtimestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && deletiontimestamp_ != NULL) {
    delete deletiontimestamp_;
  }
  deletiontimestamp_ = NULL;
  deletiongraceperiodseconds_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ObjectMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dataplane.ObjectMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dataplane.ObjectMeta.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string uid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->uid().data(), static_cast<int>(this->uid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dataplane.ObjectMeta.uid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string resourceVersion = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resourceversion().data(), static_cast<int>(this->resourceversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dataplane.ObjectMeta.resourceVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp creationTimestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creationtimestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp deletionTimestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deletiontimestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 deletionGracePeriodSeconds = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deletiongraceperiodseconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          ObjectMeta_LabelsEntry::Parser< ::google::protobuf::internal::MapField<
              ObjectMeta_LabelsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dataplane.ObjectMeta.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dataplane.ObjectMeta.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> annotations = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          ObjectMeta_AnnotationsEntry::Parser< ::google::protobuf::internal::MapField<
              ObjectMeta_AnnotationsEntry,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&annotations_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dataplane.ObjectMeta.AnnotationsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dataplane.ObjectMeta.AnnotationsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dataplane.ObjectMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dataplane.ObjectMeta)
  return false;
#undef DO_
}

void ObjectMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dataplane.ObjectMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dataplane.ObjectMeta.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dataplane.ObjectMeta.uid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uid(), output);
  }

  // string resourceVersion = 3;
  if (this->resourceversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourceversion().data(), static_cast<int>(this->resourceversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dataplane.ObjectMeta.resourceVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resourceversion(), output);
  }

  // .google.protobuf.Timestamp creationTimestamp = 4;
  if (this->has_creationtimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->creationtimestamp_, output);
  }

  // .google.protobuf.Timestamp deletionTimestamp = 5;
  if (this->has_deletiontimestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->deletiontimestamp_, output);
  }

  // int64 deletionGracePeriodSeconds = 6;
  if (this->deletiongraceperiodseconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->deletiongraceperiodseconds(), output);
  }

  // map<string, string> labels = 7;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "dataplane.ObjectMeta.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "dataplane.ObjectMeta.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ObjectMeta_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ObjectMeta_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> annotations = 8;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "dataplane.ObjectMeta.AnnotationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "dataplane.ObjectMeta.AnnotationsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->annotations().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ObjectMeta_AnnotationsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ObjectMeta_AnnotationsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dataplane.ObjectMeta)
}

::google::protobuf::uint8* ObjectMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dataplane.ObjectMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dataplane.ObjectMeta.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string uid = 2;
  if (this->uid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->uid().data(), static_cast<int>(this->uid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dataplane.ObjectMeta.uid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }

  // string resourceVersion = 3;
  if (this->resourceversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourceversion().data(), static_cast<int>(this->resourceversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dataplane.ObjectMeta.resourceVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resourceversion(), target);
  }

  // .google.protobuf.Timestamp creationTimestamp = 4;
  if (this->has_creationtimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->creationtimestamp_, deterministic, target);
  }

  // .google.protobuf.Timestamp deletionTimestamp = 5;
  if (this->has_deletiontimestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->deletiontimestamp_, deterministic, target);
  }

  // int64 deletionGracePeriodSeconds = 6;
  if (this->deletiongraceperiodseconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->deletiongraceperiodseconds(), target);
  }

  // map<string, string> labels = 7;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "dataplane.ObjectMeta.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "dataplane.ObjectMeta.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ObjectMeta_LabelsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ObjectMeta_LabelsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, string> annotations = 8;
  if (!this->annotations().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "dataplane.ObjectMeta.AnnotationsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "dataplane.ObjectMeta.AnnotationsEntry.value");
      }
    };

    if (deterministic &&
        this->annotations().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->annotations().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ObjectMeta_AnnotationsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(annotations_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ObjectMeta_AnnotationsEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->annotations().begin();
          it != this->annotations().end(); ++it) {
        entry.reset(annotations_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataplane.ObjectMeta)
  return target;
}

size_t ObjectMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataplane.ObjectMeta)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> labels = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<ObjectMeta_LabelsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, string> annotations = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->annotations_size());
  {
    ::google::protobuf::scoped_ptr<ObjectMeta_AnnotationsEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->annotations().begin();
        it != this->annotations().end(); ++it) {
      entry.reset(annotations_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string uid = 2;
  if (this->uid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uid());
  }

  // string resourceVersion = 3;
  if (this->resourceversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resourceversion());
  }

  // .google.protobuf.Timestamp creationTimestamp = 4;
  if (this->has_creationtimestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->creationtimestamp_);
  }

  // .google.protobuf.Timestamp deletionTimestamp = 5;
  if (this->has_deletiontimestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->deletiontimestamp_);
  }

  // int64 deletionGracePeriodSeconds = 6;
  if (this->deletiongraceperiodseconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->deletiongraceperiodseconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataplane.ObjectMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ObjectMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataplane.ObjectMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataplane.ObjectMeta)
    MergeFrom(*source);
  }
}

void ObjectMeta::MergeFrom(const ObjectMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataplane.ObjectMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  annotations_.MergeFrom(from.annotations_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.uid().size() > 0) {

    uid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uid_);
  }
  if (from.resourceversion().size() > 0) {

    resourceversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resourceversion_);
  }
  if (from.has_creationtimestamp()) {
    mutable_creationtimestamp()->::google::protobuf::Timestamp::MergeFrom(from.creationtimestamp());
  }
  if (from.has_deletiontimestamp()) {
    mutable_deletiontimestamp()->::google::protobuf::Timestamp::MergeFrom(from.deletiontimestamp());
  }
  if (from.deletiongraceperiodseconds() != 0) {
    set_deletiongraceperiodseconds(from.deletiongraceperiodseconds());
  }
}

void ObjectMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataplane.ObjectMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectMeta::CopyFrom(const ObjectMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataplane.ObjectMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectMeta::IsInitialized() const {
  return true;
}

void ObjectMeta::Swap(ObjectMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjectMeta::InternalSwap(ObjectMeta* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  annotations_.Swap(&other->annotations_);
  name_.Swap(&other->name_);
  uid_.Swap(&other->uid_);
  resourceversion_.Swap(&other->resourceversion_);
  swap(creationtimestamp_, other->creationtimestamp_);
  swap(deletiontimestamp_, other->deletiontimestamp_);
  swap(deletiongraceperiodseconds_, other->deletiongraceperiodseconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObjectMeta::GetMetadata() const {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjectMeta

// string name = 1;
void ObjectMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ObjectMeta::name() const {
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.name)
  return name_.GetNoArena();
}
void ObjectMeta::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataplane.ObjectMeta.name)
}
#if LANG_CXX11
void ObjectMeta::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataplane.ObjectMeta.name)
}
#endif
void ObjectMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataplane.ObjectMeta.name)
}
void ObjectMeta::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataplane.ObjectMeta.name)
}
::std::string* ObjectMeta::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:dataplane.ObjectMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectMeta::release_name() {
  // @@protoc_insertion_point(field_release:dataplane.ObjectMeta.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:dataplane.ObjectMeta.name)
}

// string uid = 2;
void ObjectMeta::clear_uid() {
  uid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ObjectMeta::uid() const {
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.uid)
  return uid_.GetNoArena();
}
void ObjectMeta::set_uid(const ::std::string& value) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataplane.ObjectMeta.uid)
}
#if LANG_CXX11
void ObjectMeta::set_uid(::std::string&& value) {
  
  uid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataplane.ObjectMeta.uid)
}
#endif
void ObjectMeta::set_uid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataplane.ObjectMeta.uid)
}
void ObjectMeta::set_uid(const char* value, size_t size) {
  
  uid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataplane.ObjectMeta.uid)
}
::std::string* ObjectMeta::mutable_uid() {
  
  // @@protoc_insertion_point(field_mutable:dataplane.ObjectMeta.uid)
  return uid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectMeta::release_uid() {
  // @@protoc_insertion_point(field_release:dataplane.ObjectMeta.uid)
  
  return uid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectMeta::set_allocated_uid(::std::string* uid) {
  if (uid != NULL) {
    
  } else {
    
  }
  uid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uid);
  // @@protoc_insertion_point(field_set_allocated:dataplane.ObjectMeta.uid)
}

// string resourceVersion = 3;
void ObjectMeta::clear_resourceversion() {
  resourceversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ObjectMeta::resourceversion() const {
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.resourceVersion)
  return resourceversion_.GetNoArena();
}
void ObjectMeta::set_resourceversion(const ::std::string& value) {
  
  resourceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataplane.ObjectMeta.resourceVersion)
}
#if LANG_CXX11
void ObjectMeta::set_resourceversion(::std::string&& value) {
  
  resourceversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataplane.ObjectMeta.resourceVersion)
}
#endif
void ObjectMeta::set_resourceversion(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resourceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataplane.ObjectMeta.resourceVersion)
}
void ObjectMeta::set_resourceversion(const char* value, size_t size) {
  
  resourceversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataplane.ObjectMeta.resourceVersion)
}
::std::string* ObjectMeta::mutable_resourceversion() {
  
  // @@protoc_insertion_point(field_mutable:dataplane.ObjectMeta.resourceVersion)
  return resourceversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ObjectMeta::release_resourceversion() {
  // @@protoc_insertion_point(field_release:dataplane.ObjectMeta.resourceVersion)
  
  return resourceversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ObjectMeta::set_allocated_resourceversion(::std::string* resourceversion) {
  if (resourceversion != NULL) {
    
  } else {
    
  }
  resourceversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourceversion);
  // @@protoc_insertion_point(field_set_allocated:dataplane.ObjectMeta.resourceVersion)
}

// .google.protobuf.Timestamp creationTimestamp = 4;
bool ObjectMeta::has_creationtimestamp() const {
  return this != internal_default_instance() && creationtimestamp_ != NULL;
}
void ObjectMeta::clear_creationtimestamp() {
  if (GetArenaNoVirtual() == NULL && creationtimestamp_ != NULL) delete creationtimestamp_;
  creationtimestamp_ = NULL;
}
const ::google::protobuf::Timestamp& ObjectMeta::creationtimestamp() const {
  const ::google::protobuf::Timestamp* p = creationtimestamp_;
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.creationTimestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
::google::protobuf::Timestamp* ObjectMeta::mutable_creationtimestamp() {
  
  if (creationtimestamp_ == NULL) {
    creationtimestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.ObjectMeta.creationTimestamp)
  return creationtimestamp_;
}
::google::protobuf::Timestamp* ObjectMeta::release_creationtimestamp() {
  // @@protoc_insertion_point(field_release:dataplane.ObjectMeta.creationTimestamp)
  
  ::google::protobuf::Timestamp* temp = creationtimestamp_;
  creationtimestamp_ = NULL;
  return temp;
}
void ObjectMeta::set_allocated_creationtimestamp(::google::protobuf::Timestamp* creationtimestamp) {
  delete creationtimestamp_;
  if (creationtimestamp != NULL && creationtimestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_creationtimestamp = new ::google::protobuf::Timestamp;
    new_creationtimestamp->CopyFrom(*creationtimestamp);
    creationtimestamp = new_creationtimestamp;
  }
  creationtimestamp_ = creationtimestamp;
  if (creationtimestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.ObjectMeta.creationTimestamp)
}

// .google.protobuf.Timestamp deletionTimestamp = 5;
bool ObjectMeta::has_deletiontimestamp() const {
  return this != internal_default_instance() && deletiontimestamp_ != NULL;
}
void ObjectMeta::clear_deletiontimestamp() {
  if (GetArenaNoVirtual() == NULL && deletiontimestamp_ != NULL) delete deletiontimestamp_;
  deletiontimestamp_ = NULL;
}
const ::google::protobuf::Timestamp& ObjectMeta::deletiontimestamp() const {
  const ::google::protobuf::Timestamp* p = deletiontimestamp_;
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.deletionTimestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
::google::protobuf::Timestamp* ObjectMeta::mutable_deletiontimestamp() {
  
  if (deletiontimestamp_ == NULL) {
    deletiontimestamp_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.ObjectMeta.deletionTimestamp)
  return deletiontimestamp_;
}
::google::protobuf::Timestamp* ObjectMeta::release_deletiontimestamp() {
  // @@protoc_insertion_point(field_release:dataplane.ObjectMeta.deletionTimestamp)
  
  ::google::protobuf::Timestamp* temp = deletiontimestamp_;
  deletiontimestamp_ = NULL;
  return temp;
}
void ObjectMeta::set_allocated_deletiontimestamp(::google::protobuf::Timestamp* deletiontimestamp) {
  delete deletiontimestamp_;
  if (deletiontimestamp != NULL && deletiontimestamp->GetArena() != NULL) {
    ::google::protobuf::Timestamp* new_deletiontimestamp = new ::google::protobuf::Timestamp;
    new_deletiontimestamp->CopyFrom(*deletiontimestamp);
    deletiontimestamp = new_deletiontimestamp;
  }
  deletiontimestamp_ = deletiontimestamp;
  if (deletiontimestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.ObjectMeta.deletionTimestamp)
}

// int64 deletionGracePeriodSeconds = 6;
void ObjectMeta::clear_deletiongraceperiodseconds() {
  deletiongraceperiodseconds_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ObjectMeta::deletiongraceperiodseconds() const {
  // @@protoc_insertion_point(field_get:dataplane.ObjectMeta.deletionGracePeriodSeconds)
  return deletiongraceperiodseconds_;
}
void ObjectMeta::set_deletiongraceperiodseconds(::google::protobuf::int64 value) {
  
  deletiongraceperiodseconds_ = value;
  // @@protoc_insertion_point(field_set:dataplane.ObjectMeta.deletionGracePeriodSeconds)
}

// map<string, string> labels = 7;
int ObjectMeta::labels_size() const {
  return labels_.size();
}
void ObjectMeta::clear_labels() {
  labels_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
ObjectMeta::labels() const {
  // @@protoc_insertion_point(field_map:dataplane.ObjectMeta.labels)
  return labels_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
ObjectMeta::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:dataplane.ObjectMeta.labels)
  return labels_.MutableMap();
}

// map<string, string> annotations = 8;
int ObjectMeta::annotations_size() const {
  return annotations_.size();
}
void ObjectMeta::clear_annotations() {
  annotations_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::std::string >&
ObjectMeta::annotations() const {
  // @@protoc_insertion_point(field_map:dataplane.ObjectMeta.annotations)
  return annotations_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::std::string >*
ObjectMeta::mutable_annotations() {
  // @@protoc_insertion_point(field_mutable_map:dataplane.ObjectMeta.annotations)
  return annotations_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Host::kMetadataFieldNumber;
const int Host::kIdFieldNumber;
const int Host::kActiveFieldNumber;
const int Host::kAddressFieldNumber;
const int Host::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Host::Host()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dataplane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dataplane.Host)
}
Host::Host(const Host& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.address().size() > 0) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_metadata()) {
    metadata_ = new ::dataplane::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:dataplane.Host)
}

void Host::SharedCtor() {
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(port_));
  _cached_size_ = 0;
}

Host::~Host() {
  // @@protoc_insertion_point(destructor:dataplane.Host)
  SharedDtor();
}

void Host::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
}

void Host::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Host::descriptor() {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Host& Host::default_instance() {
  protobuf_dataplane_2eproto::InitDefaults();
  return *internal_default_instance();
}

Host* Host::New(::google::protobuf::Arena* arena) const {
  Host* n = new Host;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Host::Clear() {
// @@protoc_insertion_point(message_clear_start:dataplane.Host)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&id_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool Host::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dataplane.Host)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dataplane.ObjectMeta metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool active = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string address = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "dataplane.Host.address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dataplane.Host)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dataplane.Host)
  return false;
#undef DO_
}

void Host::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dataplane.Host)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dataplane.ObjectMeta metadata = 1;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->metadata_, output);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // bool active = 3;
  if (this->active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dataplane.Host.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->address(), output);
  }

  // int32 port = 5;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dataplane.Host)
}

::google::protobuf::uint8* Host::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dataplane.Host)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dataplane.ObjectMeta metadata = 1;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->metadata_, deterministic, target);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // bool active = 3;
  if (this->active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  // string address = 4;
  if (this->address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "dataplane.Host.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->address(), target);
  }

  // int32 port = 5;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataplane.Host)
  return target;
}

size_t Host::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataplane.Host)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string address = 4;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  // .dataplane.ObjectMeta metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // uint32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // bool active = 3;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // int32 port = 5;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Host::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataplane.Host)
  GOOGLE_DCHECK_NE(&from, this);
  const Host* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Host>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataplane.Host)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataplane.Host)
    MergeFrom(*source);
  }
}

void Host::MergeFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataplane.Host)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.has_metadata()) {
    mutable_metadata()->::dataplane::ObjectMeta::MergeFrom(from.metadata());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.active() != 0) {
    set_active(from.active());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void Host::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataplane.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Host::CopyFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataplane.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Host::IsInitialized() const {
  return true;
}

void Host::Swap(Host* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Host::InternalSwap(Host* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(metadata_, other->metadata_);
  swap(id_, other->id_);
  swap(active_, other->active_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Host::GetMetadata() const {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Host

// .dataplane.ObjectMeta metadata = 1;
bool Host::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void Host::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::dataplane::ObjectMeta& Host::metadata() const {
  const ::dataplane::ObjectMeta* p = metadata_;
  // @@protoc_insertion_point(field_get:dataplane.Host.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::dataplane::ObjectMeta*>(
      &::dataplane::_ObjectMeta_default_instance_);
}
::dataplane::ObjectMeta* Host::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::dataplane::ObjectMeta;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.Host.metadata)
  return metadata_;
}
::dataplane::ObjectMeta* Host::release_metadata() {
  // @@protoc_insertion_point(field_release:dataplane.Host.metadata)
  
  ::dataplane::ObjectMeta* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Host::set_allocated_metadata(::dataplane::ObjectMeta* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.Host.metadata)
}

// uint32 id = 2;
void Host::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 Host::id() const {
  // @@protoc_insertion_point(field_get:dataplane.Host.id)
  return id_;
}
void Host::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dataplane.Host.id)
}

// bool active = 3;
void Host::clear_active() {
  active_ = false;
}
bool Host::active() const {
  // @@protoc_insertion_point(field_get:dataplane.Host.active)
  return active_;
}
void Host::set_active(bool value) {
  
  active_ = value;
  // @@protoc_insertion_point(field_set:dataplane.Host.active)
}

// string address = 4;
void Host::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Host::address() const {
  // @@protoc_insertion_point(field_get:dataplane.Host.address)
  return address_.GetNoArena();
}
void Host::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataplane.Host.address)
}
#if LANG_CXX11
void Host::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataplane.Host.address)
}
#endif
void Host::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataplane.Host.address)
}
void Host::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataplane.Host.address)
}
::std::string* Host::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:dataplane.Host.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Host::release_address() {
  // @@protoc_insertion_point(field_release:dataplane.Host.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Host::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:dataplane.Host.address)
}

// int32 port = 5;
void Host::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 Host::port() const {
  // @@protoc_insertion_point(field_get:dataplane.Host.port)
  return port_;
}
void Host::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:dataplane.Host.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Volume::kMetadataFieldNumber;
const int Volume::kSizeFieldNumber;
const int Volume::kPresentationFieldNumber;
const int Volume::kMasterFieldNumber;
const int Volume::kReplicasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Volume::Volume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dataplane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dataplane.Volume)
}
Volume::Volume(const Volume& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      replicas_(from.replicas_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::dataplane::ObjectMeta(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  if (from.has_presentation()) {
    presentation_ = new ::dataplane::PresentationSpec(*from.presentation_);
  } else {
    presentation_ = NULL;
  }
  if (from.has_master()) {
    master_ = new ::dataplane::VolumeSpec(*from.master_);
  } else {
    master_ = NULL;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:dataplane.Volume)
}

void Volume::SharedCtor() {
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(size_));
  _cached_size_ = 0;
}

Volume::~Volume() {
  // @@protoc_insertion_point(destructor:dataplane.Volume)
  SharedDtor();
}

void Volume::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete presentation_;
  if (this != internal_default_instance()) delete master_;
}

void Volume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Volume::descriptor() {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Volume& Volume::default_instance() {
  protobuf_dataplane_2eproto::InitDefaults();
  return *internal_default_instance();
}

Volume* Volume::New(::google::protobuf::Arena* arena) const {
  Volume* n = new Volume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Volume::Clear() {
// @@protoc_insertion_point(message_clear_start:dataplane.Volume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replicas_.Clear();
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  if (GetArenaNoVirtual() == NULL && presentation_ != NULL) {
    delete presentation_;
  }
  presentation_ = NULL;
  if (GetArenaNoVirtual() == NULL && master_ != NULL) {
    delete master_;
  }
  master_ = NULL;
  size_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool Volume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dataplane.Volume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .dataplane.ObjectMeta metadata = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dataplane.PresentationSpec presentation = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_presentation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dataplane.VolumeSpec master = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .dataplane.VolumeSpec replicas = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dataplane.Volume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dataplane.Volume)
  return false;
#undef DO_
}

void Volume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dataplane.Volume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dataplane.ObjectMeta metadata = 1;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->metadata_, output);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // .dataplane.PresentationSpec presentation = 3;
  if (this->has_presentation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->presentation_, output);
  }

  // .dataplane.VolumeSpec master = 4;
  if (this->has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->master_, output);
  }

  // repeated .dataplane.VolumeSpec replicas = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->replicas_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->replicas(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dataplane.Volume)
}

::google::protobuf::uint8* Volume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dataplane.Volume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dataplane.ObjectMeta metadata = 1;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->metadata_, deterministic, target);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // .dataplane.PresentationSpec presentation = 3;
  if (this->has_presentation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->presentation_, deterministic, target);
  }

  // .dataplane.VolumeSpec master = 4;
  if (this->has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->master_, deterministic, target);
  }

  // repeated .dataplane.VolumeSpec replicas = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->replicas_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->replicas(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataplane.Volume)
  return target;
}

size_t Volume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataplane.Volume)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .dataplane.VolumeSpec replicas = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->replicas_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replicas(static_cast<int>(i)));
    }
  }

  // .dataplane.ObjectMeta metadata = 1;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->metadata_);
  }

  // .dataplane.PresentationSpec presentation = 3;
  if (this->has_presentation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->presentation_);
  }

  // .dataplane.VolumeSpec master = 4;
  if (this->has_master()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->master_);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Volume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataplane.Volume)
  GOOGLE_DCHECK_NE(&from, this);
  const Volume* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Volume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataplane.Volume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataplane.Volume)
    MergeFrom(*source);
  }
}

void Volume::MergeFrom(const Volume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataplane.Volume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replicas_.MergeFrom(from.replicas_);
  if (from.has_metadata()) {
    mutable_metadata()->::dataplane::ObjectMeta::MergeFrom(from.metadata());
  }
  if (from.has_presentation()) {
    mutable_presentation()->::dataplane::PresentationSpec::MergeFrom(from.presentation());
  }
  if (from.has_master()) {
    mutable_master()->::dataplane::VolumeSpec::MergeFrom(from.master());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
}

void Volume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataplane.Volume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Volume::CopyFrom(const Volume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataplane.Volume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Volume::IsInitialized() const {
  return true;
}

void Volume::Swap(Volume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Volume::InternalSwap(Volume* other) {
  using std::swap;
  replicas_.InternalSwap(&other->replicas_);
  swap(metadata_, other->metadata_);
  swap(presentation_, other->presentation_);
  swap(master_, other->master_);
  swap(size_, other->size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Volume::GetMetadata() const {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Volume

// .dataplane.ObjectMeta metadata = 1;
bool Volume::has_metadata() const {
  return this != internal_default_instance() && metadata_ != NULL;
}
void Volume::clear_metadata() {
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) delete metadata_;
  metadata_ = NULL;
}
const ::dataplane::ObjectMeta& Volume::metadata() const {
  const ::dataplane::ObjectMeta* p = metadata_;
  // @@protoc_insertion_point(field_get:dataplane.Volume.metadata)
  return p != NULL ? *p : *reinterpret_cast<const ::dataplane::ObjectMeta*>(
      &::dataplane::_ObjectMeta_default_instance_);
}
::dataplane::ObjectMeta* Volume::mutable_metadata() {
  
  if (metadata_ == NULL) {
    metadata_ = new ::dataplane::ObjectMeta;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.Volume.metadata)
  return metadata_;
}
::dataplane::ObjectMeta* Volume::release_metadata() {
  // @@protoc_insertion_point(field_release:dataplane.Volume.metadata)
  
  ::dataplane::ObjectMeta* temp = metadata_;
  metadata_ = NULL;
  return temp;
}
void Volume::set_allocated_metadata(::dataplane::ObjectMeta* metadata) {
  delete metadata_;
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.Volume.metadata)
}

// uint64 size = 2;
void Volume::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Volume::size() const {
  // @@protoc_insertion_point(field_get:dataplane.Volume.size)
  return size_;
}
void Volume::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:dataplane.Volume.size)
}

// .dataplane.PresentationSpec presentation = 3;
bool Volume::has_presentation() const {
  return this != internal_default_instance() && presentation_ != NULL;
}
void Volume::clear_presentation() {
  if (GetArenaNoVirtual() == NULL && presentation_ != NULL) delete presentation_;
  presentation_ = NULL;
}
const ::dataplane::PresentationSpec& Volume::presentation() const {
  const ::dataplane::PresentationSpec* p = presentation_;
  // @@protoc_insertion_point(field_get:dataplane.Volume.presentation)
  return p != NULL ? *p : *reinterpret_cast<const ::dataplane::PresentationSpec*>(
      &::dataplane::_PresentationSpec_default_instance_);
}
::dataplane::PresentationSpec* Volume::mutable_presentation() {
  
  if (presentation_ == NULL) {
    presentation_ = new ::dataplane::PresentationSpec;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.Volume.presentation)
  return presentation_;
}
::dataplane::PresentationSpec* Volume::release_presentation() {
  // @@protoc_insertion_point(field_release:dataplane.Volume.presentation)
  
  ::dataplane::PresentationSpec* temp = presentation_;
  presentation_ = NULL;
  return temp;
}
void Volume::set_allocated_presentation(::dataplane::PresentationSpec* presentation) {
  delete presentation_;
  presentation_ = presentation;
  if (presentation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.Volume.presentation)
}

// .dataplane.VolumeSpec master = 4;
bool Volume::has_master() const {
  return this != internal_default_instance() && master_ != NULL;
}
void Volume::clear_master() {
  if (GetArenaNoVirtual() == NULL && master_ != NULL) delete master_;
  master_ = NULL;
}
const ::dataplane::VolumeSpec& Volume::master() const {
  const ::dataplane::VolumeSpec* p = master_;
  // @@protoc_insertion_point(field_get:dataplane.Volume.master)
  return p != NULL ? *p : *reinterpret_cast<const ::dataplane::VolumeSpec*>(
      &::dataplane::_VolumeSpec_default_instance_);
}
::dataplane::VolumeSpec* Volume::mutable_master() {
  
  if (master_ == NULL) {
    master_ = new ::dataplane::VolumeSpec;
  }
  // @@protoc_insertion_point(field_mutable:dataplane.Volume.master)
  return master_;
}
::dataplane::VolumeSpec* Volume::release_master() {
  // @@protoc_insertion_point(field_release:dataplane.Volume.master)
  
  ::dataplane::VolumeSpec* temp = master_;
  master_ = NULL;
  return temp;
}
void Volume::set_allocated_master(::dataplane::VolumeSpec* master) {
  delete master_;
  master_ = master;
  if (master) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:dataplane.Volume.master)
}

// repeated .dataplane.VolumeSpec replicas = 5;
int Volume::replicas_size() const {
  return replicas_.size();
}
void Volume::clear_replicas() {
  replicas_.Clear();
}
const ::dataplane::VolumeSpec& Volume::replicas(int index) const {
  // @@protoc_insertion_point(field_get:dataplane.Volume.replicas)
  return replicas_.Get(index);
}
::dataplane::VolumeSpec* Volume::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:dataplane.Volume.replicas)
  return replicas_.Mutable(index);
}
::dataplane::VolumeSpec* Volume::add_replicas() {
  // @@protoc_insertion_point(field_add:dataplane.Volume.replicas)
  return replicas_.Add();
}
::google::protobuf::RepeatedPtrField< ::dataplane::VolumeSpec >*
Volume::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:dataplane.Volume.replicas)
  return &replicas_;
}
const ::google::protobuf::RepeatedPtrField< ::dataplane::VolumeSpec >&
Volume::replicas() const {
  // @@protoc_insertion_point(field_list:dataplane.Volume.replicas)
  return replicas_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PresentationSpec::kIdFieldNumber;
const int PresentationSpec::kDeviceNumberFieldNumber;
const int PresentationSpec::kReadinessFieldNumber;
const int PresentationSpec::kMountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PresentationSpec::PresentationSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dataplane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dataplane.PresentationSpec)
}
PresentationSpec::PresentationSpec(const PresentationSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mounts_) -
    reinterpret_cast<char*>(&id_)) + sizeof(mounts_));
  // @@protoc_insertion_point(copy_constructor:dataplane.PresentationSpec)
}

void PresentationSpec::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mounts_) -
      reinterpret_cast<char*>(&id_)) + sizeof(mounts_));
  _cached_size_ = 0;
}

PresentationSpec::~PresentationSpec() {
  // @@protoc_insertion_point(destructor:dataplane.PresentationSpec)
  SharedDtor();
}

void PresentationSpec::SharedDtor() {
}

void PresentationSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PresentationSpec::descriptor() {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PresentationSpec& PresentationSpec::default_instance() {
  protobuf_dataplane_2eproto::InitDefaults();
  return *internal_default_instance();
}

PresentationSpec* PresentationSpec::New(::google::protobuf::Arena* arena) const {
  PresentationSpec* n = new PresentationSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PresentationSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:dataplane.PresentationSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mounts_) -
      reinterpret_cast<char*>(&id_)) + sizeof(mounts_));
  _internal_metadata_.Clear();
}

bool PresentationSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dataplane.PresentationSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 deviceNumber = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devicenumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dataplane.PresentationSpec.VolumeReadiness readiness = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_readiness(static_cast< ::dataplane::PresentationSpec_VolumeReadiness >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mounts = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mounts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dataplane.PresentationSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dataplane.PresentationSpec)
  return false;
#undef DO_
}

void PresentationSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dataplane.PresentationSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // uint32 deviceNumber = 2;
  if (this->devicenumber() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->devicenumber(), output);
  }

  // .dataplane.PresentationSpec.VolumeReadiness readiness = 3;
  if (this->readiness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->readiness(), output);
  }

  // int32 mounts = 4;
  if (this->mounts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mounts(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dataplane.PresentationSpec)
}

::google::protobuf::uint8* PresentationSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dataplane.PresentationSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // uint32 deviceNumber = 2;
  if (this->devicenumber() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->devicenumber(), target);
  }

  // .dataplane.PresentationSpec.VolumeReadiness readiness = 3;
  if (this->readiness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->readiness(), target);
  }

  // int32 mounts = 4;
  if (this->mounts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mounts(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataplane.PresentationSpec)
  return target;
}

size_t PresentationSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataplane.PresentationSpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // uint32 deviceNumber = 2;
  if (this->devicenumber() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->devicenumber());
  }

  // .dataplane.PresentationSpec.VolumeReadiness readiness = 3;
  if (this->readiness() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->readiness());
  }

  // int32 mounts = 4;
  if (this->mounts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mounts());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PresentationSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataplane.PresentationSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const PresentationSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PresentationSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataplane.PresentationSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataplane.PresentationSpec)
    MergeFrom(*source);
  }
}

void PresentationSpec::MergeFrom(const PresentationSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataplane.PresentationSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.devicenumber() != 0) {
    set_devicenumber(from.devicenumber());
  }
  if (from.readiness() != 0) {
    set_readiness(from.readiness());
  }
  if (from.mounts() != 0) {
    set_mounts(from.mounts());
  }
}

void PresentationSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataplane.PresentationSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PresentationSpec::CopyFrom(const PresentationSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataplane.PresentationSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresentationSpec::IsInitialized() const {
  return true;
}

void PresentationSpec::Swap(PresentationSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PresentationSpec::InternalSwap(PresentationSpec* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(devicenumber_, other->devicenumber_);
  swap(readiness_, other->readiness_);
  swap(mounts_, other->mounts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PresentationSpec::GetMetadata() const {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PresentationSpec

// uint32 id = 1;
void PresentationSpec::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 PresentationSpec::id() const {
  // @@protoc_insertion_point(field_get:dataplane.PresentationSpec.id)
  return id_;
}
void PresentationSpec::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dataplane.PresentationSpec.id)
}

// uint32 deviceNumber = 2;
void PresentationSpec::clear_devicenumber() {
  devicenumber_ = 0u;
}
::google::protobuf::uint32 PresentationSpec::devicenumber() const {
  // @@protoc_insertion_point(field_get:dataplane.PresentationSpec.deviceNumber)
  return devicenumber_;
}
void PresentationSpec::set_devicenumber(::google::protobuf::uint32 value) {
  
  devicenumber_ = value;
  // @@protoc_insertion_point(field_set:dataplane.PresentationSpec.deviceNumber)
}

// .dataplane.PresentationSpec.VolumeReadiness readiness = 3;
void PresentationSpec::clear_readiness() {
  readiness_ = 0;
}
::dataplane::PresentationSpec_VolumeReadiness PresentationSpec::readiness() const {
  // @@protoc_insertion_point(field_get:dataplane.PresentationSpec.readiness)
  return static_cast< ::dataplane::PresentationSpec_VolumeReadiness >(readiness_);
}
void PresentationSpec::set_readiness(::dataplane::PresentationSpec_VolumeReadiness value) {
  
  readiness_ = value;
  // @@protoc_insertion_point(field_set:dataplane.PresentationSpec.readiness)
}

// int32 mounts = 4;
void PresentationSpec::clear_mounts() {
  mounts_ = 0;
}
::google::protobuf::int32 PresentationSpec::mounts() const {
  // @@protoc_insertion_point(field_get:dataplane.PresentationSpec.mounts)
  return mounts_;
}
void PresentationSpec::set_mounts(::google::protobuf::int32 value) {
  
  mounts_ = value;
  // @@protoc_insertion_point(field_set:dataplane.PresentationSpec.mounts)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VolumeSpec::kIdFieldNumber;
const int VolumeSpec::kStatusFieldNumber;
const int VolumeSpec::kHealthFieldNumber;
const int VolumeSpec::kHostFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VolumeSpec::VolumeSpec()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_dataplane_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:dataplane.VolumeSpec)
}
VolumeSpec::VolumeSpec(const VolumeSpec& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&host_) -
    reinterpret_cast<char*>(&id_)) + sizeof(host_));
  // @@protoc_insertion_point(copy_constructor:dataplane.VolumeSpec)
}

void VolumeSpec::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_) -
      reinterpret_cast<char*>(&id_)) + sizeof(host_));
  _cached_size_ = 0;
}

VolumeSpec::~VolumeSpec() {
  // @@protoc_insertion_point(destructor:dataplane.VolumeSpec)
  SharedDtor();
}

void VolumeSpec::SharedDtor() {
}

void VolumeSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VolumeSpec::descriptor() {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VolumeSpec& VolumeSpec::default_instance() {
  protobuf_dataplane_2eproto::InitDefaults();
  return *internal_default_instance();
}

VolumeSpec* VolumeSpec::New(::google::protobuf::Arena* arena) const {
  VolumeSpec* n = new VolumeSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VolumeSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:dataplane.VolumeSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_) -
      reinterpret_cast<char*>(&id_)) + sizeof(host_));
  _internal_metadata_.Clear();
}

bool VolumeSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dataplane.VolumeSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dataplane.VolumeSpec.VolumeStatus status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::dataplane::VolumeSpec_VolumeStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .dataplane.VolumeSpec.VolumeHealth health = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_health(static_cast< ::dataplane::VolumeSpec_VolumeHealth >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 host = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dataplane.VolumeSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dataplane.VolumeSpec)
  return false;
#undef DO_
}

void VolumeSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dataplane.VolumeSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // .dataplane.VolumeSpec.VolumeStatus status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // .dataplane.VolumeSpec.VolumeHealth health = 3;
  if (this->health() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->health(), output);
  }

  // uint32 host = 4;
  if (this->host() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->host(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:dataplane.VolumeSpec)
}

::google::protobuf::uint8* VolumeSpec::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:dataplane.VolumeSpec)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // .dataplane.VolumeSpec.VolumeStatus status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // .dataplane.VolumeSpec.VolumeHealth health = 3;
  if (this->health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->health(), target);
  }

  // uint32 host = 4;
  if (this->host() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->host(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataplane.VolumeSpec)
  return target;
}

size_t VolumeSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataplane.VolumeSpec)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  // .dataplane.VolumeSpec.VolumeStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // .dataplane.VolumeSpec.VolumeHealth health = 3;
  if (this->health() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->health());
  }

  // uint32 host = 4;
  if (this->host() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->host());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VolumeSpec::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataplane.VolumeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  const VolumeSpec* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VolumeSpec>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataplane.VolumeSpec)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataplane.VolumeSpec)
    MergeFrom(*source);
  }
}

void VolumeSpec::MergeFrom(const VolumeSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataplane.VolumeSpec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.health() != 0) {
    set_health(from.health());
  }
  if (from.host() != 0) {
    set_host(from.host());
  }
}

void VolumeSpec::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataplane.VolumeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VolumeSpec::CopyFrom(const VolumeSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataplane.VolumeSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolumeSpec::IsInitialized() const {
  return true;
}

void VolumeSpec::Swap(VolumeSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VolumeSpec::InternalSwap(VolumeSpec* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(status_, other->status_);
  swap(health_, other->health_);
  swap(host_, other->host_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VolumeSpec::GetMetadata() const {
  protobuf_dataplane_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dataplane_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VolumeSpec

// uint32 id = 1;
void VolumeSpec::clear_id() {
  id_ = 0u;
}
::google::protobuf::uint32 VolumeSpec::id() const {
  // @@protoc_insertion_point(field_get:dataplane.VolumeSpec.id)
  return id_;
}
void VolumeSpec::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:dataplane.VolumeSpec.id)
}

// .dataplane.VolumeSpec.VolumeStatus status = 2;
void VolumeSpec::clear_status() {
  status_ = 0;
}
::dataplane::VolumeSpec_VolumeStatus VolumeSpec::status() const {
  // @@protoc_insertion_point(field_get:dataplane.VolumeSpec.status)
  return static_cast< ::dataplane::VolumeSpec_VolumeStatus >(status_);
}
void VolumeSpec::set_status(::dataplane::VolumeSpec_VolumeStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:dataplane.VolumeSpec.status)
}

// .dataplane.VolumeSpec.VolumeHealth health = 3;
void VolumeSpec::clear_health() {
  health_ = 0;
}
::dataplane::VolumeSpec_VolumeHealth VolumeSpec::health() const {
  // @@protoc_insertion_point(field_get:dataplane.VolumeSpec.health)
  return static_cast< ::dataplane::VolumeSpec_VolumeHealth >(health_);
}
void VolumeSpec::set_health(::dataplane::VolumeSpec_VolumeHealth value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:dataplane.VolumeSpec.health)
}

// uint32 host = 4;
void VolumeSpec::clear_host() {
  host_ = 0u;
}
::google::protobuf::uint32 VolumeSpec::host() const {
  // @@protoc_insertion_point(field_get:dataplane.VolumeSpec.host)
  return host_;
}
void VolumeSpec::set_host(::google::protobuf::uint32 value) {
  
  host_ = value;
  // @@protoc_insertion_point(field_set:dataplane.VolumeSpec.host)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dataplane

// @@protoc_insertion_point(global_scope)
