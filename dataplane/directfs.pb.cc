// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directfs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "directfs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace storageos_rpc {
class DfsHostCredentialsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DfsHostCredentials>
     _instance;
} _DfsHostCredentials_default_instance_;
class DfsHostDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DfsHost>
     _instance;
} _DfsHost_default_instance_;
class DfsHostListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DfsHostList>
     _instance;
} _DfsHostList_default_instance_;
class DfsHostListQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DfsHostListQuery>
     _instance;
} _DfsHostListQuery_default_instance_;
class DfsVolumeCredentialsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DfsVolumeCredentials>
     _instance;
} _DfsVolumeCredentials_default_instance_;
class DfsVolumeStatisticsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DfsVolumeStatistics>
     _instance;
} _DfsVolumeStatistics_default_instance_;
class DfsVolumeStatusDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DfsVolumeStatus>
     _instance;
} _DfsVolumeStatus_default_instance_;
class DfsVolumeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DfsVolume>
     _instance;
} _DfsVolume_default_instance_;
class DfsVolumeListDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DfsVolumeList>
     _instance;
} _DfsVolumeList_default_instance_;
class DfsVolumeListQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DfsVolumeListQuery>
     _instance;
} _DfsVolumeListQuery_default_instance_;

namespace protobuf_directfs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsHostCredentials, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsHost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsHost, cc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsHost, host_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsHost, hostname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsHost, port_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsHost, credentials_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsHostList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsHostList, hosts_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsHostListQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsHostListQuery, host_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolumeCredentials, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolumeStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolumeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolumeStatus, conn_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolumeStatus, peer_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolumeStatus, peer_af_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolume, cc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolume, volume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolume, host_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolume, credentials_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolume, stats_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolume, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolumeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolumeList, volumes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolumeListQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DfsVolumeListQuery, volume_ids_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(DfsHostCredentials)},
  { 5, -1, sizeof(DfsHost)},
  { 15, -1, sizeof(DfsHostList)},
  { 21, -1, sizeof(DfsHostListQuery)},
  { 27, -1, sizeof(DfsVolumeCredentials)},
  { 32, -1, sizeof(DfsVolumeStatistics)},
  { 37, -1, sizeof(DfsVolumeStatus)},
  { 45, -1, sizeof(DfsVolume)},
  { 56, -1, sizeof(DfsVolumeList)},
  { 62, -1, sizeof(DfsVolumeListQuery)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_DfsHostCredentials_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DfsHost_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DfsHostList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DfsHostListQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DfsVolumeCredentials_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DfsVolumeStatistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DfsVolumeStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DfsVolume_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DfsVolumeList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DfsVolumeListQuery_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "directfs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::storageos_rpc::protobuf_common_2eproto::InitDefaults();
  _DfsHostCredentials_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DfsHostCredentials_default_instance_);_DfsHost_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DfsHost_default_instance_);_DfsHostList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DfsHostList_default_instance_);_DfsHostListQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DfsHostListQuery_default_instance_);_DfsVolumeCredentials_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DfsVolumeCredentials_default_instance_);_DfsVolumeStatistics_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DfsVolumeStatistics_default_instance_);_DfsVolumeStatus_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DfsVolumeStatus_default_instance_);_DfsVolume_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DfsVolume_default_instance_);_DfsVolumeList_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DfsVolumeList_default_instance_);_DfsVolumeListQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DfsVolumeListQuery_default_instance_);_DfsHost_default_instance_._instance.get_mutable()->cc_ = const_cast< ::storageos_rpc::DataplaneCommon*>(
      ::storageos_rpc::DataplaneCommon::internal_default_instance());
  _DfsHost_default_instance_._instance.get_mutable()->credentials_ = const_cast< ::storageos_rpc::DfsHostCredentials*>(
      ::storageos_rpc::DfsHostCredentials::internal_default_instance());
  _DfsVolume_default_instance_._instance.get_mutable()->cc_ = const_cast< ::storageos_rpc::DataplaneCommon*>(
      ::storageos_rpc::DataplaneCommon::internal_default_instance());
  _DfsVolume_default_instance_._instance.get_mutable()->credentials_ = const_cast< ::storageos_rpc::DfsVolumeCredentials*>(
      ::storageos_rpc::DfsVolumeCredentials::internal_default_instance());
  _DfsVolume_default_instance_._instance.get_mutable()->stats_ = const_cast< ::storageos_rpc::DfsVolumeStatistics*>(
      ::storageos_rpc::DfsVolumeStatistics::internal_default_instance());
  _DfsVolume_default_instance_._instance.get_mutable()->status_ = const_cast< ::storageos_rpc::DfsVolumeStatus*>(
      ::storageos_rpc::DfsVolumeStatus::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016directfs.proto\022\rstorageos_rpc\032\014common."
      "proto\"\024\n\022DfsHostCredentials\"\236\001\n\007DfsHost\022"
      "*\n\002cc\030\001 \001(\0132\036.storageos_rpc.DataplaneCom"
      "mon\022\017\n\007host_id\030\002 \001(\r\022\020\n\010hostname\030\003 \001(\t\022\014"
      "\n\004port\030\004 \001(\r\0226\n\013credentials\030\005 \001(\0132!.stor"
      "ageos_rpc.DfsHostCredentials\"4\n\013DfsHostL"
      "ist\022%\n\005hosts\030\001 \003(\0132\026.storageos_rpc.DfsHo"
      "st\"<\n\020DfsHostListQuery\022(\n\010host_ids\030\001 \003(\013"
      "2\026.storageos_rpc.DfsHost\"\026\n\024DfsVolumeCre"
      "dentials\"\025\n\023DfsVolumeStatistics\"\271\002\n\017DfsV"
      "olumeStatus\022E\n\nconn_state\030\001 \001(\01621.storag"
      "eos_rpc.DfsVolumeStatus.DfsConnectionSta"
      "te\022\021\n\tpeer_name\030\002 \001(\t\022@\n\007peer_af\030\003 \001(\0162/"
      ".storageos_rpc.DfsVolumeStatus.DfsAddres"
      "sFamily\"b\n\022DfsConnectionState\022\010\n\004NONE\020\000\022"
      "\016\n\nCONNECTING\020\001\022\r\n\tCONNECTED\020\002\022\021\n\rDISCON"
      "NECTING\020\003\022\020\n\014DISCONNECTED\020\004\"&\n\020DfsAddres"
      "sFamily\022\010\n\004IPV4\020\000\022\010\n\004IPV6\020\001\"\370\001\n\tDfsVolum"
      "e\022*\n\002cc\030\001 \001(\0132\036.storageos_rpc.DataplaneC"
      "ommon\022\021\n\tvolume_id\030\002 \001(\r\022\017\n\007host_id\030\003 \001("
      "\r\0228\n\013credentials\030\004 \001(\0132#.storageos_rpc.D"
      "fsVolumeCredentials\0221\n\005stats\030\005 \001(\0132\".sto"
      "rageos_rpc.DfsVolumeStatistics\022.\n\006status"
      "\030\006 \001(\0132\036.storageos_rpc.DfsVolumeStatus\">"
      "\n\rDfsVolumeList\022-\n\007volumes\030\001 \003(\0132\034.stora"
      "geos_rpc.DfsVolumeList\"B\n\022DfsVolumeListQ"
      "uery\022,\n\nvolume_ids\030\001 \003(\0132\030.storageos_rpc"
      ".DfsVolume2\306\004\n\010FsClient\022B\n\014ServerCreate\022"
      "\026.storageos_rpc.DfsHost\032\030.storageos_rpc."
      "RpcResult\"\000\022B\n\014ServerUpdate\022\026.storageos_"
      "rpc.DfsHost\032\030.storageos_rpc.RpcResult\"\000\022"
      "B\n\014ServerDelete\022\026.storageos_rpc.DfsHost\032"
      "\030.storageos_rpc.RpcResult\"\000\022K\n\nServerLis"
      "t\022\037.storageos_rpc.DfsHostListQuery\032\032.sto"
      "rageos_rpc.DfsHostList\"\000\022D\n\014VolumeCreate"
      "\022\030.storageos_rpc.DfsVolume\032\030.storageos_r"
      "pc.RpcResult\"\000\022D\n\014VolumeUpdate\022\030.storage"
      "os_rpc.DfsVolume\032\030.storageos_rpc.RpcResu"
      "lt\"\000\022D\n\014VolumeDelete\022\030.storageos_rpc.Dfs"
      "Volume\032\030.storageos_rpc.RpcResult\"\000\022O\n\nVo"
      "lumeList\022!.storageos_rpc.DfsVolumeListQu"
      "ery\032\034.storageos_rpc.DfsVolumeList\"\0002\253\002\n\010"
      "FsServer\022D\n\014VolumeCreate\022\030.storageos_rpc"
      ".DfsVolume\032\030.storageos_rpc.RpcResult\"\000\022D"
      "\n\014VolumeUpdate\022\030.storageos_rpc.DfsVolume"
      "\032\030.storageos_rpc.RpcResult\"\000\022D\n\014VolumeDe"
      "lete\022\030.storageos_rpc.DfsVolume\032\030.storage"
      "os_rpc.RpcResult\"\000\022M\n\nVolumeList\022!.stora"
      "geos_rpc.DfsVolumeListQuery\032\030.storageos_"
      "rpc.DfsVolume\"\0000\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1985);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "directfs.proto", &protobuf_RegisterTypes);
  ::storageos_rpc::protobuf_common_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_directfs_2eproto

const ::google::protobuf::EnumDescriptor* DfsVolumeStatus_DfsConnectionState_descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_enum_descriptors[0];
}
bool DfsVolumeStatus_DfsConnectionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DfsVolumeStatus_DfsConnectionState DfsVolumeStatus::NONE;
const DfsVolumeStatus_DfsConnectionState DfsVolumeStatus::CONNECTING;
const DfsVolumeStatus_DfsConnectionState DfsVolumeStatus::CONNECTED;
const DfsVolumeStatus_DfsConnectionState DfsVolumeStatus::DISCONNECTING;
const DfsVolumeStatus_DfsConnectionState DfsVolumeStatus::DISCONNECTED;
const DfsVolumeStatus_DfsConnectionState DfsVolumeStatus::DfsConnectionState_MIN;
const DfsVolumeStatus_DfsConnectionState DfsVolumeStatus::DfsConnectionState_MAX;
const int DfsVolumeStatus::DfsConnectionState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DfsVolumeStatus_DfsAddressFamily_descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_enum_descriptors[1];
}
bool DfsVolumeStatus_DfsAddressFamily_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DfsVolumeStatus_DfsAddressFamily DfsVolumeStatus::IPV4;
const DfsVolumeStatus_DfsAddressFamily DfsVolumeStatus::IPV6;
const DfsVolumeStatus_DfsAddressFamily DfsVolumeStatus::DfsAddressFamily_MIN;
const DfsVolumeStatus_DfsAddressFamily DfsVolumeStatus::DfsAddressFamily_MAX;
const int DfsVolumeStatus::DfsAddressFamily_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DfsHostCredentials::DfsHostCredentials()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_directfs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DfsHostCredentials)
}
DfsHostCredentials::DfsHostCredentials(const DfsHostCredentials& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DfsHostCredentials)
}

void DfsHostCredentials::SharedCtor() {
  _cached_size_ = 0;
}

DfsHostCredentials::~DfsHostCredentials() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DfsHostCredentials)
  SharedDtor();
}

void DfsHostCredentials::SharedDtor() {
}

void DfsHostCredentials::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DfsHostCredentials::descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DfsHostCredentials& DfsHostCredentials::default_instance() {
  protobuf_directfs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DfsHostCredentials* DfsHostCredentials::New(::google::protobuf::Arena* arena) const {
  DfsHostCredentials* n = new DfsHostCredentials;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DfsHostCredentials::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DfsHostCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DfsHostCredentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DfsHostCredentials)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DfsHostCredentials)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DfsHostCredentials)
  return false;
#undef DO_
}

void DfsHostCredentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DfsHostCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DfsHostCredentials)
}

::google::protobuf::uint8* DfsHostCredentials::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DfsHostCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DfsHostCredentials)
  return target;
}

size_t DfsHostCredentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DfsHostCredentials)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DfsHostCredentials::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DfsHostCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  const DfsHostCredentials* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DfsHostCredentials>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DfsHostCredentials)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DfsHostCredentials)
    MergeFrom(*source);
  }
}

void DfsHostCredentials::MergeFrom(const DfsHostCredentials& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DfsHostCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DfsHostCredentials::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DfsHostCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DfsHostCredentials::CopyFrom(const DfsHostCredentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DfsHostCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DfsHostCredentials::IsInitialized() const {
  return true;
}

void DfsHostCredentials::Swap(DfsHostCredentials* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DfsHostCredentials::InternalSwap(DfsHostCredentials* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DfsHostCredentials::GetMetadata() const {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DfsHostCredentials

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DfsHost::kCcFieldNumber;
const int DfsHost::kHostIdFieldNumber;
const int DfsHost::kHostnameFieldNumber;
const int DfsHost::kPortFieldNumber;
const int DfsHost::kCredentialsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DfsHost::DfsHost()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_directfs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DfsHost)
}
DfsHost::DfsHost(const DfsHost& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hostname().size() > 0) {
    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.has_cc()) {
    cc_ = new ::storageos_rpc::DataplaneCommon(*from.cc_);
  } else {
    cc_ = NULL;
  }
  if (from.has_credentials()) {
    credentials_ = new ::storageos_rpc::DfsHostCredentials(*from.credentials_);
  } else {
    credentials_ = NULL;
  }
  ::memcpy(&host_id_, &from.host_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&host_id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DfsHost)
}

void DfsHost::SharedCtor() {
  hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&cc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&cc_)) + sizeof(port_));
  _cached_size_ = 0;
}

DfsHost::~DfsHost() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DfsHost)
  SharedDtor();
}

void DfsHost::SharedDtor() {
  hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cc_;
  if (this != internal_default_instance()) delete credentials_;
}

void DfsHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DfsHost::descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DfsHost& DfsHost::default_instance() {
  protobuf_directfs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DfsHost* DfsHost::New(::google::protobuf::Arena* arena) const {
  DfsHost* n = new DfsHost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DfsHost::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DfsHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) {
    delete cc_;
  }
  cc_ = NULL;
  if (GetArenaNoVirtual() == NULL && credentials_ != NULL) {
    delete credentials_;
  }
  credentials_ = NULL;
  ::memset(&host_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&host_id_)) + sizeof(port_));
  _internal_metadata_.Clear();
}

bool DfsHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DfsHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .storageos_rpc.DataplaneCommon cc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 host_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hostname = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hostname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hostname().data(), static_cast<int>(this->hostname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "storageos_rpc.DfsHost.hostname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .storageos_rpc.DfsHostCredentials credentials = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DfsHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DfsHost)
  return false;
#undef DO_
}

void DfsHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DfsHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cc_, output);
  }

  // uint32 host_id = 2;
  if (this->host_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->host_id(), output);
  }

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "storageos_rpc.DfsHost.hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hostname(), output);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // .storageos_rpc.DfsHostCredentials credentials = 5;
  if (this->has_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->credentials_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DfsHost)
}

::google::protobuf::uint8* DfsHost::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DfsHost)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cc_, deterministic, target);
  }

  // uint32 host_id = 2;
  if (this->host_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->host_id(), target);
  }

  // string hostname = 3;
  if (this->hostname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hostname().data(), static_cast<int>(this->hostname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "storageos_rpc.DfsHost.hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hostname(), target);
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // .storageos_rpc.DfsHostCredentials credentials = 5;
  if (this->has_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->credentials_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DfsHost)
  return target;
}

size_t DfsHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DfsHost)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hostname = 3;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hostname());
  }

  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cc_);
  }

  // .storageos_rpc.DfsHostCredentials credentials = 5;
  if (this->has_credentials()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->credentials_);
  }

  // uint32 host_id = 2;
  if (this->host_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->host_id());
  }

  // uint32 port = 4;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DfsHost::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DfsHost)
  GOOGLE_DCHECK_NE(&from, this);
  const DfsHost* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DfsHost>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DfsHost)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DfsHost)
    MergeFrom(*source);
  }
}

void DfsHost::MergeFrom(const DfsHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DfsHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hostname().size() > 0) {

    hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hostname_);
  }
  if (from.has_cc()) {
    mutable_cc()->::storageos_rpc::DataplaneCommon::MergeFrom(from.cc());
  }
  if (from.has_credentials()) {
    mutable_credentials()->::storageos_rpc::DfsHostCredentials::MergeFrom(from.credentials());
  }
  if (from.host_id() != 0) {
    set_host_id(from.host_id());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void DfsHost::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DfsHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DfsHost::CopyFrom(const DfsHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DfsHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DfsHost::IsInitialized() const {
  return true;
}

void DfsHost::Swap(DfsHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DfsHost::InternalSwap(DfsHost* other) {
  using std::swap;
  hostname_.Swap(&other->hostname_);
  swap(cc_, other->cc_);
  swap(credentials_, other->credentials_);
  swap(host_id_, other->host_id_);
  swap(port_, other->port_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DfsHost::GetMetadata() const {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DfsHost

// .storageos_rpc.DataplaneCommon cc = 1;
bool DfsHost::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
void DfsHost::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
const ::storageos_rpc::DataplaneCommon& DfsHost::cc() const {
  const ::storageos_rpc::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHost.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DataplaneCommon*>(
      &::storageos_rpc::_DataplaneCommon_default_instance_);
}
::storageos_rpc::DataplaneCommon* DfsHost::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::storageos_rpc::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsHost.cc)
  return cc_;
}
::storageos_rpc::DataplaneCommon* DfsHost::release_cc() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsHost.cc)
  
  ::storageos_rpc::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
void DfsHost::set_allocated_cc(::storageos_rpc::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsHost.cc)
}

// uint32 host_id = 2;
void DfsHost::clear_host_id() {
  host_id_ = 0u;
}
::google::protobuf::uint32 DfsHost::host_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHost.host_id)
  return host_id_;
}
void DfsHost::set_host_id(::google::protobuf::uint32 value) {
  
  host_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsHost.host_id)
}

// string hostname = 3;
void DfsHost::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DfsHost::hostname() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHost.hostname)
  return hostname_.GetNoArena();
}
void DfsHost::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsHost.hostname)
}
#if LANG_CXX11
void DfsHost::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storageos_rpc.DfsHost.hostname)
}
#endif
void DfsHost::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storageos_rpc.DfsHost.hostname)
}
void DfsHost::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storageos_rpc.DfsHost.hostname)
}
::std::string* DfsHost::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsHost.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DfsHost::release_hostname() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsHost.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DfsHost::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsHost.hostname)
}

// uint32 port = 4;
void DfsHost::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 DfsHost::port() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHost.port)
  return port_;
}
void DfsHost::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsHost.port)
}

// .storageos_rpc.DfsHostCredentials credentials = 5;
bool DfsHost::has_credentials() const {
  return this != internal_default_instance() && credentials_ != NULL;
}
void DfsHost::clear_credentials() {
  if (GetArenaNoVirtual() == NULL && credentials_ != NULL) delete credentials_;
  credentials_ = NULL;
}
const ::storageos_rpc::DfsHostCredentials& DfsHost::credentials() const {
  const ::storageos_rpc::DfsHostCredentials* p = credentials_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHost.credentials)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DfsHostCredentials*>(
      &::storageos_rpc::_DfsHostCredentials_default_instance_);
}
::storageos_rpc::DfsHostCredentials* DfsHost::mutable_credentials() {
  
  if (credentials_ == NULL) {
    credentials_ = new ::storageos_rpc::DfsHostCredentials;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsHost.credentials)
  return credentials_;
}
::storageos_rpc::DfsHostCredentials* DfsHost::release_credentials() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsHost.credentials)
  
  ::storageos_rpc::DfsHostCredentials* temp = credentials_;
  credentials_ = NULL;
  return temp;
}
void DfsHost::set_allocated_credentials(::storageos_rpc::DfsHostCredentials* credentials) {
  delete credentials_;
  credentials_ = credentials;
  if (credentials) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsHost.credentials)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DfsHostList::kHostsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DfsHostList::DfsHostList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_directfs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DfsHostList)
}
DfsHostList::DfsHostList(const DfsHostList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hosts_(from.hosts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DfsHostList)
}

void DfsHostList::SharedCtor() {
  _cached_size_ = 0;
}

DfsHostList::~DfsHostList() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DfsHostList)
  SharedDtor();
}

void DfsHostList::SharedDtor() {
}

void DfsHostList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DfsHostList::descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DfsHostList& DfsHostList::default_instance() {
  protobuf_directfs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DfsHostList* DfsHostList::New(::google::protobuf::Arena* arena) const {
  DfsHostList* n = new DfsHostList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DfsHostList::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DfsHostList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hosts_.Clear();
  _internal_metadata_.Clear();
}

bool DfsHostList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DfsHostList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .storageos_rpc.DfsHost hosts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hosts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DfsHostList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DfsHostList)
  return false;
#undef DO_
}

void DfsHostList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DfsHostList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DfsHost hosts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hosts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hosts(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DfsHostList)
}

::google::protobuf::uint8* DfsHostList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DfsHostList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DfsHost hosts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->hosts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->hosts(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DfsHostList)
  return target;
}

size_t DfsHostList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DfsHostList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .storageos_rpc.DfsHost hosts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->hosts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hosts(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DfsHostList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DfsHostList)
  GOOGLE_DCHECK_NE(&from, this);
  const DfsHostList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DfsHostList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DfsHostList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DfsHostList)
    MergeFrom(*source);
  }
}

void DfsHostList::MergeFrom(const DfsHostList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DfsHostList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hosts_.MergeFrom(from.hosts_);
}

void DfsHostList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DfsHostList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DfsHostList::CopyFrom(const DfsHostList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DfsHostList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DfsHostList::IsInitialized() const {
  return true;
}

void DfsHostList::Swap(DfsHostList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DfsHostList::InternalSwap(DfsHostList* other) {
  using std::swap;
  hosts_.InternalSwap(&other->hosts_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DfsHostList::GetMetadata() const {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DfsHostList

// repeated .storageos_rpc.DfsHost hosts = 1;
int DfsHostList::hosts_size() const {
  return hosts_.size();
}
void DfsHostList::clear_hosts() {
  hosts_.Clear();
}
const ::storageos_rpc::DfsHost& DfsHostList::hosts(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHostList.hosts)
  return hosts_.Get(index);
}
::storageos_rpc::DfsHost* DfsHostList::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsHostList.hosts)
  return hosts_.Mutable(index);
}
::storageos_rpc::DfsHost* DfsHostList::add_hosts() {
  // @@protoc_insertion_point(field_add:storageos_rpc.DfsHostList.hosts)
  return hosts_.Add();
}
::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsHost >*
DfsHostList::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DfsHostList.hosts)
  return &hosts_;
}
const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsHost >&
DfsHostList::hosts() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DfsHostList.hosts)
  return hosts_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DfsHostListQuery::kHostIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DfsHostListQuery::DfsHostListQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_directfs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DfsHostListQuery)
}
DfsHostListQuery::DfsHostListQuery(const DfsHostListQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      host_ids_(from.host_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DfsHostListQuery)
}

void DfsHostListQuery::SharedCtor() {
  _cached_size_ = 0;
}

DfsHostListQuery::~DfsHostListQuery() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DfsHostListQuery)
  SharedDtor();
}

void DfsHostListQuery::SharedDtor() {
}

void DfsHostListQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DfsHostListQuery::descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DfsHostListQuery& DfsHostListQuery::default_instance() {
  protobuf_directfs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DfsHostListQuery* DfsHostListQuery::New(::google::protobuf::Arena* arena) const {
  DfsHostListQuery* n = new DfsHostListQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DfsHostListQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DfsHostListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_ids_.Clear();
  _internal_metadata_.Clear();
}

bool DfsHostListQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DfsHostListQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .storageos_rpc.DfsHost host_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_host_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DfsHostListQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DfsHostListQuery)
  return false;
#undef DO_
}

void DfsHostListQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DfsHostListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DfsHost host_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->host_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->host_ids(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DfsHostListQuery)
}

::google::protobuf::uint8* DfsHostListQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DfsHostListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DfsHost host_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->host_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->host_ids(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DfsHostListQuery)
  return target;
}

size_t DfsHostListQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DfsHostListQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .storageos_rpc.DfsHost host_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->host_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host_ids(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DfsHostListQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DfsHostListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const DfsHostListQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DfsHostListQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DfsHostListQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DfsHostListQuery)
    MergeFrom(*source);
  }
}

void DfsHostListQuery::MergeFrom(const DfsHostListQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DfsHostListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  host_ids_.MergeFrom(from.host_ids_);
}

void DfsHostListQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DfsHostListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DfsHostListQuery::CopyFrom(const DfsHostListQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DfsHostListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DfsHostListQuery::IsInitialized() const {
  return true;
}

void DfsHostListQuery::Swap(DfsHostListQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DfsHostListQuery::InternalSwap(DfsHostListQuery* other) {
  using std::swap;
  host_ids_.InternalSwap(&other->host_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DfsHostListQuery::GetMetadata() const {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DfsHostListQuery

// repeated .storageos_rpc.DfsHost host_ids = 1;
int DfsHostListQuery::host_ids_size() const {
  return host_ids_.size();
}
void DfsHostListQuery::clear_host_ids() {
  host_ids_.Clear();
}
const ::storageos_rpc::DfsHost& DfsHostListQuery::host_ids(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsHostListQuery.host_ids)
  return host_ids_.Get(index);
}
::storageos_rpc::DfsHost* DfsHostListQuery::mutable_host_ids(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsHostListQuery.host_ids)
  return host_ids_.Mutable(index);
}
::storageos_rpc::DfsHost* DfsHostListQuery::add_host_ids() {
  // @@protoc_insertion_point(field_add:storageos_rpc.DfsHostListQuery.host_ids)
  return host_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsHost >*
DfsHostListQuery::mutable_host_ids() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DfsHostListQuery.host_ids)
  return &host_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsHost >&
DfsHostListQuery::host_ids() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DfsHostListQuery.host_ids)
  return host_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DfsVolumeCredentials::DfsVolumeCredentials()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_directfs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DfsVolumeCredentials)
}
DfsVolumeCredentials::DfsVolumeCredentials(const DfsVolumeCredentials& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DfsVolumeCredentials)
}

void DfsVolumeCredentials::SharedCtor() {
  _cached_size_ = 0;
}

DfsVolumeCredentials::~DfsVolumeCredentials() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DfsVolumeCredentials)
  SharedDtor();
}

void DfsVolumeCredentials::SharedDtor() {
}

void DfsVolumeCredentials::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DfsVolumeCredentials::descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DfsVolumeCredentials& DfsVolumeCredentials::default_instance() {
  protobuf_directfs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DfsVolumeCredentials* DfsVolumeCredentials::New(::google::protobuf::Arena* arena) const {
  DfsVolumeCredentials* n = new DfsVolumeCredentials;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DfsVolumeCredentials::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DfsVolumeCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DfsVolumeCredentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DfsVolumeCredentials)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DfsVolumeCredentials)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DfsVolumeCredentials)
  return false;
#undef DO_
}

void DfsVolumeCredentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DfsVolumeCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DfsVolumeCredentials)
}

::google::protobuf::uint8* DfsVolumeCredentials::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DfsVolumeCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DfsVolumeCredentials)
  return target;
}

size_t DfsVolumeCredentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DfsVolumeCredentials)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DfsVolumeCredentials::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DfsVolumeCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  const DfsVolumeCredentials* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DfsVolumeCredentials>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DfsVolumeCredentials)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DfsVolumeCredentials)
    MergeFrom(*source);
  }
}

void DfsVolumeCredentials::MergeFrom(const DfsVolumeCredentials& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DfsVolumeCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DfsVolumeCredentials::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DfsVolumeCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DfsVolumeCredentials::CopyFrom(const DfsVolumeCredentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DfsVolumeCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DfsVolumeCredentials::IsInitialized() const {
  return true;
}

void DfsVolumeCredentials::Swap(DfsVolumeCredentials* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DfsVolumeCredentials::InternalSwap(DfsVolumeCredentials* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DfsVolumeCredentials::GetMetadata() const {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DfsVolumeCredentials

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DfsVolumeStatistics::DfsVolumeStatistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_directfs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DfsVolumeStatistics)
}
DfsVolumeStatistics::DfsVolumeStatistics(const DfsVolumeStatistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DfsVolumeStatistics)
}

void DfsVolumeStatistics::SharedCtor() {
  _cached_size_ = 0;
}

DfsVolumeStatistics::~DfsVolumeStatistics() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DfsVolumeStatistics)
  SharedDtor();
}

void DfsVolumeStatistics::SharedDtor() {
}

void DfsVolumeStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DfsVolumeStatistics::descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DfsVolumeStatistics& DfsVolumeStatistics::default_instance() {
  protobuf_directfs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DfsVolumeStatistics* DfsVolumeStatistics::New(::google::protobuf::Arena* arena) const {
  DfsVolumeStatistics* n = new DfsVolumeStatistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DfsVolumeStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DfsVolumeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool DfsVolumeStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DfsVolumeStatistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DfsVolumeStatistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DfsVolumeStatistics)
  return false;
#undef DO_
}

void DfsVolumeStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DfsVolumeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DfsVolumeStatistics)
}

::google::protobuf::uint8* DfsVolumeStatistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DfsVolumeStatistics)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DfsVolumeStatistics)
  return target;
}

size_t DfsVolumeStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DfsVolumeStatistics)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DfsVolumeStatistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DfsVolumeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const DfsVolumeStatistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DfsVolumeStatistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DfsVolumeStatistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DfsVolumeStatistics)
    MergeFrom(*source);
  }
}

void DfsVolumeStatistics::MergeFrom(const DfsVolumeStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DfsVolumeStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DfsVolumeStatistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DfsVolumeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DfsVolumeStatistics::CopyFrom(const DfsVolumeStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DfsVolumeStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DfsVolumeStatistics::IsInitialized() const {
  return true;
}

void DfsVolumeStatistics::Swap(DfsVolumeStatistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DfsVolumeStatistics::InternalSwap(DfsVolumeStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DfsVolumeStatistics::GetMetadata() const {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DfsVolumeStatistics

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DfsVolumeStatus::kConnStateFieldNumber;
const int DfsVolumeStatus::kPeerNameFieldNumber;
const int DfsVolumeStatus::kPeerAfFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DfsVolumeStatus::DfsVolumeStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_directfs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DfsVolumeStatus)
}
DfsVolumeStatus::DfsVolumeStatus(const DfsVolumeStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.peer_name().size() > 0) {
    peer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_name_);
  }
  ::memcpy(&conn_state_, &from.conn_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&peer_af_) -
    reinterpret_cast<char*>(&conn_state_)) + sizeof(peer_af_));
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DfsVolumeStatus)
}

void DfsVolumeStatus::SharedCtor() {
  peer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&conn_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_af_) -
      reinterpret_cast<char*>(&conn_state_)) + sizeof(peer_af_));
  _cached_size_ = 0;
}

DfsVolumeStatus::~DfsVolumeStatus() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DfsVolumeStatus)
  SharedDtor();
}

void DfsVolumeStatus::SharedDtor() {
  peer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DfsVolumeStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DfsVolumeStatus::descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DfsVolumeStatus& DfsVolumeStatus::default_instance() {
  protobuf_directfs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DfsVolumeStatus* DfsVolumeStatus::New(::google::protobuf::Arena* arena) const {
  DfsVolumeStatus* n = new DfsVolumeStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DfsVolumeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DfsVolumeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&conn_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&peer_af_) -
      reinterpret_cast<char*>(&conn_state_)) + sizeof(peer_af_));
  _internal_metadata_.Clear();
}

bool DfsVolumeStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DfsVolumeStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .storageos_rpc.DfsVolumeStatus.DfsConnectionState conn_state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_conn_state(static_cast< ::storageos_rpc::DfsVolumeStatus_DfsConnectionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string peer_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->peer_name().data(), static_cast<int>(this->peer_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "storageos_rpc.DfsVolumeStatus.peer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .storageos_rpc.DfsVolumeStatus.DfsAddressFamily peer_af = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_peer_af(static_cast< ::storageos_rpc::DfsVolumeStatus_DfsAddressFamily >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DfsVolumeStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DfsVolumeStatus)
  return false;
#undef DO_
}

void DfsVolumeStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DfsVolumeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DfsVolumeStatus.DfsConnectionState conn_state = 1;
  if (this->conn_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->conn_state(), output);
  }

  // string peer_name = 2;
  if (this->peer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_name().data(), static_cast<int>(this->peer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "storageos_rpc.DfsVolumeStatus.peer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->peer_name(), output);
  }

  // .storageos_rpc.DfsVolumeStatus.DfsAddressFamily peer_af = 3;
  if (this->peer_af() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->peer_af(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DfsVolumeStatus)
}

::google::protobuf::uint8* DfsVolumeStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DfsVolumeStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DfsVolumeStatus.DfsConnectionState conn_state = 1;
  if (this->conn_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->conn_state(), target);
  }

  // string peer_name = 2;
  if (this->peer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->peer_name().data(), static_cast<int>(this->peer_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "storageos_rpc.DfsVolumeStatus.peer_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->peer_name(), target);
  }

  // .storageos_rpc.DfsVolumeStatus.DfsAddressFamily peer_af = 3;
  if (this->peer_af() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->peer_af(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DfsVolumeStatus)
  return target;
}

size_t DfsVolumeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DfsVolumeStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string peer_name = 2;
  if (this->peer_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->peer_name());
  }

  // .storageos_rpc.DfsVolumeStatus.DfsConnectionState conn_state = 1;
  if (this->conn_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->conn_state());
  }

  // .storageos_rpc.DfsVolumeStatus.DfsAddressFamily peer_af = 3;
  if (this->peer_af() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->peer_af());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DfsVolumeStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DfsVolumeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DfsVolumeStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DfsVolumeStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DfsVolumeStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DfsVolumeStatus)
    MergeFrom(*source);
  }
}

void DfsVolumeStatus::MergeFrom(const DfsVolumeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DfsVolumeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.peer_name().size() > 0) {

    peer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_name_);
  }
  if (from.conn_state() != 0) {
    set_conn_state(from.conn_state());
  }
  if (from.peer_af() != 0) {
    set_peer_af(from.peer_af());
  }
}

void DfsVolumeStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DfsVolumeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DfsVolumeStatus::CopyFrom(const DfsVolumeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DfsVolumeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DfsVolumeStatus::IsInitialized() const {
  return true;
}

void DfsVolumeStatus::Swap(DfsVolumeStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DfsVolumeStatus::InternalSwap(DfsVolumeStatus* other) {
  using std::swap;
  peer_name_.Swap(&other->peer_name_);
  swap(conn_state_, other->conn_state_);
  swap(peer_af_, other->peer_af_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DfsVolumeStatus::GetMetadata() const {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DfsVolumeStatus

// .storageos_rpc.DfsVolumeStatus.DfsConnectionState conn_state = 1;
void DfsVolumeStatus::clear_conn_state() {
  conn_state_ = 0;
}
::storageos_rpc::DfsVolumeStatus_DfsConnectionState DfsVolumeStatus::conn_state() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolumeStatus.conn_state)
  return static_cast< ::storageos_rpc::DfsVolumeStatus_DfsConnectionState >(conn_state_);
}
void DfsVolumeStatus::set_conn_state(::storageos_rpc::DfsVolumeStatus_DfsConnectionState value) {
  
  conn_state_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsVolumeStatus.conn_state)
}

// string peer_name = 2;
void DfsVolumeStatus::clear_peer_name() {
  peer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DfsVolumeStatus::peer_name() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolumeStatus.peer_name)
  return peer_name_.GetNoArena();
}
void DfsVolumeStatus::set_peer_name(const ::std::string& value) {
  
  peer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsVolumeStatus.peer_name)
}
#if LANG_CXX11
void DfsVolumeStatus::set_peer_name(::std::string&& value) {
  
  peer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storageos_rpc.DfsVolumeStatus.peer_name)
}
#endif
void DfsVolumeStatus::set_peer_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  peer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storageos_rpc.DfsVolumeStatus.peer_name)
}
void DfsVolumeStatus::set_peer_name(const char* value, size_t size) {
  
  peer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storageos_rpc.DfsVolumeStatus.peer_name)
}
::std::string* DfsVolumeStatus::mutable_peer_name() {
  
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsVolumeStatus.peer_name)
  return peer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DfsVolumeStatus::release_peer_name() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsVolumeStatus.peer_name)
  
  return peer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DfsVolumeStatus::set_allocated_peer_name(::std::string* peer_name) {
  if (peer_name != NULL) {
    
  } else {
    
  }
  peer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_name);
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsVolumeStatus.peer_name)
}

// .storageos_rpc.DfsVolumeStatus.DfsAddressFamily peer_af = 3;
void DfsVolumeStatus::clear_peer_af() {
  peer_af_ = 0;
}
::storageos_rpc::DfsVolumeStatus_DfsAddressFamily DfsVolumeStatus::peer_af() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolumeStatus.peer_af)
  return static_cast< ::storageos_rpc::DfsVolumeStatus_DfsAddressFamily >(peer_af_);
}
void DfsVolumeStatus::set_peer_af(::storageos_rpc::DfsVolumeStatus_DfsAddressFamily value) {
  
  peer_af_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsVolumeStatus.peer_af)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DfsVolume::kCcFieldNumber;
const int DfsVolume::kVolumeIdFieldNumber;
const int DfsVolume::kHostIdFieldNumber;
const int DfsVolume::kCredentialsFieldNumber;
const int DfsVolume::kStatsFieldNumber;
const int DfsVolume::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DfsVolume::DfsVolume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_directfs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DfsVolume)
}
DfsVolume::DfsVolume(const DfsVolume& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cc()) {
    cc_ = new ::storageos_rpc::DataplaneCommon(*from.cc_);
  } else {
    cc_ = NULL;
  }
  if (from.has_credentials()) {
    credentials_ = new ::storageos_rpc::DfsVolumeCredentials(*from.credentials_);
  } else {
    credentials_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::storageos_rpc::DfsVolumeStatistics(*from.stats_);
  } else {
    stats_ = NULL;
  }
  if (from.has_status()) {
    status_ = new ::storageos_rpc::DfsVolumeStatus(*from.status_);
  } else {
    status_ = NULL;
  }
  ::memcpy(&volume_id_, &from.volume_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&host_id_) -
    reinterpret_cast<char*>(&volume_id_)) + sizeof(host_id_));
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DfsVolume)
}

void DfsVolume::SharedCtor() {
  ::memset(&cc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_id_) -
      reinterpret_cast<char*>(&cc_)) + sizeof(host_id_));
  _cached_size_ = 0;
}

DfsVolume::~DfsVolume() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DfsVolume)
  SharedDtor();
}

void DfsVolume::SharedDtor() {
  if (this != internal_default_instance()) delete cc_;
  if (this != internal_default_instance()) delete credentials_;
  if (this != internal_default_instance()) delete stats_;
  if (this != internal_default_instance()) delete status_;
}

void DfsVolume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DfsVolume::descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DfsVolume& DfsVolume::default_instance() {
  protobuf_directfs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DfsVolume* DfsVolume::New(::google::protobuf::Arena* arena) const {
  DfsVolume* n = new DfsVolume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DfsVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DfsVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cc_ != NULL) {
    delete cc_;
  }
  cc_ = NULL;
  if (GetArenaNoVirtual() == NULL && credentials_ != NULL) {
    delete credentials_;
  }
  credentials_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  if (GetArenaNoVirtual() == NULL && status_ != NULL) {
    delete status_;
  }
  status_ = NULL;
  ::memset(&volume_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_id_) -
      reinterpret_cast<char*>(&volume_id_)) + sizeof(host_id_));
  _internal_metadata_.Clear();
}

bool DfsVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DfsVolume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .storageos_rpc.DataplaneCommon cc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 volume_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 host_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &host_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .storageos_rpc.DfsVolumeCredentials credentials = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .storageos_rpc.DfsVolumeStatistics stats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .storageos_rpc.DfsVolumeStatus status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DfsVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DfsVolume)
  return false;
#undef DO_
}

void DfsVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DfsVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cc_, output);
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->volume_id(), output);
  }

  // uint32 host_id = 3;
  if (this->host_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->host_id(), output);
  }

  // .storageos_rpc.DfsVolumeCredentials credentials = 4;
  if (this->has_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->credentials_, output);
  }

  // .storageos_rpc.DfsVolumeStatistics stats = 5;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->stats_, output);
  }

  // .storageos_rpc.DfsVolumeStatus status = 6;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->status_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DfsVolume)
}

::google::protobuf::uint8* DfsVolume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DfsVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cc_, deterministic, target);
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->volume_id(), target);
  }

  // uint32 host_id = 3;
  if (this->host_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->host_id(), target);
  }

  // .storageos_rpc.DfsVolumeCredentials credentials = 4;
  if (this->has_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->credentials_, deterministic, target);
  }

  // .storageos_rpc.DfsVolumeStatistics stats = 5;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->stats_, deterministic, target);
  }

  // .storageos_rpc.DfsVolumeStatus status = 6;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->status_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DfsVolume)
  return target;
}

size_t DfsVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DfsVolume)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .storageos_rpc.DataplaneCommon cc = 1;
  if (this->has_cc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cc_);
  }

  // .storageos_rpc.DfsVolumeCredentials credentials = 4;
  if (this->has_credentials()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->credentials_);
  }

  // .storageos_rpc.DfsVolumeStatistics stats = 5;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // .storageos_rpc.DfsVolumeStatus status = 6;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->volume_id());
  }

  // uint32 host_id = 3;
  if (this->host_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->host_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DfsVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DfsVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const DfsVolume* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DfsVolume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DfsVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DfsVolume)
    MergeFrom(*source);
  }
}

void DfsVolume::MergeFrom(const DfsVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DfsVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cc()) {
    mutable_cc()->::storageos_rpc::DataplaneCommon::MergeFrom(from.cc());
  }
  if (from.has_credentials()) {
    mutable_credentials()->::storageos_rpc::DfsVolumeCredentials::MergeFrom(from.credentials());
  }
  if (from.has_stats()) {
    mutable_stats()->::storageos_rpc::DfsVolumeStatistics::MergeFrom(from.stats());
  }
  if (from.has_status()) {
    mutable_status()->::storageos_rpc::DfsVolumeStatus::MergeFrom(from.status());
  }
  if (from.volume_id() != 0) {
    set_volume_id(from.volume_id());
  }
  if (from.host_id() != 0) {
    set_host_id(from.host_id());
  }
}

void DfsVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DfsVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DfsVolume::CopyFrom(const DfsVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DfsVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DfsVolume::IsInitialized() const {
  return true;
}

void DfsVolume::Swap(DfsVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DfsVolume::InternalSwap(DfsVolume* other) {
  using std::swap;
  swap(cc_, other->cc_);
  swap(credentials_, other->credentials_);
  swap(stats_, other->stats_);
  swap(status_, other->status_);
  swap(volume_id_, other->volume_id_);
  swap(host_id_, other->host_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DfsVolume::GetMetadata() const {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DfsVolume

// .storageos_rpc.DataplaneCommon cc = 1;
bool DfsVolume::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
void DfsVolume::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
const ::storageos_rpc::DataplaneCommon& DfsVolume::cc() const {
  const ::storageos_rpc::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolume.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DataplaneCommon*>(
      &::storageos_rpc::_DataplaneCommon_default_instance_);
}
::storageos_rpc::DataplaneCommon* DfsVolume::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::storageos_rpc::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsVolume.cc)
  return cc_;
}
::storageos_rpc::DataplaneCommon* DfsVolume::release_cc() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsVolume.cc)
  
  ::storageos_rpc::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
void DfsVolume::set_allocated_cc(::storageos_rpc::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsVolume.cc)
}

// uint32 volume_id = 2;
void DfsVolume::clear_volume_id() {
  volume_id_ = 0u;
}
::google::protobuf::uint32 DfsVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolume.volume_id)
  return volume_id_;
}
void DfsVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsVolume.volume_id)
}

// uint32 host_id = 3;
void DfsVolume::clear_host_id() {
  host_id_ = 0u;
}
::google::protobuf::uint32 DfsVolume::host_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolume.host_id)
  return host_id_;
}
void DfsVolume::set_host_id(::google::protobuf::uint32 value) {
  
  host_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DfsVolume.host_id)
}

// .storageos_rpc.DfsVolumeCredentials credentials = 4;
bool DfsVolume::has_credentials() const {
  return this != internal_default_instance() && credentials_ != NULL;
}
void DfsVolume::clear_credentials() {
  if (GetArenaNoVirtual() == NULL && credentials_ != NULL) delete credentials_;
  credentials_ = NULL;
}
const ::storageos_rpc::DfsVolumeCredentials& DfsVolume::credentials() const {
  const ::storageos_rpc::DfsVolumeCredentials* p = credentials_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolume.credentials)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DfsVolumeCredentials*>(
      &::storageos_rpc::_DfsVolumeCredentials_default_instance_);
}
::storageos_rpc::DfsVolumeCredentials* DfsVolume::mutable_credentials() {
  
  if (credentials_ == NULL) {
    credentials_ = new ::storageos_rpc::DfsVolumeCredentials;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsVolume.credentials)
  return credentials_;
}
::storageos_rpc::DfsVolumeCredentials* DfsVolume::release_credentials() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsVolume.credentials)
  
  ::storageos_rpc::DfsVolumeCredentials* temp = credentials_;
  credentials_ = NULL;
  return temp;
}
void DfsVolume::set_allocated_credentials(::storageos_rpc::DfsVolumeCredentials* credentials) {
  delete credentials_;
  credentials_ = credentials;
  if (credentials) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsVolume.credentials)
}

// .storageos_rpc.DfsVolumeStatistics stats = 5;
bool DfsVolume::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void DfsVolume::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::storageos_rpc::DfsVolumeStatistics& DfsVolume::stats() const {
  const ::storageos_rpc::DfsVolumeStatistics* p = stats_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolume.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DfsVolumeStatistics*>(
      &::storageos_rpc::_DfsVolumeStatistics_default_instance_);
}
::storageos_rpc::DfsVolumeStatistics* DfsVolume::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::storageos_rpc::DfsVolumeStatistics;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsVolume.stats)
  return stats_;
}
::storageos_rpc::DfsVolumeStatistics* DfsVolume::release_stats() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsVolume.stats)
  
  ::storageos_rpc::DfsVolumeStatistics* temp = stats_;
  stats_ = NULL;
  return temp;
}
void DfsVolume::set_allocated_stats(::storageos_rpc::DfsVolumeStatistics* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsVolume.stats)
}

// .storageos_rpc.DfsVolumeStatus status = 6;
bool DfsVolume::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
void DfsVolume::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::storageos_rpc::DfsVolumeStatus& DfsVolume::status() const {
  const ::storageos_rpc::DfsVolumeStatus* p = status_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolume.status)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DfsVolumeStatus*>(
      &::storageos_rpc::_DfsVolumeStatus_default_instance_);
}
::storageos_rpc::DfsVolumeStatus* DfsVolume::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::storageos_rpc::DfsVolumeStatus;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsVolume.status)
  return status_;
}
::storageos_rpc::DfsVolumeStatus* DfsVolume::release_status() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DfsVolume.status)
  
  ::storageos_rpc::DfsVolumeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
void DfsVolume::set_allocated_status(::storageos_rpc::DfsVolumeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DfsVolume.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DfsVolumeList::kVolumesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DfsVolumeList::DfsVolumeList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_directfs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DfsVolumeList)
}
DfsVolumeList::DfsVolumeList(const DfsVolumeList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      volumes_(from.volumes_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DfsVolumeList)
}

void DfsVolumeList::SharedCtor() {
  _cached_size_ = 0;
}

DfsVolumeList::~DfsVolumeList() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DfsVolumeList)
  SharedDtor();
}

void DfsVolumeList::SharedDtor() {
}

void DfsVolumeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DfsVolumeList::descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DfsVolumeList& DfsVolumeList::default_instance() {
  protobuf_directfs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DfsVolumeList* DfsVolumeList::New(::google::protobuf::Arena* arena) const {
  DfsVolumeList* n = new DfsVolumeList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DfsVolumeList::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DfsVolumeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volumes_.Clear();
  _internal_metadata_.Clear();
}

bool DfsVolumeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DfsVolumeList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .storageos_rpc.DfsVolumeList volumes = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volumes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DfsVolumeList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DfsVolumeList)
  return false;
#undef DO_
}

void DfsVolumeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DfsVolumeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DfsVolumeList volumes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volumes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->volumes(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DfsVolumeList)
}

::google::protobuf::uint8* DfsVolumeList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DfsVolumeList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DfsVolumeList volumes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volumes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->volumes(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DfsVolumeList)
  return target;
}

size_t DfsVolumeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DfsVolumeList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .storageos_rpc.DfsVolumeList volumes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->volumes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volumes(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DfsVolumeList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DfsVolumeList)
  GOOGLE_DCHECK_NE(&from, this);
  const DfsVolumeList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DfsVolumeList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DfsVolumeList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DfsVolumeList)
    MergeFrom(*source);
  }
}

void DfsVolumeList::MergeFrom(const DfsVolumeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DfsVolumeList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volumes_.MergeFrom(from.volumes_);
}

void DfsVolumeList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DfsVolumeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DfsVolumeList::CopyFrom(const DfsVolumeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DfsVolumeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DfsVolumeList::IsInitialized() const {
  return true;
}

void DfsVolumeList::Swap(DfsVolumeList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DfsVolumeList::InternalSwap(DfsVolumeList* other) {
  using std::swap;
  volumes_.InternalSwap(&other->volumes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DfsVolumeList::GetMetadata() const {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DfsVolumeList

// repeated .storageos_rpc.DfsVolumeList volumes = 1;
int DfsVolumeList::volumes_size() const {
  return volumes_.size();
}
void DfsVolumeList::clear_volumes() {
  volumes_.Clear();
}
const ::storageos_rpc::DfsVolumeList& DfsVolumeList::volumes(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolumeList.volumes)
  return volumes_.Get(index);
}
::storageos_rpc::DfsVolumeList* DfsVolumeList::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsVolumeList.volumes)
  return volumes_.Mutable(index);
}
::storageos_rpc::DfsVolumeList* DfsVolumeList::add_volumes() {
  // @@protoc_insertion_point(field_add:storageos_rpc.DfsVolumeList.volumes)
  return volumes_.Add();
}
::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsVolumeList >*
DfsVolumeList::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DfsVolumeList.volumes)
  return &volumes_;
}
const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsVolumeList >&
DfsVolumeList::volumes() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DfsVolumeList.volumes)
  return volumes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DfsVolumeListQuery::kVolumeIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DfsVolumeListQuery::DfsVolumeListQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_directfs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.DfsVolumeListQuery)
}
DfsVolumeListQuery::DfsVolumeListQuery(const DfsVolumeListQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      volume_ids_(from.volume_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.DfsVolumeListQuery)
}

void DfsVolumeListQuery::SharedCtor() {
  _cached_size_ = 0;
}

DfsVolumeListQuery::~DfsVolumeListQuery() {
  // @@protoc_insertion_point(destructor:storageos_rpc.DfsVolumeListQuery)
  SharedDtor();
}

void DfsVolumeListQuery::SharedDtor() {
}

void DfsVolumeListQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DfsVolumeListQuery::descriptor() {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DfsVolumeListQuery& DfsVolumeListQuery::default_instance() {
  protobuf_directfs_2eproto::InitDefaults();
  return *internal_default_instance();
}

DfsVolumeListQuery* DfsVolumeListQuery::New(::google::protobuf::Arena* arena) const {
  DfsVolumeListQuery* n = new DfsVolumeListQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DfsVolumeListQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.DfsVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_ids_.Clear();
  _internal_metadata_.Clear();
}

bool DfsVolumeListQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.DfsVolumeListQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .storageos_rpc.DfsVolume volume_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volume_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.DfsVolumeListQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.DfsVolumeListQuery)
  return false;
#undef DO_
}

void DfsVolumeListQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.DfsVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DfsVolume volume_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volume_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->volume_ids(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.DfsVolumeListQuery)
}

::google::protobuf::uint8* DfsVolumeListQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.DfsVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.DfsVolume volume_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volume_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->volume_ids(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.DfsVolumeListQuery)
  return target;
}

size_t DfsVolumeListQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.DfsVolumeListQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .storageos_rpc.DfsVolume volume_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->volume_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volume_ids(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DfsVolumeListQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.DfsVolumeListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const DfsVolumeListQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DfsVolumeListQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.DfsVolumeListQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.DfsVolumeListQuery)
    MergeFrom(*source);
  }
}

void DfsVolumeListQuery::MergeFrom(const DfsVolumeListQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.DfsVolumeListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_ids_.MergeFrom(from.volume_ids_);
}

void DfsVolumeListQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.DfsVolumeListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DfsVolumeListQuery::CopyFrom(const DfsVolumeListQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.DfsVolumeListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DfsVolumeListQuery::IsInitialized() const {
  return true;
}

void DfsVolumeListQuery::Swap(DfsVolumeListQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DfsVolumeListQuery::InternalSwap(DfsVolumeListQuery* other) {
  using std::swap;
  volume_ids_.InternalSwap(&other->volume_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DfsVolumeListQuery::GetMetadata() const {
  protobuf_directfs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_directfs_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DfsVolumeListQuery

// repeated .storageos_rpc.DfsVolume volume_ids = 1;
int DfsVolumeListQuery::volume_ids_size() const {
  return volume_ids_.size();
}
void DfsVolumeListQuery::clear_volume_ids() {
  volume_ids_.Clear();
}
const ::storageos_rpc::DfsVolume& DfsVolumeListQuery::volume_ids(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DfsVolumeListQuery.volume_ids)
  return volume_ids_.Get(index);
}
::storageos_rpc::DfsVolume* DfsVolumeListQuery::mutable_volume_ids(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DfsVolumeListQuery.volume_ids)
  return volume_ids_.Mutable(index);
}
::storageos_rpc::DfsVolume* DfsVolumeListQuery::add_volume_ids() {
  // @@protoc_insertion_point(field_add:storageos_rpc.DfsVolumeListQuery.volume_ids)
  return volume_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsVolume >*
DfsVolumeListQuery::mutable_volume_ids() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DfsVolumeListQuery.volume_ids)
  return &volume_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DfsVolume >&
DfsVolumeListQuery::volume_ids() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DfsVolumeListQuery.volume_ids)
  return volume_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace storageos_rpc

// @@protoc_insertion_point(global_scope)
