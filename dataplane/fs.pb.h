// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fs.proto

#ifndef PROTOBUF_fs_2eproto__INCLUDED
#define PROTOBUF_fs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace storageos_rpc {
class FsPresentation;
class FsPresentationDefaultTypeInternal;
extern FsPresentationDefaultTypeInternal _FsPresentation_default_instance_;
class FsPresentationList;
class FsPresentationListDefaultTypeInternal;
extern FsPresentationListDefaultTypeInternal _FsPresentationList_default_instance_;
class FsPresentationListQuery;
class FsPresentationListQueryDefaultTypeInternal;
extern FsPresentationListQueryDefaultTypeInternal _FsPresentationListQuery_default_instance_;
class FsVolume;
class FsVolumeDefaultTypeInternal;
extern FsVolumeDefaultTypeInternal _FsVolume_default_instance_;
class FsVolumeList;
class FsVolumeListDefaultTypeInternal;
extern FsVolumeListDefaultTypeInternal _FsVolumeList_default_instance_;
class FsVolumeListQuery;
class FsVolumeListQueryDefaultTypeInternal;
extern FsVolumeListQueryDefaultTypeInternal _FsVolumeListQuery_default_instance_;
class FsVolumeStatistics;
class FsVolumeStatisticsDefaultTypeInternal;
extern FsVolumeStatisticsDefaultTypeInternal _FsVolumeStatistics_default_instance_;
class FsVolumeStatus;
class FsVolumeStatusDefaultTypeInternal;
extern FsVolumeStatusDefaultTypeInternal _FsVolumeStatus_default_instance_;
}  // namespace storageos_rpc

namespace storageos_rpc {

namespace protobuf_fs_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_fs_2eproto

enum FsVolume_VolumeDeviceType {
  FsVolume_VolumeDeviceType_FILE = 0,
  FsVolume_VolumeDeviceType_NBD_BLOCK = 1,
  FsVolume_VolumeDeviceType_FsVolume_VolumeDeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FsVolume_VolumeDeviceType_FsVolume_VolumeDeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FsVolume_VolumeDeviceType_IsValid(int value);
const FsVolume_VolumeDeviceType FsVolume_VolumeDeviceType_VolumeDeviceType_MIN = FsVolume_VolumeDeviceType_FILE;
const FsVolume_VolumeDeviceType FsVolume_VolumeDeviceType_VolumeDeviceType_MAX = FsVolume_VolumeDeviceType_NBD_BLOCK;
const int FsVolume_VolumeDeviceType_VolumeDeviceType_ARRAYSIZE = FsVolume_VolumeDeviceType_VolumeDeviceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* FsVolume_VolumeDeviceType_descriptor();
inline const ::std::string& FsVolume_VolumeDeviceType_Name(FsVolume_VolumeDeviceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    FsVolume_VolumeDeviceType_descriptor(), value);
}
inline bool FsVolume_VolumeDeviceType_Parse(
    const ::std::string& name, FsVolume_VolumeDeviceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FsVolume_VolumeDeviceType>(
    FsVolume_VolumeDeviceType_descriptor(), name, value);
}
enum FsVolumeState {
  NONE = 0,
  READY = 1,
  FsVolumeState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FsVolumeState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FsVolumeState_IsValid(int value);
const FsVolumeState FsVolumeState_MIN = NONE;
const FsVolumeState FsVolumeState_MAX = READY;
const int FsVolumeState_ARRAYSIZE = FsVolumeState_MAX + 1;

const ::google::protobuf::EnumDescriptor* FsVolumeState_descriptor();
inline const ::std::string& FsVolumeState_Name(FsVolumeState value) {
  return ::google::protobuf::internal::NameOfEnum(
    FsVolumeState_descriptor(), value);
}
inline bool FsVolumeState_Parse(
    const ::std::string& name, FsVolumeState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FsVolumeState>(
    FsVolumeState_descriptor(), name, value);
}
// ===================================================================

class FsVolumeListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.FsVolumeListQuery) */ {
 public:
  FsVolumeListQuery();
  virtual ~FsVolumeListQuery();

  FsVolumeListQuery(const FsVolumeListQuery& from);

  inline FsVolumeListQuery& operator=(const FsVolumeListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FsVolumeListQuery(FsVolumeListQuery&& from) noexcept
    : FsVolumeListQuery() {
    *this = ::std::move(from);
  }

  inline FsVolumeListQuery& operator=(FsVolumeListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FsVolumeListQuery& default_instance();

  static inline const FsVolumeListQuery* internal_default_instance() {
    return reinterpret_cast<const FsVolumeListQuery*>(
               &_FsVolumeListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FsVolumeListQuery* other);
  friend void swap(FsVolumeListQuery& a, FsVolumeListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FsVolumeListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  FsVolumeListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FsVolumeListQuery& from);
  void MergeFrom(const FsVolumeListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FsVolumeListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 volume_ids = 1;
  int volume_ids_size() const;
  void clear_volume_ids();
  static const int kVolumeIdsFieldNumber = 1;
  ::google::protobuf::uint32 volume_ids(int index) const;
  void set_volume_ids(int index, ::google::protobuf::uint32 value);
  void add_volume_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      volume_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_volume_ids();

  // @@protoc_insertion_point(class_scope:storageos_rpc.FsVolumeListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > volume_ids_;
  mutable int _volume_ids_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_fs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FsVolumeStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.FsVolumeStatistics) */ {
 public:
  FsVolumeStatistics();
  virtual ~FsVolumeStatistics();

  FsVolumeStatistics(const FsVolumeStatistics& from);

  inline FsVolumeStatistics& operator=(const FsVolumeStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FsVolumeStatistics(FsVolumeStatistics&& from) noexcept
    : FsVolumeStatistics() {
    *this = ::std::move(from);
  }

  inline FsVolumeStatistics& operator=(FsVolumeStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FsVolumeStatistics& default_instance();

  static inline const FsVolumeStatistics* internal_default_instance() {
    return reinterpret_cast<const FsVolumeStatistics*>(
               &_FsVolumeStatistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FsVolumeStatistics* other);
  friend void swap(FsVolumeStatistics& a, FsVolumeStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FsVolumeStatistics* New() const PROTOBUF_FINAL { return New(NULL); }

  FsVolumeStatistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FsVolumeStatistics& from);
  void MergeFrom(const FsVolumeStatistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FsVolumeStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:storageos_rpc.FsVolumeStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_fs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FsVolumeStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.FsVolumeStatus) */ {
 public:
  FsVolumeStatus();
  virtual ~FsVolumeStatus();

  FsVolumeStatus(const FsVolumeStatus& from);

  inline FsVolumeStatus& operator=(const FsVolumeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FsVolumeStatus(FsVolumeStatus&& from) noexcept
    : FsVolumeStatus() {
    *this = ::std::move(from);
  }

  inline FsVolumeStatus& operator=(FsVolumeStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FsVolumeStatus& default_instance();

  static inline const FsVolumeStatus* internal_default_instance() {
    return reinterpret_cast<const FsVolumeStatus*>(
               &_FsVolumeStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(FsVolumeStatus* other);
  friend void swap(FsVolumeStatus& a, FsVolumeStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FsVolumeStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  FsVolumeStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FsVolumeStatus& from);
  void MergeFrom(const FsVolumeStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FsVolumeStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .storageos_rpc.FsVolumeState node_state = 1;
  void clear_node_state();
  static const int kNodeStateFieldNumber = 1;
  ::storageos_rpc::FsVolumeState node_state() const;
  void set_node_state(::storageos_rpc::FsVolumeState value);

  // @@protoc_insertion_point(class_scope:storageos_rpc.FsVolumeStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int node_state_;
  mutable int _cached_size_;
  friend struct protobuf_fs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FsVolume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.FsVolume) */ {
 public:
  FsVolume();
  virtual ~FsVolume();

  FsVolume(const FsVolume& from);

  inline FsVolume& operator=(const FsVolume& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FsVolume(FsVolume&& from) noexcept
    : FsVolume() {
    *this = ::std::move(from);
  }

  inline FsVolume& operator=(FsVolume&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FsVolume& default_instance();

  static inline const FsVolume* internal_default_instance() {
    return reinterpret_cast<const FsVolume*>(
               &_FsVolume_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(FsVolume* other);
  friend void swap(FsVolume& a, FsVolume& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FsVolume* New() const PROTOBUF_FINAL { return New(NULL); }

  FsVolume* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FsVolume& from);
  void MergeFrom(const FsVolume& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FsVolume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FsVolume_VolumeDeviceType VolumeDeviceType;
  static const VolumeDeviceType FILE =
    FsVolume_VolumeDeviceType_FILE;
  static const VolumeDeviceType NBD_BLOCK =
    FsVolume_VolumeDeviceType_NBD_BLOCK;
  static inline bool VolumeDeviceType_IsValid(int value) {
    return FsVolume_VolumeDeviceType_IsValid(value);
  }
  static const VolumeDeviceType VolumeDeviceType_MIN =
    FsVolume_VolumeDeviceType_VolumeDeviceType_MIN;
  static const VolumeDeviceType VolumeDeviceType_MAX =
    FsVolume_VolumeDeviceType_VolumeDeviceType_MAX;
  static const int VolumeDeviceType_ARRAYSIZE =
    FsVolume_VolumeDeviceType_VolumeDeviceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VolumeDeviceType_descriptor() {
    return FsVolume_VolumeDeviceType_descriptor();
  }
  static inline const ::std::string& VolumeDeviceType_Name(VolumeDeviceType value) {
    return FsVolume_VolumeDeviceType_Name(value);
  }
  static inline bool VolumeDeviceType_Parse(const ::std::string& name,
      VolumeDeviceType* value) {
    return FsVolume_VolumeDeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string filename = 5;
  void clear_filename();
  static const int kFilenameFieldNumber = 5;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // .storageos_rpc.DataplaneCommon cc = 1;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 1;
  const ::storageos_rpc::DataplaneCommon& cc() const;
  ::storageos_rpc::DataplaneCommon* mutable_cc();
  ::storageos_rpc::DataplaneCommon* release_cc();
  void set_allocated_cc(::storageos_rpc::DataplaneCommon* cc);

  // .storageos_rpc.FsVolumeStatistics stats = 9;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 9;
  const ::storageos_rpc::FsVolumeStatistics& stats() const;
  ::storageos_rpc::FsVolumeStatistics* mutable_stats();
  ::storageos_rpc::FsVolumeStatistics* release_stats();
  void set_allocated_stats(::storageos_rpc::FsVolumeStatistics* stats);

  // .storageos_rpc.FsVolumeStatus status = 10;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 10;
  const ::storageos_rpc::FsVolumeStatus& status() const;
  ::storageos_rpc::FsVolumeStatus* mutable_status();
  ::storageos_rpc::FsVolumeStatus* release_status();
  void set_allocated_status(::storageos_rpc::FsVolumeStatus* status);

  // uint32 volume_id = 2;
  void clear_volume_id();
  static const int kVolumeIdFieldNumber = 2;
  ::google::protobuf::uint32 volume_id() const;
  void set_volume_id(::google::protobuf::uint32 value);

  // .storageos_rpc.FsVolume.VolumeDeviceType node_type = 3;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 3;
  ::storageos_rpc::FsVolume_VolumeDeviceType node_type() const;
  void set_node_type(::storageos_rpc::FsVolume_VolumeDeviceType value);

  // uint32 device_number = 4;
  void clear_device_number();
  static const int kDeviceNumberFieldNumber = 4;
  ::google::protobuf::uint32 device_number() const;
  void set_device_number(::google::protobuf::uint32 value);

  // bool linked_volume = 6;
  void clear_linked_volume();
  static const int kLinkedVolumeFieldNumber = 6;
  bool linked_volume() const;
  void set_linked_volume(bool value);

  // uint64 volume_size_bytes = 8;
  void clear_volume_size_bytes();
  static const int kVolumeSizeBytesFieldNumber = 8;
  ::google::protobuf::uint64 volume_size_bytes() const;
  void set_volume_size_bytes(::google::protobuf::uint64 value);

  // uint32 target_volume_id = 7;
  void clear_target_volume_id();
  static const int kTargetVolumeIdFieldNumber = 7;
  ::google::protobuf::uint32 target_volume_id() const;
  void set_target_volume_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:storageos_rpc.FsVolume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::storageos_rpc::DataplaneCommon* cc_;
  ::storageos_rpc::FsVolumeStatistics* stats_;
  ::storageos_rpc::FsVolumeStatus* status_;
  ::google::protobuf::uint32 volume_id_;
  int node_type_;
  ::google::protobuf::uint32 device_number_;
  bool linked_volume_;
  ::google::protobuf::uint64 volume_size_bytes_;
  ::google::protobuf::uint32 target_volume_id_;
  mutable int _cached_size_;
  friend struct protobuf_fs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FsVolumeList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.FsVolumeList) */ {
 public:
  FsVolumeList();
  virtual ~FsVolumeList();

  FsVolumeList(const FsVolumeList& from);

  inline FsVolumeList& operator=(const FsVolumeList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FsVolumeList(FsVolumeList&& from) noexcept
    : FsVolumeList() {
    *this = ::std::move(from);
  }

  inline FsVolumeList& operator=(FsVolumeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FsVolumeList& default_instance();

  static inline const FsVolumeList* internal_default_instance() {
    return reinterpret_cast<const FsVolumeList*>(
               &_FsVolumeList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(FsVolumeList* other);
  friend void swap(FsVolumeList& a, FsVolumeList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FsVolumeList* New() const PROTOBUF_FINAL { return New(NULL); }

  FsVolumeList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FsVolumeList& from);
  void MergeFrom(const FsVolumeList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FsVolumeList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .storageos_rpc.FsVolume volumes = 1;
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 1;
  const ::storageos_rpc::FsVolume& volumes(int index) const;
  ::storageos_rpc::FsVolume* mutable_volumes(int index);
  ::storageos_rpc::FsVolume* add_volumes();
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::FsVolume >*
      mutable_volumes();
  const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::FsVolume >&
      volumes() const;

  // @@protoc_insertion_point(class_scope:storageos_rpc.FsVolumeList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::FsVolume > volumes_;
  mutable int _cached_size_;
  friend struct protobuf_fs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FsPresentationListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.FsPresentationListQuery) */ {
 public:
  FsPresentationListQuery();
  virtual ~FsPresentationListQuery();

  FsPresentationListQuery(const FsPresentationListQuery& from);

  inline FsPresentationListQuery& operator=(const FsPresentationListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FsPresentationListQuery(FsPresentationListQuery&& from) noexcept
    : FsPresentationListQuery() {
    *this = ::std::move(from);
  }

  inline FsPresentationListQuery& operator=(FsPresentationListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FsPresentationListQuery& default_instance();

  static inline const FsPresentationListQuery* internal_default_instance() {
    return reinterpret_cast<const FsPresentationListQuery*>(
               &_FsPresentationListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(FsPresentationListQuery* other);
  friend void swap(FsPresentationListQuery& a, FsPresentationListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FsPresentationListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  FsPresentationListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FsPresentationListQuery& from);
  void MergeFrom(const FsPresentationListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FsPresentationListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 presentation_id = 1;
  int presentation_id_size() const;
  void clear_presentation_id();
  static const int kPresentationIdFieldNumber = 1;
  ::google::protobuf::uint32 presentation_id(int index) const;
  void set_presentation_id(int index, ::google::protobuf::uint32 value);
  void add_presentation_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      presentation_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_presentation_id();

  // @@protoc_insertion_point(class_scope:storageos_rpc.FsPresentationListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > presentation_id_;
  mutable int _presentation_id_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_fs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FsPresentation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.FsPresentation) */ {
 public:
  FsPresentation();
  virtual ~FsPresentation();

  FsPresentation(const FsPresentation& from);

  inline FsPresentation& operator=(const FsPresentation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FsPresentation(FsPresentation&& from) noexcept
    : FsPresentation() {
    *this = ::std::move(from);
  }

  inline FsPresentation& operator=(FsPresentation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FsPresentation& default_instance();

  static inline const FsPresentation* internal_default_instance() {
    return reinterpret_cast<const FsPresentation*>(
               &_FsPresentation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(FsPresentation* other);
  friend void swap(FsPresentation& a, FsPresentation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FsPresentation* New() const PROTOBUF_FINAL { return New(NULL); }

  FsPresentation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FsPresentation& from);
  void MergeFrom(const FsPresentation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FsPresentation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .storageos_rpc.DataplaneCommon cc = 1;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 1;
  const ::storageos_rpc::DataplaneCommon& cc() const;
  ::storageos_rpc::DataplaneCommon* mutable_cc();
  ::storageos_rpc::DataplaneCommon* release_cc();
  void set_allocated_cc(::storageos_rpc::DataplaneCommon* cc);

  // .storageos_rpc.FsVolumeStatus status = 5;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 5;
  const ::storageos_rpc::FsVolumeStatus& status() const;
  ::storageos_rpc::FsVolumeStatus* mutable_status();
  ::storageos_rpc::FsVolumeStatus* release_status();
  void set_allocated_status(::storageos_rpc::FsVolumeStatus* status);

  // uint32 source_id = 2;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  ::google::protobuf::uint32 source_id() const;
  void set_source_id(::google::protobuf::uint32 value);

  // uint32 target_id = 3;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 3;
  ::google::protobuf::uint32 target_id() const;
  void set_target_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:storageos_rpc.FsPresentation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::storageos_rpc::DataplaneCommon* cc_;
  ::storageos_rpc::FsVolumeStatus* status_;
  ::google::protobuf::uint32 source_id_;
  ::google::protobuf::uint32 target_id_;
  mutable int _cached_size_;
  friend struct protobuf_fs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FsPresentationList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.FsPresentationList) */ {
 public:
  FsPresentationList();
  virtual ~FsPresentationList();

  FsPresentationList(const FsPresentationList& from);

  inline FsPresentationList& operator=(const FsPresentationList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FsPresentationList(FsPresentationList&& from) noexcept
    : FsPresentationList() {
    *this = ::std::move(from);
  }

  inline FsPresentationList& operator=(FsPresentationList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FsPresentationList& default_instance();

  static inline const FsPresentationList* internal_default_instance() {
    return reinterpret_cast<const FsPresentationList*>(
               &_FsPresentationList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(FsPresentationList* other);
  friend void swap(FsPresentationList& a, FsPresentationList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FsPresentationList* New() const PROTOBUF_FINAL { return New(NULL); }

  FsPresentationList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FsPresentationList& from);
  void MergeFrom(const FsPresentationList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FsPresentationList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .storageos_rpc.FsPresentation presentations = 1;
  int presentations_size() const;
  void clear_presentations();
  static const int kPresentationsFieldNumber = 1;
  const ::storageos_rpc::FsPresentation& presentations(int index) const;
  ::storageos_rpc::FsPresentation* mutable_presentations(int index);
  ::storageos_rpc::FsPresentation* add_presentations();
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::FsPresentation >*
      mutable_presentations();
  const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::FsPresentation >&
      presentations() const;

  // @@protoc_insertion_point(class_scope:storageos_rpc.FsPresentationList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::FsPresentation > presentations_;
  mutable int _cached_size_;
  friend struct protobuf_fs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FsVolumeListQuery

// repeated uint32 volume_ids = 1;
inline int FsVolumeListQuery::volume_ids_size() const {
  return volume_ids_.size();
}
inline void FsVolumeListQuery::clear_volume_ids() {
  volume_ids_.Clear();
}
inline ::google::protobuf::uint32 FsVolumeListQuery::volume_ids(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolumeListQuery.volume_ids)
  return volume_ids_.Get(index);
}
inline void FsVolumeListQuery::set_volume_ids(int index, ::google::protobuf::uint32 value) {
  volume_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolumeListQuery.volume_ids)
}
inline void FsVolumeListQuery::add_volume_ids(::google::protobuf::uint32 value) {
  volume_ids_.Add(value);
  // @@protoc_insertion_point(field_add:storageos_rpc.FsVolumeListQuery.volume_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FsVolumeListQuery::volume_ids() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.FsVolumeListQuery.volume_ids)
  return volume_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FsVolumeListQuery::mutable_volume_ids() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.FsVolumeListQuery.volume_ids)
  return &volume_ids_;
}

// -------------------------------------------------------------------

// FsVolumeStatistics

// -------------------------------------------------------------------

// FsVolumeStatus

// .storageos_rpc.FsVolumeState node_state = 1;
inline void FsVolumeStatus::clear_node_state() {
  node_state_ = 0;
}
inline ::storageos_rpc::FsVolumeState FsVolumeStatus::node_state() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolumeStatus.node_state)
  return static_cast< ::storageos_rpc::FsVolumeState >(node_state_);
}
inline void FsVolumeStatus::set_node_state(::storageos_rpc::FsVolumeState value) {
  
  node_state_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolumeStatus.node_state)
}

// -------------------------------------------------------------------

// FsVolume

// .storageos_rpc.DataplaneCommon cc = 1;
inline bool FsVolume::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline void FsVolume::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
inline const ::storageos_rpc::DataplaneCommon& FsVolume::cc() const {
  const ::storageos_rpc::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DataplaneCommon*>(
      &::storageos_rpc::_DataplaneCommon_default_instance_);
}
inline ::storageos_rpc::DataplaneCommon* FsVolume::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::storageos_rpc::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.FsVolume.cc)
  return cc_;
}
inline ::storageos_rpc::DataplaneCommon* FsVolume::release_cc() {
  // @@protoc_insertion_point(field_release:storageos_rpc.FsVolume.cc)
  
  ::storageos_rpc::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void FsVolume::set_allocated_cc(::storageos_rpc::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.FsVolume.cc)
}

// uint32 volume_id = 2;
inline void FsVolume::clear_volume_id() {
  volume_id_ = 0u;
}
inline ::google::protobuf::uint32 FsVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.volume_id)
  return volume_id_;
}
inline void FsVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.volume_id)
}

// .storageos_rpc.FsVolume.VolumeDeviceType node_type = 3;
inline void FsVolume::clear_node_type() {
  node_type_ = 0;
}
inline ::storageos_rpc::FsVolume_VolumeDeviceType FsVolume::node_type() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.node_type)
  return static_cast< ::storageos_rpc::FsVolume_VolumeDeviceType >(node_type_);
}
inline void FsVolume::set_node_type(::storageos_rpc::FsVolume_VolumeDeviceType value) {
  
  node_type_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.node_type)
}

// uint32 device_number = 4;
inline void FsVolume::clear_device_number() {
  device_number_ = 0u;
}
inline ::google::protobuf::uint32 FsVolume::device_number() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.device_number)
  return device_number_;
}
inline void FsVolume::set_device_number(::google::protobuf::uint32 value) {
  
  device_number_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.device_number)
}

// string filename = 5;
inline void FsVolume::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FsVolume::filename() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.filename)
  return filename_.GetNoArena();
}
inline void FsVolume::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.filename)
}
#if LANG_CXX11
inline void FsVolume::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storageos_rpc.FsVolume.filename)
}
#endif
inline void FsVolume::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storageos_rpc.FsVolume.filename)
}
inline void FsVolume::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storageos_rpc.FsVolume.filename)
}
inline ::std::string* FsVolume::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:storageos_rpc.FsVolume.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FsVolume::release_filename() {
  // @@protoc_insertion_point(field_release:storageos_rpc.FsVolume.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FsVolume::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.FsVolume.filename)
}

// bool linked_volume = 6;
inline void FsVolume::clear_linked_volume() {
  linked_volume_ = false;
}
inline bool FsVolume::linked_volume() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.linked_volume)
  return linked_volume_;
}
inline void FsVolume::set_linked_volume(bool value) {
  
  linked_volume_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.linked_volume)
}

// uint32 target_volume_id = 7;
inline void FsVolume::clear_target_volume_id() {
  target_volume_id_ = 0u;
}
inline ::google::protobuf::uint32 FsVolume::target_volume_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.target_volume_id)
  return target_volume_id_;
}
inline void FsVolume::set_target_volume_id(::google::protobuf::uint32 value) {
  
  target_volume_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.target_volume_id)
}

// uint64 volume_size_bytes = 8;
inline void FsVolume::clear_volume_size_bytes() {
  volume_size_bytes_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 FsVolume::volume_size_bytes() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.volume_size_bytes)
  return volume_size_bytes_;
}
inline void FsVolume::set_volume_size_bytes(::google::protobuf::uint64 value) {
  
  volume_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsVolume.volume_size_bytes)
}

// .storageos_rpc.FsVolumeStatistics stats = 9;
inline bool FsVolume::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
inline void FsVolume::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
inline const ::storageos_rpc::FsVolumeStatistics& FsVolume::stats() const {
  const ::storageos_rpc::FsVolumeStatistics* p = stats_;
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::FsVolumeStatistics*>(
      &::storageos_rpc::_FsVolumeStatistics_default_instance_);
}
inline ::storageos_rpc::FsVolumeStatistics* FsVolume::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::storageos_rpc::FsVolumeStatistics;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.FsVolume.stats)
  return stats_;
}
inline ::storageos_rpc::FsVolumeStatistics* FsVolume::release_stats() {
  // @@protoc_insertion_point(field_release:storageos_rpc.FsVolume.stats)
  
  ::storageos_rpc::FsVolumeStatistics* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void FsVolume::set_allocated_stats(::storageos_rpc::FsVolumeStatistics* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.FsVolume.stats)
}

// .storageos_rpc.FsVolumeStatus status = 10;
inline bool FsVolume::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void FsVolume::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::storageos_rpc::FsVolumeStatus& FsVolume::status() const {
  const ::storageos_rpc::FsVolumeStatus* p = status_;
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolume.status)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::FsVolumeStatus*>(
      &::storageos_rpc::_FsVolumeStatus_default_instance_);
}
inline ::storageos_rpc::FsVolumeStatus* FsVolume::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::storageos_rpc::FsVolumeStatus;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.FsVolume.status)
  return status_;
}
inline ::storageos_rpc::FsVolumeStatus* FsVolume::release_status() {
  // @@protoc_insertion_point(field_release:storageos_rpc.FsVolume.status)
  
  ::storageos_rpc::FsVolumeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void FsVolume::set_allocated_status(::storageos_rpc::FsVolumeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.FsVolume.status)
}

// -------------------------------------------------------------------

// FsVolumeList

// repeated .storageos_rpc.FsVolume volumes = 1;
inline int FsVolumeList::volumes_size() const {
  return volumes_.size();
}
inline void FsVolumeList::clear_volumes() {
  volumes_.Clear();
}
inline const ::storageos_rpc::FsVolume& FsVolumeList::volumes(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsVolumeList.volumes)
  return volumes_.Get(index);
}
inline ::storageos_rpc::FsVolume* FsVolumeList::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.FsVolumeList.volumes)
  return volumes_.Mutable(index);
}
inline ::storageos_rpc::FsVolume* FsVolumeList::add_volumes() {
  // @@protoc_insertion_point(field_add:storageos_rpc.FsVolumeList.volumes)
  return volumes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::storageos_rpc::FsVolume >*
FsVolumeList::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.FsVolumeList.volumes)
  return &volumes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::FsVolume >&
FsVolumeList::volumes() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.FsVolumeList.volumes)
  return volumes_;
}

// -------------------------------------------------------------------

// FsPresentationListQuery

// repeated uint32 presentation_id = 1;
inline int FsPresentationListQuery::presentation_id_size() const {
  return presentation_id_.size();
}
inline void FsPresentationListQuery::clear_presentation_id() {
  presentation_id_.Clear();
}
inline ::google::protobuf::uint32 FsPresentationListQuery::presentation_id(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsPresentationListQuery.presentation_id)
  return presentation_id_.Get(index);
}
inline void FsPresentationListQuery::set_presentation_id(int index, ::google::protobuf::uint32 value) {
  presentation_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:storageos_rpc.FsPresentationListQuery.presentation_id)
}
inline void FsPresentationListQuery::add_presentation_id(::google::protobuf::uint32 value) {
  presentation_id_.Add(value);
  // @@protoc_insertion_point(field_add:storageos_rpc.FsPresentationListQuery.presentation_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FsPresentationListQuery::presentation_id() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.FsPresentationListQuery.presentation_id)
  return presentation_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FsPresentationListQuery::mutable_presentation_id() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.FsPresentationListQuery.presentation_id)
  return &presentation_id_;
}

// -------------------------------------------------------------------

// FsPresentation

// .storageos_rpc.DataplaneCommon cc = 1;
inline bool FsPresentation::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline void FsPresentation::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
inline const ::storageos_rpc::DataplaneCommon& FsPresentation::cc() const {
  const ::storageos_rpc::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:storageos_rpc.FsPresentation.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DataplaneCommon*>(
      &::storageos_rpc::_DataplaneCommon_default_instance_);
}
inline ::storageos_rpc::DataplaneCommon* FsPresentation::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::storageos_rpc::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.FsPresentation.cc)
  return cc_;
}
inline ::storageos_rpc::DataplaneCommon* FsPresentation::release_cc() {
  // @@protoc_insertion_point(field_release:storageos_rpc.FsPresentation.cc)
  
  ::storageos_rpc::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void FsPresentation::set_allocated_cc(::storageos_rpc::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.FsPresentation.cc)
}

// uint32 source_id = 2;
inline void FsPresentation::clear_source_id() {
  source_id_ = 0u;
}
inline ::google::protobuf::uint32 FsPresentation::source_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsPresentation.source_id)
  return source_id_;
}
inline void FsPresentation::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsPresentation.source_id)
}

// uint32 target_id = 3;
inline void FsPresentation::clear_target_id() {
  target_id_ = 0u;
}
inline ::google::protobuf::uint32 FsPresentation::target_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsPresentation.target_id)
  return target_id_;
}
inline void FsPresentation::set_target_id(::google::protobuf::uint32 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.FsPresentation.target_id)
}

// .storageos_rpc.FsVolumeStatus status = 5;
inline bool FsPresentation::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void FsPresentation::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::storageos_rpc::FsVolumeStatus& FsPresentation::status() const {
  const ::storageos_rpc::FsVolumeStatus* p = status_;
  // @@protoc_insertion_point(field_get:storageos_rpc.FsPresentation.status)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::FsVolumeStatus*>(
      &::storageos_rpc::_FsVolumeStatus_default_instance_);
}
inline ::storageos_rpc::FsVolumeStatus* FsPresentation::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::storageos_rpc::FsVolumeStatus;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.FsPresentation.status)
  return status_;
}
inline ::storageos_rpc::FsVolumeStatus* FsPresentation::release_status() {
  // @@protoc_insertion_point(field_release:storageos_rpc.FsPresentation.status)
  
  ::storageos_rpc::FsVolumeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void FsPresentation::set_allocated_status(::storageos_rpc::FsVolumeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.FsPresentation.status)
}

// -------------------------------------------------------------------

// FsPresentationList

// repeated .storageos_rpc.FsPresentation presentations = 1;
inline int FsPresentationList::presentations_size() const {
  return presentations_.size();
}
inline void FsPresentationList::clear_presentations() {
  presentations_.Clear();
}
inline const ::storageos_rpc::FsPresentation& FsPresentationList::presentations(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.FsPresentationList.presentations)
  return presentations_.Get(index);
}
inline ::storageos_rpc::FsPresentation* FsPresentationList::mutable_presentations(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.FsPresentationList.presentations)
  return presentations_.Mutable(index);
}
inline ::storageos_rpc::FsPresentation* FsPresentationList::add_presentations() {
  // @@protoc_insertion_point(field_add:storageos_rpc.FsPresentationList.presentations)
  return presentations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::storageos_rpc::FsPresentation >*
FsPresentationList::mutable_presentations() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.FsPresentationList.presentations)
  return &presentations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::FsPresentation >&
FsPresentationList::presentations() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.FsPresentationList.presentations)
  return presentations_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace storageos_rpc

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::storageos_rpc::FsVolume_VolumeDeviceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::storageos_rpc::FsVolume_VolumeDeviceType>() {
  return ::storageos_rpc::FsVolume_VolumeDeviceType_descriptor();
}
template <> struct is_proto_enum< ::storageos_rpc::FsVolumeState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::storageos_rpc::FsVolumeState>() {
  return ::storageos_rpc::FsVolumeState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fs_2eproto__INCLUDED
