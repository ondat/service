// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: director.proto

#ifndef PROTOBUF_director_2eproto__INCLUDED
#define PROTOBUF_director_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace storageos_rpc {
class DirectorRedirect;
class DirectorRedirectDefaultTypeInternal;
extern DirectorRedirectDefaultTypeInternal _DirectorRedirect_default_instance_;
class DirectorRedirectList;
class DirectorRedirectListDefaultTypeInternal;
extern DirectorRedirectListDefaultTypeInternal _DirectorRedirectList_default_instance_;
class DirectorRedirectListQuery;
class DirectorRedirectListQueryDefaultTypeInternal;
extern DirectorRedirectListQueryDefaultTypeInternal _DirectorRedirectListQuery_default_instance_;
class DirectorVolume;
class DirectorVolumeDefaultTypeInternal;
extern DirectorVolumeDefaultTypeInternal _DirectorVolume_default_instance_;
class DirectorVolumeList;
class DirectorVolumeListDefaultTypeInternal;
extern DirectorVolumeListDefaultTypeInternal _DirectorVolumeList_default_instance_;
class DirectorVolumeListQuery;
class DirectorVolumeListQueryDefaultTypeInternal;
extern DirectorVolumeListQueryDefaultTypeInternal _DirectorVolumeListQuery_default_instance_;
class DirectorVolumeStats;
class DirectorVolumeStatsDefaultTypeInternal;
extern DirectorVolumeStatsDefaultTypeInternal _DirectorVolumeStats_default_instance_;
}  // namespace storageos_rpc

namespace storageos_rpc {

namespace protobuf_director_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_director_2eproto

// ===================================================================

class DirectorVolumeListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DirectorVolumeListQuery) */ {
 public:
  DirectorVolumeListQuery();
  virtual ~DirectorVolumeListQuery();

  DirectorVolumeListQuery(const DirectorVolumeListQuery& from);

  inline DirectorVolumeListQuery& operator=(const DirectorVolumeListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorVolumeListQuery(DirectorVolumeListQuery&& from) noexcept
    : DirectorVolumeListQuery() {
    *this = ::std::move(from);
  }

  inline DirectorVolumeListQuery& operator=(DirectorVolumeListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorVolumeListQuery& default_instance();

  static inline const DirectorVolumeListQuery* internal_default_instance() {
    return reinterpret_cast<const DirectorVolumeListQuery*>(
               &_DirectorVolumeListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DirectorVolumeListQuery* other);
  friend void swap(DirectorVolumeListQuery& a, DirectorVolumeListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorVolumeListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorVolumeListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorVolumeListQuery& from);
  void MergeFrom(const DirectorVolumeListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorVolumeListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 volume_ids = 1;
  int volume_ids_size() const;
  void clear_volume_ids();
  static const int kVolumeIdsFieldNumber = 1;
  ::google::protobuf::uint32 volume_ids(int index) const;
  void set_volume_ids(int index, ::google::protobuf::uint32 value);
  void add_volume_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      volume_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_volume_ids();

  // @@protoc_insertion_point(class_scope:storageos_rpc.DirectorVolumeListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > volume_ids_;
  mutable int _volume_ids_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorVolumeStats : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DirectorVolumeStats) */ {
 public:
  DirectorVolumeStats();
  virtual ~DirectorVolumeStats();

  DirectorVolumeStats(const DirectorVolumeStats& from);

  inline DirectorVolumeStats& operator=(const DirectorVolumeStats& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorVolumeStats(DirectorVolumeStats&& from) noexcept
    : DirectorVolumeStats() {
    *this = ::std::move(from);
  }

  inline DirectorVolumeStats& operator=(DirectorVolumeStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorVolumeStats& default_instance();

  static inline const DirectorVolumeStats* internal_default_instance() {
    return reinterpret_cast<const DirectorVolumeStats*>(
               &_DirectorVolumeStats_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DirectorVolumeStats* other);
  friend void swap(DirectorVolumeStats& a, DirectorVolumeStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorVolumeStats* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorVolumeStats* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorVolumeStats& from);
  void MergeFrom(const DirectorVolumeStats& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorVolumeStats* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:storageos_rpc.DirectorVolumeStats)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorVolume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DirectorVolume) */ {
 public:
  DirectorVolume();
  virtual ~DirectorVolume();

  DirectorVolume(const DirectorVolume& from);

  inline DirectorVolume& operator=(const DirectorVolume& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorVolume(DirectorVolume&& from) noexcept
    : DirectorVolume() {
    *this = ::std::move(from);
  }

  inline DirectorVolume& operator=(DirectorVolume&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorVolume& default_instance();

  static inline const DirectorVolume* internal_default_instance() {
    return reinterpret_cast<const DirectorVolume*>(
               &_DirectorVolume_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DirectorVolume* other);
  friend void swap(DirectorVolume& a, DirectorVolume& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorVolume* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorVolume* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorVolume& from);
  void MergeFrom(const DirectorVolume& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorVolume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 replica_ids = 6;
  int replica_ids_size() const;
  void clear_replica_ids();
  static const int kReplicaIdsFieldNumber = 6;
  ::google::protobuf::uint32 replica_ids(int index) const;
  void set_replica_ids(int index, ::google::protobuf::uint32 value);
  void add_replica_ids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      replica_ids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_replica_ids();

  // .storageos_rpc.DataplaneCommonConfig cc = 1;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 1;
  const ::storageos_rpc::DataplaneCommonConfig& cc() const;
  ::storageos_rpc::DataplaneCommonConfig* mutable_cc();
  ::storageos_rpc::DataplaneCommonConfig* release_cc();
  void set_allocated_cc(::storageos_rpc::DataplaneCommonConfig* cc);

  // .storageos_rpc.DirectorVolumeStats stats = 7;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 7;
  const ::storageos_rpc::DirectorVolumeStats& stats() const;
  ::storageos_rpc::DirectorVolumeStats* mutable_stats();
  ::storageos_rpc::DirectorVolumeStats* release_stats();
  void set_allocated_stats(::storageos_rpc::DirectorVolumeStats* stats);

  // uint32 volume_id = 2;
  void clear_volume_id();
  static const int kVolumeIdFieldNumber = 2;
  ::google::protobuf::uint32 volume_id() const;
  void set_volume_id(::google::protobuf::uint32 value);

  // uint32 write_pipe = 3;
  void clear_write_pipe();
  static const int kWritePipeFieldNumber = 3;
  ::google::protobuf::uint32 write_pipe() const;
  void set_write_pipe(::google::protobuf::uint32 value);

  // uint64 qos = 5;
  void clear_qos();
  static const int kQosFieldNumber = 5;
  ::google::protobuf::uint64 qos() const;
  void set_qos(::google::protobuf::uint64 value);

  // uint32 read_pipe = 4;
  void clear_read_pipe();
  static const int kReadPipeFieldNumber = 4;
  ::google::protobuf::uint32 read_pipe() const;
  void set_read_pipe(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:storageos_rpc.DirectorVolume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > replica_ids_;
  mutable int _replica_ids_cached_byte_size_;
  ::storageos_rpc::DataplaneCommonConfig* cc_;
  ::storageos_rpc::DirectorVolumeStats* stats_;
  ::google::protobuf::uint32 volume_id_;
  ::google::protobuf::uint32 write_pipe_;
  ::google::protobuf::uint64 qos_;
  ::google::protobuf::uint32 read_pipe_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorVolumeList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DirectorVolumeList) */ {
 public:
  DirectorVolumeList();
  virtual ~DirectorVolumeList();

  DirectorVolumeList(const DirectorVolumeList& from);

  inline DirectorVolumeList& operator=(const DirectorVolumeList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorVolumeList(DirectorVolumeList&& from) noexcept
    : DirectorVolumeList() {
    *this = ::std::move(from);
  }

  inline DirectorVolumeList& operator=(DirectorVolumeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorVolumeList& default_instance();

  static inline const DirectorVolumeList* internal_default_instance() {
    return reinterpret_cast<const DirectorVolumeList*>(
               &_DirectorVolumeList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DirectorVolumeList* other);
  friend void swap(DirectorVolumeList& a, DirectorVolumeList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorVolumeList* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorVolumeList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorVolumeList& from);
  void MergeFrom(const DirectorVolumeList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorVolumeList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .storageos_rpc.DirectorVolume volumes = 1;
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 1;
  const ::storageos_rpc::DirectorVolume& volumes(int index) const;
  ::storageos_rpc::DirectorVolume* mutable_volumes(int index);
  ::storageos_rpc::DirectorVolume* add_volumes();
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorVolume >*
      mutable_volumes();
  const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorVolume >&
      volumes() const;

  // @@protoc_insertion_point(class_scope:storageos_rpc.DirectorVolumeList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorVolume > volumes_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorRedirectListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DirectorRedirectListQuery) */ {
 public:
  DirectorRedirectListQuery();
  virtual ~DirectorRedirectListQuery();

  DirectorRedirectListQuery(const DirectorRedirectListQuery& from);

  inline DirectorRedirectListQuery& operator=(const DirectorRedirectListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorRedirectListQuery(DirectorRedirectListQuery&& from) noexcept
    : DirectorRedirectListQuery() {
    *this = ::std::move(from);
  }

  inline DirectorRedirectListQuery& operator=(DirectorRedirectListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorRedirectListQuery& default_instance();

  static inline const DirectorRedirectListQuery* internal_default_instance() {
    return reinterpret_cast<const DirectorRedirectListQuery*>(
               &_DirectorRedirectListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DirectorRedirectListQuery* other);
  friend void swap(DirectorRedirectListQuery& a, DirectorRedirectListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorRedirectListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorRedirectListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorRedirectListQuery& from);
  void MergeFrom(const DirectorRedirectListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorRedirectListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 query_id = 1;
  int query_id_size() const;
  void clear_query_id();
  static const int kQueryIdFieldNumber = 1;
  ::google::protobuf::uint32 query_id(int index) const;
  void set_query_id(int index, ::google::protobuf::uint32 value);
  void add_query_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      query_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_query_id();

  // @@protoc_insertion_point(class_scope:storageos_rpc.DirectorRedirectListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > query_id_;
  mutable int _query_id_cached_byte_size_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorRedirect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DirectorRedirect) */ {
 public:
  DirectorRedirect();
  virtual ~DirectorRedirect();

  DirectorRedirect(const DirectorRedirect& from);

  inline DirectorRedirect& operator=(const DirectorRedirect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorRedirect(DirectorRedirect&& from) noexcept
    : DirectorRedirect() {
    *this = ::std::move(from);
  }

  inline DirectorRedirect& operator=(DirectorRedirect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorRedirect& default_instance();

  static inline const DirectorRedirect* internal_default_instance() {
    return reinterpret_cast<const DirectorRedirect*>(
               &_DirectorRedirect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DirectorRedirect* other);
  friend void swap(DirectorRedirect& a, DirectorRedirect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorRedirect* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorRedirect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorRedirect& from);
  void MergeFrom(const DirectorRedirect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorRedirect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .storageos_rpc.DataplaneCommonConfig cc = 1;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 1;
  const ::storageos_rpc::DataplaneCommonConfig& cc() const;
  ::storageos_rpc::DataplaneCommonConfig* mutable_cc();
  ::storageos_rpc::DataplaneCommonConfig* release_cc();
  void set_allocated_cc(::storageos_rpc::DataplaneCommonConfig* cc);

  // uint32 source_id = 2;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  ::google::protobuf::uint32 source_id() const;
  void set_source_id(::google::protobuf::uint32 value);

  // uint32 target_id = 3;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 3;
  ::google::protobuf::uint32 target_id() const;
  void set_target_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:storageos_rpc.DirectorRedirect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::storageos_rpc::DataplaneCommonConfig* cc_;
  ::google::protobuf::uint32 source_id_;
  ::google::protobuf::uint32 target_id_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorRedirectList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DirectorRedirectList) */ {
 public:
  DirectorRedirectList();
  virtual ~DirectorRedirectList();

  DirectorRedirectList(const DirectorRedirectList& from);

  inline DirectorRedirectList& operator=(const DirectorRedirectList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorRedirectList(DirectorRedirectList&& from) noexcept
    : DirectorRedirectList() {
    *this = ::std::move(from);
  }

  inline DirectorRedirectList& operator=(DirectorRedirectList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorRedirectList& default_instance();

  static inline const DirectorRedirectList* internal_default_instance() {
    return reinterpret_cast<const DirectorRedirectList*>(
               &_DirectorRedirectList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DirectorRedirectList* other);
  friend void swap(DirectorRedirectList& a, DirectorRedirectList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorRedirectList* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorRedirectList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorRedirectList& from);
  void MergeFrom(const DirectorRedirectList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorRedirectList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .storageos_rpc.DirectorRedirect redirects = 1;
  int redirects_size() const;
  void clear_redirects();
  static const int kRedirectsFieldNumber = 1;
  const ::storageos_rpc::DirectorRedirect& redirects(int index) const;
  ::storageos_rpc::DirectorRedirect* mutable_redirects(int index);
  ::storageos_rpc::DirectorRedirect* add_redirects();
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorRedirect >*
      mutable_redirects();
  const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorRedirect >&
      redirects() const;

  // @@protoc_insertion_point(class_scope:storageos_rpc.DirectorRedirectList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorRedirect > redirects_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DirectorVolumeListQuery

// repeated uint32 volume_ids = 1;
inline int DirectorVolumeListQuery::volume_ids_size() const {
  return volume_ids_.size();
}
inline void DirectorVolumeListQuery::clear_volume_ids() {
  volume_ids_.Clear();
}
inline ::google::protobuf::uint32 DirectorVolumeListQuery::volume_ids(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolumeListQuery.volume_ids)
  return volume_ids_.Get(index);
}
inline void DirectorVolumeListQuery::set_volume_ids(int index, ::google::protobuf::uint32 value) {
  volume_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolumeListQuery.volume_ids)
}
inline void DirectorVolumeListQuery::add_volume_ids(::google::protobuf::uint32 value) {
  volume_ids_.Add(value);
  // @@protoc_insertion_point(field_add:storageos_rpc.DirectorVolumeListQuery.volume_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DirectorVolumeListQuery::volume_ids() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DirectorVolumeListQuery.volume_ids)
  return volume_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DirectorVolumeListQuery::mutable_volume_ids() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DirectorVolumeListQuery.volume_ids)
  return &volume_ids_;
}

// -------------------------------------------------------------------

// DirectorVolumeStats

// -------------------------------------------------------------------

// DirectorVolume

// .storageos_rpc.DataplaneCommonConfig cc = 1;
inline bool DirectorVolume::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline void DirectorVolume::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
inline const ::storageos_rpc::DataplaneCommonConfig& DirectorVolume::cc() const {
  const ::storageos_rpc::DataplaneCommonConfig* p = cc_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DataplaneCommonConfig*>(
      &::storageos_rpc::_DataplaneCommonConfig_default_instance_);
}
inline ::storageos_rpc::DataplaneCommonConfig* DirectorVolume::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::storageos_rpc::DataplaneCommonConfig;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DirectorVolume.cc)
  return cc_;
}
inline ::storageos_rpc::DataplaneCommonConfig* DirectorVolume::release_cc() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DirectorVolume.cc)
  
  ::storageos_rpc::DataplaneCommonConfig* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void DirectorVolume::set_allocated_cc(::storageos_rpc::DataplaneCommonConfig* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DirectorVolume.cc)
}

// uint32 volume_id = 2;
inline void DirectorVolume::clear_volume_id() {
  volume_id_ = 0u;
}
inline ::google::protobuf::uint32 DirectorVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.volume_id)
  return volume_id_;
}
inline void DirectorVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.volume_id)
}

// uint32 write_pipe = 3;
inline void DirectorVolume::clear_write_pipe() {
  write_pipe_ = 0u;
}
inline ::google::protobuf::uint32 DirectorVolume::write_pipe() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.write_pipe)
  return write_pipe_;
}
inline void DirectorVolume::set_write_pipe(::google::protobuf::uint32 value) {
  
  write_pipe_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.write_pipe)
}

// uint32 read_pipe = 4;
inline void DirectorVolume::clear_read_pipe() {
  read_pipe_ = 0u;
}
inline ::google::protobuf::uint32 DirectorVolume::read_pipe() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.read_pipe)
  return read_pipe_;
}
inline void DirectorVolume::set_read_pipe(::google::protobuf::uint32 value) {
  
  read_pipe_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.read_pipe)
}

// uint64 qos = 5;
inline void DirectorVolume::clear_qos() {
  qos_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DirectorVolume::qos() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.qos)
  return qos_;
}
inline void DirectorVolume::set_qos(::google::protobuf::uint64 value) {
  
  qos_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.qos)
}

// repeated uint32 replica_ids = 6;
inline int DirectorVolume::replica_ids_size() const {
  return replica_ids_.size();
}
inline void DirectorVolume::clear_replica_ids() {
  replica_ids_.Clear();
}
inline ::google::protobuf::uint32 DirectorVolume::replica_ids(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.replica_ids)
  return replica_ids_.Get(index);
}
inline void DirectorVolume::set_replica_ids(int index, ::google::protobuf::uint32 value) {
  replica_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.replica_ids)
}
inline void DirectorVolume::add_replica_ids(::google::protobuf::uint32 value) {
  replica_ids_.Add(value);
  // @@protoc_insertion_point(field_add:storageos_rpc.DirectorVolume.replica_ids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DirectorVolume::replica_ids() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DirectorVolume.replica_ids)
  return replica_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DirectorVolume::mutable_replica_ids() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DirectorVolume.replica_ids)
  return &replica_ids_;
}

// .storageos_rpc.DirectorVolumeStats stats = 7;
inline bool DirectorVolume::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
inline void DirectorVolume::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
inline const ::storageos_rpc::DirectorVolumeStats& DirectorVolume::stats() const {
  const ::storageos_rpc::DirectorVolumeStats* p = stats_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DirectorVolumeStats*>(
      &::storageos_rpc::_DirectorVolumeStats_default_instance_);
}
inline ::storageos_rpc::DirectorVolumeStats* DirectorVolume::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::storageos_rpc::DirectorVolumeStats;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DirectorVolume.stats)
  return stats_;
}
inline ::storageos_rpc::DirectorVolumeStats* DirectorVolume::release_stats() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DirectorVolume.stats)
  
  ::storageos_rpc::DirectorVolumeStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void DirectorVolume::set_allocated_stats(::storageos_rpc::DirectorVolumeStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DirectorVolume.stats)
}

// -------------------------------------------------------------------

// DirectorVolumeList

// repeated .storageos_rpc.DirectorVolume volumes = 1;
inline int DirectorVolumeList::volumes_size() const {
  return volumes_.size();
}
inline void DirectorVolumeList::clear_volumes() {
  volumes_.Clear();
}
inline const ::storageos_rpc::DirectorVolume& DirectorVolumeList::volumes(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolumeList.volumes)
  return volumes_.Get(index);
}
inline ::storageos_rpc::DirectorVolume* DirectorVolumeList::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DirectorVolumeList.volumes)
  return volumes_.Mutable(index);
}
inline ::storageos_rpc::DirectorVolume* DirectorVolumeList::add_volumes() {
  // @@protoc_insertion_point(field_add:storageos_rpc.DirectorVolumeList.volumes)
  return volumes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorVolume >*
DirectorVolumeList::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DirectorVolumeList.volumes)
  return &volumes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorVolume >&
DirectorVolumeList::volumes() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DirectorVolumeList.volumes)
  return volumes_;
}

// -------------------------------------------------------------------

// DirectorRedirectListQuery

// repeated uint32 query_id = 1;
inline int DirectorRedirectListQuery::query_id_size() const {
  return query_id_.size();
}
inline void DirectorRedirectListQuery::clear_query_id() {
  query_id_.Clear();
}
inline ::google::protobuf::uint32 DirectorRedirectListQuery::query_id(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorRedirectListQuery.query_id)
  return query_id_.Get(index);
}
inline void DirectorRedirectListQuery::set_query_id(int index, ::google::protobuf::uint32 value) {
  query_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorRedirectListQuery.query_id)
}
inline void DirectorRedirectListQuery::add_query_id(::google::protobuf::uint32 value) {
  query_id_.Add(value);
  // @@protoc_insertion_point(field_add:storageos_rpc.DirectorRedirectListQuery.query_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DirectorRedirectListQuery::query_id() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DirectorRedirectListQuery.query_id)
  return query_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DirectorRedirectListQuery::mutable_query_id() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DirectorRedirectListQuery.query_id)
  return &query_id_;
}

// -------------------------------------------------------------------

// DirectorRedirect

// .storageos_rpc.DataplaneCommonConfig cc = 1;
inline bool DirectorRedirect::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline void DirectorRedirect::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
inline const ::storageos_rpc::DataplaneCommonConfig& DirectorRedirect::cc() const {
  const ::storageos_rpc::DataplaneCommonConfig* p = cc_;
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorRedirect.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DataplaneCommonConfig*>(
      &::storageos_rpc::_DataplaneCommonConfig_default_instance_);
}
inline ::storageos_rpc::DataplaneCommonConfig* DirectorRedirect::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::storageos_rpc::DataplaneCommonConfig;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DirectorRedirect.cc)
  return cc_;
}
inline ::storageos_rpc::DataplaneCommonConfig* DirectorRedirect::release_cc() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DirectorRedirect.cc)
  
  ::storageos_rpc::DataplaneCommonConfig* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void DirectorRedirect::set_allocated_cc(::storageos_rpc::DataplaneCommonConfig* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DirectorRedirect.cc)
}

// uint32 source_id = 2;
inline void DirectorRedirect::clear_source_id() {
  source_id_ = 0u;
}
inline ::google::protobuf::uint32 DirectorRedirect::source_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorRedirect.source_id)
  return source_id_;
}
inline void DirectorRedirect::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorRedirect.source_id)
}

// uint32 target_id = 3;
inline void DirectorRedirect::clear_target_id() {
  target_id_ = 0u;
}
inline ::google::protobuf::uint32 DirectorRedirect::target_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorRedirect.target_id)
  return target_id_;
}
inline void DirectorRedirect::set_target_id(::google::protobuf::uint32 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorRedirect.target_id)
}

// -------------------------------------------------------------------

// DirectorRedirectList

// repeated .storageos_rpc.DirectorRedirect redirects = 1;
inline int DirectorRedirectList::redirects_size() const {
  return redirects_.size();
}
inline void DirectorRedirectList::clear_redirects() {
  redirects_.Clear();
}
inline const ::storageos_rpc::DirectorRedirect& DirectorRedirectList::redirects(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorRedirectList.redirects)
  return redirects_.Get(index);
}
inline ::storageos_rpc::DirectorRedirect* DirectorRedirectList::mutable_redirects(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DirectorRedirectList.redirects)
  return redirects_.Mutable(index);
}
inline ::storageos_rpc::DirectorRedirect* DirectorRedirectList::add_redirects() {
  // @@protoc_insertion_point(field_add:storageos_rpc.DirectorRedirectList.redirects)
  return redirects_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorRedirect >*
DirectorRedirectList::mutable_redirects() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DirectorRedirectList.redirects)
  return &redirects_;
}
inline const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::DirectorRedirect >&
DirectorRedirectList::redirects() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DirectorRedirectList.redirects)
  return redirects_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace storageos_rpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_director_2eproto__INCLUDED
