// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: director.proto

#ifndef PROTOBUF_director_2eproto__INCLUDED
#define PROTOBUF_director_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace storageos_rpc {
class DirectorRedirect;
class DirectorRedirectDefaultTypeInternal;
extern DirectorRedirectDefaultTypeInternal _DirectorRedirect_default_instance_;
class DirectorRedirectListQuery;
class DirectorRedirectListQueryDefaultTypeInternal;
extern DirectorRedirectListQueryDefaultTypeInternal _DirectorRedirectListQuery_default_instance_;
class DirectorVolume;
class DirectorVolumeDefaultTypeInternal;
extern DirectorVolumeDefaultTypeInternal _DirectorVolume_default_instance_;
class DirectorVolumeListQuery;
class DirectorVolumeListQueryDefaultTypeInternal;
extern DirectorVolumeListQueryDefaultTypeInternal _DirectorVolumeListQuery_default_instance_;
class DirectorVolume_LabelsEntry;
class DirectorVolume_LabelsEntryDefaultTypeInternal;
extern DirectorVolume_LabelsEntryDefaultTypeInternal _DirectorVolume_LabelsEntry_default_instance_;
class DirectorVolume_StatusEntry;
class DirectorVolume_StatusEntryDefaultTypeInternal;
extern DirectorVolume_StatusEntryDefaultTypeInternal _DirectorVolume_StatusEntry_default_instance_;
}  // namespace storageos_rpc

namespace storageos_rpc {

namespace protobuf_director_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_director_2eproto

// ===================================================================

class DirectorVolumeListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DirectorVolumeListQuery) */ {
 public:
  DirectorVolumeListQuery();
  virtual ~DirectorVolumeListQuery();

  DirectorVolumeListQuery(const DirectorVolumeListQuery& from);

  inline DirectorVolumeListQuery& operator=(const DirectorVolumeListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorVolumeListQuery(DirectorVolumeListQuery&& from) noexcept
    : DirectorVolumeListQuery() {
    *this = ::std::move(from);
  }

  inline DirectorVolumeListQuery& operator=(DirectorVolumeListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorVolumeListQuery& default_instance();

  static inline const DirectorVolumeListQuery* internal_default_instance() {
    return reinterpret_cast<const DirectorVolumeListQuery*>(
               &_DirectorVolumeListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DirectorVolumeListQuery* other);
  friend void swap(DirectorVolumeListQuery& a, DirectorVolumeListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorVolumeListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorVolumeListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorVolumeListQuery& from);
  void MergeFrom(const DirectorVolumeListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorVolumeListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:storageos_rpc.DirectorVolumeListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class DirectorVolume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DirectorVolume) */ {
 public:
  DirectorVolume();
  virtual ~DirectorVolume();

  DirectorVolume(const DirectorVolume& from);

  inline DirectorVolume& operator=(const DirectorVolume& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorVolume(DirectorVolume&& from) noexcept
    : DirectorVolume() {
    *this = ::std::move(from);
  }

  inline DirectorVolume& operator=(DirectorVolume&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorVolume& default_instance();

  static inline const DirectorVolume* internal_default_instance() {
    return reinterpret_cast<const DirectorVolume*>(
               &_DirectorVolume_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DirectorVolume* other);
  friend void swap(DirectorVolume& a, DirectorVolume& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorVolume* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorVolume* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorVolume& from);
  void MergeFrom(const DirectorVolume& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorVolume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 4;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // repeated uint32 replica_id = 6;
  int replica_id_size() const;
  void clear_replica_id();
  static const int kReplicaIdFieldNumber = 6;
  ::google::protobuf::uint32 replica_id(int index) const;
  void set_replica_id(int index, ::google::protobuf::uint32 value);
  void add_replica_id(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      replica_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_replica_id();

  // map<string, string> status = 7;
  int status_size() const;
  void clear_status();
  static const int kStatusFieldNumber = 7;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      status() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_status();

  // uint32 volume_id = 1;
  void clear_volume_id();
  static const int kVolumeIdFieldNumber = 1;
  ::google::protobuf::uint32 volume_id() const;
  void set_volume_id(::google::protobuf::uint32 value);

  // uint32 write_pipe = 2;
  void clear_write_pipe();
  static const int kWritePipeFieldNumber = 2;
  ::google::protobuf::uint32 write_pipe() const;
  void set_write_pipe(::google::protobuf::uint32 value);

  // uint64 qos = 5;
  void clear_qos();
  static const int kQosFieldNumber = 5;
  ::google::protobuf::uint64 qos() const;
  void set_qos(::google::protobuf::uint64 value);

  // uint32 read_pipe = 3;
  void clear_read_pipe();
  static const int kReadPipeFieldNumber = 3;
  ::google::protobuf::uint32 read_pipe() const;
  void set_read_pipe(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:storageos_rpc.DirectorVolume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class DirectorVolume_LabelsEntry : public ::google::protobuf::internal::MapEntry<DirectorVolume_LabelsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<DirectorVolume_LabelsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    DirectorVolume_LabelsEntry();
    DirectorVolume_LabelsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const DirectorVolume_LabelsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_DirectorVolume_LabelsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      DirectorVolume_LabelsEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  private:
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > replica_id_;
  mutable int _replica_id_cached_byte_size_;
  public:
  class DirectorVolume_StatusEntry : public ::google::protobuf::internal::MapEntry<DirectorVolume_StatusEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<DirectorVolume_StatusEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    DirectorVolume_StatusEntry();
    DirectorVolume_StatusEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const DirectorVolume_StatusEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_DirectorVolume_StatusEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      DirectorVolume_StatusEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > status_;
  private:
  ::google::protobuf::uint32 volume_id_;
  ::google::protobuf::uint32 write_pipe_;
  ::google::protobuf::uint64 qos_;
  ::google::protobuf::uint32 read_pipe_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorRedirectListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DirectorRedirectListQuery) */ {
 public:
  DirectorRedirectListQuery();
  virtual ~DirectorRedirectListQuery();

  DirectorRedirectListQuery(const DirectorRedirectListQuery& from);

  inline DirectorRedirectListQuery& operator=(const DirectorRedirectListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorRedirectListQuery(DirectorRedirectListQuery&& from) noexcept
    : DirectorRedirectListQuery() {
    *this = ::std::move(from);
  }

  inline DirectorRedirectListQuery& operator=(DirectorRedirectListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorRedirectListQuery& default_instance();

  static inline const DirectorRedirectListQuery* internal_default_instance() {
    return reinterpret_cast<const DirectorRedirectListQuery*>(
               &_DirectorRedirectListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DirectorRedirectListQuery* other);
  friend void swap(DirectorRedirectListQuery& a, DirectorRedirectListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorRedirectListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorRedirectListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorRedirectListQuery& from);
  void MergeFrom(const DirectorRedirectListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorRedirectListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:storageos_rpc.DirectorRedirectListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DirectorRedirect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DirectorRedirect) */ {
 public:
  DirectorRedirect();
  virtual ~DirectorRedirect();

  DirectorRedirect(const DirectorRedirect& from);

  inline DirectorRedirect& operator=(const DirectorRedirect& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DirectorRedirect(DirectorRedirect&& from) noexcept
    : DirectorRedirect() {
    *this = ::std::move(from);
  }

  inline DirectorRedirect& operator=(DirectorRedirect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectorRedirect& default_instance();

  static inline const DirectorRedirect* internal_default_instance() {
    return reinterpret_cast<const DirectorRedirect*>(
               &_DirectorRedirect_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DirectorRedirect* other);
  friend void swap(DirectorRedirect& a, DirectorRedirect& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DirectorRedirect* New() const PROTOBUF_FINAL { return New(NULL); }

  DirectorRedirect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DirectorRedirect& from);
  void MergeFrom(const DirectorRedirect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DirectorRedirect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 source_id = 1;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::uint32 source_id() const;
  void set_source_id(::google::protobuf::uint32 value);

  // uint32 target_id = 2;
  void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  ::google::protobuf::uint32 target_id() const;
  void set_target_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:storageos_rpc.DirectorRedirect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 source_id_;
  ::google::protobuf::uint32 target_id_;
  mutable int _cached_size_;
  friend struct protobuf_director_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DirectorVolumeListQuery

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DirectorVolume

// uint32 volume_id = 1;
inline void DirectorVolume::clear_volume_id() {
  volume_id_ = 0u;
}
inline ::google::protobuf::uint32 DirectorVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.volume_id)
  return volume_id_;
}
inline void DirectorVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.volume_id)
}

// uint32 write_pipe = 2;
inline void DirectorVolume::clear_write_pipe() {
  write_pipe_ = 0u;
}
inline ::google::protobuf::uint32 DirectorVolume::write_pipe() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.write_pipe)
  return write_pipe_;
}
inline void DirectorVolume::set_write_pipe(::google::protobuf::uint32 value) {
  
  write_pipe_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.write_pipe)
}

// uint32 read_pipe = 3;
inline void DirectorVolume::clear_read_pipe() {
  read_pipe_ = 0u;
}
inline ::google::protobuf::uint32 DirectorVolume::read_pipe() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.read_pipe)
  return read_pipe_;
}
inline void DirectorVolume::set_read_pipe(::google::protobuf::uint32 value) {
  
  read_pipe_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.read_pipe)
}

// map<string, string> labels = 4;
inline int DirectorVolume::labels_size() const {
  return labels_.size();
}
inline void DirectorVolume::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
DirectorVolume::labels() const {
  // @@protoc_insertion_point(field_map:storageos_rpc.DirectorVolume.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
DirectorVolume::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:storageos_rpc.DirectorVolume.labels)
  return labels_.MutableMap();
}

// uint64 qos = 5;
inline void DirectorVolume::clear_qos() {
  qos_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 DirectorVolume::qos() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.qos)
  return qos_;
}
inline void DirectorVolume::set_qos(::google::protobuf::uint64 value) {
  
  qos_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.qos)
}

// repeated uint32 replica_id = 6;
inline int DirectorVolume::replica_id_size() const {
  return replica_id_.size();
}
inline void DirectorVolume::clear_replica_id() {
  replica_id_.Clear();
}
inline ::google::protobuf::uint32 DirectorVolume::replica_id(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorVolume.replica_id)
  return replica_id_.Get(index);
}
inline void DirectorVolume::set_replica_id(int index, ::google::protobuf::uint32 value) {
  replica_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorVolume.replica_id)
}
inline void DirectorVolume::add_replica_id(::google::protobuf::uint32 value) {
  replica_id_.Add(value);
  // @@protoc_insertion_point(field_add:storageos_rpc.DirectorVolume.replica_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DirectorVolume::replica_id() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.DirectorVolume.replica_id)
  return replica_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DirectorVolume::mutable_replica_id() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.DirectorVolume.replica_id)
  return &replica_id_;
}

// map<string, string> status = 7;
inline int DirectorVolume::status_size() const {
  return status_.size();
}
inline void DirectorVolume::clear_status() {
  status_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
DirectorVolume::status() const {
  // @@protoc_insertion_point(field_map:storageos_rpc.DirectorVolume.status)
  return status_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
DirectorVolume::mutable_status() {
  // @@protoc_insertion_point(field_mutable_map:storageos_rpc.DirectorVolume.status)
  return status_.MutableMap();
}

// -------------------------------------------------------------------

// DirectorRedirectListQuery

// -------------------------------------------------------------------

// DirectorRedirect

// uint32 source_id = 1;
inline void DirectorRedirect::clear_source_id() {
  source_id_ = 0u;
}
inline ::google::protobuf::uint32 DirectorRedirect::source_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorRedirect.source_id)
  return source_id_;
}
inline void DirectorRedirect::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorRedirect.source_id)
}

// uint32 target_id = 2;
inline void DirectorRedirect::clear_target_id() {
  target_id_ = 0u;
}
inline ::google::protobuf::uint32 DirectorRedirect::target_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DirectorRedirect.target_id)
  return target_id_;
}
inline void DirectorRedirect::set_target_id(::google::protobuf::uint32 value) {
  
  target_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.DirectorRedirect.target_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace storageos_rpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_director_2eproto__INCLUDED
