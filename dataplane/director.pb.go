// Code generated by protoc-gen-go. DO NOT EDIT.
// source: director.proto

/*
Package storageos_rpc is a generated protocol buffer package.

It is generated from these files:
	director.proto

It has these top-level messages:
	DirectorVolumeListQuery
	DirectorVolumeStats
	DirectorVolume
	DirectorVolumeList
	DirectorRedirectListQuery
	DirectorRedirect
	DirectorRedirectList
*/
package storageos_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import storageos_rpc1 "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DirectorVolumeListQuery struct {
	// A possibly-empty list of volume IDs to query.
	VolumeIds []uint32 `protobuf:"varint,1,rep,packed,name=volume_ids,json=volumeIds" json:"volume_ids,omitempty"`
}

func (m *DirectorVolumeListQuery) Reset()                    { *m = DirectorVolumeListQuery{} }
func (m *DirectorVolumeListQuery) String() string            { return proto.CompactTextString(m) }
func (*DirectorVolumeListQuery) ProtoMessage()               {}
func (*DirectorVolumeListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DirectorVolumeListQuery) GetVolumeIds() []uint32 {
	if m != nil {
		return m.VolumeIds
	}
	return nil
}

type DirectorVolumeStats struct {
}

func (m *DirectorVolumeStats) Reset()                    { *m = DirectorVolumeStats{} }
func (m *DirectorVolumeStats) String() string            { return proto.CompactTextString(m) }
func (*DirectorVolumeStats) ProtoMessage()               {}
func (*DirectorVolumeStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// *
// Volume message for Director RPCs.
//
// Note this does should not be used to configure redirect inodes, volumes that point
// at other volumes. Use DirectorRedirect for that.
type DirectorVolume struct {
	Cc *storageos_rpc1.DataplaneCommonConfig `protobuf:"bytes,1,opt,name=cc" json:"cc,omitempty"`
	// The volume ID.
	VolumeId uint32 `protobuf:"varint,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// The write_pipe (identifies the plugin).
	WritePipe uint32 `protobuf:"varint,3,opt,name=write_pipe,json=writePipe" json:"write_pipe,omitempty"`
	// The read pipe (should be write_pipe + 1 in all current plugins).
	ReadPipe uint32 `protobuf:"varint,4,opt,name=read_pipe,json=readPipe" json:"read_pipe,omitempty"`
	// Quality of service indicator.
	Qos uint64 `protobuf:"varint,5,opt,name=qos" json:"qos,omitempty"`
	// List of replica inodes.
	ReplicaIds []uint32 `protobuf:"varint,6,rep,packed,name=replica_ids,json=replicaIds" json:"replica_ids,omitempty"`
	// Volume statistics.
	Stats *DirectorVolumeStats `protobuf:"bytes,7,opt,name=stats" json:"stats,omitempty"`
}

func (m *DirectorVolume) Reset()                    { *m = DirectorVolume{} }
func (m *DirectorVolume) String() string            { return proto.CompactTextString(m) }
func (*DirectorVolume) ProtoMessage()               {}
func (*DirectorVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DirectorVolume) GetCc() *storageos_rpc1.DataplaneCommonConfig {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DirectorVolume) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *DirectorVolume) GetWritePipe() uint32 {
	if m != nil {
		return m.WritePipe
	}
	return 0
}

func (m *DirectorVolume) GetReadPipe() uint32 {
	if m != nil {
		return m.ReadPipe
	}
	return 0
}

func (m *DirectorVolume) GetQos() uint64 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *DirectorVolume) GetReplicaIds() []uint32 {
	if m != nil {
		return m.ReplicaIds
	}
	return nil
}

func (m *DirectorVolume) GetStats() *DirectorVolumeStats {
	if m != nil {
		return m.Stats
	}
	return nil
}

type DirectorVolumeList struct {
	Volumes []*DirectorVolume `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
}

func (m *DirectorVolumeList) Reset()                    { *m = DirectorVolumeList{} }
func (m *DirectorVolumeList) String() string            { return proto.CompactTextString(m) }
func (*DirectorVolumeList) ProtoMessage()               {}
func (*DirectorVolumeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DirectorVolumeList) GetVolumes() []*DirectorVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type DirectorRedirectListQuery struct {
	// A possibly-empty list of volume IDs to query.
	QueryId []uint32 `protobuf:"varint,1,rep,packed,name=query_id,json=queryId" json:"query_id,omitempty"`
}

func (m *DirectorRedirectListQuery) Reset()                    { *m = DirectorRedirectListQuery{} }
func (m *DirectorRedirectListQuery) String() string            { return proto.CompactTextString(m) }
func (*DirectorRedirectListQuery) ProtoMessage()               {}
func (*DirectorRedirectListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DirectorRedirectListQuery) GetQueryId() []uint32 {
	if m != nil {
		return m.QueryId
	}
	return nil
}

// *
// Redirect volume message for Director RPCs.
//
// The minimum amount of information required to specify the 'presentation' or source volume,
// the volume that is presented to the user and (usually) mounted. All actual work
// is done on the target volume, which has actual storage associated with it.
type DirectorRedirect struct {
	Cc *storageos_rpc1.DataplaneCommonConfig `protobuf:"bytes,1,opt,name=cc" json:"cc,omitempty"`
	// The inode the user mounts or opens.
	SourceId uint32 `protobuf:"varint,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	// The underlying inode of the StorageOS volume.
	TargetId uint32 `protobuf:"varint,3,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
}

func (m *DirectorRedirect) Reset()                    { *m = DirectorRedirect{} }
func (m *DirectorRedirect) String() string            { return proto.CompactTextString(m) }
func (*DirectorRedirect) ProtoMessage()               {}
func (*DirectorRedirect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DirectorRedirect) GetCc() *storageos_rpc1.DataplaneCommonConfig {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DirectorRedirect) GetSourceId() uint32 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *DirectorRedirect) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

type DirectorRedirectList struct {
	Redirects []*DirectorRedirect `protobuf:"bytes,1,rep,name=redirects" json:"redirects,omitempty"`
}

func (m *DirectorRedirectList) Reset()                    { *m = DirectorRedirectList{} }
func (m *DirectorRedirectList) String() string            { return proto.CompactTextString(m) }
func (*DirectorRedirectList) ProtoMessage()               {}
func (*DirectorRedirectList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DirectorRedirectList) GetRedirects() []*DirectorRedirect {
	if m != nil {
		return m.Redirects
	}
	return nil
}

func init() {
	proto.RegisterType((*DirectorVolumeListQuery)(nil), "storageos_rpc.DirectorVolumeListQuery")
	proto.RegisterType((*DirectorVolumeStats)(nil), "storageos_rpc.DirectorVolumeStats")
	proto.RegisterType((*DirectorVolume)(nil), "storageos_rpc.DirectorVolume")
	proto.RegisterType((*DirectorVolumeList)(nil), "storageos_rpc.DirectorVolumeList")
	proto.RegisterType((*DirectorRedirectListQuery)(nil), "storageos_rpc.DirectorRedirectListQuery")
	proto.RegisterType((*DirectorRedirect)(nil), "storageos_rpc.DirectorRedirect")
	proto.RegisterType((*DirectorRedirectList)(nil), "storageos_rpc.DirectorRedirectList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DirectorConfig service

type DirectorConfigClient interface {
	// *
	// Add configuration for the given DirectorVolume message.
	//
	// @return  RpcResult
	VolumeConfigure(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error)
	// *
	// Remove configuration for the given DirectorVolume message.
	//
	// returns RpcResult
	VolumeUnconfigure(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error)
	// *
	// List configured volumes, optionally filtered using a DirectorVolumeListQuery
	// message.
	//
	// returns  A DirectorVolumeList message containing DirectorVolume objects,
	//          if any are found matching the filter
	VolumeList(ctx context.Context, in *DirectorVolumeListQuery, opts ...grpc.CallOption) (*DirectorVolumeList, error)
	// *
	// Add configuration for a redirection volume specified in the DirectorRedirect message.
	//
	// returns RpcResult
	RedirectConfigure(ctx context.Context, in *DirectorRedirect, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error)
	// *
	// Remove configuration for the redirection volume specified in the DirectorRedirect message.
	//
	// returns RpcResult
	RedirectUnconfigure(ctx context.Context, in *DirectorRedirect, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error)
	// *
	// List configured redirection volumes, optionally filtered using a DirectorRedirectListQuery
	// message.
	//
	// returns A DirectorRedirectList message containing DirectorRedirect mesages,
	//         if any are found matching the filter.
	RedirectList(ctx context.Context, in *DirectorRedirectListQuery, opts ...grpc.CallOption) (*DirectorRedirectList, error)
}

type directorConfigClient struct {
	cc *grpc.ClientConn
}

func NewDirectorConfigClient(cc *grpc.ClientConn) DirectorConfigClient {
	return &directorConfigClient{cc}
}

func (c *directorConfigClient) VolumeConfigure(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error) {
	out := new(storageos_rpc1.RpcResult)
	err := grpc.Invoke(ctx, "/storageos_rpc.DirectorConfig/VolumeConfigure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorConfigClient) VolumeUnconfigure(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error) {
	out := new(storageos_rpc1.RpcResult)
	err := grpc.Invoke(ctx, "/storageos_rpc.DirectorConfig/VolumeUnconfigure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorConfigClient) VolumeList(ctx context.Context, in *DirectorVolumeListQuery, opts ...grpc.CallOption) (*DirectorVolumeList, error) {
	out := new(DirectorVolumeList)
	err := grpc.Invoke(ctx, "/storageos_rpc.DirectorConfig/VolumeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorConfigClient) RedirectConfigure(ctx context.Context, in *DirectorRedirect, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error) {
	out := new(storageos_rpc1.RpcResult)
	err := grpc.Invoke(ctx, "/storageos_rpc.DirectorConfig/RedirectConfigure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorConfigClient) RedirectUnconfigure(ctx context.Context, in *DirectorRedirect, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error) {
	out := new(storageos_rpc1.RpcResult)
	err := grpc.Invoke(ctx, "/storageos_rpc.DirectorConfig/RedirectUnconfigure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorConfigClient) RedirectList(ctx context.Context, in *DirectorRedirectListQuery, opts ...grpc.CallOption) (*DirectorRedirectList, error) {
	out := new(DirectorRedirectList)
	err := grpc.Invoke(ctx, "/storageos_rpc.DirectorConfig/RedirectList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DirectorConfig service

type DirectorConfigServer interface {
	// *
	// Add configuration for the given DirectorVolume message.
	//
	// @return  RpcResult
	VolumeConfigure(context.Context, *DirectorVolume) (*storageos_rpc1.RpcResult, error)
	// *
	// Remove configuration for the given DirectorVolume message.
	//
	// returns RpcResult
	VolumeUnconfigure(context.Context, *DirectorVolume) (*storageos_rpc1.RpcResult, error)
	// *
	// List configured volumes, optionally filtered using a DirectorVolumeListQuery
	// message.
	//
	// returns  A DirectorVolumeList message containing DirectorVolume objects,
	//          if any are found matching the filter
	VolumeList(context.Context, *DirectorVolumeListQuery) (*DirectorVolumeList, error)
	// *
	// Add configuration for a redirection volume specified in the DirectorRedirect message.
	//
	// returns RpcResult
	RedirectConfigure(context.Context, *DirectorRedirect) (*storageos_rpc1.RpcResult, error)
	// *
	// Remove configuration for the redirection volume specified in the DirectorRedirect message.
	//
	// returns RpcResult
	RedirectUnconfigure(context.Context, *DirectorRedirect) (*storageos_rpc1.RpcResult, error)
	// *
	// List configured redirection volumes, optionally filtered using a DirectorRedirectListQuery
	// message.
	//
	// returns A DirectorRedirectList message containing DirectorRedirect mesages,
	//         if any are found matching the filter.
	RedirectList(context.Context, *DirectorRedirectListQuery) (*DirectorRedirectList, error)
}

func RegisterDirectorConfigServer(s *grpc.Server, srv DirectorConfigServer) {
	s.RegisterService(&_DirectorConfig_serviceDesc, srv)
}

func _DirectorConfig_VolumeConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorConfigServer).VolumeConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.DirectorConfig/VolumeConfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorConfigServer).VolumeConfigure(ctx, req.(*DirectorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorConfig_VolumeUnconfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorConfigServer).VolumeUnconfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.DirectorConfig/VolumeUnconfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorConfigServer).VolumeUnconfigure(ctx, req.(*DirectorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorConfig_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorVolumeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorConfigServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.DirectorConfig/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorConfigServer).VolumeList(ctx, req.(*DirectorVolumeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorConfig_RedirectConfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorRedirect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorConfigServer).RedirectConfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.DirectorConfig/RedirectConfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorConfigServer).RedirectConfigure(ctx, req.(*DirectorRedirect))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorConfig_RedirectUnconfigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorRedirect)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorConfigServer).RedirectUnconfigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.DirectorConfig/RedirectUnconfigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorConfigServer).RedirectUnconfigure(ctx, req.(*DirectorRedirect))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorConfig_RedirectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorRedirectListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorConfigServer).RedirectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.DirectorConfig/RedirectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorConfigServer).RedirectList(ctx, req.(*DirectorRedirectListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _DirectorConfig_serviceDesc = grpc.ServiceDesc{
	ServiceName: "storageos_rpc.DirectorConfig",
	HandlerType: (*DirectorConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VolumeConfigure",
			Handler:    _DirectorConfig_VolumeConfigure_Handler,
		},
		{
			MethodName: "VolumeUnconfigure",
			Handler:    _DirectorConfig_VolumeUnconfigure_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _DirectorConfig_VolumeList_Handler,
		},
		{
			MethodName: "RedirectConfigure",
			Handler:    _DirectorConfig_RedirectConfigure_Handler,
		},
		{
			MethodName: "RedirectUnconfigure",
			Handler:    _DirectorConfig_RedirectUnconfigure_Handler,
		},
		{
			MethodName: "RedirectList",
			Handler:    _DirectorConfig_RedirectList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "director.proto",
}

func init() { proto.RegisterFile("director.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0xcd, 0x26, 0x69, 0x93, 0x4c, 0x9a, 0xd2, 0xba, 0x20, 0xb6, 0x41, 0x55, 0x83, 0x41, 0x68,
	0x4f, 0x39, 0x04, 0x04, 0xbd, 0x70, 0x6a, 0x2f, 0x2b, 0x15, 0x54, 0x8c, 0x8a, 0xc4, 0x29, 0x5a,
	0xbc, 0x26, 0xb2, 0x94, 0xc4, 0xae, 0xed, 0x05, 0x71, 0xe5, 0xcc, 0x81, 0x4f, 0x46, 0xf6, 0x74,
	0xbb, 0x49, 0x0a, 0x09, 0x82, 0xde, 0xd6, 0xef, 0xcd, 0x8c, 0xe7, 0xbd, 0x67, 0x2d, 0xec, 0xe6,
	0xd2, 0x08, 0xee, 0x94, 0x19, 0x6a, 0xa3, 0x9c, 0x22, 0x3d, 0xeb, 0x94, 0xc9, 0x26, 0x42, 0xd9,
	0xb1, 0xd1, 0xbc, 0xbf, 0xc3, 0xd5, 0x6c, 0xa6, 0xe6, 0x48, 0xd2, 0x13, 0x78, 0x78, 0x76, 0x5d,
	0xfe, 0x41, 0x4d, 0x8b, 0x99, 0x38, 0x97, 0xd6, 0xbd, 0x2b, 0x84, 0xf9, 0x46, 0x8e, 0x00, 0xbe,
	0x04, 0x68, 0x2c, 0x73, 0x1b, 0x47, 0x83, 0x46, 0xd2, 0x63, 0x1d, 0x44, 0xd2, 0xdc, 0xd2, 0x07,
	0x70, 0xb0, 0xdc, 0xf9, 0xde, 0x65, 0xce, 0xd2, 0x1f, 0x75, 0xd8, 0x5d, 0xc6, 0xc9, 0x0b, 0xa8,
	0x73, 0x1e, 0x47, 0x83, 0x28, 0xe9, 0x8e, 0x9e, 0x0e, 0x97, 0xb6, 0x19, 0x9e, 0x65, 0x2e, 0xd3,
	0xd3, 0x6c, 0x2e, 0x4e, 0xc3, 0x56, 0xa7, 0x6a, 0xfe, 0x59, 0x4e, 0x58, 0x9d, 0x73, 0xf2, 0x08,
	0x3a, 0x37, 0xd7, 0xc7, 0xf5, 0x41, 0x94, 0xf4, 0x58, 0xbb, 0xbc, 0xdd, 0xef, 0xf6, 0xd5, 0x48,
	0x27, 0xc6, 0x5a, 0x6a, 0x11, 0x37, 0x02, 0xdb, 0x09, 0xc8, 0x85, 0xd4, 0xc2, 0xf7, 0x1a, 0x91,
	0xe5, 0xc8, 0x36, 0xb1, 0xd7, 0x03, 0x81, 0xdc, 0x83, 0xc6, 0x95, 0xb2, 0xf1, 0xd6, 0x20, 0x4a,
	0x9a, 0xcc, 0x7f, 0x92, 0x63, 0xe8, 0x1a, 0xa1, 0xa7, 0x92, 0x67, 0x41, 0xea, 0x76, 0x90, 0x0a,
	0xd7, 0x50, 0x9a, 0x5b, 0x72, 0x02, 0x5b, 0xd6, 0xab, 0x8b, 0x5b, 0x41, 0x04, 0x5d, 0x15, 0x71,
	0xdb, 0x07, 0x86, 0x0d, 0xf4, 0x0d, 0x90, 0xdb, 0xfe, 0x92, 0x57, 0xd0, 0x42, 0x29, 0xe8, 0x6b,
	0x77, 0x74, 0xb4, 0x76, 0x22, 0x2b, 0xab, 0xe9, 0x4b, 0x38, 0x2c, 0x29, 0x26, 0x30, 0xe7, 0x2a,
	0xb0, 0x43, 0x68, 0x5f, 0xf9, 0x0f, 0x6f, 0x18, 0xc6, 0xd5, 0x0a, 0xe7, 0x34, 0xa7, 0xdf, 0x23,
	0xd8, 0x5b, 0x6d, 0xfc, 0xf7, 0x5c, 0xac, 0x2a, 0x0c, 0x5f, 0xcc, 0x05, 0x81, 0x34, 0xf7, 0xa4,
	0xcb, 0xcc, 0x44, 0x38, 0x4f, 0x62, 0x2c, 0x6d, 0x04, 0xd2, 0x9c, 0x5e, 0xc2, 0xfd, 0xdf, 0x2d,
	0x4f, 0x5e, 0xfb, 0xb4, 0xf0, 0x5c, 0xfa, 0x71, 0xfc, 0x07, 0x3f, 0xca, 0x3e, 0x56, 0x75, 0x8c,
	0x7e, 0x36, 0xab, 0x17, 0x87, 0x7b, 0x92, 0x73, 0xb8, 0x87, 0xce, 0xe1, 0xb9, 0x30, 0x82, 0xac,
	0x77, 0xb8, 0x1f, 0xaf, 0xd0, 0x4c, 0x73, 0x26, 0x6c, 0x31, 0x75, 0xb4, 0x46, 0xde, 0xc2, 0x3e,
	0x56, 0x5d, 0xce, 0xf9, 0x5d, 0xcc, 0xfb, 0x08, 0xb0, 0xf0, 0x16, 0x9e, 0xad, 0x1d, 0x74, 0x93,
	0x6e, 0xff, 0xf1, 0xc6, 0x3a, 0x5a, 0x23, 0x17, 0xb0, 0x5f, 0x5a, 0x54, 0x49, 0xdf, 0x64, 0xe6,
	0xda, 0x65, 0x19, 0x1c, 0x94, 0x75, 0x8b, 0xf2, 0xff, 0x6b, 0xe6, 0x18, 0x76, 0x96, 0x1e, 0x40,
	0xb2, 0x61, 0x58, 0x65, 0xc2, 0x93, 0xbf, 0xa8, 0xa4, 0xb5, 0x4f, 0xdb, 0xe1, 0xe7, 0xf6, 0xfc,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x05, 0x24, 0xa2, 0x0b, 0x05, 0x00, 0x00,
}
