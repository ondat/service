// Code generated by protoc-gen-go. DO NOT EDIT.
// source: director.proto

/*
Package storageos_rpc is a generated protocol buffer package.

It is generated from these files:
	director.proto

It has these top-level messages:
	DirectorVolumeListQuery
	DirectorVolumeStatistics
	DirectorVolumeStatus
	DirectorVolume
	DirectorVolumeList
	DirectorPresentationListQuery
	DirectorPresentation
	DirectorPresentationList
*/
package storageos_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import storageos_rpc1 "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DirectorVolumeListQuery struct {
	// A possibly-empty list of volume IDs to query.
	VolumeIds []uint32 `protobuf:"varint,1,rep,packed,name=volume_ids,json=volumeIds" json:"volume_ids,omitempty"`
}

func (m *DirectorVolumeListQuery) Reset()                    { *m = DirectorVolumeListQuery{} }
func (m *DirectorVolumeListQuery) String() string            { return proto.CompactTextString(m) }
func (*DirectorVolumeListQuery) ProtoMessage()               {}
func (*DirectorVolumeListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DirectorVolumeListQuery) GetVolumeIds() []uint32 {
	if m != nil {
		return m.VolumeIds
	}
	return nil
}

type DirectorVolumeStatistics struct {
}

func (m *DirectorVolumeStatistics) Reset()                    { *m = DirectorVolumeStatistics{} }
func (m *DirectorVolumeStatistics) String() string            { return proto.CompactTextString(m) }
func (*DirectorVolumeStatistics) ProtoMessage()               {}
func (*DirectorVolumeStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DirectorVolumeStatus struct {
}

func (m *DirectorVolumeStatus) Reset()                    { *m = DirectorVolumeStatus{} }
func (m *DirectorVolumeStatus) String() string            { return proto.CompactTextString(m) }
func (*DirectorVolumeStatus) ProtoMessage()               {}
func (*DirectorVolumeStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// *
// Volume message for Director RPCs.
//
// Note this does should not be used to configure Presentation inodes, volumes that point
// at other volumes. Use DirectorPresentation for that.
type DirectorVolume struct {
	Cc *storageos_rpc1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc" json:"cc,omitempty"`
	// The volume ID.
	VolumeId uint32 `protobuf:"varint,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// The write_pipe (identifies the plugin).
	WritePipe uint32 `protobuf:"varint,3,opt,name=write_pipe,json=writePipe" json:"write_pipe,omitempty"`
	// The read pipe (should be write_pipe + 1 in all current plugins).
	ReadPipe uint32 `protobuf:"varint,4,opt,name=read_pipe,json=readPipe" json:"read_pipe,omitempty"`
	// Quality of service indicator.
	Qos uint64 `protobuf:"varint,5,opt,name=qos" json:"qos,omitempty"`
	// List of replica inodes.
	ReplicaIds []uint32 `protobuf:"varint,6,rep,packed,name=replica_ids,json=replicaIds" json:"replica_ids,omitempty"`
	// Volume statistics.
	Stats *DirectorVolumeStatistics `protobuf:"bytes,7,opt,name=stats" json:"stats,omitempty"`
	// Volume status, e.g. retry condition.
	Status *DirectorVolumeStatus `protobuf:"bytes,8,opt,name=status" json:"status,omitempty"`
}

func (m *DirectorVolume) Reset()                    { *m = DirectorVolume{} }
func (m *DirectorVolume) String() string            { return proto.CompactTextString(m) }
func (*DirectorVolume) ProtoMessage()               {}
func (*DirectorVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DirectorVolume) GetCc() *storageos_rpc1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DirectorVolume) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *DirectorVolume) GetWritePipe() uint32 {
	if m != nil {
		return m.WritePipe
	}
	return 0
}

func (m *DirectorVolume) GetReadPipe() uint32 {
	if m != nil {
		return m.ReadPipe
	}
	return 0
}

func (m *DirectorVolume) GetQos() uint64 {
	if m != nil {
		return m.Qos
	}
	return 0
}

func (m *DirectorVolume) GetReplicaIds() []uint32 {
	if m != nil {
		return m.ReplicaIds
	}
	return nil
}

func (m *DirectorVolume) GetStats() *DirectorVolumeStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *DirectorVolume) GetStatus() *DirectorVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type DirectorVolumeList struct {
	Volumes []*DirectorVolume `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
}

func (m *DirectorVolumeList) Reset()                    { *m = DirectorVolumeList{} }
func (m *DirectorVolumeList) String() string            { return proto.CompactTextString(m) }
func (*DirectorVolumeList) ProtoMessage()               {}
func (*DirectorVolumeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DirectorVolumeList) GetVolumes() []*DirectorVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type DirectorPresentationListQuery struct {
	// A possibly-empty list of volume IDs to query.
	PresentationId []uint32 `protobuf:"varint,1,rep,packed,name=presentation_id,json=presentationId" json:"presentation_id,omitempty"`
}

func (m *DirectorPresentationListQuery) Reset()                    { *m = DirectorPresentationListQuery{} }
func (m *DirectorPresentationListQuery) String() string            { return proto.CompactTextString(m) }
func (*DirectorPresentationListQuery) ProtoMessage()               {}
func (*DirectorPresentationListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DirectorPresentationListQuery) GetPresentationId() []uint32 {
	if m != nil {
		return m.PresentationId
	}
	return nil
}

// *
// Presentation volume message for Director RPCs.
//
// The minimum amount of information required to specify the 'presentation' or source volume,
// the volume that is presented to the user and (usually) mounted. All actual work
// is done on the target volume, which has actual storage associated with it.
type DirectorPresentation struct {
	Cc *storageos_rpc1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc" json:"cc,omitempty"`
	// The inode the user mounts or opens.
	SourceId uint32 `protobuf:"varint,2,opt,name=source_id,json=sourceId" json:"source_id,omitempty"`
	// The underlying inode of the StorageOS volume.
	TargetId uint32 `protobuf:"varint,3,opt,name=target_id,json=targetId" json:"target_id,omitempty"`
}

func (m *DirectorPresentation) Reset()                    { *m = DirectorPresentation{} }
func (m *DirectorPresentation) String() string            { return proto.CompactTextString(m) }
func (*DirectorPresentation) ProtoMessage()               {}
func (*DirectorPresentation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DirectorPresentation) GetCc() *storageos_rpc1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DirectorPresentation) GetSourceId() uint32 {
	if m != nil {
		return m.SourceId
	}
	return 0
}

func (m *DirectorPresentation) GetTargetId() uint32 {
	if m != nil {
		return m.TargetId
	}
	return 0
}

type DirectorPresentationList struct {
	Presentations []*DirectorPresentation `protobuf:"bytes,1,rep,name=presentations" json:"presentations,omitempty"`
}

func (m *DirectorPresentationList) Reset()                    { *m = DirectorPresentationList{} }
func (m *DirectorPresentationList) String() string            { return proto.CompactTextString(m) }
func (*DirectorPresentationList) ProtoMessage()               {}
func (*DirectorPresentationList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DirectorPresentationList) GetPresentations() []*DirectorPresentation {
	if m != nil {
		return m.Presentations
	}
	return nil
}

func init() {
	proto.RegisterType((*DirectorVolumeListQuery)(nil), "storageos_rpc.DirectorVolumeListQuery")
	proto.RegisterType((*DirectorVolumeStatistics)(nil), "storageos_rpc.DirectorVolumeStatistics")
	proto.RegisterType((*DirectorVolumeStatus)(nil), "storageos_rpc.DirectorVolumeStatus")
	proto.RegisterType((*DirectorVolume)(nil), "storageos_rpc.DirectorVolume")
	proto.RegisterType((*DirectorVolumeList)(nil), "storageos_rpc.DirectorVolumeList")
	proto.RegisterType((*DirectorPresentationListQuery)(nil), "storageos_rpc.DirectorPresentationListQuery")
	proto.RegisterType((*DirectorPresentation)(nil), "storageos_rpc.DirectorPresentation")
	proto.RegisterType((*DirectorPresentationList)(nil), "storageos_rpc.DirectorPresentationList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Director service

type DirectorClient interface {
	// *
	// Add configuration for the given DirectorVolume message.
	//
	// @return  RpcResult
	VolumeCreate(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error)
	// *
	// Update configuration for the given DirectorVolume message.
	//
	// @return  RpcResult
	VolumeUpdate(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error)
	// *
	// Remove configuration for the given DirectorVolume message.
	//
	// returns RpcResult
	VolumeDelete(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error)
	// *
	// List configured volumes, optionally filtered using a DirectorVolumeListQuery
	// message.
	//
	// returns  A DirectorVolumeList message containing DirectorVolume objects,
	//          if any are found matching the filter
	VolumeList(ctx context.Context, in *DirectorVolumeListQuery, opts ...grpc.CallOption) (*DirectorVolumeList, error)
	// *
	// Add configuration for a Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationCreate(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error)
	// *
	// Update configuration for a Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationUpdate(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error)
	// *
	// Remove configuration for the Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationDelete(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error)
	// *
	// List configured Presentation volumes, optionally filtered using a DirectorPresentationListQuery
	// message.
	//
	// returns A DirectorPresentationList message containing DirectorPresentation mesages,
	//         if any are found matching the filter.
	PresentationList(ctx context.Context, in *DirectorPresentationListQuery, opts ...grpc.CallOption) (*DirectorPresentationList, error)
}

type directorClient struct {
	cc *grpc.ClientConn
}

func NewDirectorClient(cc *grpc.ClientConn) DirectorClient {
	return &directorClient{cc}
}

func (c *directorClient) VolumeCreate(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error) {
	out := new(storageos_rpc1.RpcResult)
	err := grpc.Invoke(ctx, "/storageos_rpc.Director/VolumeCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) VolumeUpdate(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error) {
	out := new(storageos_rpc1.RpcResult)
	err := grpc.Invoke(ctx, "/storageos_rpc.Director/VolumeUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) VolumeDelete(ctx context.Context, in *DirectorVolume, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error) {
	out := new(storageos_rpc1.RpcResult)
	err := grpc.Invoke(ctx, "/storageos_rpc.Director/VolumeDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) VolumeList(ctx context.Context, in *DirectorVolumeListQuery, opts ...grpc.CallOption) (*DirectorVolumeList, error) {
	out := new(DirectorVolumeList)
	err := grpc.Invoke(ctx, "/storageos_rpc.Director/VolumeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) PresentationCreate(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error) {
	out := new(storageos_rpc1.RpcResult)
	err := grpc.Invoke(ctx, "/storageos_rpc.Director/PresentationCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) PresentationUpdate(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error) {
	out := new(storageos_rpc1.RpcResult)
	err := grpc.Invoke(ctx, "/storageos_rpc.Director/PresentationUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) PresentationDelete(ctx context.Context, in *DirectorPresentation, opts ...grpc.CallOption) (*storageos_rpc1.RpcResult, error) {
	out := new(storageos_rpc1.RpcResult)
	err := grpc.Invoke(ctx, "/storageos_rpc.Director/PresentationDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorClient) PresentationList(ctx context.Context, in *DirectorPresentationListQuery, opts ...grpc.CallOption) (*DirectorPresentationList, error) {
	out := new(DirectorPresentationList)
	err := grpc.Invoke(ctx, "/storageos_rpc.Director/PresentationList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Director service

type DirectorServer interface {
	// *
	// Add configuration for the given DirectorVolume message.
	//
	// @return  RpcResult
	VolumeCreate(context.Context, *DirectorVolume) (*storageos_rpc1.RpcResult, error)
	// *
	// Update configuration for the given DirectorVolume message.
	//
	// @return  RpcResult
	VolumeUpdate(context.Context, *DirectorVolume) (*storageos_rpc1.RpcResult, error)
	// *
	// Remove configuration for the given DirectorVolume message.
	//
	// returns RpcResult
	VolumeDelete(context.Context, *DirectorVolume) (*storageos_rpc1.RpcResult, error)
	// *
	// List configured volumes, optionally filtered using a DirectorVolumeListQuery
	// message.
	//
	// returns  A DirectorVolumeList message containing DirectorVolume objects,
	//          if any are found matching the filter
	VolumeList(context.Context, *DirectorVolumeListQuery) (*DirectorVolumeList, error)
	// *
	// Add configuration for a Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationCreate(context.Context, *DirectorPresentation) (*storageos_rpc1.RpcResult, error)
	// *
	// Update configuration for a Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationUpdate(context.Context, *DirectorPresentation) (*storageos_rpc1.RpcResult, error)
	// *
	// Remove configuration for the Presentation volume specified in the DirectorPresentation message.
	//
	// returns RpcResult
	PresentationDelete(context.Context, *DirectorPresentation) (*storageos_rpc1.RpcResult, error)
	// *
	// List configured Presentation volumes, optionally filtered using a DirectorPresentationListQuery
	// message.
	//
	// returns A DirectorPresentationList message containing DirectorPresentation mesages,
	//         if any are found matching the filter.
	PresentationList(context.Context, *DirectorPresentationListQuery) (*DirectorPresentationList, error)
}

func RegisterDirectorServer(s *grpc.Server, srv DirectorServer) {
	s.RegisterService(&_Director_serviceDesc, srv)
}

func _Director_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.Director/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).VolumeCreate(ctx, req.(*DirectorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_VolumeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).VolumeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.Director/VolumeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).VolumeUpdate(ctx, req.(*DirectorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.Director/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).VolumeDelete(ctx, req.(*DirectorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorVolumeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.Director/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).VolumeList(ctx, req.(*DirectorVolumeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_PresentationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorPresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).PresentationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.Director/PresentationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).PresentationCreate(ctx, req.(*DirectorPresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_PresentationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorPresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).PresentationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.Director/PresentationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).PresentationUpdate(ctx, req.(*DirectorPresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_PresentationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorPresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).PresentationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.Director/PresentationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).PresentationDelete(ctx, req.(*DirectorPresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Director_PresentationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectorPresentationListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServer).PresentationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storageos_rpc.Director/PresentationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServer).PresentationList(ctx, req.(*DirectorPresentationListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Director_serviceDesc = grpc.ServiceDesc{
	ServiceName: "storageos_rpc.Director",
	HandlerType: (*DirectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VolumeCreate",
			Handler:    _Director_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeUpdate",
			Handler:    _Director_VolumeUpdate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _Director_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _Director_VolumeList_Handler,
		},
		{
			MethodName: "PresentationCreate",
			Handler:    _Director_PresentationCreate_Handler,
		},
		{
			MethodName: "PresentationUpdate",
			Handler:    _Director_PresentationUpdate_Handler,
		},
		{
			MethodName: "PresentationDelete",
			Handler:    _Director_PresentationDelete_Handler,
		},
		{
			MethodName: "PresentationList",
			Handler:    _Director_PresentationList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "director.proto",
}

func init() { proto.RegisterFile("director.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 508 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x8a, 0x13, 0x41,
	0x14, 0xcc, 0x24, 0x9b, 0x6c, 0xf2, 0xb2, 0x89, 0x4b, 0x23, 0x3a, 0x44, 0xa2, 0xb1, 0x05, 0x93,
	0x83, 0xe4, 0x10, 0x0f, 0x0a, 0xe2, 0x69, 0x73, 0x70, 0x40, 0x61, 0x6d, 0x59, 0xc1, 0x53, 0x68,
	0x7b, 0x1e, 0xcb, 0x60, 0x92, 0x6e, 0xbb, 0x7b, 0x14, 0x6f, 0x7e, 0x96, 0x9f, 0xe0, 0x67, 0xc9,
	0x74, 0xcf, 0xec, 0x4c, 0x12, 0x36, 0x1b, 0xdc, 0xbd, 0x0d, 0x55, 0xaf, 0x8a, 0x9a, 0x7a, 0x8f,
	0x86, 0x7e, 0x9c, 0x68, 0x14, 0x56, 0xea, 0xa9, 0xd2, 0xd2, 0x4a, 0xd2, 0x33, 0x56, 0x6a, 0x7e,
	0x89, 0xd2, 0x2c, 0xb4, 0x12, 0x83, 0x13, 0x21, 0x57, 0x2b, 0xb9, 0xf6, 0x24, 0x7d, 0x0d, 0x0f,
	0xe7, 0xf9, 0xf8, 0x67, 0xb9, 0x4c, 0x57, 0xf8, 0x3e, 0x31, 0xf6, 0x63, 0x8a, 0xfa, 0x17, 0x19,
	0x02, 0xfc, 0x70, 0xd0, 0x22, 0x89, 0x4d, 0x18, 0x8c, 0x1a, 0x93, 0x1e, 0xeb, 0x78, 0x24, 0x8a,
	0x0d, 0x1d, 0x40, 0xb8, 0xa9, 0xfc, 0x64, 0xb9, 0x4d, 0x8c, 0x4d, 0x84, 0xa1, 0x0f, 0xe0, 0xfe,
	0x2e, 0x97, 0x1a, 0xfa, 0xb7, 0x0e, 0xfd, 0x4d, 0x82, 0x4c, 0xa1, 0x2e, 0x44, 0x18, 0x8c, 0x82,
	0x49, 0x77, 0xf6, 0x78, 0xba, 0x11, 0x75, 0x3a, 0xe7, 0x96, 0xab, 0x25, 0x5f, 0xe3, 0x99, 0x8b,
	0xcc, 0xea, 0x42, 0x90, 0x47, 0xd0, 0xb9, 0x4a, 0x15, 0xd6, 0x47, 0xc1, 0xa4, 0xc7, 0xda, 0x45,
	0xa8, 0x2c, 0xf2, 0x4f, 0x9d, 0x58, 0x5c, 0xa8, 0x44, 0x61, 0xd8, 0x70, 0x6c, 0xc7, 0x21, 0xe7,
	0x89, 0xc2, 0x4c, 0xab, 0x91, 0xc7, 0x9e, 0x3d, 0xf2, 0xda, 0x0c, 0x70, 0xe4, 0x29, 0x34, 0xbe,
	0x4b, 0x13, 0x36, 0x47, 0xc1, 0xe4, 0x88, 0x65, 0x9f, 0xe4, 0x09, 0x74, 0x35, 0xaa, 0x65, 0x22,
	0xb8, 0x6b, 0xa0, 0xe5, 0x1a, 0x80, 0x1c, 0x8a, 0x62, 0x43, 0xde, 0x42, 0xd3, 0x58, 0x6e, 0x4d,
	0x78, 0xec, 0xe2, 0x8f, 0xb7, 0xe3, 0x5f, 0x53, 0x0f, 0xf3, 0x2a, 0xf2, 0x06, 0x5a, 0xc6, 0xf5,
	0x12, 0xb6, 0x9d, 0xfe, 0xd9, 0x8d, 0xfa, 0xd4, 0xb0, 0x5c, 0x42, 0x3f, 0x00, 0xd9, 0x5d, 0x1c,
	0x79, 0x05, 0xc7, 0xbe, 0x0c, 0xbf, 0xb0, 0xee, 0x6c, 0xb8, 0xd7, 0x93, 0x15, 0xd3, 0xf4, 0x1d,
	0x0c, 0x0b, 0xea, 0x5c, 0xa3, 0xc1, 0x75, 0x96, 0x56, 0xae, 0xcb, 0x6b, 0x18, 0xc3, 0x3d, 0x55,
	0x21, 0xb2, 0xf6, 0xfd, 0x49, 0xf4, 0xab, 0x70, 0x14, 0xd3, 0xdf, 0x41, 0xb9, 0xfc, 0xaa, 0xd5,
	0xff, 0x6c, 0xda, 0xc8, 0x54, 0x8b, 0xea, 0xa6, 0x3d, 0x10, 0xc5, 0x19, 0x69, 0xb9, 0xbe, 0x44,
	0x9b, 0x91, 0x7e, 0xd1, 0x6d, 0x0f, 0x44, 0x31, 0xc5, 0xf2, 0x34, 0xb7, 0x7f, 0x86, 0x44, 0xd0,
	0xab, 0x06, 0x2e, 0x7a, 0xba, 0xae, 0xfb, 0xaa, 0x9e, 0x6d, 0x2a, 0x67, 0x7f, 0x9a, 0xd0, 0x2e,
	0xe6, 0x48, 0x04, 0x27, 0xbe, 0xd3, 0x33, 0x8d, 0xdc, 0x22, 0xd9, 0x5f, 0xfc, 0x20, 0xdc, 0xa2,
	0x99, 0x12, 0x0c, 0x4d, 0xba, 0xb4, 0xb4, 0x56, 0x5a, 0x5d, 0xa8, 0xf8, 0xae, 0xac, 0xe6, 0xb8,
	0xc4, 0xdb, 0x59, 0x7d, 0x01, 0xa8, 0x1c, 0xda, 0xf3, 0xbd, 0x46, 0x57, 0x67, 0x33, 0x78, 0x7a,
	0xe3, 0x1c, 0xad, 0x91, 0x0b, 0x20, 0xd5, 0x9e, 0xf3, 0x06, 0x0f, 0x59, 0xc9, 0xde, 0xc4, 0x5b,
	0xb6, 0x79, 0x9b, 0x77, 0x6d, 0x9b, 0x37, 0x7b, 0x6b, 0xdb, 0x6f, 0x70, 0xba, 0x73, 0xac, 0x2f,
	0x0e, 0x30, 0x2d, 0xbb, 0x1e, 0x1f, 0x38, 0x4d, 0x6b, 0x5f, 0x5b, 0xee, 0xf5, 0x7f, 0xf9, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0xc3, 0xc1, 0xec, 0x8a, 0x2c, 0x06, 0x00, 0x00,
}
