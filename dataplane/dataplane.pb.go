// Code generated by protoc-gen-go.
// source: dataplane.proto
// DO NOT EDIT!

/*
Package dataplane is a generated protocol buffer package.

It is generated from these files:
	dataplane.proto

It has these top-level messages:
	NodeConfiguration
	ObjectMeta
	Host
	Volume
	PresentationSpec
	VolumeSpec
*/
package dataplane

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type PresentationSpec_VolumeReadiness int32

const (
	PresentationSpec_READINESS_UNKNOWN PresentationSpec_VolumeReadiness = 0
	PresentationSpec_READINESS_PENDING PresentationSpec_VolumeReadiness = 1
	PresentationSpec_READINESS_READY   PresentationSpec_VolumeReadiness = 2
)

var PresentationSpec_VolumeReadiness_name = map[int32]string{
	0: "READINESS_UNKNOWN",
	1: "READINESS_PENDING",
	2: "READINESS_READY",
}
var PresentationSpec_VolumeReadiness_value = map[string]int32{
	"READINESS_UNKNOWN": 0,
	"READINESS_PENDING": 1,
	"READINESS_READY":   2,
}

func (x PresentationSpec_VolumeReadiness) String() string {
	return proto.EnumName(PresentationSpec_VolumeReadiness_name, int32(x))
}
func (PresentationSpec_VolumeReadiness) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{4, 0}
}

// Note that enum values use C++ scoping rules, meaning that enum values are
// siblings of their type, not children of it.  Therefore, "UNKNOWN" must be unique
// within "dataplane.VolumeSpec", not just within "VolumeHealth".
type VolumeSpec_VolumeStatus int32

const (
	VolumeSpec_STATUS_UNKNOWN     VolumeSpec_VolumeStatus = 0
	VolumeSpec_STATUS_PENDING     VolumeSpec_VolumeStatus = 1
	VolumeSpec_STATUS_ACTIVE      VolumeSpec_VolumeStatus = 2
	VolumeSpec_STATUS_UNAVAILABLE VolumeSpec_VolumeStatus = 3
	VolumeSpec_STATUS_FAILED      VolumeSpec_VolumeStatus = 4
	VolumeSpec_STATUS_DELETING    VolumeSpec_VolumeStatus = 5
)

var VolumeSpec_VolumeStatus_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "STATUS_PENDING",
	2: "STATUS_ACTIVE",
	3: "STATUS_UNAVAILABLE",
	4: "STATUS_FAILED",
	5: "STATUS_DELETING",
}
var VolumeSpec_VolumeStatus_value = map[string]int32{
	"STATUS_UNKNOWN":     0,
	"STATUS_PENDING":     1,
	"STATUS_ACTIVE":      2,
	"STATUS_UNAVAILABLE": 3,
	"STATUS_FAILED":      4,
	"STATUS_DELETING":    5,
}

func (x VolumeSpec_VolumeStatus) String() string {
	return proto.EnumName(VolumeSpec_VolumeStatus_name, int32(x))
}
func (VolumeSpec_VolumeStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type VolumeSpec_VolumeHealth int32

const (
	VolumeSpec_HEALTH_UNKNOWN       VolumeSpec_VolumeHealth = 0
	VolumeSpec_HEALTH_SYNCHRONISING VolumeSpec_VolumeHealth = 1
	VolumeSpec_HEALTH_HEALTHY       VolumeSpec_VolumeHealth = 2
	VolumeSpec_HEALTH_SUSPECT       VolumeSpec_VolumeHealth = 3
	VolumeSpec_HEALTH_DEGRADED      VolumeSpec_VolumeHealth = 4
	VolumeSpec_HEALTH_FAILED        VolumeSpec_VolumeHealth = 5
)

var VolumeSpec_VolumeHealth_name = map[int32]string{
	0: "HEALTH_UNKNOWN",
	1: "HEALTH_SYNCHRONISING",
	2: "HEALTH_HEALTHY",
	3: "HEALTH_SUSPECT",
	4: "HEALTH_DEGRADED",
	5: "HEALTH_FAILED",
}
var VolumeSpec_VolumeHealth_value = map[string]int32{
	"HEALTH_UNKNOWN":       0,
	"HEALTH_SYNCHRONISING": 1,
	"HEALTH_HEALTHY":       2,
	"HEALTH_SUSPECT":       3,
	"HEALTH_DEGRADED":      4,
	"HEALTH_FAILED":        5,
}

func (x VolumeSpec_VolumeHealth) String() string {
	return proto.EnumName(VolumeSpec_VolumeHealth_name, int32(x))
}
func (VolumeSpec_VolumeHealth) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 1} }

type NodeConfiguration struct {
	// Computed host ID, unique for each Host. Is used to
	// send data through virtual volumes.
	Host uint32 `protobuf:"varint,4,opt,name=host" json:"host,omitempty"`
}

func (m *NodeConfiguration) Reset()                    { *m = NodeConfiguration{} }
func (m *NodeConfiguration) String() string            { return proto.CompactTextString(m) }
func (*NodeConfiguration) ProtoMessage()               {}
func (*NodeConfiguration) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ObjectMeta is metadata that all persisted resources must have, which includes all objects
// users must create.
type ObjectMeta struct {
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// UID is the unique in time and space value for this object. It is typically generated by
	// the server on successful creation of a resource and is not allowed to change on PUT
	// operations.
	//
	// Populated by the system.
	// Read-only.
	// +optional
	Uid string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	// An opaque value that represents the internal version of this object that can
	// be used by clients to determine when objects have changed. May be used for optimistic
	// concurrency, change detection, and the watch operation on a resource or set of resources.
	// Clients must treat these values as opaque and passed unmodified back to the server.
	// They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system.
	// Read-only.
	// Value must be treated as opaque by clients and .
	// +optional
	ResourceVersion string `protobuf:"bytes,3,opt,name=resourceVersion" json:"resourceVersion,omitempty"`
	// CreationTimestamp is a timestamp representing the server time when this object was
	// created. It is not guaranteed to be set in happens-before order across separate operations.
	// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	//
	// Populated by the system.
	// Read-only.
	// Null for lists.
	// +optional
	CreationTimestamp *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=creationTimestamp" json:"creationTimestamp,omitempty"`
	// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
	// field is set by the server when a graceful deletion is requested by the user, and is not
	// directly settable by a client. The resource is expected to be deleted (no longer visible
	// from resource lists, and not reachable by name) after the time in this field. Once set,
	// this value may not be unset or be set further into the future, although it may be shortened
	// or the resource may be deleted prior to this time. For example, a user may request that
	// a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination
	// signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard
	// termination signal (SIGKILL) to the container and after cleanup, remove the pod from the
	// API. In the presence of network partitions, this object may still exist after this
	// timestamp, until an administrator or automated process can determine the resource is
	// fully terminated.
	// If not set, graceful deletion of the object has not been requested.
	//
	// Populated by the system when a graceful deletion is requested.
	// Read-only.
	// +optional
	DeletionTimestamp *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=deletionTimestamp" json:"deletionTimestamp,omitempty"`
	// Number of seconds allowed for this object to gracefully terminate before
	// it will be removed from the system. Only set when deletionTimestamp is also set.
	// May only be shortened.
	// Read-only.
	// +optional
	DeletionGracePeriodSeconds int64 `protobuf:"varint,6,opt,name=deletionGracePeriodSeconds" json:"deletionGracePeriodSeconds,omitempty"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// +optional
	Labels map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// +optional
	Annotations map[string]string `protobuf:"bytes,8,rep,name=annotations" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ObjectMeta) Reset()                    { *m = ObjectMeta{} }
func (m *ObjectMeta) String() string            { return proto.CompactTextString(m) }
func (*ObjectMeta) ProtoMessage()               {}
func (*ObjectMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ObjectMeta) GetCreationTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreationTimestamp
	}
	return nil
}

func (m *ObjectMeta) GetDeletionTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.DeletionTimestamp
	}
	return nil
}

func (m *ObjectMeta) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ObjectMeta) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type Host struct {
	// Standard object metadata.
	Metadata *ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Computed host ID, unique for each Host. It's being used
	// by virtuals to access remote volumes.
	Id uint32 `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	// Current host status
	Active bool `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
	// Host address where client should connect to
	Address string `protobuf:"bytes,4,opt,name=address" json:"address,omitempty"`
	// Host port where client should connect to
	Port int32 `protobuf:"varint,5,opt,name=port" json:"port,omitempty"`
}

func (m *Host) Reset()                    { *m = Host{} }
func (m *Host) String() string            { return proto.CompactTextString(m) }
func (*Host) ProtoMessage()               {}
func (*Host) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Host) GetMetadata() *ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Volume struct {
	// Standard object metadata.
	Metadata *ObjectMeta `protobuf:"bytes,1,opt,name=metadata" json:"metadata,omitempty"`
	// Volume size in Gigabytes, applies for presentation,
	// master and replica volume specs.
	Size uint64 `protobuf:"varint,2,opt,name=size" json:"size,omitempty"`
	// Specification of the desired behaviour of the presentation volume
	// (which is available for filesystem to mount)
	Presentation *PresentationSpec `protobuf:"bytes,3,opt,name=presentation" json:"presentation,omitempty"`
	// Specification of the desired behavior of the master volume.
	Master *VolumeSpec `protobuf:"bytes,4,opt,name=master" json:"master,omitempty"`
	// Specification of the desired behavior of the replica volumes.
	Replicas []*VolumeSpec `protobuf:"bytes,5,rep,name=replicas" json:"replicas,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Volume) GetMetadata() *ObjectMeta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Volume) GetPresentation() *PresentationSpec {
	if m != nil {
		return m.Presentation
	}
	return nil
}

func (m *Volume) GetMaster() *VolumeSpec {
	if m != nil {
		return m.Master
	}
	return nil
}

func (m *Volume) GetReplicas() []*VolumeSpec {
	if m != nil {
		return m.Replicas
	}
	return nil
}

type PresentationSpec struct {
	// Volume ID also known as Inode.
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Device number, used to distinguish NBD devices
	DeviceNumber uint32 `protobuf:"varint,2,opt,name=deviceNumber" json:"deviceNumber,omitempty"`
	// Volume readiness is used to inform dataplane when volume should start letting
	// data through. If the volume is active but readiness is not READY - volume
	// should not accept writes. By design READY will only be set for the presentation
	// once master and all replicas are consumed by the dataplane.
	Readiness PresentationSpec_VolumeReadiness `protobuf:"varint,3,opt,name=readiness,enum=dataplane.PresentationSpec_VolumeReadiness" json:"readiness,omitempty"`
	// Number of mounts this volume had. It increases with
	// every single mount through the StorageOS API and the main reason
	// behind it as resetting cache.
	Mounts int32 `protobuf:"varint,4,opt,name=mounts" json:"mounts,omitempty"`
}

func (m *PresentationSpec) Reset()                    { *m = PresentationSpec{} }
func (m *PresentationSpec) String() string            { return proto.CompactTextString(m) }
func (*PresentationSpec) ProtoMessage()               {}
func (*PresentationSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type VolumeSpec struct {
	// Volume ID also known as Inode.
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Desired volume status, updated by the scheduler in controlplane.
	// Usually volumes are created with PENDING status until they get scheduled
	// and active status is set. Volume should still wait for readiness status
	// to be changed to "READY".
	Status VolumeSpec_VolumeStatus `protobuf:"varint,2,opt,name=status,enum=dataplane.VolumeSpec_VolumeStatus" json:"status,omitempty"`
	// Volume health shows the most recent observed/interpreted health status
	// of the volume. Desired health value is HEALTHY but can be in SYNCRONISING
	// often as well.
	Health VolumeSpec_VolumeHealth `protobuf:"varint,3,opt,name=health,enum=dataplane.VolumeSpec_VolumeHealth" json:"health,omitempty"`
	// Computed host ID, unique for each Host. Is used to
	// send data through virtual volumes.
	Host uint32 `protobuf:"varint,4,opt,name=host" json:"host,omitempty"`
}

func (m *VolumeSpec) Reset()                    { *m = VolumeSpec{} }
func (m *VolumeSpec) String() string            { return proto.CompactTextString(m) }
func (*VolumeSpec) ProtoMessage()               {}
func (*VolumeSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*NodeConfiguration)(nil), "dataplane.NodeConfiguration")
	proto.RegisterType((*ObjectMeta)(nil), "dataplane.ObjectMeta")
	proto.RegisterType((*Host)(nil), "dataplane.Host")
	proto.RegisterType((*Volume)(nil), "dataplane.Volume")
	proto.RegisterType((*PresentationSpec)(nil), "dataplane.PresentationSpec")
	proto.RegisterType((*VolumeSpec)(nil), "dataplane.VolumeSpec")
	proto.RegisterEnum("dataplane.PresentationSpec_VolumeReadiness", PresentationSpec_VolumeReadiness_name, PresentationSpec_VolumeReadiness_value)
	proto.RegisterEnum("dataplane.VolumeSpec_VolumeStatus", VolumeSpec_VolumeStatus_name, VolumeSpec_VolumeStatus_value)
	proto.RegisterEnum("dataplane.VolumeSpec_VolumeHealth", VolumeSpec_VolumeHealth_name, VolumeSpec_VolumeHealth_value)
}

var fileDescriptor0 = []byte{
	// 782 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xf3, 0x44,
	0x14, 0xc5, 0xf9, 0x6b, 0x73, 0xd3, 0x26, 0xce, 0xd0, 0x22, 0x2b, 0x2c, 0x28, 0x5e, 0x40, 0x25,
	0x44, 0x2a, 0xc2, 0x86, 0x76, 0x51, 0x64, 0x12, 0xd3, 0x44, 0x04, 0x37, 0x1a, 0xbb, 0x41, 0x5d,
	0xa1, 0x89, 0x3d, 0x6d, 0x0d, 0x8e, 0x1d, 0xd9, 0xe3, 0x4a, 0xe5, 0x0d, 0x90, 0x90, 0x78, 0x15,
	0xde, 0x81, 0x37, 0xe2, 0x05, 0x60, 0x3c, 0x9e, 0xc4, 0x4e, 0x1a, 0x8a, 0xf8, 0x56, 0xb9, 0x3e,
	0x3e, 0xe7, 0xde, 0x73, 0x7f, 0x62, 0xe8, 0x78, 0x84, 0x91, 0x55, 0x40, 0x42, 0xda, 0x5f, 0xc5,
	0x11, 0x8b, 0x50, 0x73, 0x03, 0xf4, 0x3e, 0x7a, 0x8c, 0xa2, 0xc7, 0x80, 0x5e, 0x88, 0x17, 0x8b,
	0xf4, 0xe1, 0x82, 0xf9, 0x4b, 0x9a, 0x30, 0xb2, 0x5c, 0xe5, 0x5c, 0xfd, 0x53, 0xe8, 0x5a, 0x91,
	0x47, 0x87, 0x51, 0xf8, 0xe0, 0x3f, 0xa6, 0x31, 0x61, 0x7e, 0x14, 0x22, 0x04, 0xb5, 0xa7, 0x28,
	0x61, 0x5a, 0xed, 0x4c, 0x39, 0x3f, 0xc6, 0x22, 0xd6, 0xff, 0xa8, 0x01, 0xdc, 0x2e, 0x7e, 0xa2,
	0x2e, 0xfb, 0x9e, 0x32, 0x92, 0x51, 0x42, 0xb2, 0xa4, 0x9a, 0xc2, 0x29, 0x4d, 0x2c, 0x62, 0xa4,
	0x42, 0x35, 0xf5, 0x3d, 0xad, 0x22, 0xa0, 0x2c, 0x44, 0xe7, 0xd0, 0x89, 0x69, 0x12, 0xa5, 0xb1,
	0x4b, 0xe7, 0x34, 0x4e, 0x78, 0x6e, 0xad, 0x2a, 0xde, 0xee, 0xc2, 0x68, 0x0c, 0x5d, 0x37, 0xa6,
	0xa2, 0xbc, 0xb3, 0xb6, 0x28, 0xea, 0xb7, 0x06, 0xbd, 0x7e, 0xde, 0x44, 0x7f, 0xdd, 0x44, 0x7f,
	0xc3, 0xc0, 0xaf, 0x45, 0x59, 0x26, 0x8f, 0x06, 0x74, 0x3b, 0x53, 0xfd, 0xbf, 0x33, 0xbd, 0x12,
	0xa1, 0x6b, 0xe8, 0xad, 0xc1, 0x9b, 0x98, 0xb8, 0x74, 0x46, 0x63, 0x3f, 0xf2, 0x6c, 0xea, 0x46,
	0xa1, 0x97, 0x68, 0x0d, 0x9e, 0xb2, 0x8a, 0xdf, 0x60, 0xa0, 0x4b, 0x68, 0x04, 0x64, 0x41, 0x83,
	0x44, 0x3b, 0x38, 0xab, 0xf2, 0xf2, 0x1f, 0xf7, 0x8b, 0x4d, 0x15, 0xa3, 0xec, 0x4f, 0x05, 0xc7,
	0x0c, 0x59, 0xfc, 0x82, 0xa5, 0x80, 0x37, 0xd1, 0x22, 0x61, 0x18, 0x31, 0xd1, 0x5b, 0xa2, 0x1d,
	0x0a, 0xfd, 0x27, 0xfb, 0xf5, 0x46, 0x41, 0xcc, 0x93, 0x94, 0xa5, 0xbd, 0x4b, 0x68, 0x95, 0x0a,
	0x64, 0x3b, 0xfa, 0x99, 0xbe, 0xc8, 0xb5, 0x65, 0x21, 0x3a, 0x81, 0xfa, 0x33, 0x09, 0x52, 0x2a,
	0xf7, 0x96, 0x3f, 0x5c, 0x55, 0xbe, 0x52, 0x7a, 0xd7, 0xa0, 0xee, 0xe6, 0xfe, 0x3f, 0x7a, 0xfd,
	0x77, 0x05, 0x6a, 0x63, 0x7e, 0x3b, 0xe8, 0x0b, 0x38, 0x5c, 0x72, 0xa7, 0x99, 0x7b, 0xa1, 0x6c,
	0x0d, 0x4e, 0xf7, 0xb6, 0x82, 0x37, 0x34, 0xd4, 0x86, 0x8a, 0x3c, 0xa5, 0x63, 0xcc, 0x23, 0xf4,
	0x01, 0x34, 0x88, 0xcb, 0xfc, 0x67, 0x2a, 0x0e, 0xe8, 0x10, 0xcb, 0x27, 0xa4, 0xc1, 0x01, 0xf1,
	0x3c, 0x7e, 0x4d, 0x89, 0xb8, 0x96, 0x26, 0x5e, 0x3f, 0x66, 0x17, 0xba, 0x8a, 0x62, 0x26, 0x56,
	0x5f, 0xc7, 0x22, 0xd6, 0xff, 0x52, 0xa0, 0x31, 0x8f, 0x82, 0x94, 0x1f, 0xeb, 0x3b, 0x78, 0xe2,
	0x19, 0x13, 0xff, 0x97, 0xbc, 0xd1, 0x1a, 0x16, 0x31, 0xfa, 0x1a, 0x8e, 0x56, 0xbc, 0x1c, 0x0d,
	0xf3, 0x29, 0x09, 0x77, 0xad, 0xc1, 0x87, 0xa5, 0x54, 0xb3, 0xd2, 0x6b, 0x7b, 0x45, 0x5d, 0xbc,
	0x25, 0x40, 0x9f, 0x43, 0x63, 0x49, 0x12, 0x46, 0x63, 0x79, 0xed, 0x65, 0x17, 0xb9, 0x55, 0x21,
	0x92, 0xa4, 0xcc, 0x76, 0x4c, 0x57, 0x81, 0xef, 0x92, 0x84, 0x77, 0x56, 0xfd, 0x77, 0xc1, 0x86,
	0xa6, 0xff, 0xad, 0x80, 0xba, 0x6b, 0x42, 0xce, 0x57, 0xd9, 0xcc, 0x57, 0x87, 0x23, 0x8f, 0x3e,
	0xfb, 0x2e, 0xb5, 0xd2, 0xe5, 0x82, 0x9b, 0xc9, 0x27, 0xbf, 0x85, 0xa1, 0x09, 0x34, 0xf9, 0xbf,
	0xcd, 0xf3, 0xc3, 0x6c, 0xda, 0x59, 0xa3, 0xed, 0xc1, 0x67, 0x6f, 0x34, 0x2a, 0xdd, 0xe0, 0xb5,
	0x04, 0x17, 0xea, 0x6c, 0x9d, 0xcb, 0x28, 0x0d, 0x59, 0xbe, 0xb5, 0x3a, 0x96, 0x4f, 0xba, 0x03,
	0x9d, 0x1d, 0x15, 0x3a, 0x85, 0x2e, 0x36, 0x8d, 0xd1, 0xc4, 0x32, 0x6d, 0xfb, 0xc7, 0x3b, 0xeb,
	0x3b, 0xeb, 0xf6, 0x07, 0x4b, 0x7d, 0x6f, 0x1b, 0x9e, 0x99, 0x16, 0x8f, 0x6e, 0x54, 0x05, 0xbd,
	0x0f, 0x9d, 0x02, 0xce, 0xa2, 0x7b, 0xb5, 0xa2, 0xff, 0x59, 0x05, 0x28, 0x46, 0xf3, 0xaa, 0xf7,
	0x2b, 0x68, 0xf0, 0x3f, 0x3c, 0x4b, 0x13, 0xd1, 0x75, 0x7b, 0xa0, 0xef, 0x9d, 0xe8, 0x3a, 0x14,
	0x4c, 0x2c, 0x15, 0x99, 0xf6, 0x89, 0x92, 0x80, 0x3d, 0xc9, 0x81, 0xbc, 0xa9, 0x1d, 0x0b, 0x26,
	0x96, 0x8a, 0xbd, 0x9f, 0xd9, 0x5f, 0x15, 0x38, 0x2a, 0x17, 0xe2, 0xa4, 0xb6, 0xed, 0x18, 0xce,
	0x5d, 0xb9, 0xf7, 0x02, 0x2b, 0x1a, 0xef, 0xc2, 0xb1, 0xc4, 0x8c, 0xa1, 0x33, 0x99, 0x9b, 0x6a,
	0x85, 0x0f, 0x19, 0x6d, 0xa4, 0xc6, 0xdc, 0x98, 0x4c, 0x8d, 0x6f, 0xa6, 0xa6, 0x5a, 0x2d, 0x51,
	0xbf, 0xe5, 0xa0, 0x39, 0x52, 0x6b, 0xd9, 0xd8, 0x24, 0x34, 0x32, 0xa7, 0xa6, 0x93, 0xa5, 0xac,
	0xeb, 0xbf, 0x6d, 0xbc, 0x8c, 0xd7, 0x86, 0xdb, 0x63, 0xd3, 0x98, 0x3a, 0xe3, 0x92, 0x17, 0x0d,
	0x4e, 0x24, 0x66, 0xdf, 0x5b, 0xc3, 0x31, 0xbe, 0xb5, 0x26, 0x76, 0xee, 0xa8, 0x60, 0xe7, 0x3f,
	0x7c, 0x13, 0x25, 0xcc, 0xbe, 0xb3, 0x67, 0xe6, 0xd0, 0xe1, 0x76, 0x78, 0x6d, 0x89, 0x8d, 0xcc,
	0x1b, 0x6c, 0x8c, 0x84, 0x21, 0xee, 0x51, 0x82, 0xd2, 0x63, 0x7d, 0xd1, 0x10, 0x5f, 0xed, 0x2f,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x16, 0x7b, 0xbd, 0xf0, 0x06, 0x00, 0x00,
}
