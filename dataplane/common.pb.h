// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace storageos_rpc {
class DataplaneCommon;
class DataplaneCommonDefaultTypeInternal;
extern DataplaneCommonDefaultTypeInternal _DataplaneCommon_default_instance_;
class DataplaneCommon_LabelsEntry;
class DataplaneCommon_LabelsEntryDefaultTypeInternal;
extern DataplaneCommon_LabelsEntryDefaultTypeInternal _DataplaneCommon_LabelsEntry_default_instance_;
class RpcResult;
class RpcResultDefaultTypeInternal;
extern RpcResultDefaultTypeInternal _RpcResult_default_instance_;
}  // namespace storageos_rpc

namespace storageos_rpc {

namespace protobuf_common_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_common_2eproto

// ===================================================================

class RpcResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.RpcResult) */ {
 public:
  RpcResult();
  virtual ~RpcResult();

  RpcResult(const RpcResult& from);

  inline RpcResult& operator=(const RpcResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RpcResult(RpcResult&& from) noexcept
    : RpcResult() {
    *this = ::std::move(from);
  }

  inline RpcResult& operator=(RpcResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RpcResult& default_instance();

  static inline const RpcResult* internal_default_instance() {
    return reinterpret_cast<const RpcResult*>(
               &_RpcResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RpcResult* other);
  friend void swap(RpcResult& a, RpcResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RpcResult* New() const PROTOBUF_FINAL { return New(NULL); }

  RpcResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RpcResult& from);
  void MergeFrom(const RpcResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RpcResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:storageos_rpc.RpcResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  bool success_;
  mutable int _cached_size_;
  friend struct protobuf_common_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class DataplaneCommon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:storageos_rpc.DataplaneCommon) */ {
 public:
  DataplaneCommon();
  virtual ~DataplaneCommon();

  DataplaneCommon(const DataplaneCommon& from);

  inline DataplaneCommon& operator=(const DataplaneCommon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataplaneCommon(DataplaneCommon&& from) noexcept
    : DataplaneCommon() {
    *this = ::std::move(from);
  }

  inline DataplaneCommon& operator=(DataplaneCommon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataplaneCommon& default_instance();

  static inline const DataplaneCommon* internal_default_instance() {
    return reinterpret_cast<const DataplaneCommon*>(
               &_DataplaneCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DataplaneCommon* other);
  friend void swap(DataplaneCommon& a, DataplaneCommon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataplaneCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  DataplaneCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataplaneCommon& from);
  void MergeFrom(const DataplaneCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataplaneCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 1;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string uuid = 3;
  void clear_uuid();
  static const int kUuidFieldNumber = 3;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // @@protoc_insertion_point(class_scope:storageos_rpc.DataplaneCommon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class DataplaneCommon_LabelsEntry : public ::google::protobuf::internal::MapEntry<DataplaneCommon_LabelsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<DataplaneCommon_LabelsEntry, 
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > SuperType;
    DataplaneCommon_LabelsEntry();
    DataplaneCommon_LabelsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const DataplaneCommon_LabelsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_DataplaneCommon_LabelsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      DataplaneCommon_LabelsEntry,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  private:
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  mutable int _cached_size_;
  friend struct protobuf_common_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RpcResult

// bool success = 1;
inline void RpcResult::clear_success() {
  success_ = false;
}
inline bool RpcResult::success() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.RpcResult.success)
  return success_;
}
inline void RpcResult::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.RpcResult.success)
}

// string reason = 2;
inline void RpcResult::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RpcResult::reason() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.RpcResult.reason)
  return reason_.GetNoArena();
}
inline void RpcResult::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storageos_rpc.RpcResult.reason)
}
#if LANG_CXX11
inline void RpcResult::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storageos_rpc.RpcResult.reason)
}
#endif
inline void RpcResult::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storageos_rpc.RpcResult.reason)
}
inline void RpcResult::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storageos_rpc.RpcResult.reason)
}
inline ::std::string* RpcResult::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:storageos_rpc.RpcResult.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RpcResult::release_reason() {
  // @@protoc_insertion_point(field_release:storageos_rpc.RpcResult.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RpcResult::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.RpcResult.reason)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DataplaneCommon

// map<string, string> labels = 1;
inline int DataplaneCommon::labels_size() const {
  return labels_.size();
}
inline void DataplaneCommon::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
DataplaneCommon::labels() const {
  // @@protoc_insertion_point(field_map:storageos_rpc.DataplaneCommon.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
DataplaneCommon::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:storageos_rpc.DataplaneCommon.labels)
  return labels_.MutableMap();
}

// string description = 2;
inline void DataplaneCommon::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataplaneCommon::description() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DataplaneCommon.description)
  return description_.GetNoArena();
}
inline void DataplaneCommon::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DataplaneCommon.description)
}
#if LANG_CXX11
inline void DataplaneCommon::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storageos_rpc.DataplaneCommon.description)
}
#endif
inline void DataplaneCommon::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storageos_rpc.DataplaneCommon.description)
}
inline void DataplaneCommon::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storageos_rpc.DataplaneCommon.description)
}
inline ::std::string* DataplaneCommon::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DataplaneCommon.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataplaneCommon::release_description() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DataplaneCommon.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataplaneCommon::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DataplaneCommon.description)
}

// string uuid = 3;
inline void DataplaneCommon::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DataplaneCommon::uuid() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.DataplaneCommon.uuid)
  return uuid_.GetNoArena();
}
inline void DataplaneCommon::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storageos_rpc.DataplaneCommon.uuid)
}
#if LANG_CXX11
inline void DataplaneCommon::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storageos_rpc.DataplaneCommon.uuid)
}
#endif
inline void DataplaneCommon::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storageos_rpc.DataplaneCommon.uuid)
}
inline void DataplaneCommon::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storageos_rpc.DataplaneCommon.uuid)
}
inline ::std::string* DataplaneCommon::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:storageos_rpc.DataplaneCommon.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataplaneCommon::release_uuid() {
  // @@protoc_insertion_point(field_release:storageos_rpc.DataplaneCommon.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataplaneCommon::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.DataplaneCommon.uuid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace storageos_rpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
