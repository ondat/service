// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rdbplugin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rdbplugin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace storageos_rpc {
class RdbVolumeListQueryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RdbVolumeListQuery>
     _instance;
} _RdbVolumeListQuery_default_instance_;
class RdbVolumeCredentialsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RdbVolumeCredentials>
     _instance;
} _RdbVolumeCredentials_default_instance_;
class RdbVolumeStatsDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RdbVolumeStats>
     _instance;
} _RdbVolumeStats_default_instance_;
class RdbVolumeDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RdbVolume>
     _instance;
} _RdbVolume_default_instance_;

namespace protobuf_rdbplugin_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RdbVolumeListQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RdbVolumeListQuery, volume_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RdbVolumeCredentials, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RdbVolumeStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RdbVolume, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RdbVolume, cc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RdbVolume, volume_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RdbVolume, volume_size_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RdbVolume, credentials_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RdbVolume, stats_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(RdbVolumeListQuery)},
  { 6, -1, sizeof(RdbVolumeCredentials)},
  { 11, -1, sizeof(RdbVolumeStats)},
  { 16, -1, sizeof(RdbVolume)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RdbVolumeListQuery_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RdbVolumeCredentials_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RdbVolumeStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RdbVolume_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "rdbplugin.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::storageos_rpc::protobuf_common_2eproto::InitDefaults();
  _RdbVolumeListQuery_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RdbVolumeListQuery_default_instance_);_RdbVolumeCredentials_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RdbVolumeCredentials_default_instance_);_RdbVolumeStats_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RdbVolumeStats_default_instance_);_RdbVolume_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RdbVolume_default_instance_);_RdbVolume_default_instance_._instance.get_mutable()->cc_ = const_cast< ::storageos_rpc::DataplaneCommonConfig*>(
      ::storageos_rpc::DataplaneCommonConfig::internal_default_instance());
  _RdbVolume_default_instance_._instance.get_mutable()->credentials_ = const_cast< ::storageos_rpc::RdbVolumeCredentials*>(
      ::storageos_rpc::RdbVolumeCredentials::internal_default_instance());
  _RdbVolume_default_instance_._instance.get_mutable()->stats_ = const_cast< ::storageos_rpc::RdbVolumeStats*>(
      ::storageos_rpc::RdbVolumeStats::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017rdbplugin.proto\022\rstorageos_rpc\032\014common"
      ".proto\"B\n\022RdbVolumeListQuery\022,\n\nvolume_i"
      "ds\030\001 \003(\0132\030.storageos_rpc.RdbVolume\"\026\n\024Rd"
      "bVolumeCredentials\"\020\n\016RdbVolumeStats\"\323\001\n"
      "\tRdbVolume\0220\n\002cc\030\001 \001(\0132$.storageos_rpc.D"
      "ataplaneCommonConfig\022\021\n\tvolume_id\030\002 \001(\r\022"
      "\031\n\021volume_size_bytes\030\003 \001(\004\0228\n\013credential"
      "s\030\004 \001(\0132#.storageos_rpc.RdbVolumeCredent"
      "ials\022,\n\005stats\030\005 \001(\0132\035.storageos_rpc.RdbV"
      "olumeStats2\272\002\n\017RdbPluginConfig\022G\n\017Volume"
      "Configure\022\030.storageos_rpc.RdbVolume\032\030.st"
      "orageos_rpc.RpcResult\"\000\022I\n\021VolumeUnconfi"
      "gure\022\030.storageos_rpc.RdbVolume\032\030.storage"
      "os_rpc.RpcResult\"\000\022D\n\014VolumeDelete\022\030.sto"
      "rageos_rpc.RdbVolume\032\030.storageos_rpc.Rpc"
      "Result\"\000\022M\n\nVolumeList\022!.storageos_rpc.R"
      "dbVolumeListQuery\032\030.storageos_rpc.RdbVol"
      "ume\"\0000\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 695);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rdbplugin.proto", &protobuf_RegisterTypes);
  ::storageos_rpc::protobuf_common_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_rdbplugin_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RdbVolumeListQuery::kVolumeIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RdbVolumeListQuery::RdbVolumeListQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdbplugin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.RdbVolumeListQuery)
}
RdbVolumeListQuery::RdbVolumeListQuery(const RdbVolumeListQuery& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      volume_ids_(from.volume_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.RdbVolumeListQuery)
}

void RdbVolumeListQuery::SharedCtor() {
  _cached_size_ = 0;
}

RdbVolumeListQuery::~RdbVolumeListQuery() {
  // @@protoc_insertion_point(destructor:storageos_rpc.RdbVolumeListQuery)
  SharedDtor();
}

void RdbVolumeListQuery::SharedDtor() {
}

void RdbVolumeListQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RdbVolumeListQuery::descriptor() {
  protobuf_rdbplugin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdbplugin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RdbVolumeListQuery& RdbVolumeListQuery::default_instance() {
  protobuf_rdbplugin_2eproto::InitDefaults();
  return *internal_default_instance();
}

RdbVolumeListQuery* RdbVolumeListQuery::New(::google::protobuf::Arena* arena) const {
  RdbVolumeListQuery* n = new RdbVolumeListQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RdbVolumeListQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.RdbVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  volume_ids_.Clear();
  _internal_metadata_.Clear();
}

bool RdbVolumeListQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.RdbVolumeListQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .storageos_rpc.RdbVolume volume_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_volume_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.RdbVolumeListQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.RdbVolumeListQuery)
  return false;
#undef DO_
}

void RdbVolumeListQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.RdbVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.RdbVolume volume_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volume_ids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->volume_ids(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.RdbVolumeListQuery)
}

::google::protobuf::uint8* RdbVolumeListQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.RdbVolumeListQuery)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storageos_rpc.RdbVolume volume_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->volume_ids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->volume_ids(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.RdbVolumeListQuery)
  return target;
}

size_t RdbVolumeListQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.RdbVolumeListQuery)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .storageos_rpc.RdbVolume volume_ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->volume_ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->volume_ids(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RdbVolumeListQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.RdbVolumeListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const RdbVolumeListQuery* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RdbVolumeListQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.RdbVolumeListQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.RdbVolumeListQuery)
    MergeFrom(*source);
  }
}

void RdbVolumeListQuery::MergeFrom(const RdbVolumeListQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.RdbVolumeListQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  volume_ids_.MergeFrom(from.volume_ids_);
}

void RdbVolumeListQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.RdbVolumeListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RdbVolumeListQuery::CopyFrom(const RdbVolumeListQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.RdbVolumeListQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RdbVolumeListQuery::IsInitialized() const {
  return true;
}

void RdbVolumeListQuery::Swap(RdbVolumeListQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RdbVolumeListQuery::InternalSwap(RdbVolumeListQuery* other) {
  using std::swap;
  volume_ids_.InternalSwap(&other->volume_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RdbVolumeListQuery::GetMetadata() const {
  protobuf_rdbplugin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdbplugin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RdbVolumeListQuery

// repeated .storageos_rpc.RdbVolume volume_ids = 1;
int RdbVolumeListQuery::volume_ids_size() const {
  return volume_ids_.size();
}
void RdbVolumeListQuery::clear_volume_ids() {
  volume_ids_.Clear();
}
const ::storageos_rpc::RdbVolume& RdbVolumeListQuery::volume_ids(int index) const {
  // @@protoc_insertion_point(field_get:storageos_rpc.RdbVolumeListQuery.volume_ids)
  return volume_ids_.Get(index);
}
::storageos_rpc::RdbVolume* RdbVolumeListQuery::mutable_volume_ids(int index) {
  // @@protoc_insertion_point(field_mutable:storageos_rpc.RdbVolumeListQuery.volume_ids)
  return volume_ids_.Mutable(index);
}
::storageos_rpc::RdbVolume* RdbVolumeListQuery::add_volume_ids() {
  // @@protoc_insertion_point(field_add:storageos_rpc.RdbVolumeListQuery.volume_ids)
  return volume_ids_.Add();
}
::google::protobuf::RepeatedPtrField< ::storageos_rpc::RdbVolume >*
RdbVolumeListQuery::mutable_volume_ids() {
  // @@protoc_insertion_point(field_mutable_list:storageos_rpc.RdbVolumeListQuery.volume_ids)
  return &volume_ids_;
}
const ::google::protobuf::RepeatedPtrField< ::storageos_rpc::RdbVolume >&
RdbVolumeListQuery::volume_ids() const {
  // @@protoc_insertion_point(field_list:storageos_rpc.RdbVolumeListQuery.volume_ids)
  return volume_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RdbVolumeCredentials::RdbVolumeCredentials()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdbplugin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.RdbVolumeCredentials)
}
RdbVolumeCredentials::RdbVolumeCredentials(const RdbVolumeCredentials& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.RdbVolumeCredentials)
}

void RdbVolumeCredentials::SharedCtor() {
  _cached_size_ = 0;
}

RdbVolumeCredentials::~RdbVolumeCredentials() {
  // @@protoc_insertion_point(destructor:storageos_rpc.RdbVolumeCredentials)
  SharedDtor();
}

void RdbVolumeCredentials::SharedDtor() {
}

void RdbVolumeCredentials::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RdbVolumeCredentials::descriptor() {
  protobuf_rdbplugin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdbplugin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RdbVolumeCredentials& RdbVolumeCredentials::default_instance() {
  protobuf_rdbplugin_2eproto::InitDefaults();
  return *internal_default_instance();
}

RdbVolumeCredentials* RdbVolumeCredentials::New(::google::protobuf::Arena* arena) const {
  RdbVolumeCredentials* n = new RdbVolumeCredentials;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RdbVolumeCredentials::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.RdbVolumeCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RdbVolumeCredentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.RdbVolumeCredentials)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.RdbVolumeCredentials)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.RdbVolumeCredentials)
  return false;
#undef DO_
}

void RdbVolumeCredentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.RdbVolumeCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.RdbVolumeCredentials)
}

::google::protobuf::uint8* RdbVolumeCredentials::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.RdbVolumeCredentials)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.RdbVolumeCredentials)
  return target;
}

size_t RdbVolumeCredentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.RdbVolumeCredentials)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RdbVolumeCredentials::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.RdbVolumeCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  const RdbVolumeCredentials* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RdbVolumeCredentials>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.RdbVolumeCredentials)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.RdbVolumeCredentials)
    MergeFrom(*source);
  }
}

void RdbVolumeCredentials::MergeFrom(const RdbVolumeCredentials& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.RdbVolumeCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RdbVolumeCredentials::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.RdbVolumeCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RdbVolumeCredentials::CopyFrom(const RdbVolumeCredentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.RdbVolumeCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RdbVolumeCredentials::IsInitialized() const {
  return true;
}

void RdbVolumeCredentials::Swap(RdbVolumeCredentials* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RdbVolumeCredentials::InternalSwap(RdbVolumeCredentials* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RdbVolumeCredentials::GetMetadata() const {
  protobuf_rdbplugin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdbplugin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RdbVolumeCredentials

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RdbVolumeStats::RdbVolumeStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdbplugin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.RdbVolumeStats)
}
RdbVolumeStats::RdbVolumeStats(const RdbVolumeStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.RdbVolumeStats)
}

void RdbVolumeStats::SharedCtor() {
  _cached_size_ = 0;
}

RdbVolumeStats::~RdbVolumeStats() {
  // @@protoc_insertion_point(destructor:storageos_rpc.RdbVolumeStats)
  SharedDtor();
}

void RdbVolumeStats::SharedDtor() {
}

void RdbVolumeStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RdbVolumeStats::descriptor() {
  protobuf_rdbplugin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdbplugin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RdbVolumeStats& RdbVolumeStats::default_instance() {
  protobuf_rdbplugin_2eproto::InitDefaults();
  return *internal_default_instance();
}

RdbVolumeStats* RdbVolumeStats::New(::google::protobuf::Arena* arena) const {
  RdbVolumeStats* n = new RdbVolumeStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RdbVolumeStats::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.RdbVolumeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool RdbVolumeStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.RdbVolumeStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.RdbVolumeStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.RdbVolumeStats)
  return false;
#undef DO_
}

void RdbVolumeStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.RdbVolumeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.RdbVolumeStats)
}

::google::protobuf::uint8* RdbVolumeStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.RdbVolumeStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.RdbVolumeStats)
  return target;
}

size_t RdbVolumeStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.RdbVolumeStats)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RdbVolumeStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.RdbVolumeStats)
  GOOGLE_DCHECK_NE(&from, this);
  const RdbVolumeStats* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RdbVolumeStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.RdbVolumeStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.RdbVolumeStats)
    MergeFrom(*source);
  }
}

void RdbVolumeStats::MergeFrom(const RdbVolumeStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.RdbVolumeStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RdbVolumeStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.RdbVolumeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RdbVolumeStats::CopyFrom(const RdbVolumeStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.RdbVolumeStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RdbVolumeStats::IsInitialized() const {
  return true;
}

void RdbVolumeStats::Swap(RdbVolumeStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RdbVolumeStats::InternalSwap(RdbVolumeStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RdbVolumeStats::GetMetadata() const {
  protobuf_rdbplugin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdbplugin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RdbVolumeStats

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RdbVolume::kCcFieldNumber;
const int RdbVolume::kVolumeIdFieldNumber;
const int RdbVolume::kVolumeSizeBytesFieldNumber;
const int RdbVolume::kCredentialsFieldNumber;
const int RdbVolume::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RdbVolume::RdbVolume()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_rdbplugin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:storageos_rpc.RdbVolume)
}
RdbVolume::RdbVolume(const RdbVolume& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cc()) {
    cc_ = new ::storageos_rpc::DataplaneCommonConfig(*from.cc_);
  } else {
    cc_ = NULL;
  }
  if (from.has_credentials()) {
    credentials_ = new ::storageos_rpc::RdbVolumeCredentials(*from.credentials_);
  } else {
    credentials_ = NULL;
  }
  if (from.has_stats()) {
    stats_ = new ::storageos_rpc::RdbVolumeStats(*from.stats_);
  } else {
    stats_ = NULL;
  }
  ::memcpy(&volume_size_bytes_, &from.volume_size_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_id_) -
    reinterpret_cast<char*>(&volume_size_bytes_)) + sizeof(volume_id_));
  // @@protoc_insertion_point(copy_constructor:storageos_rpc.RdbVolume)
}

void RdbVolume::SharedCtor() {
  ::memset(&cc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_id_) -
      reinterpret_cast<char*>(&cc_)) + sizeof(volume_id_));
  _cached_size_ = 0;
}

RdbVolume::~RdbVolume() {
  // @@protoc_insertion_point(destructor:storageos_rpc.RdbVolume)
  SharedDtor();
}

void RdbVolume::SharedDtor() {
  if (this != internal_default_instance()) delete cc_;
  if (this != internal_default_instance()) delete credentials_;
  if (this != internal_default_instance()) delete stats_;
}

void RdbVolume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RdbVolume::descriptor() {
  protobuf_rdbplugin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdbplugin_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RdbVolume& RdbVolume::default_instance() {
  protobuf_rdbplugin_2eproto::InitDefaults();
  return *internal_default_instance();
}

RdbVolume* RdbVolume::New(::google::protobuf::Arena* arena) const {
  RdbVolume* n = new RdbVolume;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RdbVolume::Clear() {
// @@protoc_insertion_point(message_clear_start:storageos_rpc.RdbVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && cc_ != NULL) {
    delete cc_;
  }
  cc_ = NULL;
  if (GetArenaNoVirtual() == NULL && credentials_ != NULL) {
    delete credentials_;
  }
  credentials_ = NULL;
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) {
    delete stats_;
  }
  stats_ = NULL;
  ::memset(&volume_size_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_id_) -
      reinterpret_cast<char*>(&volume_size_bytes_)) + sizeof(volume_id_));
  _internal_metadata_.Clear();
}

bool RdbVolume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storageos_rpc.RdbVolume)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .storageos_rpc.DataplaneCommonConfig cc = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 volume_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &volume_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 volume_size_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &volume_size_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .storageos_rpc.RdbVolumeCredentials credentials = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_credentials()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .storageos_rpc.RdbVolumeStats stats = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stats()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storageos_rpc.RdbVolume)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storageos_rpc.RdbVolume)
  return false;
#undef DO_
}

void RdbVolume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storageos_rpc.RdbVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DataplaneCommonConfig cc = 1;
  if (this->has_cc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->cc_, output);
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->volume_id(), output);
  }

  // uint64 volume_size_bytes = 3;
  if (this->volume_size_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->volume_size_bytes(), output);
  }

  // .storageos_rpc.RdbVolumeCredentials credentials = 4;
  if (this->has_credentials()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->credentials_, output);
  }

  // .storageos_rpc.RdbVolumeStats stats = 5;
  if (this->has_stats()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->stats_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:storageos_rpc.RdbVolume)
}

::google::protobuf::uint8* RdbVolume::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:storageos_rpc.RdbVolume)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .storageos_rpc.DataplaneCommonConfig cc = 1;
  if (this->has_cc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->cc_, deterministic, target);
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->volume_id(), target);
  }

  // uint64 volume_size_bytes = 3;
  if (this->volume_size_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->volume_size_bytes(), target);
  }

  // .storageos_rpc.RdbVolumeCredentials credentials = 4;
  if (this->has_credentials()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->credentials_, deterministic, target);
  }

  // .storageos_rpc.RdbVolumeStats stats = 5;
  if (this->has_stats()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->stats_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storageos_rpc.RdbVolume)
  return target;
}

size_t RdbVolume::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storageos_rpc.RdbVolume)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .storageos_rpc.DataplaneCommonConfig cc = 1;
  if (this->has_cc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cc_);
  }

  // .storageos_rpc.RdbVolumeCredentials credentials = 4;
  if (this->has_credentials()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->credentials_);
  }

  // .storageos_rpc.RdbVolumeStats stats = 5;
  if (this->has_stats()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stats_);
  }

  // uint64 volume_size_bytes = 3;
  if (this->volume_size_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->volume_size_bytes());
  }

  // uint32 volume_id = 2;
  if (this->volume_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->volume_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RdbVolume::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storageos_rpc.RdbVolume)
  GOOGLE_DCHECK_NE(&from, this);
  const RdbVolume* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RdbVolume>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storageos_rpc.RdbVolume)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storageos_rpc.RdbVolume)
    MergeFrom(*source);
  }
}

void RdbVolume::MergeFrom(const RdbVolume& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storageos_rpc.RdbVolume)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cc()) {
    mutable_cc()->::storageos_rpc::DataplaneCommonConfig::MergeFrom(from.cc());
  }
  if (from.has_credentials()) {
    mutable_credentials()->::storageos_rpc::RdbVolumeCredentials::MergeFrom(from.credentials());
  }
  if (from.has_stats()) {
    mutable_stats()->::storageos_rpc::RdbVolumeStats::MergeFrom(from.stats());
  }
  if (from.volume_size_bytes() != 0) {
    set_volume_size_bytes(from.volume_size_bytes());
  }
  if (from.volume_id() != 0) {
    set_volume_id(from.volume_id());
  }
}

void RdbVolume::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storageos_rpc.RdbVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RdbVolume::CopyFrom(const RdbVolume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storageos_rpc.RdbVolume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RdbVolume::IsInitialized() const {
  return true;
}

void RdbVolume::Swap(RdbVolume* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RdbVolume::InternalSwap(RdbVolume* other) {
  using std::swap;
  swap(cc_, other->cc_);
  swap(credentials_, other->credentials_);
  swap(stats_, other->stats_);
  swap(volume_size_bytes_, other->volume_size_bytes_);
  swap(volume_id_, other->volume_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RdbVolume::GetMetadata() const {
  protobuf_rdbplugin_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_rdbplugin_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RdbVolume

// .storageos_rpc.DataplaneCommonConfig cc = 1;
bool RdbVolume::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
void RdbVolume::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
const ::storageos_rpc::DataplaneCommonConfig& RdbVolume::cc() const {
  const ::storageos_rpc::DataplaneCommonConfig* p = cc_;
  // @@protoc_insertion_point(field_get:storageos_rpc.RdbVolume.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::DataplaneCommonConfig*>(
      &::storageos_rpc::_DataplaneCommonConfig_default_instance_);
}
::storageos_rpc::DataplaneCommonConfig* RdbVolume::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::storageos_rpc::DataplaneCommonConfig;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.RdbVolume.cc)
  return cc_;
}
::storageos_rpc::DataplaneCommonConfig* RdbVolume::release_cc() {
  // @@protoc_insertion_point(field_release:storageos_rpc.RdbVolume.cc)
  
  ::storageos_rpc::DataplaneCommonConfig* temp = cc_;
  cc_ = NULL;
  return temp;
}
void RdbVolume::set_allocated_cc(::storageos_rpc::DataplaneCommonConfig* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.RdbVolume.cc)
}

// uint32 volume_id = 2;
void RdbVolume::clear_volume_id() {
  volume_id_ = 0u;
}
::google::protobuf::uint32 RdbVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.RdbVolume.volume_id)
  return volume_id_;
}
void RdbVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.RdbVolume.volume_id)
}

// uint64 volume_size_bytes = 3;
void RdbVolume::clear_volume_size_bytes() {
  volume_size_bytes_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RdbVolume::volume_size_bytes() const {
  // @@protoc_insertion_point(field_get:storageos_rpc.RdbVolume.volume_size_bytes)
  return volume_size_bytes_;
}
void RdbVolume::set_volume_size_bytes(::google::protobuf::uint64 value) {
  
  volume_size_bytes_ = value;
  // @@protoc_insertion_point(field_set:storageos_rpc.RdbVolume.volume_size_bytes)
}

// .storageos_rpc.RdbVolumeCredentials credentials = 4;
bool RdbVolume::has_credentials() const {
  return this != internal_default_instance() && credentials_ != NULL;
}
void RdbVolume::clear_credentials() {
  if (GetArenaNoVirtual() == NULL && credentials_ != NULL) delete credentials_;
  credentials_ = NULL;
}
const ::storageos_rpc::RdbVolumeCredentials& RdbVolume::credentials() const {
  const ::storageos_rpc::RdbVolumeCredentials* p = credentials_;
  // @@protoc_insertion_point(field_get:storageos_rpc.RdbVolume.credentials)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::RdbVolumeCredentials*>(
      &::storageos_rpc::_RdbVolumeCredentials_default_instance_);
}
::storageos_rpc::RdbVolumeCredentials* RdbVolume::mutable_credentials() {
  
  if (credentials_ == NULL) {
    credentials_ = new ::storageos_rpc::RdbVolumeCredentials;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.RdbVolume.credentials)
  return credentials_;
}
::storageos_rpc::RdbVolumeCredentials* RdbVolume::release_credentials() {
  // @@protoc_insertion_point(field_release:storageos_rpc.RdbVolume.credentials)
  
  ::storageos_rpc::RdbVolumeCredentials* temp = credentials_;
  credentials_ = NULL;
  return temp;
}
void RdbVolume::set_allocated_credentials(::storageos_rpc::RdbVolumeCredentials* credentials) {
  delete credentials_;
  credentials_ = credentials;
  if (credentials) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.RdbVolume.credentials)
}

// .storageos_rpc.RdbVolumeStats stats = 5;
bool RdbVolume::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
void RdbVolume::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
const ::storageos_rpc::RdbVolumeStats& RdbVolume::stats() const {
  const ::storageos_rpc::RdbVolumeStats* p = stats_;
  // @@protoc_insertion_point(field_get:storageos_rpc.RdbVolume.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::storageos_rpc::RdbVolumeStats*>(
      &::storageos_rpc::_RdbVolumeStats_default_instance_);
}
::storageos_rpc::RdbVolumeStats* RdbVolume::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::storageos_rpc::RdbVolumeStats;
  }
  // @@protoc_insertion_point(field_mutable:storageos_rpc.RdbVolume.stats)
  return stats_;
}
::storageos_rpc::RdbVolumeStats* RdbVolume::release_stats() {
  // @@protoc_insertion_point(field_release:storageos_rpc.RdbVolume.stats)
  
  ::storageos_rpc::RdbVolumeStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
void RdbVolume::set_allocated_stats(::storageos_rpc::RdbVolumeStats* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:storageos_rpc.RdbVolume.stats)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace storageos_rpc

// @@protoc_insertion_point(global_scope)
