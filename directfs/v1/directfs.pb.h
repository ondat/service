// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: directfs.proto

#ifndef PROTOBUF_directfs_2eproto__INCLUDED
#define PROTOBUF_directfs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
namespace directfs {
namespace v1 {
class DfsHost;
class DfsHostDefaultTypeInternal;
extern DfsHostDefaultTypeInternal _DfsHost_default_instance_;
class DfsHostCredentials;
class DfsHostCredentialsDefaultTypeInternal;
extern DfsHostCredentialsDefaultTypeInternal _DfsHostCredentials_default_instance_;
class DfsHostList;
class DfsHostListDefaultTypeInternal;
extern DfsHostListDefaultTypeInternal _DfsHostList_default_instance_;
class DfsHostListQuery;
class DfsHostListQueryDefaultTypeInternal;
extern DfsHostListQueryDefaultTypeInternal _DfsHostListQuery_default_instance_;
class DfsVolume;
class DfsVolumeDefaultTypeInternal;
extern DfsVolumeDefaultTypeInternal _DfsVolume_default_instance_;
class DfsVolumeCredentials;
class DfsVolumeCredentialsDefaultTypeInternal;
extern DfsVolumeCredentialsDefaultTypeInternal _DfsVolumeCredentials_default_instance_;
class DfsVolumeList;
class DfsVolumeListDefaultTypeInternal;
extern DfsVolumeListDefaultTypeInternal _DfsVolumeList_default_instance_;
class DfsVolumeListQuery;
class DfsVolumeListQueryDefaultTypeInternal;
extern DfsVolumeListQueryDefaultTypeInternal _DfsVolumeListQuery_default_instance_;
class DfsVolumeStatistics;
class DfsVolumeStatisticsDefaultTypeInternal;
extern DfsVolumeStatisticsDefaultTypeInternal _DfsVolumeStatistics_default_instance_;
class DfsVolumeStatus;
class DfsVolumeStatusDefaultTypeInternal;
extern DfsVolumeStatusDefaultTypeInternal _DfsVolumeStatus_default_instance_;
}  // namespace v1
}  // namespace directfs

namespace directfs {
namespace v1 {

namespace protobuf_directfs_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_directfs_2eproto

enum DfsVolumeStatus_DfsConnectionState {
  DfsVolumeStatus_DfsConnectionState_NONE = 0,
  DfsVolumeStatus_DfsConnectionState_CONNECTING = 1,
  DfsVolumeStatus_DfsConnectionState_CONNECTED = 2,
  DfsVolumeStatus_DfsConnectionState_DISCONNECTING = 3,
  DfsVolumeStatus_DfsConnectionState_DISCONNECTED = 4,
  DfsVolumeStatus_DfsConnectionState_DfsVolumeStatus_DfsConnectionState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DfsVolumeStatus_DfsConnectionState_DfsVolumeStatus_DfsConnectionState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DfsVolumeStatus_DfsConnectionState_IsValid(int value);
const DfsVolumeStatus_DfsConnectionState DfsVolumeStatus_DfsConnectionState_DfsConnectionState_MIN = DfsVolumeStatus_DfsConnectionState_NONE;
const DfsVolumeStatus_DfsConnectionState DfsVolumeStatus_DfsConnectionState_DfsConnectionState_MAX = DfsVolumeStatus_DfsConnectionState_DISCONNECTED;
const int DfsVolumeStatus_DfsConnectionState_DfsConnectionState_ARRAYSIZE = DfsVolumeStatus_DfsConnectionState_DfsConnectionState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DfsVolumeStatus_DfsConnectionState_descriptor();
inline const ::std::string& DfsVolumeStatus_DfsConnectionState_Name(DfsVolumeStatus_DfsConnectionState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DfsVolumeStatus_DfsConnectionState_descriptor(), value);
}
inline bool DfsVolumeStatus_DfsConnectionState_Parse(
    const ::std::string& name, DfsVolumeStatus_DfsConnectionState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DfsVolumeStatus_DfsConnectionState>(
    DfsVolumeStatus_DfsConnectionState_descriptor(), name, value);
}
enum DfsVolumeStatus_DfsAddressFamily {
  DfsVolumeStatus_DfsAddressFamily_IPV4 = 0,
  DfsVolumeStatus_DfsAddressFamily_IPV6 = 1,
  DfsVolumeStatus_DfsAddressFamily_DfsVolumeStatus_DfsAddressFamily_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DfsVolumeStatus_DfsAddressFamily_DfsVolumeStatus_DfsAddressFamily_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DfsVolumeStatus_DfsAddressFamily_IsValid(int value);
const DfsVolumeStatus_DfsAddressFamily DfsVolumeStatus_DfsAddressFamily_DfsAddressFamily_MIN = DfsVolumeStatus_DfsAddressFamily_IPV4;
const DfsVolumeStatus_DfsAddressFamily DfsVolumeStatus_DfsAddressFamily_DfsAddressFamily_MAX = DfsVolumeStatus_DfsAddressFamily_IPV6;
const int DfsVolumeStatus_DfsAddressFamily_DfsAddressFamily_ARRAYSIZE = DfsVolumeStatus_DfsAddressFamily_DfsAddressFamily_MAX + 1;

const ::google::protobuf::EnumDescriptor* DfsVolumeStatus_DfsAddressFamily_descriptor();
inline const ::std::string& DfsVolumeStatus_DfsAddressFamily_Name(DfsVolumeStatus_DfsAddressFamily value) {
  return ::google::protobuf::internal::NameOfEnum(
    DfsVolumeStatus_DfsAddressFamily_descriptor(), value);
}
inline bool DfsVolumeStatus_DfsAddressFamily_Parse(
    const ::std::string& name, DfsVolumeStatus_DfsAddressFamily* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DfsVolumeStatus_DfsAddressFamily>(
    DfsVolumeStatus_DfsAddressFamily_descriptor(), name, value);
}
// ===================================================================

class DfsHostCredentials : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:directfs.v1.DfsHostCredentials) */ {
 public:
  DfsHostCredentials();
  virtual ~DfsHostCredentials();

  DfsHostCredentials(const DfsHostCredentials& from);

  inline DfsHostCredentials& operator=(const DfsHostCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsHostCredentials(DfsHostCredentials&& from) noexcept
    : DfsHostCredentials() {
    *this = ::std::move(from);
  }

  inline DfsHostCredentials& operator=(DfsHostCredentials&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsHostCredentials& default_instance();

  static inline const DfsHostCredentials* internal_default_instance() {
    return reinterpret_cast<const DfsHostCredentials*>(
               &_DfsHostCredentials_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DfsHostCredentials* other);
  friend void swap(DfsHostCredentials& a, DfsHostCredentials& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsHostCredentials* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsHostCredentials* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsHostCredentials& from);
  void MergeFrom(const DfsHostCredentials& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsHostCredentials* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:directfs.v1.DfsHostCredentials)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsHost : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:directfs.v1.DfsHost) */ {
 public:
  DfsHost();
  virtual ~DfsHost();

  DfsHost(const DfsHost& from);

  inline DfsHost& operator=(const DfsHost& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsHost(DfsHost&& from) noexcept
    : DfsHost() {
    *this = ::std::move(from);
  }

  inline DfsHost& operator=(DfsHost&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsHost& default_instance();

  static inline const DfsHost* internal_default_instance() {
    return reinterpret_cast<const DfsHost*>(
               &_DfsHost_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DfsHost* other);
  friend void swap(DfsHost& a, DfsHost& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsHost* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsHost* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsHost& from);
  void MergeFrom(const DfsHost& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string hostname = 3;
  void clear_hostname();
  static const int kHostnameFieldNumber = 3;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  #if LANG_CXX11
  void set_hostname(::std::string&& value);
  #endif
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // .DataplaneCommon cc = 1;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 1;
  const ::DataplaneCommon& cc() const;
  ::DataplaneCommon* mutable_cc();
  ::DataplaneCommon* release_cc();
  void set_allocated_cc(::DataplaneCommon* cc);

  // .directfs.v1.DfsHostCredentials credentials = 5;
  bool has_credentials() const;
  void clear_credentials();
  static const int kCredentialsFieldNumber = 5;
  const ::directfs::v1::DfsHostCredentials& credentials() const;
  ::directfs::v1::DfsHostCredentials* mutable_credentials();
  ::directfs::v1::DfsHostCredentials* release_credentials();
  void set_allocated_credentials(::directfs::v1::DfsHostCredentials* credentials);

  // uint32 host_id = 2;
  void clear_host_id();
  static const int kHostIdFieldNumber = 2;
  ::google::protobuf::uint32 host_id() const;
  void set_host_id(::google::protobuf::uint32 value);

  // uint32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:directfs.v1.DfsHost)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::DataplaneCommon* cc_;
  ::directfs::v1::DfsHostCredentials* credentials_;
  ::google::protobuf::uint32 host_id_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsHostList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:directfs.v1.DfsHostList) */ {
 public:
  DfsHostList();
  virtual ~DfsHostList();

  DfsHostList(const DfsHostList& from);

  inline DfsHostList& operator=(const DfsHostList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsHostList(DfsHostList&& from) noexcept
    : DfsHostList() {
    *this = ::std::move(from);
  }

  inline DfsHostList& operator=(DfsHostList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsHostList& default_instance();

  static inline const DfsHostList* internal_default_instance() {
    return reinterpret_cast<const DfsHostList*>(
               &_DfsHostList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DfsHostList* other);
  friend void swap(DfsHostList& a, DfsHostList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsHostList* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsHostList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsHostList& from);
  void MergeFrom(const DfsHostList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsHostList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .directfs.v1.DfsHost hosts = 1;
  int hosts_size() const;
  void clear_hosts();
  static const int kHostsFieldNumber = 1;
  const ::directfs::v1::DfsHost& hosts(int index) const;
  ::directfs::v1::DfsHost* mutable_hosts(int index);
  ::directfs::v1::DfsHost* add_hosts();
  ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsHost >*
      mutable_hosts();
  const ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsHost >&
      hosts() const;

  // @@protoc_insertion_point(class_scope:directfs.v1.DfsHostList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsHost > hosts_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsHostListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:directfs.v1.DfsHostListQuery) */ {
 public:
  DfsHostListQuery();
  virtual ~DfsHostListQuery();

  DfsHostListQuery(const DfsHostListQuery& from);

  inline DfsHostListQuery& operator=(const DfsHostListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsHostListQuery(DfsHostListQuery&& from) noexcept
    : DfsHostListQuery() {
    *this = ::std::move(from);
  }

  inline DfsHostListQuery& operator=(DfsHostListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsHostListQuery& default_instance();

  static inline const DfsHostListQuery* internal_default_instance() {
    return reinterpret_cast<const DfsHostListQuery*>(
               &_DfsHostListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DfsHostListQuery* other);
  friend void swap(DfsHostListQuery& a, DfsHostListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsHostListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsHostListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsHostListQuery& from);
  void MergeFrom(const DfsHostListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsHostListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .directfs.v1.DfsHost host_ids = 1;
  int host_ids_size() const;
  void clear_host_ids();
  static const int kHostIdsFieldNumber = 1;
  const ::directfs::v1::DfsHost& host_ids(int index) const;
  ::directfs::v1::DfsHost* mutable_host_ids(int index);
  ::directfs::v1::DfsHost* add_host_ids();
  ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsHost >*
      mutable_host_ids();
  const ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsHost >&
      host_ids() const;

  // @@protoc_insertion_point(class_scope:directfs.v1.DfsHostListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsHost > host_ids_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsVolumeCredentials : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:directfs.v1.DfsVolumeCredentials) */ {
 public:
  DfsVolumeCredentials();
  virtual ~DfsVolumeCredentials();

  DfsVolumeCredentials(const DfsVolumeCredentials& from);

  inline DfsVolumeCredentials& operator=(const DfsVolumeCredentials& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsVolumeCredentials(DfsVolumeCredentials&& from) noexcept
    : DfsVolumeCredentials() {
    *this = ::std::move(from);
  }

  inline DfsVolumeCredentials& operator=(DfsVolumeCredentials&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsVolumeCredentials& default_instance();

  static inline const DfsVolumeCredentials* internal_default_instance() {
    return reinterpret_cast<const DfsVolumeCredentials*>(
               &_DfsVolumeCredentials_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DfsVolumeCredentials* other);
  friend void swap(DfsVolumeCredentials& a, DfsVolumeCredentials& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsVolumeCredentials* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsVolumeCredentials* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsVolumeCredentials& from);
  void MergeFrom(const DfsVolumeCredentials& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsVolumeCredentials* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:directfs.v1.DfsVolumeCredentials)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsVolumeStatistics : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:directfs.v1.DfsVolumeStatistics) */ {
 public:
  DfsVolumeStatistics();
  virtual ~DfsVolumeStatistics();

  DfsVolumeStatistics(const DfsVolumeStatistics& from);

  inline DfsVolumeStatistics& operator=(const DfsVolumeStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsVolumeStatistics(DfsVolumeStatistics&& from) noexcept
    : DfsVolumeStatistics() {
    *this = ::std::move(from);
  }

  inline DfsVolumeStatistics& operator=(DfsVolumeStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsVolumeStatistics& default_instance();

  static inline const DfsVolumeStatistics* internal_default_instance() {
    return reinterpret_cast<const DfsVolumeStatistics*>(
               &_DfsVolumeStatistics_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(DfsVolumeStatistics* other);
  friend void swap(DfsVolumeStatistics& a, DfsVolumeStatistics& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsVolumeStatistics* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsVolumeStatistics* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsVolumeStatistics& from);
  void MergeFrom(const DfsVolumeStatistics& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsVolumeStatistics* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:directfs.v1.DfsVolumeStatistics)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsVolumeStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:directfs.v1.DfsVolumeStatus) */ {
 public:
  DfsVolumeStatus();
  virtual ~DfsVolumeStatus();

  DfsVolumeStatus(const DfsVolumeStatus& from);

  inline DfsVolumeStatus& operator=(const DfsVolumeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsVolumeStatus(DfsVolumeStatus&& from) noexcept
    : DfsVolumeStatus() {
    *this = ::std::move(from);
  }

  inline DfsVolumeStatus& operator=(DfsVolumeStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsVolumeStatus& default_instance();

  static inline const DfsVolumeStatus* internal_default_instance() {
    return reinterpret_cast<const DfsVolumeStatus*>(
               &_DfsVolumeStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(DfsVolumeStatus* other);
  friend void swap(DfsVolumeStatus& a, DfsVolumeStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsVolumeStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsVolumeStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsVolumeStatus& from);
  void MergeFrom(const DfsVolumeStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsVolumeStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DfsVolumeStatus_DfsConnectionState DfsConnectionState;
  static const DfsConnectionState NONE =
    DfsVolumeStatus_DfsConnectionState_NONE;
  static const DfsConnectionState CONNECTING =
    DfsVolumeStatus_DfsConnectionState_CONNECTING;
  static const DfsConnectionState CONNECTED =
    DfsVolumeStatus_DfsConnectionState_CONNECTED;
  static const DfsConnectionState DISCONNECTING =
    DfsVolumeStatus_DfsConnectionState_DISCONNECTING;
  static const DfsConnectionState DISCONNECTED =
    DfsVolumeStatus_DfsConnectionState_DISCONNECTED;
  static inline bool DfsConnectionState_IsValid(int value) {
    return DfsVolumeStatus_DfsConnectionState_IsValid(value);
  }
  static const DfsConnectionState DfsConnectionState_MIN =
    DfsVolumeStatus_DfsConnectionState_DfsConnectionState_MIN;
  static const DfsConnectionState DfsConnectionState_MAX =
    DfsVolumeStatus_DfsConnectionState_DfsConnectionState_MAX;
  static const int DfsConnectionState_ARRAYSIZE =
    DfsVolumeStatus_DfsConnectionState_DfsConnectionState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DfsConnectionState_descriptor() {
    return DfsVolumeStatus_DfsConnectionState_descriptor();
  }
  static inline const ::std::string& DfsConnectionState_Name(DfsConnectionState value) {
    return DfsVolumeStatus_DfsConnectionState_Name(value);
  }
  static inline bool DfsConnectionState_Parse(const ::std::string& name,
      DfsConnectionState* value) {
    return DfsVolumeStatus_DfsConnectionState_Parse(name, value);
  }

  typedef DfsVolumeStatus_DfsAddressFamily DfsAddressFamily;
  static const DfsAddressFamily IPV4 =
    DfsVolumeStatus_DfsAddressFamily_IPV4;
  static const DfsAddressFamily IPV6 =
    DfsVolumeStatus_DfsAddressFamily_IPV6;
  static inline bool DfsAddressFamily_IsValid(int value) {
    return DfsVolumeStatus_DfsAddressFamily_IsValid(value);
  }
  static const DfsAddressFamily DfsAddressFamily_MIN =
    DfsVolumeStatus_DfsAddressFamily_DfsAddressFamily_MIN;
  static const DfsAddressFamily DfsAddressFamily_MAX =
    DfsVolumeStatus_DfsAddressFamily_DfsAddressFamily_MAX;
  static const int DfsAddressFamily_ARRAYSIZE =
    DfsVolumeStatus_DfsAddressFamily_DfsAddressFamily_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DfsAddressFamily_descriptor() {
    return DfsVolumeStatus_DfsAddressFamily_descriptor();
  }
  static inline const ::std::string& DfsAddressFamily_Name(DfsAddressFamily value) {
    return DfsVolumeStatus_DfsAddressFamily_Name(value);
  }
  static inline bool DfsAddressFamily_Parse(const ::std::string& name,
      DfsAddressFamily* value) {
    return DfsVolumeStatus_DfsAddressFamily_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string peer_name = 2;
  void clear_peer_name();
  static const int kPeerNameFieldNumber = 2;
  const ::std::string& peer_name() const;
  void set_peer_name(const ::std::string& value);
  #if LANG_CXX11
  void set_peer_name(::std::string&& value);
  #endif
  void set_peer_name(const char* value);
  void set_peer_name(const char* value, size_t size);
  ::std::string* mutable_peer_name();
  ::std::string* release_peer_name();
  void set_allocated_peer_name(::std::string* peer_name);

  // .directfs.v1.DfsVolumeStatus.DfsConnectionState conn_state = 1;
  void clear_conn_state();
  static const int kConnStateFieldNumber = 1;
  ::directfs::v1::DfsVolumeStatus_DfsConnectionState conn_state() const;
  void set_conn_state(::directfs::v1::DfsVolumeStatus_DfsConnectionState value);

  // .directfs.v1.DfsVolumeStatus.DfsAddressFamily peer_af = 3;
  void clear_peer_af();
  static const int kPeerAfFieldNumber = 3;
  ::directfs::v1::DfsVolumeStatus_DfsAddressFamily peer_af() const;
  void set_peer_af(::directfs::v1::DfsVolumeStatus_DfsAddressFamily value);

  // @@protoc_insertion_point(class_scope:directfs.v1.DfsVolumeStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr peer_name_;
  int conn_state_;
  int peer_af_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsVolume : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:directfs.v1.DfsVolume) */ {
 public:
  DfsVolume();
  virtual ~DfsVolume();

  DfsVolume(const DfsVolume& from);

  inline DfsVolume& operator=(const DfsVolume& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsVolume(DfsVolume&& from) noexcept
    : DfsVolume() {
    *this = ::std::move(from);
  }

  inline DfsVolume& operator=(DfsVolume&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsVolume& default_instance();

  static inline const DfsVolume* internal_default_instance() {
    return reinterpret_cast<const DfsVolume*>(
               &_DfsVolume_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DfsVolume* other);
  friend void swap(DfsVolume& a, DfsVolume& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsVolume* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsVolume* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsVolume& from);
  void MergeFrom(const DfsVolume& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsVolume* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .DataplaneCommon cc = 1;
  bool has_cc() const;
  void clear_cc();
  static const int kCcFieldNumber = 1;
  const ::DataplaneCommon& cc() const;
  ::DataplaneCommon* mutable_cc();
  ::DataplaneCommon* release_cc();
  void set_allocated_cc(::DataplaneCommon* cc);

  // .directfs.v1.DfsVolumeCredentials credentials = 4;
  bool has_credentials() const;
  void clear_credentials();
  static const int kCredentialsFieldNumber = 4;
  const ::directfs::v1::DfsVolumeCredentials& credentials() const;
  ::directfs::v1::DfsVolumeCredentials* mutable_credentials();
  ::directfs::v1::DfsVolumeCredentials* release_credentials();
  void set_allocated_credentials(::directfs::v1::DfsVolumeCredentials* credentials);

  // .directfs.v1.DfsVolumeStatistics stats = 5;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 5;
  const ::directfs::v1::DfsVolumeStatistics& stats() const;
  ::directfs::v1::DfsVolumeStatistics* mutable_stats();
  ::directfs::v1::DfsVolumeStatistics* release_stats();
  void set_allocated_stats(::directfs::v1::DfsVolumeStatistics* stats);

  // .directfs.v1.DfsVolumeStatus status = 6;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  const ::directfs::v1::DfsVolumeStatus& status() const;
  ::directfs::v1::DfsVolumeStatus* mutable_status();
  ::directfs::v1::DfsVolumeStatus* release_status();
  void set_allocated_status(::directfs::v1::DfsVolumeStatus* status);

  // uint32 volume_id = 2;
  void clear_volume_id();
  static const int kVolumeIdFieldNumber = 2;
  ::google::protobuf::uint32 volume_id() const;
  void set_volume_id(::google::protobuf::uint32 value);

  // uint32 host_id = 3;
  void clear_host_id();
  static const int kHostIdFieldNumber = 3;
  ::google::protobuf::uint32 host_id() const;
  void set_host_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:directfs.v1.DfsVolume)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::DataplaneCommon* cc_;
  ::directfs::v1::DfsVolumeCredentials* credentials_;
  ::directfs::v1::DfsVolumeStatistics* stats_;
  ::directfs::v1::DfsVolumeStatus* status_;
  ::google::protobuf::uint32 volume_id_;
  ::google::protobuf::uint32 host_id_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsVolumeList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:directfs.v1.DfsVolumeList) */ {
 public:
  DfsVolumeList();
  virtual ~DfsVolumeList();

  DfsVolumeList(const DfsVolumeList& from);

  inline DfsVolumeList& operator=(const DfsVolumeList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsVolumeList(DfsVolumeList&& from) noexcept
    : DfsVolumeList() {
    *this = ::std::move(from);
  }

  inline DfsVolumeList& operator=(DfsVolumeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsVolumeList& default_instance();

  static inline const DfsVolumeList* internal_default_instance() {
    return reinterpret_cast<const DfsVolumeList*>(
               &_DfsVolumeList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DfsVolumeList* other);
  friend void swap(DfsVolumeList& a, DfsVolumeList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsVolumeList* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsVolumeList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsVolumeList& from);
  void MergeFrom(const DfsVolumeList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsVolumeList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .directfs.v1.DfsVolumeList volumes = 1;
  int volumes_size() const;
  void clear_volumes();
  static const int kVolumesFieldNumber = 1;
  const ::directfs::v1::DfsVolumeList& volumes(int index) const;
  ::directfs::v1::DfsVolumeList* mutable_volumes(int index);
  ::directfs::v1::DfsVolumeList* add_volumes();
  ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsVolumeList >*
      mutable_volumes();
  const ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsVolumeList >&
      volumes() const;

  // @@protoc_insertion_point(class_scope:directfs.v1.DfsVolumeList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsVolumeList > volumes_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DfsVolumeListQuery : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:directfs.v1.DfsVolumeListQuery) */ {
 public:
  DfsVolumeListQuery();
  virtual ~DfsVolumeListQuery();

  DfsVolumeListQuery(const DfsVolumeListQuery& from);

  inline DfsVolumeListQuery& operator=(const DfsVolumeListQuery& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DfsVolumeListQuery(DfsVolumeListQuery&& from) noexcept
    : DfsVolumeListQuery() {
    *this = ::std::move(from);
  }

  inline DfsVolumeListQuery& operator=(DfsVolumeListQuery&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DfsVolumeListQuery& default_instance();

  static inline const DfsVolumeListQuery* internal_default_instance() {
    return reinterpret_cast<const DfsVolumeListQuery*>(
               &_DfsVolumeListQuery_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DfsVolumeListQuery* other);
  friend void swap(DfsVolumeListQuery& a, DfsVolumeListQuery& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DfsVolumeListQuery* New() const PROTOBUF_FINAL { return New(NULL); }

  DfsVolumeListQuery* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DfsVolumeListQuery& from);
  void MergeFrom(const DfsVolumeListQuery& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DfsVolumeListQuery* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .directfs.v1.DfsVolume volume_ids = 1;
  int volume_ids_size() const;
  void clear_volume_ids();
  static const int kVolumeIdsFieldNumber = 1;
  const ::directfs::v1::DfsVolume& volume_ids(int index) const;
  ::directfs::v1::DfsVolume* mutable_volume_ids(int index);
  ::directfs::v1::DfsVolume* add_volume_ids();
  ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsVolume >*
      mutable_volume_ids();
  const ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsVolume >&
      volume_ids() const;

  // @@protoc_insertion_point(class_scope:directfs.v1.DfsVolumeListQuery)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsVolume > volume_ids_;
  mutable int _cached_size_;
  friend struct protobuf_directfs_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DfsHostCredentials

// -------------------------------------------------------------------

// DfsHost

// .DataplaneCommon cc = 1;
inline bool DfsHost::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline void DfsHost::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
inline const ::DataplaneCommon& DfsHost::cc() const {
  const ::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:directfs.v1.DfsHost.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::DataplaneCommon*>(
      &::_DataplaneCommon_default_instance_);
}
inline ::DataplaneCommon* DfsHost::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsHost.cc)
  return cc_;
}
inline ::DataplaneCommon* DfsHost::release_cc() {
  // @@protoc_insertion_point(field_release:directfs.v1.DfsHost.cc)
  
  ::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void DfsHost::set_allocated_cc(::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:directfs.v1.DfsHost.cc)
}

// uint32 host_id = 2;
inline void DfsHost::clear_host_id() {
  host_id_ = 0u;
}
inline ::google::protobuf::uint32 DfsHost::host_id() const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsHost.host_id)
  return host_id_;
}
inline void DfsHost::set_host_id(::google::protobuf::uint32 value) {
  
  host_id_ = value;
  // @@protoc_insertion_point(field_set:directfs.v1.DfsHost.host_id)
}

// string hostname = 3;
inline void DfsHost::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DfsHost::hostname() const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsHost.hostname)
  return hostname_.GetNoArena();
}
inline void DfsHost::set_hostname(const ::std::string& value) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:directfs.v1.DfsHost.hostname)
}
#if LANG_CXX11
inline void DfsHost::set_hostname(::std::string&& value) {
  
  hostname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:directfs.v1.DfsHost.hostname)
}
#endif
inline void DfsHost::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:directfs.v1.DfsHost.hostname)
}
inline void DfsHost::set_hostname(const char* value, size_t size) {
  
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:directfs.v1.DfsHost.hostname)
}
inline ::std::string* DfsHost::mutable_hostname() {
  
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsHost.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DfsHost::release_hostname() {
  // @@protoc_insertion_point(field_release:directfs.v1.DfsHost.hostname)
  
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DfsHost::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    
  } else {
    
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:directfs.v1.DfsHost.hostname)
}

// uint32 port = 4;
inline void DfsHost::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 DfsHost::port() const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsHost.port)
  return port_;
}
inline void DfsHost::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:directfs.v1.DfsHost.port)
}

// .directfs.v1.DfsHostCredentials credentials = 5;
inline bool DfsHost::has_credentials() const {
  return this != internal_default_instance() && credentials_ != NULL;
}
inline void DfsHost::clear_credentials() {
  if (GetArenaNoVirtual() == NULL && credentials_ != NULL) delete credentials_;
  credentials_ = NULL;
}
inline const ::directfs::v1::DfsHostCredentials& DfsHost::credentials() const {
  const ::directfs::v1::DfsHostCredentials* p = credentials_;
  // @@protoc_insertion_point(field_get:directfs.v1.DfsHost.credentials)
  return p != NULL ? *p : *reinterpret_cast<const ::directfs::v1::DfsHostCredentials*>(
      &::directfs::v1::_DfsHostCredentials_default_instance_);
}
inline ::directfs::v1::DfsHostCredentials* DfsHost::mutable_credentials() {
  
  if (credentials_ == NULL) {
    credentials_ = new ::directfs::v1::DfsHostCredentials;
  }
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsHost.credentials)
  return credentials_;
}
inline ::directfs::v1::DfsHostCredentials* DfsHost::release_credentials() {
  // @@protoc_insertion_point(field_release:directfs.v1.DfsHost.credentials)
  
  ::directfs::v1::DfsHostCredentials* temp = credentials_;
  credentials_ = NULL;
  return temp;
}
inline void DfsHost::set_allocated_credentials(::directfs::v1::DfsHostCredentials* credentials) {
  delete credentials_;
  credentials_ = credentials;
  if (credentials) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:directfs.v1.DfsHost.credentials)
}

// -------------------------------------------------------------------

// DfsHostList

// repeated .directfs.v1.DfsHost hosts = 1;
inline int DfsHostList::hosts_size() const {
  return hosts_.size();
}
inline void DfsHostList::clear_hosts() {
  hosts_.Clear();
}
inline const ::directfs::v1::DfsHost& DfsHostList::hosts(int index) const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsHostList.hosts)
  return hosts_.Get(index);
}
inline ::directfs::v1::DfsHost* DfsHostList::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsHostList.hosts)
  return hosts_.Mutable(index);
}
inline ::directfs::v1::DfsHost* DfsHostList::add_hosts() {
  // @@protoc_insertion_point(field_add:directfs.v1.DfsHostList.hosts)
  return hosts_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsHost >*
DfsHostList::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:directfs.v1.DfsHostList.hosts)
  return &hosts_;
}
inline const ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsHost >&
DfsHostList::hosts() const {
  // @@protoc_insertion_point(field_list:directfs.v1.DfsHostList.hosts)
  return hosts_;
}

// -------------------------------------------------------------------

// DfsHostListQuery

// repeated .directfs.v1.DfsHost host_ids = 1;
inline int DfsHostListQuery::host_ids_size() const {
  return host_ids_.size();
}
inline void DfsHostListQuery::clear_host_ids() {
  host_ids_.Clear();
}
inline const ::directfs::v1::DfsHost& DfsHostListQuery::host_ids(int index) const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsHostListQuery.host_ids)
  return host_ids_.Get(index);
}
inline ::directfs::v1::DfsHost* DfsHostListQuery::mutable_host_ids(int index) {
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsHostListQuery.host_ids)
  return host_ids_.Mutable(index);
}
inline ::directfs::v1::DfsHost* DfsHostListQuery::add_host_ids() {
  // @@protoc_insertion_point(field_add:directfs.v1.DfsHostListQuery.host_ids)
  return host_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsHost >*
DfsHostListQuery::mutable_host_ids() {
  // @@protoc_insertion_point(field_mutable_list:directfs.v1.DfsHostListQuery.host_ids)
  return &host_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsHost >&
DfsHostListQuery::host_ids() const {
  // @@protoc_insertion_point(field_list:directfs.v1.DfsHostListQuery.host_ids)
  return host_ids_;
}

// -------------------------------------------------------------------

// DfsVolumeCredentials

// -------------------------------------------------------------------

// DfsVolumeStatistics

// -------------------------------------------------------------------

// DfsVolumeStatus

// .directfs.v1.DfsVolumeStatus.DfsConnectionState conn_state = 1;
inline void DfsVolumeStatus::clear_conn_state() {
  conn_state_ = 0;
}
inline ::directfs::v1::DfsVolumeStatus_DfsConnectionState DfsVolumeStatus::conn_state() const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsVolumeStatus.conn_state)
  return static_cast< ::directfs::v1::DfsVolumeStatus_DfsConnectionState >(conn_state_);
}
inline void DfsVolumeStatus::set_conn_state(::directfs::v1::DfsVolumeStatus_DfsConnectionState value) {
  
  conn_state_ = value;
  // @@protoc_insertion_point(field_set:directfs.v1.DfsVolumeStatus.conn_state)
}

// string peer_name = 2;
inline void DfsVolumeStatus::clear_peer_name() {
  peer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DfsVolumeStatus::peer_name() const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsVolumeStatus.peer_name)
  return peer_name_.GetNoArena();
}
inline void DfsVolumeStatus::set_peer_name(const ::std::string& value) {
  
  peer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:directfs.v1.DfsVolumeStatus.peer_name)
}
#if LANG_CXX11
inline void DfsVolumeStatus::set_peer_name(::std::string&& value) {
  
  peer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:directfs.v1.DfsVolumeStatus.peer_name)
}
#endif
inline void DfsVolumeStatus::set_peer_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  peer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:directfs.v1.DfsVolumeStatus.peer_name)
}
inline void DfsVolumeStatus::set_peer_name(const char* value, size_t size) {
  
  peer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:directfs.v1.DfsVolumeStatus.peer_name)
}
inline ::std::string* DfsVolumeStatus::mutable_peer_name() {
  
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsVolumeStatus.peer_name)
  return peer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DfsVolumeStatus::release_peer_name() {
  // @@protoc_insertion_point(field_release:directfs.v1.DfsVolumeStatus.peer_name)
  
  return peer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DfsVolumeStatus::set_allocated_peer_name(::std::string* peer_name) {
  if (peer_name != NULL) {
    
  } else {
    
  }
  peer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_name);
  // @@protoc_insertion_point(field_set_allocated:directfs.v1.DfsVolumeStatus.peer_name)
}

// .directfs.v1.DfsVolumeStatus.DfsAddressFamily peer_af = 3;
inline void DfsVolumeStatus::clear_peer_af() {
  peer_af_ = 0;
}
inline ::directfs::v1::DfsVolumeStatus_DfsAddressFamily DfsVolumeStatus::peer_af() const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsVolumeStatus.peer_af)
  return static_cast< ::directfs::v1::DfsVolumeStatus_DfsAddressFamily >(peer_af_);
}
inline void DfsVolumeStatus::set_peer_af(::directfs::v1::DfsVolumeStatus_DfsAddressFamily value) {
  
  peer_af_ = value;
  // @@protoc_insertion_point(field_set:directfs.v1.DfsVolumeStatus.peer_af)
}

// -------------------------------------------------------------------

// DfsVolume

// .DataplaneCommon cc = 1;
inline bool DfsVolume::has_cc() const {
  return this != internal_default_instance() && cc_ != NULL;
}
inline void DfsVolume::clear_cc() {
  if (GetArenaNoVirtual() == NULL && cc_ != NULL) delete cc_;
  cc_ = NULL;
}
inline const ::DataplaneCommon& DfsVolume::cc() const {
  const ::DataplaneCommon* p = cc_;
  // @@protoc_insertion_point(field_get:directfs.v1.DfsVolume.cc)
  return p != NULL ? *p : *reinterpret_cast<const ::DataplaneCommon*>(
      &::_DataplaneCommon_default_instance_);
}
inline ::DataplaneCommon* DfsVolume::mutable_cc() {
  
  if (cc_ == NULL) {
    cc_ = new ::DataplaneCommon;
  }
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsVolume.cc)
  return cc_;
}
inline ::DataplaneCommon* DfsVolume::release_cc() {
  // @@protoc_insertion_point(field_release:directfs.v1.DfsVolume.cc)
  
  ::DataplaneCommon* temp = cc_;
  cc_ = NULL;
  return temp;
}
inline void DfsVolume::set_allocated_cc(::DataplaneCommon* cc) {
  delete cc_;
  cc_ = cc;
  if (cc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:directfs.v1.DfsVolume.cc)
}

// uint32 volume_id = 2;
inline void DfsVolume::clear_volume_id() {
  volume_id_ = 0u;
}
inline ::google::protobuf::uint32 DfsVolume::volume_id() const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsVolume.volume_id)
  return volume_id_;
}
inline void DfsVolume::set_volume_id(::google::protobuf::uint32 value) {
  
  volume_id_ = value;
  // @@protoc_insertion_point(field_set:directfs.v1.DfsVolume.volume_id)
}

// uint32 host_id = 3;
inline void DfsVolume::clear_host_id() {
  host_id_ = 0u;
}
inline ::google::protobuf::uint32 DfsVolume::host_id() const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsVolume.host_id)
  return host_id_;
}
inline void DfsVolume::set_host_id(::google::protobuf::uint32 value) {
  
  host_id_ = value;
  // @@protoc_insertion_point(field_set:directfs.v1.DfsVolume.host_id)
}

// .directfs.v1.DfsVolumeCredentials credentials = 4;
inline bool DfsVolume::has_credentials() const {
  return this != internal_default_instance() && credentials_ != NULL;
}
inline void DfsVolume::clear_credentials() {
  if (GetArenaNoVirtual() == NULL && credentials_ != NULL) delete credentials_;
  credentials_ = NULL;
}
inline const ::directfs::v1::DfsVolumeCredentials& DfsVolume::credentials() const {
  const ::directfs::v1::DfsVolumeCredentials* p = credentials_;
  // @@protoc_insertion_point(field_get:directfs.v1.DfsVolume.credentials)
  return p != NULL ? *p : *reinterpret_cast<const ::directfs::v1::DfsVolumeCredentials*>(
      &::directfs::v1::_DfsVolumeCredentials_default_instance_);
}
inline ::directfs::v1::DfsVolumeCredentials* DfsVolume::mutable_credentials() {
  
  if (credentials_ == NULL) {
    credentials_ = new ::directfs::v1::DfsVolumeCredentials;
  }
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsVolume.credentials)
  return credentials_;
}
inline ::directfs::v1::DfsVolumeCredentials* DfsVolume::release_credentials() {
  // @@protoc_insertion_point(field_release:directfs.v1.DfsVolume.credentials)
  
  ::directfs::v1::DfsVolumeCredentials* temp = credentials_;
  credentials_ = NULL;
  return temp;
}
inline void DfsVolume::set_allocated_credentials(::directfs::v1::DfsVolumeCredentials* credentials) {
  delete credentials_;
  credentials_ = credentials;
  if (credentials) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:directfs.v1.DfsVolume.credentials)
}

// .directfs.v1.DfsVolumeStatistics stats = 5;
inline bool DfsVolume::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
inline void DfsVolume::clear_stats() {
  if (GetArenaNoVirtual() == NULL && stats_ != NULL) delete stats_;
  stats_ = NULL;
}
inline const ::directfs::v1::DfsVolumeStatistics& DfsVolume::stats() const {
  const ::directfs::v1::DfsVolumeStatistics* p = stats_;
  // @@protoc_insertion_point(field_get:directfs.v1.DfsVolume.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::directfs::v1::DfsVolumeStatistics*>(
      &::directfs::v1::_DfsVolumeStatistics_default_instance_);
}
inline ::directfs::v1::DfsVolumeStatistics* DfsVolume::mutable_stats() {
  
  if (stats_ == NULL) {
    stats_ = new ::directfs::v1::DfsVolumeStatistics;
  }
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsVolume.stats)
  return stats_;
}
inline ::directfs::v1::DfsVolumeStatistics* DfsVolume::release_stats() {
  // @@protoc_insertion_point(field_release:directfs.v1.DfsVolume.stats)
  
  ::directfs::v1::DfsVolumeStatistics* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline void DfsVolume::set_allocated_stats(::directfs::v1::DfsVolumeStatistics* stats) {
  delete stats_;
  stats_ = stats;
  if (stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:directfs.v1.DfsVolume.stats)
}

// .directfs.v1.DfsVolumeStatus status = 6;
inline bool DfsVolume::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline void DfsVolume::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::directfs::v1::DfsVolumeStatus& DfsVolume::status() const {
  const ::directfs::v1::DfsVolumeStatus* p = status_;
  // @@protoc_insertion_point(field_get:directfs.v1.DfsVolume.status)
  return p != NULL ? *p : *reinterpret_cast<const ::directfs::v1::DfsVolumeStatus*>(
      &::directfs::v1::_DfsVolumeStatus_default_instance_);
}
inline ::directfs::v1::DfsVolumeStatus* DfsVolume::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::directfs::v1::DfsVolumeStatus;
  }
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsVolume.status)
  return status_;
}
inline ::directfs::v1::DfsVolumeStatus* DfsVolume::release_status() {
  // @@protoc_insertion_point(field_release:directfs.v1.DfsVolume.status)
  
  ::directfs::v1::DfsVolumeStatus* temp = status_;
  status_ = NULL;
  return temp;
}
inline void DfsVolume::set_allocated_status(::directfs::v1::DfsVolumeStatus* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:directfs.v1.DfsVolume.status)
}

// -------------------------------------------------------------------

// DfsVolumeList

// repeated .directfs.v1.DfsVolumeList volumes = 1;
inline int DfsVolumeList::volumes_size() const {
  return volumes_.size();
}
inline void DfsVolumeList::clear_volumes() {
  volumes_.Clear();
}
inline const ::directfs::v1::DfsVolumeList& DfsVolumeList::volumes(int index) const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsVolumeList.volumes)
  return volumes_.Get(index);
}
inline ::directfs::v1::DfsVolumeList* DfsVolumeList::mutable_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsVolumeList.volumes)
  return volumes_.Mutable(index);
}
inline ::directfs::v1::DfsVolumeList* DfsVolumeList::add_volumes() {
  // @@protoc_insertion_point(field_add:directfs.v1.DfsVolumeList.volumes)
  return volumes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsVolumeList >*
DfsVolumeList::mutable_volumes() {
  // @@protoc_insertion_point(field_mutable_list:directfs.v1.DfsVolumeList.volumes)
  return &volumes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsVolumeList >&
DfsVolumeList::volumes() const {
  // @@protoc_insertion_point(field_list:directfs.v1.DfsVolumeList.volumes)
  return volumes_;
}

// -------------------------------------------------------------------

// DfsVolumeListQuery

// repeated .directfs.v1.DfsVolume volume_ids = 1;
inline int DfsVolumeListQuery::volume_ids_size() const {
  return volume_ids_.size();
}
inline void DfsVolumeListQuery::clear_volume_ids() {
  volume_ids_.Clear();
}
inline const ::directfs::v1::DfsVolume& DfsVolumeListQuery::volume_ids(int index) const {
  // @@protoc_insertion_point(field_get:directfs.v1.DfsVolumeListQuery.volume_ids)
  return volume_ids_.Get(index);
}
inline ::directfs::v1::DfsVolume* DfsVolumeListQuery::mutable_volume_ids(int index) {
  // @@protoc_insertion_point(field_mutable:directfs.v1.DfsVolumeListQuery.volume_ids)
  return volume_ids_.Mutable(index);
}
inline ::directfs::v1::DfsVolume* DfsVolumeListQuery::add_volume_ids() {
  // @@protoc_insertion_point(field_add:directfs.v1.DfsVolumeListQuery.volume_ids)
  return volume_ids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsVolume >*
DfsVolumeListQuery::mutable_volume_ids() {
  // @@protoc_insertion_point(field_mutable_list:directfs.v1.DfsVolumeListQuery.volume_ids)
  return &volume_ids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::directfs::v1::DfsVolume >&
DfsVolumeListQuery::volume_ids() const {
  // @@protoc_insertion_point(field_list:directfs.v1.DfsVolumeListQuery.volume_ids)
  return volume_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace v1
}  // namespace directfs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::directfs::v1::DfsVolumeStatus_DfsConnectionState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::directfs::v1::DfsVolumeStatus_DfsConnectionState>() {
  return ::directfs::v1::DfsVolumeStatus_DfsConnectionState_descriptor();
}
template <> struct is_proto_enum< ::directfs::v1::DfsVolumeStatus_DfsAddressFamily> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::directfs::v1::DfsVolumeStatus_DfsAddressFamily>() {
  return ::directfs::v1::DfsVolumeStatus_DfsAddressFamily_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_directfs_2eproto__INCLUDED
