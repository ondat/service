// Code generated by MockGen. DO NOT EDIT.
// Source: code.storageos.net/scm/storageos/service/directfs/v1 (interfaces: DfsInitiatorClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	v1 "code.storageos.net/scm/storageos/service/common/v1"
	v10 "code.storageos.net/scm/storageos/service/directfs/v1"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockDfsInitiatorClient is a mock of DfsInitiatorClient interface
type MockDfsInitiatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockDfsInitiatorClientMockRecorder
}

// MockDfsInitiatorClientMockRecorder is the mock recorder for MockDfsInitiatorClient
type MockDfsInitiatorClientMockRecorder struct {
	mock *MockDfsInitiatorClient
}

// NewMockDfsInitiatorClient creates a new mock instance
func NewMockDfsInitiatorClient(ctrl *gomock.Controller) *MockDfsInitiatorClient {
	mock := &MockDfsInitiatorClient{ctrl: ctrl}
	mock.recorder = &MockDfsInitiatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDfsInitiatorClient) EXPECT() *MockDfsInitiatorClientMockRecorder {
	return m.recorder
}

// NodeCreate mocks base method
func (m *MockDfsInitiatorClient) NodeCreate(arg0 context.Context, arg1 *v10.DfsInitiatorNode, arg2 ...grpc.CallOption) (*v1.RpcResult, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeCreate", varargs...)
	ret0, _ := ret[0].(*v1.RpcResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeCreate indicates an expected call of NodeCreate
func (mr *MockDfsInitiatorClientMockRecorder) NodeCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeCreate", reflect.TypeOf((*MockDfsInitiatorClient)(nil).NodeCreate), varargs...)
}

// NodeDelete mocks base method
func (m *MockDfsInitiatorClient) NodeDelete(arg0 context.Context, arg1 *v10.DfsInitiatorNode, arg2 ...grpc.CallOption) (*v1.RpcResult, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeDelete", varargs...)
	ret0, _ := ret[0].(*v1.RpcResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeDelete indicates an expected call of NodeDelete
func (mr *MockDfsInitiatorClientMockRecorder) NodeDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeDelete", reflect.TypeOf((*MockDfsInitiatorClient)(nil).NodeDelete), varargs...)
}

// NodeList mocks base method
func (m *MockDfsInitiatorClient) NodeList(arg0 context.Context, arg1 *v10.DfsInitiatorNodeListQuery, arg2 ...grpc.CallOption) (*v10.DfsInitiatorNodeList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeList", varargs...)
	ret0, _ := ret[0].(*v10.DfsInitiatorNodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeList indicates an expected call of NodeList
func (mr *MockDfsInitiatorClientMockRecorder) NodeList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeList", reflect.TypeOf((*MockDfsInitiatorClient)(nil).NodeList), varargs...)
}

// NodeUpdate mocks base method
func (m *MockDfsInitiatorClient) NodeUpdate(arg0 context.Context, arg1 *v10.DfsInitiatorNode, arg2 ...grpc.CallOption) (*v1.RpcResult, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NodeUpdate", varargs...)
	ret0, _ := ret[0].(*v1.RpcResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NodeUpdate indicates an expected call of NodeUpdate
func (mr *MockDfsInitiatorClientMockRecorder) NodeUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NodeUpdate", reflect.TypeOf((*MockDfsInitiatorClient)(nil).NodeUpdate), varargs...)
}

// Status mocks base method
func (m *MockDfsInitiatorClient) Status(arg0 context.Context, arg1 *v10.DfsInitiatorStatusRequest, arg2 ...grpc.CallOption) (*v10.DfsInitiatorStatus, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*v10.DfsInitiatorStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockDfsInitiatorClientMockRecorder) Status(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDfsInitiatorClient)(nil).Status), varargs...)
}

// VolumeCreate mocks base method
func (m *MockDfsInitiatorClient) VolumeCreate(arg0 context.Context, arg1 *v10.DfsInitiatorVolume, arg2 ...grpc.CallOption) (*v1.RpcResult, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VolumeCreate", varargs...)
	ret0, _ := ret[0].(*v1.RpcResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeCreate indicates an expected call of VolumeCreate
func (mr *MockDfsInitiatorClientMockRecorder) VolumeCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCreate", reflect.TypeOf((*MockDfsInitiatorClient)(nil).VolumeCreate), varargs...)
}

// VolumeDelete mocks base method
func (m *MockDfsInitiatorClient) VolumeDelete(arg0 context.Context, arg1 *v10.DfsInitiatorVolume, arg2 ...grpc.CallOption) (*v1.RpcResult, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VolumeDelete", varargs...)
	ret0, _ := ret[0].(*v1.RpcResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeDelete indicates an expected call of VolumeDelete
func (mr *MockDfsInitiatorClientMockRecorder) VolumeDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDelete", reflect.TypeOf((*MockDfsInitiatorClient)(nil).VolumeDelete), varargs...)
}

// VolumeList mocks base method
func (m *MockDfsInitiatorClient) VolumeList(arg0 context.Context, arg1 *v10.DfsInitiatorVolumeListQuery, arg2 ...grpc.CallOption) (*v10.DfsInitiatorVolumeList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VolumeList", varargs...)
	ret0, _ := ret[0].(*v10.DfsInitiatorVolumeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeList indicates an expected call of VolumeList
func (mr *MockDfsInitiatorClientMockRecorder) VolumeList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeList", reflect.TypeOf((*MockDfsInitiatorClient)(nil).VolumeList), varargs...)
}

// VolumeUpdate mocks base method
func (m *MockDfsInitiatorClient) VolumeUpdate(arg0 context.Context, arg1 *v10.DfsInitiatorVolume, arg2 ...grpc.CallOption) (*v1.RpcResult, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VolumeUpdate", varargs...)
	ret0, _ := ret[0].(*v1.RpcResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeUpdate indicates an expected call of VolumeUpdate
func (mr *MockDfsInitiatorClientMockRecorder) VolumeUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeUpdate", reflect.TypeOf((*MockDfsInitiatorClient)(nil).VolumeUpdate), varargs...)
}
