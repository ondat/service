// Code generated by MockGen. DO NOT EDIT.
// Source: code.storageos.net/scm/storageos/service/directfs/v1 (interfaces: DfsResponderClient)

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	v1 "code.storageos.net/scm/storageos/service/common/v1"
	v10 "code.storageos.net/scm/storageos/service/directfs/v1"
	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockDfsResponderClient is a mock of DfsResponderClient interface
type MockDfsResponderClient struct {
	ctrl     *gomock.Controller
	recorder *MockDfsResponderClientMockRecorder
}

// MockDfsResponderClientMockRecorder is the mock recorder for MockDfsResponderClient
type MockDfsResponderClientMockRecorder struct {
	mock *MockDfsResponderClient
}

// NewMockDfsResponderClient creates a new mock instance
func NewMockDfsResponderClient(ctrl *gomock.Controller) *MockDfsResponderClient {
	mock := &MockDfsResponderClient{ctrl: ctrl}
	mock.recorder = &MockDfsResponderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDfsResponderClient) EXPECT() *MockDfsResponderClientMockRecorder {
	return m.recorder
}

// Status mocks base method
func (m *MockDfsResponderClient) Status(arg0 context.Context, arg1 *v10.DfsResponderStatusRequest, arg2 ...grpc.CallOption) (*v10.DfsResponderStatus, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Status", varargs...)
	ret0, _ := ret[0].(*v10.DfsResponderStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status
func (mr *MockDfsResponderClientMockRecorder) Status(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockDfsResponderClient)(nil).Status), varargs...)
}

// VolumeCreate mocks base method
func (m *MockDfsResponderClient) VolumeCreate(arg0 context.Context, arg1 *v10.DfsResponderVolume, arg2 ...grpc.CallOption) (*v1.RpcResult, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VolumeCreate", varargs...)
	ret0, _ := ret[0].(*v1.RpcResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeCreate indicates an expected call of VolumeCreate
func (mr *MockDfsResponderClientMockRecorder) VolumeCreate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeCreate", reflect.TypeOf((*MockDfsResponderClient)(nil).VolumeCreate), varargs...)
}

// VolumeDelete mocks base method
func (m *MockDfsResponderClient) VolumeDelete(arg0 context.Context, arg1 *v10.DfsResponderVolume, arg2 ...grpc.CallOption) (*v1.RpcResult, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VolumeDelete", varargs...)
	ret0, _ := ret[0].(*v1.RpcResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeDelete indicates an expected call of VolumeDelete
func (mr *MockDfsResponderClientMockRecorder) VolumeDelete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeDelete", reflect.TypeOf((*MockDfsResponderClient)(nil).VolumeDelete), varargs...)
}

// VolumeList mocks base method
func (m *MockDfsResponderClient) VolumeList(arg0 context.Context, arg1 *v10.DfsResponderVolumeListQuery, arg2 ...grpc.CallOption) (*v10.DfsResponderVolumeList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VolumeList", varargs...)
	ret0, _ := ret[0].(*v10.DfsResponderVolumeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeList indicates an expected call of VolumeList
func (mr *MockDfsResponderClientMockRecorder) VolumeList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeList", reflect.TypeOf((*MockDfsResponderClient)(nil).VolumeList), varargs...)
}

// VolumeUpdate mocks base method
func (m *MockDfsResponderClient) VolumeUpdate(arg0 context.Context, arg1 *v10.DfsResponderVolume, arg2 ...grpc.CallOption) (*v1.RpcResult, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "VolumeUpdate", varargs...)
	ret0, _ := ret[0].(*v1.RpcResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VolumeUpdate indicates an expected call of VolumeUpdate
func (mr *MockDfsResponderClientMockRecorder) VolumeUpdate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeUpdate", reflect.TypeOf((*MockDfsResponderClient)(nil).VolumeUpdate), varargs...)
}
