# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import common_pb2 as common__pb2
import directfs_pb2 as directfs__pb2


class DfsInitiatorStub(object):
  """*
  DirectFS client configuration and status service.

  Use 'Initiator' instead of 'Client' to avoid having a DfsClientClient
  and DfsClientServer, which would be stupid.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Status = channel.unary_unary(
        '/directfs.v1.DfsInitiator/Status',
        request_serializer=directfs__pb2.DfsInitiatorStatusRequest.SerializeToString,
        response_deserializer=directfs__pb2.DfsInitiatorStatus.FromString,
        )
    self.ServerCreate = channel.unary_unary(
        '/directfs.v1.DfsInitiator/ServerCreate',
        request_serializer=directfs__pb2.DfsInitiatorHost.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.ServerUpdate = channel.unary_unary(
        '/directfs.v1.DfsInitiator/ServerUpdate',
        request_serializer=directfs__pb2.DfsInitiatorHost.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.ServerDelete = channel.unary_unary(
        '/directfs.v1.DfsInitiator/ServerDelete',
        request_serializer=directfs__pb2.DfsInitiatorHost.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.ServerList = channel.unary_unary(
        '/directfs.v1.DfsInitiator/ServerList',
        request_serializer=directfs__pb2.DfsInitiatorHostListQuery.SerializeToString,
        response_deserializer=directfs__pb2.DfsInitiatorHostList.FromString,
        )
    self.VolumeCreate = channel.unary_unary(
        '/directfs.v1.DfsInitiator/VolumeCreate',
        request_serializer=directfs__pb2.DfsInitiatorVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeUpdate = channel.unary_unary(
        '/directfs.v1.DfsInitiator/VolumeUpdate',
        request_serializer=directfs__pb2.DfsInitiatorVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeDelete = channel.unary_unary(
        '/directfs.v1.DfsInitiator/VolumeDelete',
        request_serializer=directfs__pb2.DfsInitiatorVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeList = channel.unary_unary(
        '/directfs.v1.DfsInitiator/VolumeList',
        request_serializer=directfs__pb2.DfsInitiatorVolumeListQuery.SerializeToString,
        response_deserializer=directfs__pb2.DfsInitiatorVolumeList.FromString,
        )


class DfsInitiatorServicer(object):
  """*
  DirectFS client configuration and status service.

  Use 'Initiator' instead of 'Client' to avoid having a DfsClientClient
  and DfsClientServer, which would be stupid.
  """

  def Status(self, request, context):
    """*
    Get program status.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ServerCreate(self, request, context):
    """*
    Add a remote host entry to be used by volumes.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ServerUpdate(self, request, context):
    """*
    Update a remote host entry to be used by volumes.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ServerDelete(self, request, context):
    """*
    Remove a remote host entry.

    This will likely result in any volumes using this host to
    become unconfigured. That has serious consequences.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ServerList(self, request, context):
    """*
    List configured host entries, optionally filtered via a DfsHostListQuery
    message.

    returns A DfsHostList message containing DfsHost messages,
    if any are available matching the filter.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeCreate(self, request, context):
    """*
    Create a volume on a remote host. The DfsHost matching the host id
    in the DfsVolume message must be configured for the volume to actually
    be configured on the DirectFS client.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeUpdate(self, request, context):
    """*
    Update a volume on a remote host. The DfsHost matching the host id
    in the DfsVolume message must be configured for the volume to actually
    be configured on the DirectFS client.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeDelete(self, request, context):
    """*
    Delete a volume previously configured by VolumeCreate.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeList(self, request, context):
    """*
    List configured volume entries, optionally filtered via a DfsVolumeListQuery
    message.

    returns A DfsVolumeList message containing DfsVolume messages,
    if any are available matching the filter.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DfsInitiatorServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Status': grpc.unary_unary_rpc_method_handler(
          servicer.Status,
          request_deserializer=directfs__pb2.DfsInitiatorStatusRequest.FromString,
          response_serializer=directfs__pb2.DfsInitiatorStatus.SerializeToString,
      ),
      'ServerCreate': grpc.unary_unary_rpc_method_handler(
          servicer.ServerCreate,
          request_deserializer=directfs__pb2.DfsInitiatorHost.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'ServerUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.ServerUpdate,
          request_deserializer=directfs__pb2.DfsInitiatorHost.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'ServerDelete': grpc.unary_unary_rpc_method_handler(
          servicer.ServerDelete,
          request_deserializer=directfs__pb2.DfsInitiatorHost.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'ServerList': grpc.unary_unary_rpc_method_handler(
          servicer.ServerList,
          request_deserializer=directfs__pb2.DfsInitiatorHostListQuery.FromString,
          response_serializer=directfs__pb2.DfsInitiatorHostList.SerializeToString,
      ),
      'VolumeCreate': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeCreate,
          request_deserializer=directfs__pb2.DfsInitiatorVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeUpdate,
          request_deserializer=directfs__pb2.DfsInitiatorVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeDelete': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeDelete,
          request_deserializer=directfs__pb2.DfsInitiatorVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeList': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeList,
          request_deserializer=directfs__pb2.DfsInitiatorVolumeListQuery.FromString,
          response_serializer=directfs__pb2.DfsInitiatorVolumeList.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'directfs.v1.DfsInitiator', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DfsResponderStub(object):
  """*
  DirectFS server configuration and status service.

  Use 'Responder' instead of 'Server' to avoid having DfsServerClient and
  DfsServerServer, which would be stupid.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Status = channel.unary_unary(
        '/directfs.v1.DfsResponder/Status',
        request_serializer=directfs__pb2.DfsResponderStatusRequest.SerializeToString,
        response_deserializer=directfs__pb2.DfsResponderStatus.FromString,
        )
    self.VolumeCreate = channel.unary_unary(
        '/directfs.v1.DfsResponder/VolumeCreate',
        request_serializer=directfs__pb2.DfsResponderVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeUpdate = channel.unary_unary(
        '/directfs.v1.DfsResponder/VolumeUpdate',
        request_serializer=directfs__pb2.DfsResponderVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeDelete = channel.unary_unary(
        '/directfs.v1.DfsResponder/VolumeDelete',
        request_serializer=directfs__pb2.DfsResponderVolume.SerializeToString,
        response_deserializer=common__pb2.RpcResult.FromString,
        )
    self.VolumeList = channel.unary_unary(
        '/directfs.v1.DfsResponder/VolumeList',
        request_serializer=directfs__pb2.DfsResponderVolumeListQuery.SerializeToString,
        response_deserializer=directfs__pb2.DfsResponderVolumeList.FromString,
        )


class DfsResponderServicer(object):
  """*
  DirectFS server configuration and status service.

  Use 'Responder' instead of 'Server' to avoid having DfsServerClient and
  DfsServerServer, which would be stupid.
  """

  def Status(self, request, context):
    """*
    Get program status.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeCreate(self, request, context):
    """*
    Create a volume to be served via DFS. Currently does nothing, but should still
    be performed as in the near future it will certainly be required.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeUpdate(self, request, context):
    """*
    Update a volume to be served via DFS. Currently does nothing, but should still
    be performed as in the near future it will certainly be required.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeDelete(self, request, context):
    """*
    Delete a volume to be served via DFS. Currently does nothing, but should still
    be performed as in the near future it will certainly be required.

    returns RpcResult
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def VolumeList(self, request, context):
    """*
    List configured volume entries, optionally filtered via a DfsVolumeListQuery
    message.

    returns a list of DfsReponderVolume messages, if any are available matching the filter.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DfsResponderServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Status': grpc.unary_unary_rpc_method_handler(
          servicer.Status,
          request_deserializer=directfs__pb2.DfsResponderStatusRequest.FromString,
          response_serializer=directfs__pb2.DfsResponderStatus.SerializeToString,
      ),
      'VolumeCreate': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeCreate,
          request_deserializer=directfs__pb2.DfsResponderVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeUpdate': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeUpdate,
          request_deserializer=directfs__pb2.DfsResponderVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeDelete': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeDelete,
          request_deserializer=directfs__pb2.DfsResponderVolume.FromString,
          response_serializer=common__pb2.RpcResult.SerializeToString,
      ),
      'VolumeList': grpc.unary_unary_rpc_method_handler(
          servicer.VolumeList,
          request_deserializer=directfs__pb2.DfsResponderVolumeListQuery.FromString,
          response_serializer=directfs__pb2.DfsResponderVolumeList.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'directfs.v1.DfsResponder', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
