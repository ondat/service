// Code generated by protoc-gen-go. DO NOT EDIT.
// source: directfs.proto

/*
Package directfs_v1 is a generated protocol buffer package.

It is generated from these files:
	directfs.proto

It has these top-level messages:
	DfsInitiatorStatusRequest
	DfsInitiatorStatus
	DfsResponderStatusRequest
	DfsResponderStatus
	DfsInitiatorNodeCredentials
	DfsInitiatorNode
	DfsInitiatorNodeList
	DfsInitiatorNodeListQuery
	DfsInitiatorVolumeCredentials
	DfsInitiatorVolumeStatistics
	DfsInitiatorVolumeStatus
	DfsInitiatorVolume
	DfsInitiatorVolumeList
	DfsInitiatorVolumeListQuery
	DfsResponderVolumeCredentials
	DfsResponderVolumeStatistics
	DfsResponderVolumeStatus
	DfsResponderVolume
	DfsResponderVolumeList
	DfsResponderVolumeListQuery
*/
package directfs_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common_v1 "code.storageos.net/scm/storageos/service/common/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DfsInitiatorVolumeStatus_DfsInitiatorConnectionState int32

const (
	DfsInitiatorVolumeStatus_NONE          DfsInitiatorVolumeStatus_DfsInitiatorConnectionState = 0
	DfsInitiatorVolumeStatus_CONNECTING    DfsInitiatorVolumeStatus_DfsInitiatorConnectionState = 1
	DfsInitiatorVolumeStatus_CONNECTED     DfsInitiatorVolumeStatus_DfsInitiatorConnectionState = 2
	DfsInitiatorVolumeStatus_DISCONNECTING DfsInitiatorVolumeStatus_DfsInitiatorConnectionState = 3
	DfsInitiatorVolumeStatus_DISCONNECTED  DfsInitiatorVolumeStatus_DfsInitiatorConnectionState = 4
)

var DfsInitiatorVolumeStatus_DfsInitiatorConnectionState_name = map[int32]string{
	0: "NONE",
	1: "CONNECTING",
	2: "CONNECTED",
	3: "DISCONNECTING",
	4: "DISCONNECTED",
}
var DfsInitiatorVolumeStatus_DfsInitiatorConnectionState_value = map[string]int32{
	"NONE":          0,
	"CONNECTING":    1,
	"CONNECTED":     2,
	"DISCONNECTING": 3,
	"DISCONNECTED":  4,
}

func (x DfsInitiatorVolumeStatus_DfsInitiatorConnectionState) String() string {
	return proto.EnumName(DfsInitiatorVolumeStatus_DfsInitiatorConnectionState_name, int32(x))
}
func (DfsInitiatorVolumeStatus_DfsInitiatorConnectionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 0}
}

type DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily int32

const (
	DfsInitiatorVolumeStatus_IPV4 DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily = 0
	DfsInitiatorVolumeStatus_IPV6 DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily = 1
)

var DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
}
var DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
}

func (x DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily) String() string {
	return proto.EnumName(DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily_name, int32(x))
}
func (DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10, 1}
}

type DfsResponderVolumeStatus_DfsResponderConnectionState int32

const (
	DfsResponderVolumeStatus_NONE          DfsResponderVolumeStatus_DfsResponderConnectionState = 0
	DfsResponderVolumeStatus_CONNECTING    DfsResponderVolumeStatus_DfsResponderConnectionState = 1
	DfsResponderVolumeStatus_CONNECTED     DfsResponderVolumeStatus_DfsResponderConnectionState = 2
	DfsResponderVolumeStatus_DISCONNECTING DfsResponderVolumeStatus_DfsResponderConnectionState = 3
	DfsResponderVolumeStatus_DISCONNECTED  DfsResponderVolumeStatus_DfsResponderConnectionState = 4
)

var DfsResponderVolumeStatus_DfsResponderConnectionState_name = map[int32]string{
	0: "NONE",
	1: "CONNECTING",
	2: "CONNECTED",
	3: "DISCONNECTING",
	4: "DISCONNECTED",
}
var DfsResponderVolumeStatus_DfsResponderConnectionState_value = map[string]int32{
	"NONE":          0,
	"CONNECTING":    1,
	"CONNECTED":     2,
	"DISCONNECTING": 3,
	"DISCONNECTED":  4,
}

func (x DfsResponderVolumeStatus_DfsResponderConnectionState) String() string {
	return proto.EnumName(DfsResponderVolumeStatus_DfsResponderConnectionState_name, int32(x))
}
func (DfsResponderVolumeStatus_DfsResponderConnectionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16, 0}
}

type DfsResponderVolumeStatus_DfsResponderAddressFamily int32

const (
	DfsResponderVolumeStatus_IPV4 DfsResponderVolumeStatus_DfsResponderAddressFamily = 0
	DfsResponderVolumeStatus_IPV6 DfsResponderVolumeStatus_DfsResponderAddressFamily = 1
)

var DfsResponderVolumeStatus_DfsResponderAddressFamily_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
}
var DfsResponderVolumeStatus_DfsResponderAddressFamily_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
}

func (x DfsResponderVolumeStatus_DfsResponderAddressFamily) String() string {
	return proto.EnumName(DfsResponderVolumeStatus_DfsResponderAddressFamily_name, int32(x))
}
func (DfsResponderVolumeStatus_DfsResponderAddressFamily) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16, 1}
}

type DfsInitiatorStatusRequest struct {
}

func (m *DfsInitiatorStatusRequest) Reset()                    { *m = DfsInitiatorStatusRequest{} }
func (m *DfsInitiatorStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorStatusRequest) ProtoMessage()               {}
func (*DfsInitiatorStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type DfsInitiatorStatus struct {
	// The version control info string.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo" json:"version_info,omitempty"`
}

func (m *DfsInitiatorStatus) Reset()                    { *m = DfsInitiatorStatus{} }
func (m *DfsInitiatorStatus) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorStatus) ProtoMessage()               {}
func (*DfsInitiatorStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DfsInitiatorStatus) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

type DfsResponderStatusRequest struct {
}

func (m *DfsResponderStatusRequest) Reset()                    { *m = DfsResponderStatusRequest{} }
func (m *DfsResponderStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*DfsResponderStatusRequest) ProtoMessage()               {}
func (*DfsResponderStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type DfsResponderStatus struct {
	// The version control info string.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo" json:"version_info,omitempty"`
}

func (m *DfsResponderStatus) Reset()                    { *m = DfsResponderStatus{} }
func (m *DfsResponderStatus) String() string            { return proto.CompactTextString(m) }
func (*DfsResponderStatus) ProtoMessage()               {}
func (*DfsResponderStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DfsResponderStatus) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

type DfsInitiatorNodeCredentials struct {
}

func (m *DfsInitiatorNodeCredentials) Reset()                    { *m = DfsInitiatorNodeCredentials{} }
func (m *DfsInitiatorNodeCredentials) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorNodeCredentials) ProtoMessage()               {}
func (*DfsInitiatorNodeCredentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// *
// A host used by DirectFS.
type DfsInitiatorNode struct {
	Cc *common_v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc" json:"cc,omitempty"`
	// The unique host identifier.
	HostId uint32 `protobuf:"varint,2,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	// The remote hostname.
	Hostname string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	// The remote port.
	Port uint32 `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	// Host credentials.
	Credentials *DfsInitiatorNodeCredentials `protobuf:"bytes,5,opt,name=credentials" json:"credentials,omitempty"`
}

func (m *DfsInitiatorNode) Reset()                    { *m = DfsInitiatorNode{} }
func (m *DfsInitiatorNode) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorNode) ProtoMessage()               {}
func (*DfsInitiatorNode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DfsInitiatorNode) GetCc() *common_v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DfsInitiatorNode) GetHostId() uint32 {
	if m != nil {
		return m.HostId
	}
	return 0
}

func (m *DfsInitiatorNode) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DfsInitiatorNode) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DfsInitiatorNode) GetCredentials() *DfsInitiatorNodeCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type DfsInitiatorNodeList struct {
	Hosts []*DfsInitiatorNode `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
}

func (m *DfsInitiatorNodeList) Reset()                    { *m = DfsInitiatorNodeList{} }
func (m *DfsInitiatorNodeList) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorNodeList) ProtoMessage()               {}
func (*DfsInitiatorNodeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DfsInitiatorNodeList) GetHosts() []*DfsInitiatorNode {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type DfsInitiatorNodeListQuery struct {
	// An optional list of hosts to query.
	HostIds []uint32 `protobuf:"varint,1,rep,packed,name=host_ids,json=hostIds" json:"host_ids,omitempty"`
}

func (m *DfsInitiatorNodeListQuery) Reset()                    { *m = DfsInitiatorNodeListQuery{} }
func (m *DfsInitiatorNodeListQuery) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorNodeListQuery) ProtoMessage()               {}
func (*DfsInitiatorNodeListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DfsInitiatorNodeListQuery) GetHostIds() []uint32 {
	if m != nil {
		return m.HostIds
	}
	return nil
}

type DfsInitiatorVolumeCredentials struct {
}

func (m *DfsInitiatorVolumeCredentials) Reset()                    { *m = DfsInitiatorVolumeCredentials{} }
func (m *DfsInitiatorVolumeCredentials) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorVolumeCredentials) ProtoMessage()               {}
func (*DfsInitiatorVolumeCredentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type DfsInitiatorVolumeStatistics struct {
}

func (m *DfsInitiatorVolumeStatistics) Reset()                    { *m = DfsInitiatorVolumeStatistics{} }
func (m *DfsInitiatorVolumeStatistics) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorVolumeStatistics) ProtoMessage()               {}
func (*DfsInitiatorVolumeStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DfsInitiatorVolumeStatus struct {
	ConnState DfsInitiatorVolumeStatus_DfsInitiatorConnectionState `protobuf:"varint,1,opt,name=conn_state,json=connState,enum=directfs.v1.DfsInitiatorVolumeStatus_DfsInitiatorConnectionState" json:"conn_state,omitempty"`
	// The remote peer, in string form for simplicity.
	PeerName string `protobuf:"bytes,2,opt,name=peer_name,json=peerName" json:"peer_name,omitempty"`
	// The address family we're using to connect to the peer.
	PeerAf DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily `protobuf:"varint,3,opt,name=peer_af,json=peerAf,enum=directfs.v1.DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily" json:"peer_af,omitempty"`
}

func (m *DfsInitiatorVolumeStatus) Reset()                    { *m = DfsInitiatorVolumeStatus{} }
func (m *DfsInitiatorVolumeStatus) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorVolumeStatus) ProtoMessage()               {}
func (*DfsInitiatorVolumeStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DfsInitiatorVolumeStatus) GetConnState() DfsInitiatorVolumeStatus_DfsInitiatorConnectionState {
	if m != nil {
		return m.ConnState
	}
	return DfsInitiatorVolumeStatus_NONE
}

func (m *DfsInitiatorVolumeStatus) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

func (m *DfsInitiatorVolumeStatus) GetPeerAf() DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily {
	if m != nil {
		return m.PeerAf
	}
	return DfsInitiatorVolumeStatus_IPV4
}

// *
// A volume used by DirectFS.
//
// The remote host (for the client) isn't directly included here. However, the
// client clearly can't connect without a properly configured host_id item.
//
// The split between host and volume objects was decided based on now-irrelevant
// implementation details of ConfigFS v1. However, there's still some logic to
// it if the authentication (especially TLS) is per-host rather than per-volume.
type DfsInitiatorVolume struct {
	Cc *common_v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc" json:"cc,omitempty"`
	// The volume ID.
	VolumeId uint32 `protobuf:"varint,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// The host for this volume.
	HostId uint32 `protobuf:"varint,3,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	// Volume credentials.
	Credentials *DfsInitiatorVolumeCredentials `protobuf:"bytes,4,opt,name=credentials" json:"credentials,omitempty"`
	// Volume statistics.
	Stats *DfsInitiatorVolumeStatistics `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
	// Server status for the volume.
	Status *DfsInitiatorVolumeStatus `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
}

func (m *DfsInitiatorVolume) Reset()                    { *m = DfsInitiatorVolume{} }
func (m *DfsInitiatorVolume) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorVolume) ProtoMessage()               {}
func (*DfsInitiatorVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DfsInitiatorVolume) GetCc() *common_v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DfsInitiatorVolume) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *DfsInitiatorVolume) GetHostId() uint32 {
	if m != nil {
		return m.HostId
	}
	return 0
}

func (m *DfsInitiatorVolume) GetCredentials() *DfsInitiatorVolumeCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *DfsInitiatorVolume) GetStats() *DfsInitiatorVolumeStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *DfsInitiatorVolume) GetStatus() *DfsInitiatorVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type DfsInitiatorVolumeList struct {
	Volumes []*DfsInitiatorVolume `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
}

func (m *DfsInitiatorVolumeList) Reset()                    { *m = DfsInitiatorVolumeList{} }
func (m *DfsInitiatorVolumeList) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorVolumeList) ProtoMessage()               {}
func (*DfsInitiatorVolumeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DfsInitiatorVolumeList) GetVolumes() []*DfsInitiatorVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type DfsInitiatorVolumeListQuery struct {
	// An optional list of volumes to query.
	VolumeIds []uint32 `protobuf:"varint,1,rep,packed,name=volume_ids,json=volumeIds" json:"volume_ids,omitempty"`
}

func (m *DfsInitiatorVolumeListQuery) Reset()                    { *m = DfsInitiatorVolumeListQuery{} }
func (m *DfsInitiatorVolumeListQuery) String() string            { return proto.CompactTextString(m) }
func (*DfsInitiatorVolumeListQuery) ProtoMessage()               {}
func (*DfsInitiatorVolumeListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *DfsInitiatorVolumeListQuery) GetVolumeIds() []uint32 {
	if m != nil {
		return m.VolumeIds
	}
	return nil
}

type DfsResponderVolumeCredentials struct {
}

func (m *DfsResponderVolumeCredentials) Reset()                    { *m = DfsResponderVolumeCredentials{} }
func (m *DfsResponderVolumeCredentials) String() string            { return proto.CompactTextString(m) }
func (*DfsResponderVolumeCredentials) ProtoMessage()               {}
func (*DfsResponderVolumeCredentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type DfsResponderVolumeStatistics struct {
}

func (m *DfsResponderVolumeStatistics) Reset()                    { *m = DfsResponderVolumeStatistics{} }
func (m *DfsResponderVolumeStatistics) String() string            { return proto.CompactTextString(m) }
func (*DfsResponderVolumeStatistics) ProtoMessage()               {}
func (*DfsResponderVolumeStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type DfsResponderVolumeStatus struct {
	ConnState DfsResponderVolumeStatus_DfsResponderConnectionState `protobuf:"varint,1,opt,name=conn_state,json=connState,enum=directfs.v1.DfsResponderVolumeStatus_DfsResponderConnectionState" json:"conn_state,omitempty"`
	// The remote peer, in string form for simplicity.
	PeerName string `protobuf:"bytes,2,opt,name=peer_name,json=peerName" json:"peer_name,omitempty"`
	// The address family we're using to connect to the peer.
	PeerAf DfsResponderVolumeStatus_DfsResponderAddressFamily `protobuf:"varint,3,opt,name=peer_af,json=peerAf,enum=directfs.v1.DfsResponderVolumeStatus_DfsResponderAddressFamily" json:"peer_af,omitempty"`
}

func (m *DfsResponderVolumeStatus) Reset()                    { *m = DfsResponderVolumeStatus{} }
func (m *DfsResponderVolumeStatus) String() string            { return proto.CompactTextString(m) }
func (*DfsResponderVolumeStatus) ProtoMessage()               {}
func (*DfsResponderVolumeStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DfsResponderVolumeStatus) GetConnState() DfsResponderVolumeStatus_DfsResponderConnectionState {
	if m != nil {
		return m.ConnState
	}
	return DfsResponderVolumeStatus_NONE
}

func (m *DfsResponderVolumeStatus) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

func (m *DfsResponderVolumeStatus) GetPeerAf() DfsResponderVolumeStatus_DfsResponderAddressFamily {
	if m != nil {
		return m.PeerAf
	}
	return DfsResponderVolumeStatus_IPV4
}

// *
// A volume used by DirectFS.
//
// The remote host (for the client) isn't directly included here. However, the
// client clearly can't connect without a properly configured host_id item.
//
// The split between host and volume objects was decided based on now-irrelevant
// implementation details of ConfigFS v1. However, there's still some logic to
// it if the authentication (especially TLS) is per-host rather than per-volume.
type DfsResponderVolume struct {
	Cc *common_v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc" json:"cc,omitempty"`
	// The volume ID.
	VolumeId uint32 `protobuf:"varint,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// The host for this volume.
	HostId uint32 `protobuf:"varint,3,opt,name=host_id,json=hostId" json:"host_id,omitempty"`
	// Volume credentials.
	Credentials *DfsResponderVolumeCredentials `protobuf:"bytes,4,opt,name=credentials" json:"credentials,omitempty"`
	// Volume statistics.
	Stats *DfsResponderVolumeStatistics `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
	// Server status for the volume.
	Status *DfsResponderVolumeStatus `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
}

func (m *DfsResponderVolume) Reset()                    { *m = DfsResponderVolume{} }
func (m *DfsResponderVolume) String() string            { return proto.CompactTextString(m) }
func (*DfsResponderVolume) ProtoMessage()               {}
func (*DfsResponderVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *DfsResponderVolume) GetCc() *common_v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DfsResponderVolume) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *DfsResponderVolume) GetHostId() uint32 {
	if m != nil {
		return m.HostId
	}
	return 0
}

func (m *DfsResponderVolume) GetCredentials() *DfsResponderVolumeCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *DfsResponderVolume) GetStats() *DfsResponderVolumeStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *DfsResponderVolume) GetStatus() *DfsResponderVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type DfsResponderVolumeList struct {
	Volumes []*DfsResponderVolume `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
}

func (m *DfsResponderVolumeList) Reset()                    { *m = DfsResponderVolumeList{} }
func (m *DfsResponderVolumeList) String() string            { return proto.CompactTextString(m) }
func (*DfsResponderVolumeList) ProtoMessage()               {}
func (*DfsResponderVolumeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DfsResponderVolumeList) GetVolumes() []*DfsResponderVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type DfsResponderVolumeListQuery struct {
	// An optional list of volumes to query.
	VolumeIds []uint32 `protobuf:"varint,1,rep,packed,name=volume_ids,json=volumeIds" json:"volume_ids,omitempty"`
}

func (m *DfsResponderVolumeListQuery) Reset()                    { *m = DfsResponderVolumeListQuery{} }
func (m *DfsResponderVolumeListQuery) String() string            { return proto.CompactTextString(m) }
func (*DfsResponderVolumeListQuery) ProtoMessage()               {}
func (*DfsResponderVolumeListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DfsResponderVolumeListQuery) GetVolumeIds() []uint32 {
	if m != nil {
		return m.VolumeIds
	}
	return nil
}

func init() {
	proto.RegisterType((*DfsInitiatorStatusRequest)(nil), "directfs.v1.DfsInitiatorStatusRequest")
	proto.RegisterType((*DfsInitiatorStatus)(nil), "directfs.v1.DfsInitiatorStatus")
	proto.RegisterType((*DfsResponderStatusRequest)(nil), "directfs.v1.DfsResponderStatusRequest")
	proto.RegisterType((*DfsResponderStatus)(nil), "directfs.v1.DfsResponderStatus")
	proto.RegisterType((*DfsInitiatorNodeCredentials)(nil), "directfs.v1.DfsInitiatorNodeCredentials")
	proto.RegisterType((*DfsInitiatorNode)(nil), "directfs.v1.DfsInitiatorNode")
	proto.RegisterType((*DfsInitiatorNodeList)(nil), "directfs.v1.DfsInitiatorNodeList")
	proto.RegisterType((*DfsInitiatorNodeListQuery)(nil), "directfs.v1.DfsInitiatorNodeListQuery")
	proto.RegisterType((*DfsInitiatorVolumeCredentials)(nil), "directfs.v1.DfsInitiatorVolumeCredentials")
	proto.RegisterType((*DfsInitiatorVolumeStatistics)(nil), "directfs.v1.DfsInitiatorVolumeStatistics")
	proto.RegisterType((*DfsInitiatorVolumeStatus)(nil), "directfs.v1.DfsInitiatorVolumeStatus")
	proto.RegisterType((*DfsInitiatorVolume)(nil), "directfs.v1.DfsInitiatorVolume")
	proto.RegisterType((*DfsInitiatorVolumeList)(nil), "directfs.v1.DfsInitiatorVolumeList")
	proto.RegisterType((*DfsInitiatorVolumeListQuery)(nil), "directfs.v1.DfsInitiatorVolumeListQuery")
	proto.RegisterType((*DfsResponderVolumeCredentials)(nil), "directfs.v1.DfsResponderVolumeCredentials")
	proto.RegisterType((*DfsResponderVolumeStatistics)(nil), "directfs.v1.DfsResponderVolumeStatistics")
	proto.RegisterType((*DfsResponderVolumeStatus)(nil), "directfs.v1.DfsResponderVolumeStatus")
	proto.RegisterType((*DfsResponderVolume)(nil), "directfs.v1.DfsResponderVolume")
	proto.RegisterType((*DfsResponderVolumeList)(nil), "directfs.v1.DfsResponderVolumeList")
	proto.RegisterType((*DfsResponderVolumeListQuery)(nil), "directfs.v1.DfsResponderVolumeListQuery")
	proto.RegisterEnum("directfs.v1.DfsInitiatorVolumeStatus_DfsInitiatorConnectionState", DfsInitiatorVolumeStatus_DfsInitiatorConnectionState_name, DfsInitiatorVolumeStatus_DfsInitiatorConnectionState_value)
	proto.RegisterEnum("directfs.v1.DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily", DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily_name, DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily_value)
	proto.RegisterEnum("directfs.v1.DfsResponderVolumeStatus_DfsResponderConnectionState", DfsResponderVolumeStatus_DfsResponderConnectionState_name, DfsResponderVolumeStatus_DfsResponderConnectionState_value)
	proto.RegisterEnum("directfs.v1.DfsResponderVolumeStatus_DfsResponderAddressFamily", DfsResponderVolumeStatus_DfsResponderAddressFamily_name, DfsResponderVolumeStatus_DfsResponderAddressFamily_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DfsInitiator service

type DfsInitiatorClient interface {
	// *
	// Get program status.
	Status(ctx context.Context, in *DfsInitiatorStatusRequest, opts ...grpc.CallOption) (*DfsInitiatorStatus, error)
	// *
	// Add a remote host entry to be used by volumes.
	//
	// returns RpcResult
	NodeCreate(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Update a remote host entry to be used by volumes.
	//
	// returns RpcResult
	NodeUpdate(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Remove a remote host entry.
	//
	// This will likely result in any volumes using this host to
	// become unconfigured. That has serious consequences.
	//
	// returns RpcResult
	NodeDelete(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// List configured host entries, optionally filtered via a DfsHostListQuery
	// message.
	//
	// returns A DfsHostList message containing DfsHost messages,
	//         if any are available matching the filter.
	NodeList(ctx context.Context, in *DfsInitiatorNodeListQuery, opts ...grpc.CallOption) (*DfsInitiatorNodeList, error)
	// *
	// Create a volume on a remote host. The DfsHost matching the host id
	// in the DfsVolume message must be configured for the volume to actually
	// be configured on the DirectFS client.
	//
	// returns RpcResult
	VolumeCreate(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Update a volume on a remote host. The DfsHost matching the host id
	// in the DfsVolume message must be configured for the volume to actually
	// be configured on the DirectFS client.
	//
	// returns RpcResult
	VolumeUpdate(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Delete a volume previously configured by VolumeCreate.
	//
	// returns RpcResult
	VolumeDelete(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// List configured volume entries, optionally filtered via a DfsVolumeListQuery
	// message.
	//
	// returns A DfsVolumeList message containing DfsVolume messages,
	//         if any are available matching the filter.
	VolumeList(ctx context.Context, in *DfsInitiatorVolumeListQuery, opts ...grpc.CallOption) (*DfsInitiatorVolumeList, error)
}

type dfsInitiatorClient struct {
	cc *grpc.ClientConn
}

func NewDfsInitiatorClient(cc *grpc.ClientConn) DfsInitiatorClient {
	return &dfsInitiatorClient{cc}
}

func (c *dfsInitiatorClient) Status(ctx context.Context, in *DfsInitiatorStatusRequest, opts ...grpc.CallOption) (*DfsInitiatorStatus, error) {
	out := new(DfsInitiatorStatus)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsInitiator/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) NodeCreate(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsInitiator/NodeCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) NodeUpdate(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsInitiator/NodeUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) NodeDelete(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsInitiator/NodeDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) NodeList(ctx context.Context, in *DfsInitiatorNodeListQuery, opts ...grpc.CallOption) (*DfsInitiatorNodeList, error) {
	out := new(DfsInitiatorNodeList)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsInitiator/NodeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) VolumeCreate(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsInitiator/VolumeCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) VolumeUpdate(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsInitiator/VolumeUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) VolumeDelete(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsInitiator/VolumeDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) VolumeList(ctx context.Context, in *DfsInitiatorVolumeListQuery, opts ...grpc.CallOption) (*DfsInitiatorVolumeList, error) {
	out := new(DfsInitiatorVolumeList)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsInitiator/VolumeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DfsInitiator service

type DfsInitiatorServer interface {
	// *
	// Get program status.
	Status(context.Context, *DfsInitiatorStatusRequest) (*DfsInitiatorStatus, error)
	// *
	// Add a remote host entry to be used by volumes.
	//
	// returns RpcResult
	NodeCreate(context.Context, *DfsInitiatorNode) (*common_v1.RpcResult, error)
	// *
	// Update a remote host entry to be used by volumes.
	//
	// returns RpcResult
	NodeUpdate(context.Context, *DfsInitiatorNode) (*common_v1.RpcResult, error)
	// *
	// Remove a remote host entry.
	//
	// This will likely result in any volumes using this host to
	// become unconfigured. That has serious consequences.
	//
	// returns RpcResult
	NodeDelete(context.Context, *DfsInitiatorNode) (*common_v1.RpcResult, error)
	// *
	// List configured host entries, optionally filtered via a DfsHostListQuery
	// message.
	//
	// returns A DfsHostList message containing DfsHost messages,
	//         if any are available matching the filter.
	NodeList(context.Context, *DfsInitiatorNodeListQuery) (*DfsInitiatorNodeList, error)
	// *
	// Create a volume on a remote host. The DfsHost matching the host id
	// in the DfsVolume message must be configured for the volume to actually
	// be configured on the DirectFS client.
	//
	// returns RpcResult
	VolumeCreate(context.Context, *DfsInitiatorVolume) (*common_v1.RpcResult, error)
	// *
	// Update a volume on a remote host. The DfsHost matching the host id
	// in the DfsVolume message must be configured for the volume to actually
	// be configured on the DirectFS client.
	//
	// returns RpcResult
	VolumeUpdate(context.Context, *DfsInitiatorVolume) (*common_v1.RpcResult, error)
	// *
	// Delete a volume previously configured by VolumeCreate.
	//
	// returns RpcResult
	VolumeDelete(context.Context, *DfsInitiatorVolume) (*common_v1.RpcResult, error)
	// *
	// List configured volume entries, optionally filtered via a DfsVolumeListQuery
	// message.
	//
	// returns A DfsVolumeList message containing DfsVolume messages,
	//         if any are available matching the filter.
	VolumeList(context.Context, *DfsInitiatorVolumeListQuery) (*DfsInitiatorVolumeList, error)
}

func RegisterDfsInitiatorServer(s *grpc.Server, srv DfsInitiatorServer) {
	s.RegisterService(&_DfsInitiator_serviceDesc, srv)
}

func _DfsInitiator_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).Status(ctx, req.(*DfsInitiatorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_NodeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).NodeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/NodeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).NodeCreate(ctx, req.(*DfsInitiatorNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_NodeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).NodeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/NodeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).NodeUpdate(ctx, req.(*DfsInitiatorNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_NodeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).NodeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/NodeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).NodeDelete(ctx, req.(*DfsInitiatorNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_NodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorNodeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).NodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/NodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).NodeList(ctx, req.(*DfsInitiatorNodeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).VolumeCreate(ctx, req.(*DfsInitiatorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_VolumeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).VolumeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/VolumeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).VolumeUpdate(ctx, req.(*DfsInitiatorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).VolumeDelete(ctx, req.(*DfsInitiatorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorVolumeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).VolumeList(ctx, req.(*DfsInitiatorVolumeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _DfsInitiator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "directfs.v1.DfsInitiator",
	HandlerType: (*DfsInitiatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _DfsInitiator_Status_Handler,
		},
		{
			MethodName: "NodeCreate",
			Handler:    _DfsInitiator_NodeCreate_Handler,
		},
		{
			MethodName: "NodeUpdate",
			Handler:    _DfsInitiator_NodeUpdate_Handler,
		},
		{
			MethodName: "NodeDelete",
			Handler:    _DfsInitiator_NodeDelete_Handler,
		},
		{
			MethodName: "NodeList",
			Handler:    _DfsInitiator_NodeList_Handler,
		},
		{
			MethodName: "VolumeCreate",
			Handler:    _DfsInitiator_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeUpdate",
			Handler:    _DfsInitiator_VolumeUpdate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _DfsInitiator_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _DfsInitiator_VolumeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "directfs.proto",
}

// Client API for DfsResponder service

type DfsResponderClient interface {
	// *
	// Get program status.
	Status(ctx context.Context, in *DfsResponderStatusRequest, opts ...grpc.CallOption) (*DfsResponderStatus, error)
	// *
	// Create a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeCreate(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Update a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeUpdate(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Delete a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeDelete(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// List configured volume entries, optionally filtered via a DfsVolumeListQuery
	// message.
	//
	// returns a list of DfsReponderVolume messages, if any are available matching the filter.
	VolumeList(ctx context.Context, in *DfsResponderVolumeListQuery, opts ...grpc.CallOption) (*DfsResponderVolumeList, error)
}

type dfsResponderClient struct {
	cc *grpc.ClientConn
}

func NewDfsResponderClient(cc *grpc.ClientConn) DfsResponderClient {
	return &dfsResponderClient{cc}
}

func (c *dfsResponderClient) Status(ctx context.Context, in *DfsResponderStatusRequest, opts ...grpc.CallOption) (*DfsResponderStatus, error) {
	out := new(DfsResponderStatus)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsResponder/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) VolumeCreate(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsResponder/VolumeCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) VolumeUpdate(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsResponder/VolumeUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) VolumeDelete(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsResponder/VolumeDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) VolumeList(ctx context.Context, in *DfsResponderVolumeListQuery, opts ...grpc.CallOption) (*DfsResponderVolumeList, error) {
	out := new(DfsResponderVolumeList)
	err := grpc.Invoke(ctx, "/directfs.v1.DfsResponder/VolumeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DfsResponder service

type DfsResponderServer interface {
	// *
	// Get program status.
	Status(context.Context, *DfsResponderStatusRequest) (*DfsResponderStatus, error)
	// *
	// Create a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeCreate(context.Context, *DfsResponderVolume) (*common_v1.RpcResult, error)
	// *
	// Update a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeUpdate(context.Context, *DfsResponderVolume) (*common_v1.RpcResult, error)
	// *
	// Delete a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeDelete(context.Context, *DfsResponderVolume) (*common_v1.RpcResult, error)
	// *
	// List configured volume entries, optionally filtered via a DfsVolumeListQuery
	// message.
	//
	// returns a list of DfsReponderVolume messages, if any are available matching the filter.
	VolumeList(context.Context, *DfsResponderVolumeListQuery) (*DfsResponderVolumeList, error)
}

func RegisterDfsResponderServer(s *grpc.Server, srv DfsResponderServer) {
	s.RegisterService(&_DfsResponder_serviceDesc, srv)
}

func _DfsResponder_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsResponderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).Status(ctx, req.(*DfsResponderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsResponderVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).VolumeCreate(ctx, req.(*DfsResponderVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_VolumeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsResponderVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).VolumeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/VolumeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).VolumeUpdate(ctx, req.(*DfsResponderVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsResponderVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).VolumeDelete(ctx, req.(*DfsResponderVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsResponderVolumeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).VolumeList(ctx, req.(*DfsResponderVolumeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _DfsResponder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "directfs.v1.DfsResponder",
	HandlerType: (*DfsResponderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _DfsResponder_Status_Handler,
		},
		{
			MethodName: "VolumeCreate",
			Handler:    _DfsResponder_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeUpdate",
			Handler:    _DfsResponder_VolumeUpdate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _DfsResponder_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _DfsResponder_VolumeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "directfs.proto",
}

func init() { proto.RegisterFile("directfs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 860 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xdb, 0x6e, 0xc3, 0x44,
	0x10, 0xcd, 0xfd, 0x32, 0xb9, 0xc8, 0xac, 0x2a, 0x70, 0x13, 0x42, 0xda, 0x45, 0x54, 0xa1, 0x0f,
	0x41, 0x4d, 0x51, 0x11, 0x12, 0xa8, 0xaa, 0x92, 0x50, 0x05, 0xaa, 0x14, 0x1c, 0x28, 0xbc, 0xa0,
	0x60, 0xec, 0x8d, 0xb0, 0x48, 0xec, 0xe0, 0xdd, 0x44, 0xea, 0x67, 0xf0, 0x01, 0xfc, 0x0d, 0x7c,
	0x01, 0x3f, 0x84, 0xbc, 0xbe, 0xc4, 0x76, 0xec, 0xd8, 0x69, 0x55, 0x89, 0x37, 0xef, 0xce, 0xcc,
	0xd9, 0x99, 0x39, 0x73, 0x56, 0x6b, 0x68, 0xaa, 0x9a, 0x49, 0x14, 0xb6, 0xa0, 0xfd, 0xb5, 0x69,
	0x30, 0x03, 0xd5, 0xbc, 0xf5, 0xf6, 0xaa, 0x55, 0x57, 0x8c, 0xd5, 0xca, 0xd0, 0x6d, 0x13, 0x6e,
	0xc3, 0xe9, 0x68, 0x41, 0x27, 0xba, 0xc6, 0x34, 0x99, 0x19, 0xe6, 0x8c, 0xc9, 0x6c, 0x43, 0x25,
	0xf2, 0xc7, 0x86, 0x50, 0x86, 0x3f, 0x03, 0xb4, 0x6f, 0x44, 0xe7, 0x50, 0xdf, 0x12, 0x93, 0x6a,
	0x86, 0x3e, 0xd7, 0xf4, 0x85, 0x21, 0x66, 0xcf, 0xb2, 0xbd, 0xaa, 0x54, 0x73, 0xf6, 0x26, 0xfa,
	0xc2, 0x45, 0x95, 0x08, 0x5d, 0x1b, 0xba, 0x4a, 0x22, 0x51, 0x43, 0xc6, 0x34, 0xa8, 0x1d, 0x68,
	0xfb, 0xd3, 0x99, 0x1a, 0x2a, 0x19, 0x9a, 0x44, 0x25, 0x3a, 0xd3, 0xe4, 0x25, 0xc5, 0xff, 0x66,
	0x41, 0x08, 0xdb, 0xd1, 0x25, 0xe4, 0x14, 0x85, 0x83, 0xd5, 0x06, 0xad, 0xbe, 0x53, 0xfa, 0xf6,
	0xaa, 0x3f, 0x92, 0x99, 0xbc, 0x5e, 0xca, 0x3a, 0x19, 0xf2, 0x2d, 0x29, 0xa7, 0x28, 0xe8, 0x3d,
	0x28, 0xff, 0x66, 0x50, 0x36, 0xd7, 0x54, 0x31, 0x77, 0x96, 0xed, 0x35, 0xa4, 0x92, 0xb5, 0x9c,
	0xa8, 0xa8, 0x05, 0x15, 0xeb, 0x4b, 0x97, 0x57, 0x44, 0xcc, 0xf3, 0xbc, 0xbc, 0x35, 0x42, 0x50,
	0x58, 0x1b, 0x26, 0x13, 0x0b, 0x3c, 0x82, 0x7f, 0xa3, 0xaf, 0xa1, 0xa6, 0xec, 0x12, 0x13, 0x8b,
	0xfc, 0xf4, 0x5e, 0xdf, 0xc7, 0x42, 0xff, 0x40, 0x21, 0x92, 0x3f, 0x18, 0x7f, 0x03, 0x27, 0x61,
	0xdf, 0x07, 0x8d, 0x32, 0x74, 0x0d, 0x45, 0x2b, 0x07, 0x2a, 0x66, 0xcf, 0xf2, 0xbd, 0xda, 0xa0,
	0x73, 0x10, 0x5d, 0xb2, 0x7d, 0xf1, 0x4d, 0x90, 0x6d, 0x17, 0xec, 0xbb, 0x0d, 0x31, 0x9f, 0xd1,
	0xa9, 0x5d, 0xe5, 0x5c, 0x53, 0x6d, 0xd0, 0x86, 0x54, 0xb6, 0xeb, 0xa7, 0xb8, 0x0b, 0x1d, 0x7f,
	0xdc, 0x93, 0xb1, 0xdc, 0xac, 0x02, 0xbd, 0xff, 0x00, 0xde, 0xdf, 0x77, 0xb0, 0x98, 0xd5, 0x28,
	0xd3, 0x14, 0x8a, 0xff, 0xcc, 0x83, 0x18, 0xed, 0xb0, 0xa1, 0xe8, 0x17, 0x00, 0xc5, 0xd0, 0xf5,
	0x39, 0x65, 0x32, 0x23, 0x9c, 0xab, 0xe6, 0xe0, 0x2e, 0xb6, 0x1e, 0x7f, 0x68, 0xc0, 0x30, 0x34,
	0x74, 0x9d, 0x28, 0x4c, 0x33, 0x74, 0xcb, 0x48, 0xa4, 0xaa, 0x05, 0xca, 0x3f, 0x51, 0x1b, 0xaa,
	0x6b, 0x42, 0xcc, 0x39, 0x67, 0x30, 0x67, 0x33, 0x68, 0x6d, 0x4c, 0x2d, 0x06, 0x7f, 0x82, 0x32,
	0x37, 0xca, 0x0b, 0x4e, 0x6e, 0x73, 0x70, 0x7b, 0xfc, 0xd9, 0x77, 0xaa, 0x6a, 0x12, 0x4a, 0xbf,
	0x92, 0x57, 0xda, 0xf2, 0x59, 0x2a, 0x59, 0x78, 0x77, 0x0b, 0xfc, 0x7b, 0x70, 0x60, 0x43, 0x09,
	0xa2, 0x0a, 0x14, 0xa6, 0x8f, 0xd3, 0xb1, 0x90, 0x41, 0x4d, 0x80, 0xe1, 0xe3, 0x74, 0x3a, 0x1e,
	0x7e, 0x3f, 0x99, 0xde, 0x0b, 0x59, 0xd4, 0x80, 0xaa, 0xb3, 0x1e, 0x8f, 0x84, 0x1c, 0x7a, 0x07,
	0x1a, 0xa3, 0xc9, 0xcc, 0xe7, 0x91, 0x47, 0x02, 0xd4, 0x77, 0x5b, 0xe3, 0x91, 0x50, 0xc0, 0x9f,
	0x04, 0xb9, 0x0d, 0x64, 0x64, 0x1d, 0x35, 0xf9, 0xf6, 0xe9, 0x53, 0x21, 0xe3, 0x7c, 0xdd, 0x08,
	0x59, 0xfc, 0x77, 0x2e, 0x28, 0x6f, 0xbb, 0xb8, 0xa3, 0x14, 0xd3, 0x86, 0xea, 0x96, 0x47, 0xed,
	0x34, 0x53, 0xb1, 0x37, 0x26, 0xaa, 0x5f, 0x4e, 0xf9, 0x80, 0x9c, 0x1e, 0x82, 0xf2, 0x28, 0xf0,
	0xa3, 0x2e, 0x13, 0x9a, 0x1e, 0x27, 0x10, 0x74, 0x0b, 0x45, 0x6b, 0x70, 0x5c, 0x99, 0x7d, 0x9c,
	0x82, 0x3c, 0x7b, 0x28, 0x25, 0x3b, 0x0e, 0x7d, 0x09, 0x25, 0xca, 0x19, 0x15, 0x4b, 0x1c, 0xe1,
	0xa3, 0x54, 0xf4, 0x4b, 0x4e, 0x10, 0x9e, 0xc1, 0xbb, 0xfb, 0x3e, 0x5c, 0xa2, 0x9f, 0x43, 0xd9,
	0x6e, 0x86, 0x2b, 0xd2, 0x6e, 0x02, 0xb2, 0xe4, 0xfa, 0xe3, 0x2f, 0x82, 0x93, 0xb3, 0x03, 0xb5,
	0xa5, 0xda, 0x01, 0xf0, 0xfa, 0xee, 0x8a, 0xb5, 0xea, 0x36, 0xde, 0x95, 0xab, 0x77, 0xc3, 0xc6,
	0xc9, 0x35, 0xe4, 0xb0, 0x2f, 0xd7, 0x08, 0x87, 0xb4, 0x72, 0x8d, 0x0c, 0x0d, 0x18, 0xde, 0x4e,
	0xae, 0xc9, 0x67, 0x1f, 0x92, 0x6b, 0x5c, 0x82, 0x6f, 0x22, 0xd7, 0xe8, 0x8c, 0x0e, 0xc9, 0x35,
	0x54, 0xdc, 0xff, 0x46, 0xae, 0xf1, 0xd3, 0x76, 0x9c, 0x5c, 0x63, 0x87, 0x32, 0xb5, 0x5c, 0x23,
	0xe9, 0x0f, 0xc9, 0x35, 0xe4, 0x93, 0x52, 0xae, 0xa1, 0xa8, 0xb0, 0x5c, 0x23, 0x40, 0xd3, 0xc8,
	0x75, 0xf0, 0x4f, 0x11, 0xea, 0x7e, 0xb5, 0xa3, 0x19, 0x94, 0x1c, 0xad, 0x5d, 0xc4, 0xde, 0x18,
	0x81, 0x37, 0x55, 0xab, 0x9b, 0xe0, 0x87, 0x33, 0x68, 0x08, 0xe0, 0x3c, 0x34, 0xac, 0x61, 0x3e,
	0xfc, 0x5e, 0x68, 0x9d, 0xf8, 0x26, 0x49, 0x5a, 0x2b, 0x12, 0xa1, 0x9b, 0x25, 0xdb, 0x81, 0xfc,
	0xb0, 0x56, 0x5f, 0x0f, 0x32, 0x22, 0x4b, 0xf2, 0x72, 0x90, 0x1f, 0xa1, 0xe2, 0xbd, 0x85, 0x2e,
	0x0e, 0x42, 0x78, 0x3c, 0xb4, 0xce, 0x13, 0xfd, 0x70, 0x06, 0xdd, 0x43, 0xdd, 0x1b, 0x61, 0xab,
	0xc8, 0xa4, 0x4b, 0x3b, 0x36, 0x43, 0x0f, 0xc8, 0xe9, 0xd6, 0xeb, 0x81, 0x9c, 0x8e, 0xbd, 0x18,
	0xe8, 0x67, 0x00, 0xdf, 0xbc, 0xf7, 0x12, 0x60, 0x76, 0x7d, 0xfb, 0x30, 0x85, 0x27, 0xce, 0x0c,
	0xfe, 0xca, 0xf3, 0x39, 0xf6, 0x64, 0x70, 0x68, 0x8e, 0xa3, 0xff, 0x0d, 0x5a, 0xdd, 0x04, 0xbf,
	0x34, 0xfc, 0x84, 0x64, 0xf8, 0x72, 0x7e, 0x8e, 0x06, 0x8a, 0xe3, 0x27, 0x2d, 0x50, 0x02, 0x3f,
	0x71, 0xf7, 0xcb, 0x3e, 0x3f, 0x11, 0x9e, 0x38, 0xf3, 0x6b, 0x89, 0xff, 0xf2, 0x5d, 0xff, 0x17,
	0x00, 0x00, 0xff, 0xff, 0x18, 0x18, 0x5b, 0xd8, 0x1f, 0x0e, 0x00, 0x00,
}
