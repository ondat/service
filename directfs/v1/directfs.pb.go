// Code generated by protoc-gen-go. DO NOT EDIT.
// source: directfs.proto

package v1 // import "code.storageos.net/storageos/service/directfs/v1"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import v1 "code.storageos.net/storageos/service/common/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DfsInitiatorVolumeStatus_DfsInitiatorConnectionState int32

const (
	DfsInitiatorVolumeStatus_NONE          DfsInitiatorVolumeStatus_DfsInitiatorConnectionState = 0
	DfsInitiatorVolumeStatus_CONNECTING    DfsInitiatorVolumeStatus_DfsInitiatorConnectionState = 1
	DfsInitiatorVolumeStatus_CONNECTED     DfsInitiatorVolumeStatus_DfsInitiatorConnectionState = 2
	DfsInitiatorVolumeStatus_DISCONNECTING DfsInitiatorVolumeStatus_DfsInitiatorConnectionState = 3
	DfsInitiatorVolumeStatus_DISCONNECTED  DfsInitiatorVolumeStatus_DfsInitiatorConnectionState = 4
)

var DfsInitiatorVolumeStatus_DfsInitiatorConnectionState_name = map[int32]string{
	0: "NONE",
	1: "CONNECTING",
	2: "CONNECTED",
	3: "DISCONNECTING",
	4: "DISCONNECTED",
}
var DfsInitiatorVolumeStatus_DfsInitiatorConnectionState_value = map[string]int32{
	"NONE":          0,
	"CONNECTING":    1,
	"CONNECTED":     2,
	"DISCONNECTING": 3,
	"DISCONNECTED":  4,
}

func (x DfsInitiatorVolumeStatus_DfsInitiatorConnectionState) String() string {
	return proto.EnumName(DfsInitiatorVolumeStatus_DfsInitiatorConnectionState_name, int32(x))
}
func (DfsInitiatorVolumeStatus_DfsInitiatorConnectionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{10, 0}
}

type DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily int32

const (
	DfsInitiatorVolumeStatus_IPV4 DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily = 0
	DfsInitiatorVolumeStatus_IPV6 DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily = 1
)

var DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
}
var DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
}

func (x DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily) String() string {
	return proto.EnumName(DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily_name, int32(x))
}
func (DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{10, 1}
}

type DfsResponderVolumeStatus_DfsResponderConnectionState int32

const (
	DfsResponderVolumeStatus_NONE          DfsResponderVolumeStatus_DfsResponderConnectionState = 0
	DfsResponderVolumeStatus_CONNECTING    DfsResponderVolumeStatus_DfsResponderConnectionState = 1
	DfsResponderVolumeStatus_CONNECTED     DfsResponderVolumeStatus_DfsResponderConnectionState = 2
	DfsResponderVolumeStatus_DISCONNECTING DfsResponderVolumeStatus_DfsResponderConnectionState = 3
	DfsResponderVolumeStatus_DISCONNECTED  DfsResponderVolumeStatus_DfsResponderConnectionState = 4
)

var DfsResponderVolumeStatus_DfsResponderConnectionState_name = map[int32]string{
	0: "NONE",
	1: "CONNECTING",
	2: "CONNECTED",
	3: "DISCONNECTING",
	4: "DISCONNECTED",
}
var DfsResponderVolumeStatus_DfsResponderConnectionState_value = map[string]int32{
	"NONE":          0,
	"CONNECTING":    1,
	"CONNECTED":     2,
	"DISCONNECTING": 3,
	"DISCONNECTED":  4,
}

func (x DfsResponderVolumeStatus_DfsResponderConnectionState) String() string {
	return proto.EnumName(DfsResponderVolumeStatus_DfsResponderConnectionState_name, int32(x))
}
func (DfsResponderVolumeStatus_DfsResponderConnectionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{16, 0}
}

type DfsResponderVolumeStatus_DfsResponderAddressFamily int32

const (
	DfsResponderVolumeStatus_IPV4 DfsResponderVolumeStatus_DfsResponderAddressFamily = 0
	DfsResponderVolumeStatus_IPV6 DfsResponderVolumeStatus_DfsResponderAddressFamily = 1
)

var DfsResponderVolumeStatus_DfsResponderAddressFamily_name = map[int32]string{
	0: "IPV4",
	1: "IPV6",
}
var DfsResponderVolumeStatus_DfsResponderAddressFamily_value = map[string]int32{
	"IPV4": 0,
	"IPV6": 1,
}

func (x DfsResponderVolumeStatus_DfsResponderAddressFamily) String() string {
	return proto.EnumName(DfsResponderVolumeStatus_DfsResponderAddressFamily_name, int32(x))
}
func (DfsResponderVolumeStatus_DfsResponderAddressFamily) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{16, 1}
}

type DfsInitiatorStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DfsInitiatorStatusRequest) Reset()         { *m = DfsInitiatorStatusRequest{} }
func (m *DfsInitiatorStatusRequest) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorStatusRequest) ProtoMessage()    {}
func (*DfsInitiatorStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{0}
}
func (m *DfsInitiatorStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorStatusRequest.Unmarshal(m, b)
}
func (m *DfsInitiatorStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorStatusRequest.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorStatusRequest.Merge(dst, src)
}
func (m *DfsInitiatorStatusRequest) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorStatusRequest.Size(m)
}
func (m *DfsInitiatorStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorStatusRequest proto.InternalMessageInfo

type DfsInitiatorStatus struct {
	// The version control info string.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	// Generic daemon status.
	Status               *v1.DaemonStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DfsInitiatorStatus) Reset()         { *m = DfsInitiatorStatus{} }
func (m *DfsInitiatorStatus) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorStatus) ProtoMessage()    {}
func (*DfsInitiatorStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{1}
}
func (m *DfsInitiatorStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorStatus.Unmarshal(m, b)
}
func (m *DfsInitiatorStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorStatus.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorStatus.Merge(dst, src)
}
func (m *DfsInitiatorStatus) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorStatus.Size(m)
}
func (m *DfsInitiatorStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorStatus proto.InternalMessageInfo

func (m *DfsInitiatorStatus) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

func (m *DfsInitiatorStatus) GetStatus() *v1.DaemonStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type DfsResponderStatusRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DfsResponderStatusRequest) Reset()         { *m = DfsResponderStatusRequest{} }
func (m *DfsResponderStatusRequest) String() string { return proto.CompactTextString(m) }
func (*DfsResponderStatusRequest) ProtoMessage()    {}
func (*DfsResponderStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{2}
}
func (m *DfsResponderStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsResponderStatusRequest.Unmarshal(m, b)
}
func (m *DfsResponderStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsResponderStatusRequest.Marshal(b, m, deterministic)
}
func (dst *DfsResponderStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsResponderStatusRequest.Merge(dst, src)
}
func (m *DfsResponderStatusRequest) XXX_Size() int {
	return xxx_messageInfo_DfsResponderStatusRequest.Size(m)
}
func (m *DfsResponderStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsResponderStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DfsResponderStatusRequest proto.InternalMessageInfo

type DfsResponderStatus struct {
	// The version control info string.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo,proto3" json:"version_info,omitempty"`
	// Generic daemon status.
	Status               *v1.DaemonStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DfsResponderStatus) Reset()         { *m = DfsResponderStatus{} }
func (m *DfsResponderStatus) String() string { return proto.CompactTextString(m) }
func (*DfsResponderStatus) ProtoMessage()    {}
func (*DfsResponderStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{3}
}
func (m *DfsResponderStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsResponderStatus.Unmarshal(m, b)
}
func (m *DfsResponderStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsResponderStatus.Marshal(b, m, deterministic)
}
func (dst *DfsResponderStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsResponderStatus.Merge(dst, src)
}
func (m *DfsResponderStatus) XXX_Size() int {
	return xxx_messageInfo_DfsResponderStatus.Size(m)
}
func (m *DfsResponderStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsResponderStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DfsResponderStatus proto.InternalMessageInfo

func (m *DfsResponderStatus) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

func (m *DfsResponderStatus) GetStatus() *v1.DaemonStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type DfsInitiatorNodeCredentials struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DfsInitiatorNodeCredentials) Reset()         { *m = DfsInitiatorNodeCredentials{} }
func (m *DfsInitiatorNodeCredentials) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorNodeCredentials) ProtoMessage()    {}
func (*DfsInitiatorNodeCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{4}
}
func (m *DfsInitiatorNodeCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorNodeCredentials.Unmarshal(m, b)
}
func (m *DfsInitiatorNodeCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorNodeCredentials.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorNodeCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorNodeCredentials.Merge(dst, src)
}
func (m *DfsInitiatorNodeCredentials) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorNodeCredentials.Size(m)
}
func (m *DfsInitiatorNodeCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorNodeCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorNodeCredentials proto.InternalMessageInfo

// *
// A host used by DirectFS.
type DfsInitiatorNode struct {
	Cc *v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc,proto3" json:"cc,omitempty"`
	// The unique host identifier.
	NodeId uint32 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// The remote hostname.
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// The remote port.
	Port uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// Host credentials.
	Credentials          *DfsInitiatorNodeCredentials `protobuf:"bytes,5,opt,name=credentials,proto3" json:"credentials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *DfsInitiatorNode) Reset()         { *m = DfsInitiatorNode{} }
func (m *DfsInitiatorNode) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorNode) ProtoMessage()    {}
func (*DfsInitiatorNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{5}
}
func (m *DfsInitiatorNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorNode.Unmarshal(m, b)
}
func (m *DfsInitiatorNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorNode.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorNode.Merge(dst, src)
}
func (m *DfsInitiatorNode) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorNode.Size(m)
}
func (m *DfsInitiatorNode) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorNode.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorNode proto.InternalMessageInfo

func (m *DfsInitiatorNode) GetCc() *v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DfsInitiatorNode) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *DfsInitiatorNode) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *DfsInitiatorNode) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DfsInitiatorNode) GetCredentials() *DfsInitiatorNodeCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type DfsInitiatorNodeList struct {
	Nodes                []*DfsInitiatorNode `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DfsInitiatorNodeList) Reset()         { *m = DfsInitiatorNodeList{} }
func (m *DfsInitiatorNodeList) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorNodeList) ProtoMessage()    {}
func (*DfsInitiatorNodeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{6}
}
func (m *DfsInitiatorNodeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorNodeList.Unmarshal(m, b)
}
func (m *DfsInitiatorNodeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorNodeList.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorNodeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorNodeList.Merge(dst, src)
}
func (m *DfsInitiatorNodeList) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorNodeList.Size(m)
}
func (m *DfsInitiatorNodeList) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorNodeList.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorNodeList proto.InternalMessageInfo

func (m *DfsInitiatorNodeList) GetNodes() []*DfsInitiatorNode {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type DfsInitiatorNodeListQuery struct {
	// An optional list of hosts to query.
	NodeIds              []uint32 `protobuf:"varint,1,rep,packed,name=node_ids,json=nodeIds,proto3" json:"node_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DfsInitiatorNodeListQuery) Reset()         { *m = DfsInitiatorNodeListQuery{} }
func (m *DfsInitiatorNodeListQuery) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorNodeListQuery) ProtoMessage()    {}
func (*DfsInitiatorNodeListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{7}
}
func (m *DfsInitiatorNodeListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorNodeListQuery.Unmarshal(m, b)
}
func (m *DfsInitiatorNodeListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorNodeListQuery.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorNodeListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorNodeListQuery.Merge(dst, src)
}
func (m *DfsInitiatorNodeListQuery) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorNodeListQuery.Size(m)
}
func (m *DfsInitiatorNodeListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorNodeListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorNodeListQuery proto.InternalMessageInfo

func (m *DfsInitiatorNodeListQuery) GetNodeIds() []uint32 {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

type DfsInitiatorVolumeCredentials struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DfsInitiatorVolumeCredentials) Reset()         { *m = DfsInitiatorVolumeCredentials{} }
func (m *DfsInitiatorVolumeCredentials) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorVolumeCredentials) ProtoMessage()    {}
func (*DfsInitiatorVolumeCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{8}
}
func (m *DfsInitiatorVolumeCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorVolumeCredentials.Unmarshal(m, b)
}
func (m *DfsInitiatorVolumeCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorVolumeCredentials.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorVolumeCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorVolumeCredentials.Merge(dst, src)
}
func (m *DfsInitiatorVolumeCredentials) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorVolumeCredentials.Size(m)
}
func (m *DfsInitiatorVolumeCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorVolumeCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorVolumeCredentials proto.InternalMessageInfo

type DfsInitiatorVolumeStatistics struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DfsInitiatorVolumeStatistics) Reset()         { *m = DfsInitiatorVolumeStatistics{} }
func (m *DfsInitiatorVolumeStatistics) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorVolumeStatistics) ProtoMessage()    {}
func (*DfsInitiatorVolumeStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{9}
}
func (m *DfsInitiatorVolumeStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorVolumeStatistics.Unmarshal(m, b)
}
func (m *DfsInitiatorVolumeStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorVolumeStatistics.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorVolumeStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorVolumeStatistics.Merge(dst, src)
}
func (m *DfsInitiatorVolumeStatistics) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorVolumeStatistics.Size(m)
}
func (m *DfsInitiatorVolumeStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorVolumeStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorVolumeStatistics proto.InternalMessageInfo

type DfsInitiatorVolumeStatus struct {
	ConnState DfsInitiatorVolumeStatus_DfsInitiatorConnectionState `protobuf:"varint,1,opt,name=conn_state,json=connState,proto3,enum=directfs.v1.DfsInitiatorVolumeStatus_DfsInitiatorConnectionState" json:"conn_state,omitempty"`
	// The remote peer, in string form for simplicity.
	PeerName string `protobuf:"bytes,2,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
	// The address family we're using to connect to the peer.
	PeerAf               DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily `protobuf:"varint,3,opt,name=peer_af,json=peerAf,proto3,enum=directfs.v1.DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily" json:"peer_af,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *DfsInitiatorVolumeStatus) Reset()         { *m = DfsInitiatorVolumeStatus{} }
func (m *DfsInitiatorVolumeStatus) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorVolumeStatus) ProtoMessage()    {}
func (*DfsInitiatorVolumeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{10}
}
func (m *DfsInitiatorVolumeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorVolumeStatus.Unmarshal(m, b)
}
func (m *DfsInitiatorVolumeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorVolumeStatus.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorVolumeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorVolumeStatus.Merge(dst, src)
}
func (m *DfsInitiatorVolumeStatus) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorVolumeStatus.Size(m)
}
func (m *DfsInitiatorVolumeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorVolumeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorVolumeStatus proto.InternalMessageInfo

func (m *DfsInitiatorVolumeStatus) GetConnState() DfsInitiatorVolumeStatus_DfsInitiatorConnectionState {
	if m != nil {
		return m.ConnState
	}
	return DfsInitiatorVolumeStatus_NONE
}

func (m *DfsInitiatorVolumeStatus) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

func (m *DfsInitiatorVolumeStatus) GetPeerAf() DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily {
	if m != nil {
		return m.PeerAf
	}
	return DfsInitiatorVolumeStatus_IPV4
}

// *
// A volume used by DirectFS.
//
// The remote host (for the client) isn't directly included here. However, the
// client clearly can't connect without a properly configured node_id item.
//
// The split between host and volume objects was decided based on now-irrelevant
// implementation details of ConfigFS v1. However, there's still some logic to
// it if the authentication (especially TLS) is per-host rather than per-volume.
type DfsInitiatorVolume struct {
	Cc *v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc,proto3" json:"cc,omitempty"`
	// The volume ID.
	VolumeId uint32 `protobuf:"varint,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The host for this volume.
	NodeId uint32 `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Volume credentials.
	Credentials *DfsInitiatorVolumeCredentials `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// Volume statistics.
	Stats *DfsInitiatorVolumeStatistics `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
	// Server status for the volume.
	Status               *DfsInitiatorVolumeStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DfsInitiatorVolume) Reset()         { *m = DfsInitiatorVolume{} }
func (m *DfsInitiatorVolume) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorVolume) ProtoMessage()    {}
func (*DfsInitiatorVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{11}
}
func (m *DfsInitiatorVolume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorVolume.Unmarshal(m, b)
}
func (m *DfsInitiatorVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorVolume.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorVolume.Merge(dst, src)
}
func (m *DfsInitiatorVolume) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorVolume.Size(m)
}
func (m *DfsInitiatorVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorVolume.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorVolume proto.InternalMessageInfo

func (m *DfsInitiatorVolume) GetCc() *v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DfsInitiatorVolume) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *DfsInitiatorVolume) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *DfsInitiatorVolume) GetCredentials() *DfsInitiatorVolumeCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *DfsInitiatorVolume) GetStats() *DfsInitiatorVolumeStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *DfsInitiatorVolume) GetStatus() *DfsInitiatorVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type DfsInitiatorVolumeList struct {
	Volumes              []*DfsInitiatorVolume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DfsInitiatorVolumeList) Reset()         { *m = DfsInitiatorVolumeList{} }
func (m *DfsInitiatorVolumeList) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorVolumeList) ProtoMessage()    {}
func (*DfsInitiatorVolumeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{12}
}
func (m *DfsInitiatorVolumeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorVolumeList.Unmarshal(m, b)
}
func (m *DfsInitiatorVolumeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorVolumeList.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorVolumeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorVolumeList.Merge(dst, src)
}
func (m *DfsInitiatorVolumeList) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorVolumeList.Size(m)
}
func (m *DfsInitiatorVolumeList) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorVolumeList.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorVolumeList proto.InternalMessageInfo

func (m *DfsInitiatorVolumeList) GetVolumes() []*DfsInitiatorVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type DfsInitiatorVolumeListQuery struct {
	// An optional list of volumes to query.
	VolumeIds            []uint32 `protobuf:"varint,1,rep,packed,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DfsInitiatorVolumeListQuery) Reset()         { *m = DfsInitiatorVolumeListQuery{} }
func (m *DfsInitiatorVolumeListQuery) String() string { return proto.CompactTextString(m) }
func (*DfsInitiatorVolumeListQuery) ProtoMessage()    {}
func (*DfsInitiatorVolumeListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{13}
}
func (m *DfsInitiatorVolumeListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsInitiatorVolumeListQuery.Unmarshal(m, b)
}
func (m *DfsInitiatorVolumeListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsInitiatorVolumeListQuery.Marshal(b, m, deterministic)
}
func (dst *DfsInitiatorVolumeListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsInitiatorVolumeListQuery.Merge(dst, src)
}
func (m *DfsInitiatorVolumeListQuery) XXX_Size() int {
	return xxx_messageInfo_DfsInitiatorVolumeListQuery.Size(m)
}
func (m *DfsInitiatorVolumeListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsInitiatorVolumeListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DfsInitiatorVolumeListQuery proto.InternalMessageInfo

func (m *DfsInitiatorVolumeListQuery) GetVolumeIds() []uint32 {
	if m != nil {
		return m.VolumeIds
	}
	return nil
}

type DfsResponderVolumeCredentials struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DfsResponderVolumeCredentials) Reset()         { *m = DfsResponderVolumeCredentials{} }
func (m *DfsResponderVolumeCredentials) String() string { return proto.CompactTextString(m) }
func (*DfsResponderVolumeCredentials) ProtoMessage()    {}
func (*DfsResponderVolumeCredentials) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{14}
}
func (m *DfsResponderVolumeCredentials) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsResponderVolumeCredentials.Unmarshal(m, b)
}
func (m *DfsResponderVolumeCredentials) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsResponderVolumeCredentials.Marshal(b, m, deterministic)
}
func (dst *DfsResponderVolumeCredentials) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsResponderVolumeCredentials.Merge(dst, src)
}
func (m *DfsResponderVolumeCredentials) XXX_Size() int {
	return xxx_messageInfo_DfsResponderVolumeCredentials.Size(m)
}
func (m *DfsResponderVolumeCredentials) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsResponderVolumeCredentials.DiscardUnknown(m)
}

var xxx_messageInfo_DfsResponderVolumeCredentials proto.InternalMessageInfo

type DfsResponderVolumeStatistics struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DfsResponderVolumeStatistics) Reset()         { *m = DfsResponderVolumeStatistics{} }
func (m *DfsResponderVolumeStatistics) String() string { return proto.CompactTextString(m) }
func (*DfsResponderVolumeStatistics) ProtoMessage()    {}
func (*DfsResponderVolumeStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{15}
}
func (m *DfsResponderVolumeStatistics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsResponderVolumeStatistics.Unmarshal(m, b)
}
func (m *DfsResponderVolumeStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsResponderVolumeStatistics.Marshal(b, m, deterministic)
}
func (dst *DfsResponderVolumeStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsResponderVolumeStatistics.Merge(dst, src)
}
func (m *DfsResponderVolumeStatistics) XXX_Size() int {
	return xxx_messageInfo_DfsResponderVolumeStatistics.Size(m)
}
func (m *DfsResponderVolumeStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsResponderVolumeStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_DfsResponderVolumeStatistics proto.InternalMessageInfo

type DfsResponderVolumeStatus struct {
	ConnState DfsResponderVolumeStatus_DfsResponderConnectionState `protobuf:"varint,1,opt,name=conn_state,json=connState,proto3,enum=directfs.v1.DfsResponderVolumeStatus_DfsResponderConnectionState" json:"conn_state,omitempty"`
	// The remote peer, in string form for simplicity.
	PeerName string `protobuf:"bytes,2,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`
	// The address family we're using to connect to the peer.
	PeerAf               DfsResponderVolumeStatus_DfsResponderAddressFamily `protobuf:"varint,3,opt,name=peer_af,json=peerAf,proto3,enum=directfs.v1.DfsResponderVolumeStatus_DfsResponderAddressFamily" json:"peer_af,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *DfsResponderVolumeStatus) Reset()         { *m = DfsResponderVolumeStatus{} }
func (m *DfsResponderVolumeStatus) String() string { return proto.CompactTextString(m) }
func (*DfsResponderVolumeStatus) ProtoMessage()    {}
func (*DfsResponderVolumeStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{16}
}
func (m *DfsResponderVolumeStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsResponderVolumeStatus.Unmarshal(m, b)
}
func (m *DfsResponderVolumeStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsResponderVolumeStatus.Marshal(b, m, deterministic)
}
func (dst *DfsResponderVolumeStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsResponderVolumeStatus.Merge(dst, src)
}
func (m *DfsResponderVolumeStatus) XXX_Size() int {
	return xxx_messageInfo_DfsResponderVolumeStatus.Size(m)
}
func (m *DfsResponderVolumeStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsResponderVolumeStatus.DiscardUnknown(m)
}

var xxx_messageInfo_DfsResponderVolumeStatus proto.InternalMessageInfo

func (m *DfsResponderVolumeStatus) GetConnState() DfsResponderVolumeStatus_DfsResponderConnectionState {
	if m != nil {
		return m.ConnState
	}
	return DfsResponderVolumeStatus_NONE
}

func (m *DfsResponderVolumeStatus) GetPeerName() string {
	if m != nil {
		return m.PeerName
	}
	return ""
}

func (m *DfsResponderVolumeStatus) GetPeerAf() DfsResponderVolumeStatus_DfsResponderAddressFamily {
	if m != nil {
		return m.PeerAf
	}
	return DfsResponderVolumeStatus_IPV4
}

// *
// A volume used by DirectFS.
//
// The remote host (for the client) isn't directly included here. However, the
// client clearly can't connect without a properly configured node_id item.
//
// The split between host and volume objects was decided based on now-irrelevant
// implementation details of ConfigFS v1. However, there's still some logic to
// it if the authentication (especially TLS) is per-host rather than per-volume.
type DfsResponderVolume struct {
	Cc *v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc,proto3" json:"cc,omitempty"`
	// The volume ID.
	VolumeId uint32 `protobuf:"varint,2,opt,name=volume_id,json=volumeId,proto3" json:"volume_id,omitempty"`
	// The host for this volume.
	NodeId uint32 `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// Volume credentials.
	Credentials *DfsResponderVolumeCredentials `protobuf:"bytes,4,opt,name=credentials,proto3" json:"credentials,omitempty"`
	// Volume statistics.
	Stats *DfsResponderVolumeStatistics `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
	// Server status for the volume.
	Status               *DfsResponderVolumeStatus `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *DfsResponderVolume) Reset()         { *m = DfsResponderVolume{} }
func (m *DfsResponderVolume) String() string { return proto.CompactTextString(m) }
func (*DfsResponderVolume) ProtoMessage()    {}
func (*DfsResponderVolume) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{17}
}
func (m *DfsResponderVolume) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsResponderVolume.Unmarshal(m, b)
}
func (m *DfsResponderVolume) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsResponderVolume.Marshal(b, m, deterministic)
}
func (dst *DfsResponderVolume) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsResponderVolume.Merge(dst, src)
}
func (m *DfsResponderVolume) XXX_Size() int {
	return xxx_messageInfo_DfsResponderVolume.Size(m)
}
func (m *DfsResponderVolume) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsResponderVolume.DiscardUnknown(m)
}

var xxx_messageInfo_DfsResponderVolume proto.InternalMessageInfo

func (m *DfsResponderVolume) GetCc() *v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *DfsResponderVolume) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *DfsResponderVolume) GetNodeId() uint32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *DfsResponderVolume) GetCredentials() *DfsResponderVolumeCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *DfsResponderVolume) GetStats() *DfsResponderVolumeStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *DfsResponderVolume) GetStatus() *DfsResponderVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type DfsResponderVolumeList struct {
	Volumes              []*DfsResponderVolume `protobuf:"bytes,1,rep,name=volumes,proto3" json:"volumes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DfsResponderVolumeList) Reset()         { *m = DfsResponderVolumeList{} }
func (m *DfsResponderVolumeList) String() string { return proto.CompactTextString(m) }
func (*DfsResponderVolumeList) ProtoMessage()    {}
func (*DfsResponderVolumeList) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{18}
}
func (m *DfsResponderVolumeList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsResponderVolumeList.Unmarshal(m, b)
}
func (m *DfsResponderVolumeList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsResponderVolumeList.Marshal(b, m, deterministic)
}
func (dst *DfsResponderVolumeList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsResponderVolumeList.Merge(dst, src)
}
func (m *DfsResponderVolumeList) XXX_Size() int {
	return xxx_messageInfo_DfsResponderVolumeList.Size(m)
}
func (m *DfsResponderVolumeList) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsResponderVolumeList.DiscardUnknown(m)
}

var xxx_messageInfo_DfsResponderVolumeList proto.InternalMessageInfo

func (m *DfsResponderVolumeList) GetVolumes() []*DfsResponderVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

type DfsResponderVolumeListQuery struct {
	// An optional list of volumes to query.
	VolumeIds            []uint32 `protobuf:"varint,1,rep,packed,name=volume_ids,json=volumeIds,proto3" json:"volume_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DfsResponderVolumeListQuery) Reset()         { *m = DfsResponderVolumeListQuery{} }
func (m *DfsResponderVolumeListQuery) String() string { return proto.CompactTextString(m) }
func (*DfsResponderVolumeListQuery) ProtoMessage()    {}
func (*DfsResponderVolumeListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_directfs_d4d3d2430f3b0227, []int{19}
}
func (m *DfsResponderVolumeListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DfsResponderVolumeListQuery.Unmarshal(m, b)
}
func (m *DfsResponderVolumeListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DfsResponderVolumeListQuery.Marshal(b, m, deterministic)
}
func (dst *DfsResponderVolumeListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DfsResponderVolumeListQuery.Merge(dst, src)
}
func (m *DfsResponderVolumeListQuery) XXX_Size() int {
	return xxx_messageInfo_DfsResponderVolumeListQuery.Size(m)
}
func (m *DfsResponderVolumeListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DfsResponderVolumeListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DfsResponderVolumeListQuery proto.InternalMessageInfo

func (m *DfsResponderVolumeListQuery) GetVolumeIds() []uint32 {
	if m != nil {
		return m.VolumeIds
	}
	return nil
}

func init() {
	proto.RegisterType((*DfsInitiatorStatusRequest)(nil), "directfs.v1.DfsInitiatorStatusRequest")
	proto.RegisterType((*DfsInitiatorStatus)(nil), "directfs.v1.DfsInitiatorStatus")
	proto.RegisterType((*DfsResponderStatusRequest)(nil), "directfs.v1.DfsResponderStatusRequest")
	proto.RegisterType((*DfsResponderStatus)(nil), "directfs.v1.DfsResponderStatus")
	proto.RegisterType((*DfsInitiatorNodeCredentials)(nil), "directfs.v1.DfsInitiatorNodeCredentials")
	proto.RegisterType((*DfsInitiatorNode)(nil), "directfs.v1.DfsInitiatorNode")
	proto.RegisterType((*DfsInitiatorNodeList)(nil), "directfs.v1.DfsInitiatorNodeList")
	proto.RegisterType((*DfsInitiatorNodeListQuery)(nil), "directfs.v1.DfsInitiatorNodeListQuery")
	proto.RegisterType((*DfsInitiatorVolumeCredentials)(nil), "directfs.v1.DfsInitiatorVolumeCredentials")
	proto.RegisterType((*DfsInitiatorVolumeStatistics)(nil), "directfs.v1.DfsInitiatorVolumeStatistics")
	proto.RegisterType((*DfsInitiatorVolumeStatus)(nil), "directfs.v1.DfsInitiatorVolumeStatus")
	proto.RegisterType((*DfsInitiatorVolume)(nil), "directfs.v1.DfsInitiatorVolume")
	proto.RegisterType((*DfsInitiatorVolumeList)(nil), "directfs.v1.DfsInitiatorVolumeList")
	proto.RegisterType((*DfsInitiatorVolumeListQuery)(nil), "directfs.v1.DfsInitiatorVolumeListQuery")
	proto.RegisterType((*DfsResponderVolumeCredentials)(nil), "directfs.v1.DfsResponderVolumeCredentials")
	proto.RegisterType((*DfsResponderVolumeStatistics)(nil), "directfs.v1.DfsResponderVolumeStatistics")
	proto.RegisterType((*DfsResponderVolumeStatus)(nil), "directfs.v1.DfsResponderVolumeStatus")
	proto.RegisterType((*DfsResponderVolume)(nil), "directfs.v1.DfsResponderVolume")
	proto.RegisterType((*DfsResponderVolumeList)(nil), "directfs.v1.DfsResponderVolumeList")
	proto.RegisterType((*DfsResponderVolumeListQuery)(nil), "directfs.v1.DfsResponderVolumeListQuery")
	proto.RegisterEnum("directfs.v1.DfsInitiatorVolumeStatus_DfsInitiatorConnectionState", DfsInitiatorVolumeStatus_DfsInitiatorConnectionState_name, DfsInitiatorVolumeStatus_DfsInitiatorConnectionState_value)
	proto.RegisterEnum("directfs.v1.DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily", DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily_name, DfsInitiatorVolumeStatus_DfsInitiatorAddressFamily_value)
	proto.RegisterEnum("directfs.v1.DfsResponderVolumeStatus_DfsResponderConnectionState", DfsResponderVolumeStatus_DfsResponderConnectionState_name, DfsResponderVolumeStatus_DfsResponderConnectionState_value)
	proto.RegisterEnum("directfs.v1.DfsResponderVolumeStatus_DfsResponderAddressFamily", DfsResponderVolumeStatus_DfsResponderAddressFamily_name, DfsResponderVolumeStatus_DfsResponderAddressFamily_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DfsInitiatorClient is the client API for DfsInitiator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DfsInitiatorClient interface {
	// *
	// Get program status.
	Status(ctx context.Context, in *DfsInitiatorStatusRequest, opts ...grpc.CallOption) (*DfsInitiatorStatus, error)
	// *
	// Add a remote host entry to be used by volumes.
	//
	// returns RpcResult
	NodeCreate(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*v1.RpcResult, error)
	// *
	// Update a remote host entry to be used by volumes.
	//
	// returns RpcResult
	NodeUpdate(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*v1.RpcResult, error)
	// *
	// Remove a remote host entry.
	//
	// This will likely result in any volumes using this host to
	// become unconfigured. That has serious consequences.
	//
	// returns RpcResult
	NodeDelete(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*v1.RpcResult, error)
	// *
	// List configured host entries, optionally filtered via a DfsHostListQuery
	// message.
	//
	// returns A DfsHostList message containing DfsHost messages,
	//         if any are available matching the filter.
	NodeList(ctx context.Context, in *DfsInitiatorNodeListQuery, opts ...grpc.CallOption) (*DfsInitiatorNodeList, error)
	// *
	// Create a volume on a remote host. The DfsHost matching the host id
	// in the DfsVolume message must be configured for the volume to actually
	// be configured on the DirectFS client.
	//
	// returns RpcResult
	VolumeCreate(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	// *
	// Update a volume on a remote host. The DfsHost matching the host id
	// in the DfsVolume message must be configured for the volume to actually
	// be configured on the DirectFS client.
	//
	// returns RpcResult
	VolumeUpdate(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	// *
	// Delete a volume previously configured by VolumeCreate.
	//
	// returns RpcResult
	VolumeDelete(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	// *
	// List configured volume entries, optionally filtered via a DfsVolumeListQuery
	// message.
	//
	// returns A DfsVolumeList message containing DfsVolume messages,
	//         if any are available matching the filter.
	VolumeList(ctx context.Context, in *DfsInitiatorVolumeListQuery, opts ...grpc.CallOption) (*DfsInitiatorVolumeList, error)
	// Config services, from common.v1.
	ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error)
	ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error)
}

type dfsInitiatorClient struct {
	cc *grpc.ClientConn
}

func NewDfsInitiatorClient(cc *grpc.ClientConn) DfsInitiatorClient {
	return &dfsInitiatorClient{cc}
}

func (c *dfsInitiatorClient) Status(ctx context.Context, in *DfsInitiatorStatusRequest, opts ...grpc.CallOption) (*DfsInitiatorStatus, error) {
	out := new(DfsInitiatorStatus)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) NodeCreate(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/NodeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) NodeUpdate(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/NodeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) NodeDelete(ctx context.Context, in *DfsInitiatorNode, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/NodeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) NodeList(ctx context.Context, in *DfsInitiatorNodeListQuery, opts ...grpc.CallOption) (*DfsInitiatorNodeList, error) {
	out := new(DfsInitiatorNodeList)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/NodeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) VolumeCreate(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/VolumeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) VolumeUpdate(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/VolumeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) VolumeDelete(ctx context.Context, in *DfsInitiatorVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/VolumeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) VolumeList(ctx context.Context, in *DfsInitiatorVolumeListQuery, opts ...grpc.CallOption) (*DfsInitiatorVolumeList, error) {
	out := new(DfsInitiatorVolumeList)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/VolumeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error) {
	out := new(v1.ConfigGetBoolReply)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/ConfigGetBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/ConfigUpdateBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error) {
	out := new(v1.ConfigBoolList)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/ConfigListBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error) {
	out := new(v1.ConfigGetStringReply)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/ConfigGetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/ConfigUpdateString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsInitiatorClient) ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error) {
	out := new(v1.ConfigStringList)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsInitiator/ConfigListString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DfsInitiatorServer is the server API for DfsInitiator service.
type DfsInitiatorServer interface {
	// *
	// Get program status.
	Status(context.Context, *DfsInitiatorStatusRequest) (*DfsInitiatorStatus, error)
	// *
	// Add a remote host entry to be used by volumes.
	//
	// returns RpcResult
	NodeCreate(context.Context, *DfsInitiatorNode) (*v1.RpcResult, error)
	// *
	// Update a remote host entry to be used by volumes.
	//
	// returns RpcResult
	NodeUpdate(context.Context, *DfsInitiatorNode) (*v1.RpcResult, error)
	// *
	// Remove a remote host entry.
	//
	// This will likely result in any volumes using this host to
	// become unconfigured. That has serious consequences.
	//
	// returns RpcResult
	NodeDelete(context.Context, *DfsInitiatorNode) (*v1.RpcResult, error)
	// *
	// List configured host entries, optionally filtered via a DfsHostListQuery
	// message.
	//
	// returns A DfsHostList message containing DfsHost messages,
	//         if any are available matching the filter.
	NodeList(context.Context, *DfsInitiatorNodeListQuery) (*DfsInitiatorNodeList, error)
	// *
	// Create a volume on a remote host. The DfsHost matching the host id
	// in the DfsVolume message must be configured for the volume to actually
	// be configured on the DirectFS client.
	//
	// returns RpcResult
	VolumeCreate(context.Context, *DfsInitiatorVolume) (*v1.RpcResult, error)
	// *
	// Update a volume on a remote host. The DfsHost matching the host id
	// in the DfsVolume message must be configured for the volume to actually
	// be configured on the DirectFS client.
	//
	// returns RpcResult
	VolumeUpdate(context.Context, *DfsInitiatorVolume) (*v1.RpcResult, error)
	// *
	// Delete a volume previously configured by VolumeCreate.
	//
	// returns RpcResult
	VolumeDelete(context.Context, *DfsInitiatorVolume) (*v1.RpcResult, error)
	// *
	// List configured volume entries, optionally filtered via a DfsVolumeListQuery
	// message.
	//
	// returns A DfsVolumeList message containing DfsVolume messages,
	//         if any are available matching the filter.
	VolumeList(context.Context, *DfsInitiatorVolumeListQuery) (*DfsInitiatorVolumeList, error)
	// Config services, from common.v1.
	ConfigGetBool(context.Context, *v1.ConfigKey) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(context.Context, *v1.ConfigBool) (*v1.ConfigUpdateReply, error)
	ConfigListBool(context.Context, *v1.ConfigListQuery) (*v1.ConfigBoolList, error)
	ConfigGetString(context.Context, *v1.ConfigKey) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(context.Context, *v1.ConfigString) (*v1.ConfigUpdateReply, error)
	ConfigListString(context.Context, *v1.ConfigListQuery) (*v1.ConfigStringList, error)
}

func RegisterDfsInitiatorServer(s *grpc.Server, srv DfsInitiatorServer) {
	s.RegisterService(&_DfsInitiator_serviceDesc, srv)
}

func _DfsInitiator_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).Status(ctx, req.(*DfsInitiatorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_NodeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).NodeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/NodeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).NodeCreate(ctx, req.(*DfsInitiatorNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_NodeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).NodeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/NodeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).NodeUpdate(ctx, req.(*DfsInitiatorNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_NodeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).NodeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/NodeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).NodeDelete(ctx, req.(*DfsInitiatorNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_NodeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorNodeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).NodeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/NodeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).NodeList(ctx, req.(*DfsInitiatorNodeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).VolumeCreate(ctx, req.(*DfsInitiatorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_VolumeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).VolumeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/VolumeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).VolumeUpdate(ctx, req.(*DfsInitiatorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).VolumeDelete(ctx, req.(*DfsInitiatorVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsInitiatorVolumeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).VolumeList(ctx, req.(*DfsInitiatorVolumeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_ConfigGetBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).ConfigGetBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/ConfigGetBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).ConfigGetBool(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_ConfigUpdateBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigBool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).ConfigUpdateBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/ConfigUpdateBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).ConfigUpdateBool(ctx, req.(*v1.ConfigBool))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_ConfigListBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).ConfigListBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/ConfigListBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).ConfigListBool(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_ConfigGetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).ConfigGetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/ConfigGetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).ConfigGetString(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_ConfigUpdateString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).ConfigUpdateString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/ConfigUpdateString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).ConfigUpdateString(ctx, req.(*v1.ConfigString))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsInitiator_ConfigListString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsInitiatorServer).ConfigListString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsInitiator/ConfigListString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsInitiatorServer).ConfigListString(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _DfsInitiator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "directfs.v1.DfsInitiator",
	HandlerType: (*DfsInitiatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _DfsInitiator_Status_Handler,
		},
		{
			MethodName: "NodeCreate",
			Handler:    _DfsInitiator_NodeCreate_Handler,
		},
		{
			MethodName: "NodeUpdate",
			Handler:    _DfsInitiator_NodeUpdate_Handler,
		},
		{
			MethodName: "NodeDelete",
			Handler:    _DfsInitiator_NodeDelete_Handler,
		},
		{
			MethodName: "NodeList",
			Handler:    _DfsInitiator_NodeList_Handler,
		},
		{
			MethodName: "VolumeCreate",
			Handler:    _DfsInitiator_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeUpdate",
			Handler:    _DfsInitiator_VolumeUpdate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _DfsInitiator_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _DfsInitiator_VolumeList_Handler,
		},
		{
			MethodName: "ConfigGetBool",
			Handler:    _DfsInitiator_ConfigGetBool_Handler,
		},
		{
			MethodName: "ConfigUpdateBool",
			Handler:    _DfsInitiator_ConfigUpdateBool_Handler,
		},
		{
			MethodName: "ConfigListBool",
			Handler:    _DfsInitiator_ConfigListBool_Handler,
		},
		{
			MethodName: "ConfigGetString",
			Handler:    _DfsInitiator_ConfigGetString_Handler,
		},
		{
			MethodName: "ConfigUpdateString",
			Handler:    _DfsInitiator_ConfigUpdateString_Handler,
		},
		{
			MethodName: "ConfigListString",
			Handler:    _DfsInitiator_ConfigListString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "directfs.proto",
}

// DfsResponderClient is the client API for DfsResponder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DfsResponderClient interface {
	// *
	// Get program status.
	Status(ctx context.Context, in *DfsResponderStatusRequest, opts ...grpc.CallOption) (*DfsResponderStatus, error)
	// *
	// Create a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeCreate(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	// *
	// Update a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeUpdate(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	// *
	// Delete a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeDelete(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*v1.RpcResult, error)
	// *
	// List configured volume entries, optionally filtered via a DfsVolumeListQuery
	// message.
	//
	// returns a list of DfsReponderVolume messages, if any are available matching the filter.
	VolumeList(ctx context.Context, in *DfsResponderVolumeListQuery, opts ...grpc.CallOption) (*DfsResponderVolumeList, error)
	// Config services, from common.v1.
	ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error)
	ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error)
	ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error)
}

type dfsResponderClient struct {
	cc *grpc.ClientConn
}

func NewDfsResponderClient(cc *grpc.ClientConn) DfsResponderClient {
	return &dfsResponderClient{cc}
}

func (c *dfsResponderClient) Status(ctx context.Context, in *DfsResponderStatusRequest, opts ...grpc.CallOption) (*DfsResponderStatus, error) {
	out := new(DfsResponderStatus)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsResponder/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) VolumeCreate(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsResponder/VolumeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) VolumeUpdate(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsResponder/VolumeUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) VolumeDelete(ctx context.Context, in *DfsResponderVolume, opts ...grpc.CallOption) (*v1.RpcResult, error) {
	out := new(v1.RpcResult)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsResponder/VolumeDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) VolumeList(ctx context.Context, in *DfsResponderVolumeListQuery, opts ...grpc.CallOption) (*DfsResponderVolumeList, error) {
	out := new(DfsResponderVolumeList)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsResponder/VolumeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) ConfigGetBool(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetBoolReply, error) {
	out := new(v1.ConfigGetBoolReply)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsResponder/ConfigGetBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) ConfigUpdateBool(ctx context.Context, in *v1.ConfigBool, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsResponder/ConfigUpdateBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) ConfigListBool(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigBoolList, error) {
	out := new(v1.ConfigBoolList)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsResponder/ConfigListBool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) ConfigGetString(ctx context.Context, in *v1.ConfigKey, opts ...grpc.CallOption) (*v1.ConfigGetStringReply, error) {
	out := new(v1.ConfigGetStringReply)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsResponder/ConfigGetString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) ConfigUpdateString(ctx context.Context, in *v1.ConfigString, opts ...grpc.CallOption) (*v1.ConfigUpdateReply, error) {
	out := new(v1.ConfigUpdateReply)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsResponder/ConfigUpdateString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dfsResponderClient) ConfigListString(ctx context.Context, in *v1.ConfigListQuery, opts ...grpc.CallOption) (*v1.ConfigStringList, error) {
	out := new(v1.ConfigStringList)
	err := c.cc.Invoke(ctx, "/directfs.v1.DfsResponder/ConfigListString", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DfsResponderServer is the server API for DfsResponder service.
type DfsResponderServer interface {
	// *
	// Get program status.
	Status(context.Context, *DfsResponderStatusRequest) (*DfsResponderStatus, error)
	// *
	// Create a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeCreate(context.Context, *DfsResponderVolume) (*v1.RpcResult, error)
	// *
	// Update a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeUpdate(context.Context, *DfsResponderVolume) (*v1.RpcResult, error)
	// *
	// Delete a volume to be served via DFS. Currently does nothing, but should still
	// be performed as in the near future it will certainly be required.
	//
	// returns RpcResult
	VolumeDelete(context.Context, *DfsResponderVolume) (*v1.RpcResult, error)
	// *
	// List configured volume entries, optionally filtered via a DfsVolumeListQuery
	// message.
	//
	// returns a list of DfsReponderVolume messages, if any are available matching the filter.
	VolumeList(context.Context, *DfsResponderVolumeListQuery) (*DfsResponderVolumeList, error)
	// Config services, from common.v1.
	ConfigGetBool(context.Context, *v1.ConfigKey) (*v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(context.Context, *v1.ConfigBool) (*v1.ConfigUpdateReply, error)
	ConfigListBool(context.Context, *v1.ConfigListQuery) (*v1.ConfigBoolList, error)
	ConfigGetString(context.Context, *v1.ConfigKey) (*v1.ConfigGetStringReply, error)
	ConfigUpdateString(context.Context, *v1.ConfigString) (*v1.ConfigUpdateReply, error)
	ConfigListString(context.Context, *v1.ConfigListQuery) (*v1.ConfigStringList, error)
}

func RegisterDfsResponderServer(s *grpc.Server, srv DfsResponderServer) {
	s.RegisterService(&_DfsResponder_serviceDesc, srv)
}

func _DfsResponder_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsResponderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).Status(ctx, req.(*DfsResponderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsResponderVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).VolumeCreate(ctx, req.(*DfsResponderVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_VolumeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsResponderVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).VolumeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/VolumeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).VolumeUpdate(ctx, req.(*DfsResponderVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsResponderVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).VolumeDelete(ctx, req.(*DfsResponderVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DfsResponderVolumeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).VolumeList(ctx, req.(*DfsResponderVolumeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_ConfigGetBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).ConfigGetBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/ConfigGetBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).ConfigGetBool(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_ConfigUpdateBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigBool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).ConfigUpdateBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/ConfigUpdateBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).ConfigUpdateBool(ctx, req.(*v1.ConfigBool))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_ConfigListBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).ConfigListBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/ConfigListBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).ConfigListBool(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_ConfigGetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).ConfigGetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/ConfigGetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).ConfigGetString(ctx, req.(*v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_ConfigUpdateString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).ConfigUpdateString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/ConfigUpdateString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).ConfigUpdateString(ctx, req.(*v1.ConfigString))
	}
	return interceptor(ctx, in, info, handler)
}

func _DfsResponder_ConfigListString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DfsResponderServer).ConfigListString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/directfs.v1.DfsResponder/ConfigListString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DfsResponderServer).ConfigListString(ctx, req.(*v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _DfsResponder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "directfs.v1.DfsResponder",
	HandlerType: (*DfsResponderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _DfsResponder_Status_Handler,
		},
		{
			MethodName: "VolumeCreate",
			Handler:    _DfsResponder_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeUpdate",
			Handler:    _DfsResponder_VolumeUpdate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _DfsResponder_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _DfsResponder_VolumeList_Handler,
		},
		{
			MethodName: "ConfigGetBool",
			Handler:    _DfsResponder_ConfigGetBool_Handler,
		},
		{
			MethodName: "ConfigUpdateBool",
			Handler:    _DfsResponder_ConfigUpdateBool_Handler,
		},
		{
			MethodName: "ConfigListBool",
			Handler:    _DfsResponder_ConfigListBool_Handler,
		},
		{
			MethodName: "ConfigGetString",
			Handler:    _DfsResponder_ConfigGetString_Handler,
		},
		{
			MethodName: "ConfigUpdateString",
			Handler:    _DfsResponder_ConfigUpdateString_Handler,
		},
		{
			MethodName: "ConfigListString",
			Handler:    _DfsResponder_ConfigListString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "directfs.proto",
}

func init() { proto.RegisterFile("directfs.proto", fileDescriptor_directfs_d4d3d2430f3b0227) }

var fileDescriptor_directfs_d4d3d2430f3b0227 = []byte{
	// 1036 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xfb, 0x6e, 0xdb, 0x54,
	0x18, 0xcf, 0x6d, 0x69, 0xf2, 0xe5, 0x42, 0x38, 0x1a, 0x34, 0x75, 0x16, 0xd2, 0x19, 0x31, 0x85,
	0xfd, 0x91, 0xd0, 0x0c, 0x4d, 0x42, 0x02, 0x4d, 0x5d, 0xd2, 0x55, 0xd9, 0x25, 0x03, 0x07, 0x06,
	0x42, 0x42, 0xc5, 0xd8, 0x27, 0x9d, 0x45, 0xe2, 0x13, 0x7c, 0x4e, 0x22, 0xf5, 0x21, 0xf8, 0x83,
	0x77, 0xe2, 0x0d, 0x78, 0x06, 0xde, 0x03, 0xf9, 0x1c, 0xdb, 0xf1, 0x35, 0x76, 0x3b, 0x55, 0x42,
	0x88, 0xff, 0xec, 0xef, 0xf2, 0xfb, 0xae, 0xbf, 0xaf, 0x6e, 0xa0, 0xa9, 0x1b, 0x16, 0xd6, 0xd8,
	0x82, 0x0e, 0xd6, 0x16, 0x61, 0x04, 0xd5, 0xbc, 0xf7, 0xed, 0x89, 0x54, 0xd7, 0xc8, 0x6a, 0x45,
	0x4c, 0xa1, 0x92, 0x3b, 0x70, 0x34, 0x59, 0xd0, 0xa9, 0x69, 0x30, 0x43, 0x65, 0xc4, 0x9a, 0x33,
	0x95, 0x6d, 0xa8, 0x82, 0x7f, 0xdb, 0x60, 0xca, 0xe4, 0xb7, 0x80, 0xa2, 0x4a, 0x74, 0x1f, 0xea,
	0x5b, 0x6c, 0x51, 0x83, 0x98, 0x17, 0x86, 0xb9, 0x20, 0xed, 0xfc, 0x71, 0xbe, 0x5f, 0x55, 0x6a,
	0x8e, 0x6c, 0x6a, 0x2e, 0x08, 0x1a, 0x42, 0x99, 0x72, 0xe3, 0x76, 0xe1, 0x38, 0xdf, 0xaf, 0x8d,
	0x0e, 0x07, 0x4e, 0xd0, 0xed, 0xc9, 0x60, 0xa2, 0xe2, 0x15, 0x31, 0x9d, 0x40, 0x8e, 0x99, 0x93,
	0x86, 0x82, 0xe9, 0x9a, 0x98, 0x3a, 0x8e, 0x4d, 0x23, 0xa4, 0xbc, 0x95, 0x34, 0xba, 0xd0, 0xf1,
	0x17, 0x3c, 0x23, 0x3a, 0x1e, 0x5b, 0x58, 0xc7, 0x26, 0x33, 0xd4, 0x25, 0x95, 0xff, 0xca, 0x43,
	0x2b, 0xac, 0x47, 0x0f, 0xa1, 0xa0, 0x69, 0x3c, 0x7a, 0x6d, 0x24, 0x05, 0x02, 0x30, 0x75, 0xbd,
	0x54, 0x4d, 0x3c, 0xe6, 0x22, 0xa5, 0xa0, 0x69, 0xe8, 0x10, 0x0e, 0x4c, 0xa2, 0xe3, 0x0b, 0x43,
	0xe7, 0x19, 0x35, 0x94, 0xb2, 0xfd, 0x3a, 0xd5, 0x91, 0x04, 0x95, 0xb7, 0x84, 0x32, 0x53, 0x5d,
	0xe1, 0x76, 0x91, 0x17, 0xe2, 0xbd, 0x23, 0x04, 0xa5, 0x35, 0xb1, 0x58, 0xbb, 0xc4, 0x3d, 0xf8,
	0x33, 0x7a, 0x0e, 0x35, 0x6d, 0x97, 0x58, 0xfb, 0x0e, 0x8f, 0xde, 0x1f, 0xf8, 0xe6, 0x3c, 0xd8,
	0x53, 0x88, 0xe2, 0x77, 0x96, 0x5f, 0xc0, 0xdd, 0xb0, 0xed, 0x4b, 0x83, 0x32, 0xf4, 0x08, 0xee,
	0xd8, 0xd9, 0xd1, 0x76, 0xfe, 0xb8, 0xd8, 0xaf, 0x8d, 0xba, 0x7b, 0xd1, 0x15, 0x61, 0x2b, 0x3f,
	0x0e, 0xee, 0x93, 0x0b, 0xf6, 0xcd, 0x06, 0x5b, 0x57, 0xe8, 0x08, 0x2a, 0x4e, 0xf9, 0x02, 0xb4,
	0xa1, 0x1c, 0x88, 0xfa, 0xa9, 0xdc, 0x83, 0xae, 0xdf, 0xef, 0x0d, 0x59, 0x6e, 0x56, 0x81, 0xde,
	0x7f, 0x04, 0xf7, 0xa2, 0x06, 0xf6, 0xf8, 0x0c, 0xca, 0x0c, 0x8d, 0xca, 0x7f, 0x14, 0xa1, 0x1d,
	0x6f, 0xb0, 0xa1, 0xe8, 0x67, 0x00, 0x8d, 0x98, 0xe6, 0x85, 0x3d, 0x66, 0xcc, 0x67, 0xd5, 0x1c,
	0x9d, 0x26, 0xd6, 0xe3, 0x77, 0x0d, 0x28, 0xc6, 0xc4, 0x34, 0xb1, 0xc6, 0x0c, 0xb1, 0x37, 0x58,
	0xa9, 0xda, 0xa0, 0xfc, 0x11, 0x75, 0xa0, 0xba, 0xc6, 0xd8, 0xba, 0xe0, 0x13, 0x2c, 0x88, 0x09,
	0xda, 0x82, 0x99, 0x3d, 0xc1, 0x1f, 0xe0, 0x80, 0x2b, 0xd5, 0x05, 0x1f, 0x6e, 0x73, 0xf4, 0xe4,
	0xfa, 0xb1, 0x4f, 0x75, 0xdd, 0xc2, 0x94, 0x3e, 0x53, 0x57, 0xc6, 0xf2, 0x4a, 0x29, 0xdb, 0x78,
	0xa7, 0x0b, 0xf9, 0xd7, 0xe0, 0xc2, 0x86, 0x12, 0x44, 0x15, 0x28, 0xcd, 0x5e, 0xcf, 0xce, 0x5a,
	0x39, 0xd4, 0x04, 0x18, 0xbf, 0x9e, 0xcd, 0xce, 0xc6, 0xdf, 0x4e, 0x67, 0xe7, 0xad, 0x3c, 0x6a,
	0x40, 0xd5, 0x79, 0x3f, 0x9b, 0xb4, 0x0a, 0xe8, 0x7d, 0x68, 0x4c, 0xa6, 0x73, 0x9f, 0x45, 0x11,
	0xb5, 0xa0, 0xbe, 0x13, 0x9d, 0x4d, 0x5a, 0x25, 0x79, 0x18, 0x9c, 0x6d, 0x20, 0x23, 0x3b, 0xd4,
	0xf4, 0xeb, 0x37, 0x9f, 0xb7, 0x72, 0xce, 0xd3, 0xe3, 0x56, 0x5e, 0xfe, 0xb3, 0x10, 0x3c, 0x20,
	0xa2, 0xb8, 0x6b, 0x31, 0xa6, 0x03, 0xd5, 0x2d, 0xf7, 0xda, 0x71, 0xa6, 0x22, 0x04, 0x53, 0xdd,
	0x4f, 0xa7, 0x62, 0x80, 0x4e, 0x2f, 0x83, 0xf4, 0x28, 0xf1, 0x50, 0x0f, 0x53, 0x9a, 0x9e, 0x44,
	0x10, 0xf4, 0x04, 0xee, 0xd8, 0x8b, 0xe3, 0xd2, 0xec, 0xd3, 0x0c, 0xc3, 0x13, 0x4b, 0xa9, 0x08,
	0x3f, 0xf4, 0x95, 0x77, 0x87, 0xca, 0x1c, 0xe1, 0x93, 0x4c, 0xe3, 0xf7, 0xae, 0xd2, 0x1c, 0x3e,
	0x8c, 0xda, 0x70, 0x8a, 0x7e, 0x01, 0x07, 0xa2, 0x19, 0x2e, 0x49, 0x7b, 0x29, 0xc8, 0x8a, 0x6b,
	0x2f, 0x7f, 0x19, 0xdc, 0x9c, 0x1d, 0xa8, 0xa0, 0x6a, 0x17, 0xc0, 0xeb, 0xbb, 0x4b, 0xd6, 0xaa,
	0xdb, 0x78, 0x97, 0xae, 0xde, 0x49, 0x4e, 0xa2, 0x6b, 0xc8, 0x20, 0x4a, 0xd7, 0x18, 0x83, 0xac,
	0x74, 0x8d, 0x75, 0x0d, 0x28, 0x6e, 0x8f, 0xae, 0xe9, 0xb1, 0xf7, 0xd1, 0x35, 0x29, 0xc1, 0x5b,
	0xa1, 0x6b, 0x7c, 0x46, 0xfb, 0xe8, 0x1a, 0x2a, 0xee, 0x5f, 0x43, 0xd7, 0xe4, 0x6d, 0xbb, 0x1e,
	0x5d, 0x13, 0x97, 0x32, 0x33, 0x5d, 0x63, 0xc7, 0x1f, 0xa2, 0x6b, 0xc8, 0x26, 0x23, 0x5d, 0x43,
	0x5e, 0x61, 0xba, 0xc6, 0x80, 0x66, 0xa1, 0xeb, 0xe8, 0xf7, 0x2a, 0xd4, 0xfd, 0x6c, 0x47, 0x73,
	0x28, 0x3b, 0x5c, 0x7b, 0x90, 0x78, 0x31, 0x02, 0x1f, 0x61, 0x52, 0x2f, 0xc5, 0x4e, 0xce, 0xa1,
	0x31, 0x80, 0xf3, 0xa1, 0x61, 0x2f, 0xf3, 0xfe, 0xef, 0x05, 0xe9, 0xae, 0x6f, 0x93, 0x94, 0xb5,
	0xa6, 0x60, 0xba, 0x59, 0xb2, 0x1d, 0xc8, 0x77, 0x6b, 0xfd, 0xdd, 0x41, 0x26, 0x78, 0x89, 0x6f,
	0x0e, 0xf2, 0x3d, 0x54, 0xbc, 0x6f, 0xa1, 0x07, 0x7b, 0x21, 0xbc, 0x39, 0x48, 0xf7, 0x53, 0xed,
	0xe4, 0x1c, 0x3a, 0x87, 0xba, 0xb7, 0xc2, 0x76, 0x91, 0x69, 0x47, 0x3b, 0x31, 0x43, 0x0f, 0xc8,
	0xe9, 0xd6, 0xbb, 0x03, 0x39, 0x1d, 0xbb, 0x31, 0xd0, 0x4f, 0x00, 0xbe, 0x7d, 0xef, 0xa7, 0xc0,
	0xec, 0xfa, 0xf6, 0x71, 0x06, 0x4b, 0x39, 0x87, 0x9e, 0x41, 0x63, 0x4c, 0xcc, 0x85, 0x71, 0x79,
	0x8e, 0xd9, 0x53, 0x42, 0x96, 0xc8, 0x9f, 0x87, 0xd0, 0xbc, 0xc0, 0x57, 0x52, 0x37, 0x22, 0x75,
	0xec, 0x15, 0xbc, 0x5e, 0x5e, 0xc9, 0x39, 0x34, 0x85, 0x96, 0x90, 0x8b, 0xc6, 0x71, 0xa8, 0x0f,
	0x22, 0x4e, 0xb6, 0x58, 0xba, 0x17, 0x11, 0x0b, 0x9f, 0x1d, 0x54, 0x53, 0x88, 0xed, 0x14, 0x39,
	0x90, 0x14, 0xf1, 0xd8, 0xd5, 0x79, 0x14, 0x1b, 0xc4, 0xa9, 0xee, 0x39, 0xbc, 0xe7, 0x65, 0x3b,
	0x67, 0x96, 0x61, 0x5e, 0x26, 0xd4, 0xd7, 0x8b, 0xab, 0x4f, 0x78, 0xb8, 0x69, 0xbd, 0x02, 0xe4,
	0xcf, 0xd6, 0x81, 0x3b, 0x8c, 0x38, 0x0a, 0x45, 0x6a, 0x95, 0xaf, 0xdc, 0x86, 0xd9, 0xa9, 0x3a,
	0x60, 0xfb, 0xea, 0xec, 0x24, 0x04, 0x12, 0x95, 0x8e, 0xfe, 0x2e, 0xf3, 0x7b, 0xe4, 0x9d, 0xb3,
	0x7d, 0xf7, 0x28, 0xfe, 0x9f, 0x42, 0xa9, 0x97, 0x62, 0x97, 0x85, 0x67, 0xa1, 0x73, 0x7a, 0x73,
	0x9e, 0x5d, 0x1b, 0x28, 0x89, 0x67, 0x59, 0x81, 0x52, 0x78, 0x96, 0xf4, 0x77, 0x22, 0xca, 0xb3,
	0x18, 0xcb, 0xff, 0x79, 0xf6, 0x5f, 0xe1, 0xd9, 0xd3, 0xd1, 0x8f, 0x9f, 0x69, 0x44, 0xc7, 0x03,
	0xca, 0x88, 0xa5, 0x5e, 0x62, 0x42, 0x07, 0x26, 0x66, 0x43, 0xef, 0x6d, 0x48, 0xb1, 0xb5, 0x35,
	0x34, 0x3c, 0x74, 0x97, 0x62, 0xb8, 0x3d, 0xf9, 0xa5, 0xcc, 0x7f, 0x18, 0x7a, 0xf4, 0x4f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xaf, 0x2f, 0x25, 0x87, 0x45, 0x12, 0x00, 0x00,
}
