// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: directfs.proto
#ifndef GRPC_directfs_2eproto__INCLUDED
#define GRPC_directfs_2eproto__INCLUDED

#include "directfs.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace directfs {
namespace v1 {

// *
// DirectFS client configuration and status service.
class DfsClient final {
 public:
  static constexpr char const* service_full_name() {
    return "directfs.v1.DfsClient";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // *
    // Add a remote host entry to be used by volumes.
    //
    // returns RpcResult
    virtual ::grpc::Status ServerCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncServerCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncServerCreateRaw(context, request, cq));
    }
    // *
    // Update a remote host entry to be used by volumes.
    //
    // returns RpcResult
    virtual ::grpc::Status ServerUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncServerUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncServerUpdateRaw(context, request, cq));
    }
    // *
    // Remove a remote host entry.
    //
    // This will likely result in any volumes using this host to
    // become unconfigured. That has serious consequences.
    //
    // returns RpcResult
    virtual ::grpc::Status ServerDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncServerDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncServerDeleteRaw(context, request, cq));
    }
    // *
    // List configured host entries, optionally filtered via a DfsHostListQuery
    // message.
    //
    // returns A DfsHostList message containing DfsHost messages,
    //         if any are available matching the filter.
    virtual ::grpc::Status ServerList(::grpc::ClientContext* context, const ::directfs::v1::DfsHostListQuery& request, ::directfs::v1::DfsHostList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::directfs::v1::DfsHostList>> AsyncServerList(::grpc::ClientContext* context, const ::directfs::v1::DfsHostListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::directfs::v1::DfsHostList>>(AsyncServerListRaw(context, request, cq));
    }
    // *
    // Create a volume on a remote host. The DfsHost matching the host id
    // in the DfsVolume message must be configured for the volume to actually
    // be configured on the DirectFS client.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeCreateRaw(context, request, cq));
    }
    // *
    // Update a volume on a remote host. The DfsHost matching the host id
    // in the DfsVolume message must be configured for the volume to actually
    // be configured on the DirectFS client.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeUpdateRaw(context, request, cq));
    }
    // *
    // Delete a volume previously configured by VolumeCreate.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeDeleteRaw(context, request, cq));
    }
    // *
    // List configured volume entries, optionally filtered via a DfsVolumeListQuery
    // message.
    //
    // returns A DfsVolumeList message containing DfsVolume messages,
    //         if any are available matching the filter.
    virtual ::grpc::Status VolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::directfs::v1::DfsVolumeList* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::directfs::v1::DfsVolumeList>> AsyncVolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::directfs::v1::DfsVolumeList>>(AsyncVolumeListRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncServerCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncServerUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncServerDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::directfs::v1::DfsHostList>* AsyncServerListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHostListQuery& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::directfs::v1::DfsVolumeList>* AsyncVolumeListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ServerCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncServerCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncServerCreateRaw(context, request, cq));
    }
    ::grpc::Status ServerUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncServerUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncServerUpdateRaw(context, request, cq));
    }
    ::grpc::Status ServerDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncServerDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncServerDeleteRaw(context, request, cq));
    }
    ::grpc::Status ServerList(::grpc::ClientContext* context, const ::directfs::v1::DfsHostListQuery& request, ::directfs::v1::DfsHostList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsHostList>> AsyncServerList(::grpc::ClientContext* context, const ::directfs::v1::DfsHostListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsHostList>>(AsyncServerListRaw(context, request, cq));
    }
    ::grpc::Status VolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeCreateRaw(context, request, cq));
    }
    ::grpc::Status VolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeUpdateRaw(context, request, cq));
    }
    ::grpc::Status VolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeDeleteRaw(context, request, cq));
    }
    ::grpc::Status VolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::directfs::v1::DfsVolumeList* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsVolumeList>> AsyncVolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsVolumeList>>(AsyncVolumeListRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncServerCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncServerUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncServerDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsHostList>* AsyncServerListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHostListQuery& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsVolumeList>* AsyncVolumeListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_ServerCreate_;
    const ::grpc::RpcMethod rpcmethod_ServerUpdate_;
    const ::grpc::RpcMethod rpcmethod_ServerDelete_;
    const ::grpc::RpcMethod rpcmethod_ServerList_;
    const ::grpc::RpcMethod rpcmethod_VolumeCreate_;
    const ::grpc::RpcMethod rpcmethod_VolumeUpdate_;
    const ::grpc::RpcMethod rpcmethod_VolumeDelete_;
    const ::grpc::RpcMethod rpcmethod_VolumeList_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // *
    // Add a remote host entry to be used by volumes.
    //
    // returns RpcResult
    virtual ::grpc::Status ServerCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response);
    // *
    // Update a remote host entry to be used by volumes.
    //
    // returns RpcResult
    virtual ::grpc::Status ServerUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response);
    // *
    // Remove a remote host entry.
    //
    // This will likely result in any volumes using this host to
    // become unconfigured. That has serious consequences.
    //
    // returns RpcResult
    virtual ::grpc::Status ServerDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response);
    // *
    // List configured host entries, optionally filtered via a DfsHostListQuery
    // message.
    //
    // returns A DfsHostList message containing DfsHost messages,
    //         if any are available matching the filter.
    virtual ::grpc::Status ServerList(::grpc::ServerContext* context, const ::directfs::v1::DfsHostListQuery* request, ::directfs::v1::DfsHostList* response);
    // *
    // Create a volume on a remote host. The DfsHost matching the host id
    // in the DfsVolume message must be configured for the volume to actually
    // be configured on the DirectFS client.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response);
    // *
    // Update a volume on a remote host. The DfsHost matching the host id
    // in the DfsVolume message must be configured for the volume to actually
    // be configured on the DirectFS client.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response);
    // *
    // Delete a volume previously configured by VolumeCreate.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response);
    // *
    // List configured volume entries, optionally filtered via a DfsVolumeListQuery
    // message.
    //
    // returns A DfsVolumeList message containing DfsVolume messages,
    //         if any are available matching the filter.
    virtual ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsVolumeListQuery* request, ::directfs::v1::DfsVolumeList* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ServerCreate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ServerCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerCreate(::grpc::ServerContext* context, ::directfs::v1::DfsHost* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ServerUpdate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ServerUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerUpdate(::grpc::ServerContext* context, ::directfs::v1::DfsHost* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ServerDelete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ServerDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerDelete(::grpc::ServerContext* context, ::directfs::v1::DfsHost* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ServerList() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerList(::grpc::ServerContext* context, const ::directfs::v1::DfsHostListQuery* request, ::directfs::v1::DfsHostList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestServerList(::grpc::ServerContext* context, ::directfs::v1::DfsHostListQuery* request, ::grpc::ServerAsyncResponseWriter< ::directfs::v1::DfsHostList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeCreate(::grpc::ServerContext* context, ::directfs::v1::DfsVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeUpdate(::grpc::ServerContext* context, ::directfs::v1::DfsVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeDelete(::grpc::ServerContext* context, ::directfs::v1::DfsVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeList() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsVolumeListQuery* request, ::directfs::v1::DfsVolumeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeList(::grpc::ServerContext* context, ::directfs::v1::DfsVolumeListQuery* request, ::grpc::ServerAsyncResponseWriter< ::directfs::v1::DfsVolumeList>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ServerCreate<WithAsyncMethod_ServerUpdate<WithAsyncMethod_ServerDelete<WithAsyncMethod_ServerList<WithAsyncMethod_VolumeCreate<WithAsyncMethod_VolumeUpdate<WithAsyncMethod_VolumeDelete<WithAsyncMethod_VolumeList<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ServerCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ServerCreate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ServerCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ServerUpdate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ServerUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ServerDelete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ServerDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ServerList() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ServerList(::grpc::ServerContext* context, const ::directfs::v1::DfsHostListQuery* request, ::directfs::v1::DfsHostList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeList() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsVolumeListQuery* request, ::directfs::v1::DfsVolumeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ServerCreate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::directfs::v1::DfsHost, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_ServerCreate<BaseClass>::StreamedServerCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ServerCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::directfs::v1::DfsHost,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ServerUpdate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::directfs::v1::DfsHost, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_ServerUpdate<BaseClass>::StreamedServerUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ServerUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::directfs::v1::DfsHost,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ServerDelete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::directfs::v1::DfsHost, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_ServerDelete<BaseClass>::StreamedServerDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ServerDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::directfs::v1::DfsHost,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ServerList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ServerList() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::directfs::v1::DfsHostListQuery, ::directfs::v1::DfsHostList>(std::bind(&WithStreamedUnaryMethod_ServerList<BaseClass>::StreamedServerList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ServerList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ServerList(::grpc::ServerContext* context, const ::directfs::v1::DfsHostListQuery* request, ::directfs::v1::DfsHostList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedServerList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::directfs::v1::DfsHostListQuery,::directfs::v1::DfsHostList>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeCreate<BaseClass>::StreamedVolumeCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::directfs::v1::DfsVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::StreamedUnaryHandler< ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeUpdate<BaseClass>::StreamedVolumeUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::directfs::v1::DfsVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::StreamedUnaryHandler< ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeDelete<BaseClass>::StreamedVolumeDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::directfs::v1::DfsVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeList() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::StreamedUnaryHandler< ::directfs::v1::DfsVolumeListQuery, ::directfs::v1::DfsVolumeList>(std::bind(&WithStreamedUnaryMethod_VolumeList<BaseClass>::StreamedVolumeList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsVolumeListQuery* request, ::directfs::v1::DfsVolumeList* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::directfs::v1::DfsVolumeListQuery,::directfs::v1::DfsVolumeList>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ServerCreate<WithStreamedUnaryMethod_ServerUpdate<WithStreamedUnaryMethod_ServerDelete<WithStreamedUnaryMethod_ServerList<WithStreamedUnaryMethod_VolumeCreate<WithStreamedUnaryMethod_VolumeUpdate<WithStreamedUnaryMethod_VolumeDelete<WithStreamedUnaryMethod_VolumeList<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ServerCreate<WithStreamedUnaryMethod_ServerUpdate<WithStreamedUnaryMethod_ServerDelete<WithStreamedUnaryMethod_ServerList<WithStreamedUnaryMethod_VolumeCreate<WithStreamedUnaryMethod_VolumeUpdate<WithStreamedUnaryMethod_VolumeDelete<WithStreamedUnaryMethod_VolumeList<Service > > > > > > > > StreamedService;
};

// *
// DirectFS server configuration and status service.
class DfsServer final {
 public:
  static constexpr char const* service_full_name() {
    return "directfs.v1.DfsServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // *
    // Create a volume to be served via DFS. Currently does nothing, but should still
    // be performed as in the near future it will certainly be required.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeCreateRaw(context, request, cq));
    }
    // *
    // Update a volume to be served via DFS. Currently does nothing, but should still
    // be performed as in the near future it will certainly be required.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeUpdateRaw(context, request, cq));
    }
    // *
    // Delete a volume to be served via DFS. Currently does nothing, but should still
    // be performed as in the near future it will certainly be required.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>> AsyncVolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>>(AsyncVolumeDeleteRaw(context, request, cq));
    }
    // *
    // List configured volume entries, optionally filtered via a DfsVolumeListQuery
    // message.
    //
    // returns a stream of DfsVolume messages, if any are available matching the filter.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::directfs::v1::DfsVolume>> VolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::directfs::v1::DfsVolume>>(VolumeListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::directfs::v1::DfsVolume>> AsyncVolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::directfs::v1::DfsVolume>>(AsyncVolumeListRaw(context, request, cq, tag));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::common::v1::RpcResult>* AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::directfs::v1::DfsVolume>* VolumeListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::directfs::v1::DfsVolume>* AsyncVolumeListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status VolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeCreateRaw(context, request, cq));
    }
    ::grpc::Status VolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeUpdateRaw(context, request, cq));
    }
    ::grpc::Status VolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>> AsyncVolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>>(AsyncVolumeDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::directfs::v1::DfsVolume>> VolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::directfs::v1::DfsVolume>>(VolumeListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::directfs::v1::DfsVolume>> AsyncVolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::directfs::v1::DfsVolume>>(AsyncVolumeListRaw(context, request, cq, tag));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::directfs::v1::DfsVolume>* VolumeListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request) override;
    ::grpc::ClientAsyncReader< ::directfs::v1::DfsVolume>* AsyncVolumeListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::grpc::CompletionQueue* cq, void* tag) override;
    const ::grpc::RpcMethod rpcmethod_VolumeCreate_;
    const ::grpc::RpcMethod rpcmethod_VolumeUpdate_;
    const ::grpc::RpcMethod rpcmethod_VolumeDelete_;
    const ::grpc::RpcMethod rpcmethod_VolumeList_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // *
    // Create a volume to be served via DFS. Currently does nothing, but should still
    // be performed as in the near future it will certainly be required.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response);
    // *
    // Update a volume to be served via DFS. Currently does nothing, but should still
    // be performed as in the near future it will certainly be required.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response);
    // *
    // Delete a volume to be served via DFS. Currently does nothing, but should still
    // be performed as in the near future it will certainly be required.
    //
    // returns RpcResult
    virtual ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response);
    // *
    // List configured volume entries, optionally filtered via a DfsVolumeListQuery
    // message.
    //
    // returns a stream of DfsVolume messages, if any are available matching the filter.
    virtual ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsVolumeListQuery* request, ::grpc::ServerWriter< ::directfs::v1::DfsVolume>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeCreate(::grpc::ServerContext* context, ::directfs::v1::DfsVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeUpdate(::grpc::ServerContext* context, ::directfs::v1::DfsVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeDelete(::grpc::ServerContext* context, ::directfs::v1::DfsVolume* request, ::grpc::ServerAsyncResponseWriter< ::common::v1::RpcResult>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VolumeList() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsVolumeListQuery* request, ::grpc::ServerWriter< ::directfs::v1::DfsVolume>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVolumeList(::grpc::ServerContext* context, ::directfs::v1::DfsVolumeListQuery* request, ::grpc::ServerAsyncWriter< ::directfs::v1::DfsVolume>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_VolumeCreate<WithAsyncMethod_VolumeUpdate<WithAsyncMethod_VolumeDelete<WithAsyncMethod_VolumeList<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VolumeList() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsVolumeListQuery* request, ::grpc::ServerWriter< ::directfs::v1::DfsVolume>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeCreate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeCreate() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeCreate<BaseClass>::StreamedVolumeCreate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeCreate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeCreate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::directfs::v1::DfsVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeUpdate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeUpdate<BaseClass>::StreamedVolumeUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::directfs::v1::DfsVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VolumeDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VolumeDelete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(std::bind(&WithStreamedUnaryMethod_VolumeDelete<BaseClass>::StreamedVolumeDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VolumeDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVolumeDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::directfs::v1::DfsVolume,::common::v1::RpcResult>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_VolumeCreate<WithStreamedUnaryMethod_VolumeUpdate<WithStreamedUnaryMethod_VolumeDelete<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_VolumeList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_VolumeList() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::SplitServerStreamingHandler< ::directfs::v1::DfsVolumeListQuery, ::directfs::v1::DfsVolume>(std::bind(&WithSplitStreamingMethod_VolumeList<BaseClass>::StreamedVolumeList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_VolumeList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsVolumeListQuery* request, ::grpc::ServerWriter< ::directfs::v1::DfsVolume>* writer) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedVolumeList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::directfs::v1::DfsVolumeListQuery,::directfs::v1::DfsVolume>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_VolumeList<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_VolumeCreate<WithStreamedUnaryMethod_VolumeUpdate<WithStreamedUnaryMethod_VolumeDelete<WithSplitStreamingMethod_VolumeList<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace directfs


#endif  // GRPC_directfs_2eproto__INCLUDED
