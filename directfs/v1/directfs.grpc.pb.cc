// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: directfs.proto

#include "directfs.pb.h"
#include "directfs.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace directfs {
namespace v1 {

static const char* DfsClient_method_names[] = {
  "/directfs.v1.DfsClient/Status",
  "/directfs.v1.DfsClient/ServerCreate",
  "/directfs.v1.DfsClient/ServerUpdate",
  "/directfs.v1.DfsClient/ServerDelete",
  "/directfs.v1.DfsClient/ServerList",
  "/directfs.v1.DfsClient/VolumeCreate",
  "/directfs.v1.DfsClient/VolumeUpdate",
  "/directfs.v1.DfsClient/VolumeDelete",
  "/directfs.v1.DfsClient/VolumeList",
};

std::unique_ptr< DfsClient::Stub> DfsClient::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DfsClient::Stub> stub(new DfsClient::Stub(channel));
  return stub;
}

DfsClient::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Status_(DfsClient_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerCreate_(DfsClient_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerUpdate_(DfsClient_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerDelete_(DfsClient_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerList_(DfsClient_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeCreate_(DfsClient_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeUpdate_(DfsClient_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeDelete_(DfsClient_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeList_(DfsClient_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DfsClient::Stub::Status(::grpc::ClientContext* context, const ::directfs::v1::DfsClientStatusRequest& request, ::directfs::v1::DfsClientStatus* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Status_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsClientStatus>* DfsClient::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsClientStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsClientStatus>::Create(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::Status DfsClient::Stub::ServerCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ServerCreate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsClient::Stub::AsyncServerCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_ServerCreate_, context, request);
}

::grpc::Status DfsClient::Stub::ServerUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ServerUpdate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsClient::Stub::AsyncServerUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_ServerUpdate_, context, request);
}

::grpc::Status DfsClient::Stub::ServerDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ServerDelete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsClient::Stub::AsyncServerDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHost& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_ServerDelete_, context, request);
}

::grpc::Status DfsClient::Stub::ServerList(::grpc::ClientContext* context, const ::directfs::v1::DfsHostListQuery& request, ::directfs::v1::DfsHostList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ServerList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsHostList>* DfsClient::Stub::AsyncServerListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsHostListQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsHostList>::Create(channel_.get(), cq, rpcmethod_ServerList_, context, request);
}

::grpc::Status DfsClient::Stub::VolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeCreate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsClient::Stub::AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeCreate_, context, request);
}

::grpc::Status DfsClient::Stub::VolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeUpdate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsClient::Stub::AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeUpdate_, context, request);
}

::grpc::Status DfsClient::Stub::VolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeDelete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsClient::Stub::AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeDelete_, context, request);
}

::grpc::Status DfsClient::Stub::VolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::directfs::v1::DfsVolumeList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsVolumeList>* DfsClient::Stub::AsyncVolumeListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsVolumeList>::Create(channel_.get(), cq, rpcmethod_VolumeList_, context, request);
}

DfsClient::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsClient_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsClient::Service, ::directfs::v1::DfsClientStatusRequest, ::directfs::v1::DfsClientStatus>(
          std::mem_fn(&DfsClient::Service::Status), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsClient_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsClient::Service, ::directfs::v1::DfsHost, ::common::v1::RpcResult>(
          std::mem_fn(&DfsClient::Service::ServerCreate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsClient_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsClient::Service, ::directfs::v1::DfsHost, ::common::v1::RpcResult>(
          std::mem_fn(&DfsClient::Service::ServerUpdate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsClient_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsClient::Service, ::directfs::v1::DfsHost, ::common::v1::RpcResult>(
          std::mem_fn(&DfsClient::Service::ServerDelete), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsClient_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsClient::Service, ::directfs::v1::DfsHostListQuery, ::directfs::v1::DfsHostList>(
          std::mem_fn(&DfsClient::Service::ServerList), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsClient_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsClient::Service, ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsClient::Service::VolumeCreate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsClient_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsClient::Service, ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsClient::Service::VolumeUpdate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsClient_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsClient::Service, ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsClient::Service::VolumeDelete), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsClient_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsClient::Service, ::directfs::v1::DfsVolumeListQuery, ::directfs::v1::DfsVolumeList>(
          std::mem_fn(&DfsClient::Service::VolumeList), this)));
}

DfsClient::Service::~Service() {
}

::grpc::Status DfsClient::Service::Status(::grpc::ServerContext* context, const ::directfs::v1::DfsClientStatusRequest* request, ::directfs::v1::DfsClientStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsClient::Service::ServerCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsClient::Service::ServerUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsClient::Service::ServerDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsHost* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsClient::Service::ServerList(::grpc::ServerContext* context, const ::directfs::v1::DfsHostListQuery* request, ::directfs::v1::DfsHostList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsClient::Service::VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsClient::Service::VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsClient::Service::VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsClient::Service::VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsVolumeListQuery* request, ::directfs::v1::DfsVolumeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DfsServer_method_names[] = {
  "/directfs.v1.DfsServer/Status",
  "/directfs.v1.DfsServer/VolumeCreate",
  "/directfs.v1.DfsServer/VolumeUpdate",
  "/directfs.v1.DfsServer/VolumeDelete",
  "/directfs.v1.DfsServer/VolumeList",
};

std::unique_ptr< DfsServer::Stub> DfsServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DfsServer::Stub> stub(new DfsServer::Stub(channel));
  return stub;
}

DfsServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Status_(DfsServer_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeCreate_(DfsServer_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeUpdate_(DfsServer_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeDelete_(DfsServer_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeList_(DfsServer_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DfsServer::Stub::Status(::grpc::ClientContext* context, const ::directfs::v1::DfsServerStatusRequest& request, ::directfs::v1::DfsServerStatus* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Status_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsServerStatus>* DfsServer::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsServerStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsServerStatus>::Create(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::Status DfsServer::Stub::VolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeCreate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsServer::Stub::AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeCreate_, context, request);
}

::grpc::Status DfsServer::Stub::VolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeUpdate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsServer::Stub::AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeUpdate_, context, request);
}

::grpc::Status DfsServer::Stub::VolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeDelete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsServer::Stub::AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeDelete_, context, request);
}

::grpc::Status DfsServer::Stub::VolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::directfs::v1::DfsVolumeList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsVolumeList>* DfsServer::Stub::AsyncVolumeListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsVolumeListQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsVolumeList>::Create(channel_.get(), cq, rpcmethod_VolumeList_, context, request);
}

DfsServer::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsServer_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsServer::Service, ::directfs::v1::DfsServerStatusRequest, ::directfs::v1::DfsServerStatus>(
          std::mem_fn(&DfsServer::Service::Status), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsServer_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsServer::Service, ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsServer::Service::VolumeCreate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsServer_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsServer::Service, ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsServer::Service::VolumeUpdate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsServer_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsServer::Service, ::directfs::v1::DfsVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsServer::Service::VolumeDelete), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsServer_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsServer::Service, ::directfs::v1::DfsVolumeListQuery, ::directfs::v1::DfsVolumeList>(
          std::mem_fn(&DfsServer::Service::VolumeList), this)));
}

DfsServer::Service::~Service() {
}

::grpc::Status DfsServer::Service::Status(::grpc::ServerContext* context, const ::directfs::v1::DfsServerStatusRequest* request, ::directfs::v1::DfsServerStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsServer::Service::VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsServer::Service::VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsServer::Service::VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsServer::Service::VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsVolumeListQuery* request, ::directfs::v1::DfsVolumeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace directfs
}  // namespace v1

