// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: directfs.proto

#include "directfs.pb.h"
#include "directfs.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace directfs {
namespace v1 {

static const char* DfsInitiator_method_names[] = {
  "/directfs.v1.DfsInitiator/Status",
  "/directfs.v1.DfsInitiator/ServerCreate",
  "/directfs.v1.DfsInitiator/ServerUpdate",
  "/directfs.v1.DfsInitiator/ServerDelete",
  "/directfs.v1.DfsInitiator/ServerList",
  "/directfs.v1.DfsInitiator/VolumeCreate",
  "/directfs.v1.DfsInitiator/VolumeUpdate",
  "/directfs.v1.DfsInitiator/VolumeDelete",
  "/directfs.v1.DfsInitiator/VolumeList",
};

std::unique_ptr< DfsInitiator::Stub> DfsInitiator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DfsInitiator::Stub> stub(new DfsInitiator::Stub(channel));
  return stub;
}

DfsInitiator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Status_(DfsInitiator_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerCreate_(DfsInitiator_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerUpdate_(DfsInitiator_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerDelete_(DfsInitiator_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerList_(DfsInitiator_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeCreate_(DfsInitiator_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeUpdate_(DfsInitiator_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeDelete_(DfsInitiator_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeList_(DfsInitiator_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DfsInitiator::Stub::Status(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorStatusRequest& request, ::directfs::v1::DfsInitiatorStatus* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Status_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsInitiatorStatus>* DfsInitiator::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsInitiatorStatus>::Create(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::Status DfsInitiator::Stub::ServerCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorHost& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ServerCreate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsInitiator::Stub::AsyncServerCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorHost& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_ServerCreate_, context, request);
}

::grpc::Status DfsInitiator::Stub::ServerUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorHost& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ServerUpdate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsInitiator::Stub::AsyncServerUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorHost& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_ServerUpdate_, context, request);
}

::grpc::Status DfsInitiator::Stub::ServerDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorHost& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ServerDelete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsInitiator::Stub::AsyncServerDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorHost& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_ServerDelete_, context, request);
}

::grpc::Status DfsInitiator::Stub::ServerList(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorHostListQuery& request, ::directfs::v1::DfsInitiatorHostList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ServerList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsInitiatorHostList>* DfsInitiator::Stub::AsyncServerListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorHostListQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsInitiatorHostList>::Create(channel_.get(), cq, rpcmethod_ServerList_, context, request);
}

::grpc::Status DfsInitiator::Stub::VolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeCreate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsInitiator::Stub::AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeCreate_, context, request);
}

::grpc::Status DfsInitiator::Stub::VolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeUpdate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsInitiator::Stub::AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeUpdate_, context, request);
}

::grpc::Status DfsInitiator::Stub::VolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeDelete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsInitiator::Stub::AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeDelete_, context, request);
}

::grpc::Status DfsInitiator::Stub::VolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorVolumeListQuery& request, ::directfs::v1::DfsInitiatorVolumeList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsInitiatorVolumeList>* DfsInitiator::Stub::AsyncVolumeListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsInitiatorVolumeListQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsInitiatorVolumeList>::Create(channel_.get(), cq, rpcmethod_VolumeList_, context, request);
}

DfsInitiator::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsInitiator_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsInitiator::Service, ::directfs::v1::DfsInitiatorStatusRequest, ::directfs::v1::DfsInitiatorStatus>(
          std::mem_fn(&DfsInitiator::Service::Status), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsInitiator_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsInitiator::Service, ::directfs::v1::DfsInitiatorHost, ::common::v1::RpcResult>(
          std::mem_fn(&DfsInitiator::Service::ServerCreate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsInitiator_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsInitiator::Service, ::directfs::v1::DfsInitiatorHost, ::common::v1::RpcResult>(
          std::mem_fn(&DfsInitiator::Service::ServerUpdate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsInitiator_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsInitiator::Service, ::directfs::v1::DfsInitiatorHost, ::common::v1::RpcResult>(
          std::mem_fn(&DfsInitiator::Service::ServerDelete), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsInitiator_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsInitiator::Service, ::directfs::v1::DfsInitiatorHostListQuery, ::directfs::v1::DfsInitiatorHostList>(
          std::mem_fn(&DfsInitiator::Service::ServerList), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsInitiator_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsInitiator::Service, ::directfs::v1::DfsInitiatorVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsInitiator::Service::VolumeCreate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsInitiator_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsInitiator::Service, ::directfs::v1::DfsInitiatorVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsInitiator::Service::VolumeUpdate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsInitiator_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsInitiator::Service, ::directfs::v1::DfsInitiatorVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsInitiator::Service::VolumeDelete), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsInitiator_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsInitiator::Service, ::directfs::v1::DfsInitiatorVolumeListQuery, ::directfs::v1::DfsInitiatorVolumeList>(
          std::mem_fn(&DfsInitiator::Service::VolumeList), this)));
}

DfsInitiator::Service::~Service() {
}

::grpc::Status DfsInitiator::Service::Status(::grpc::ServerContext* context, const ::directfs::v1::DfsInitiatorStatusRequest* request, ::directfs::v1::DfsInitiatorStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsInitiator::Service::ServerCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsInitiatorHost* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsInitiator::Service::ServerUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsInitiatorHost* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsInitiator::Service::ServerDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsInitiatorHost* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsInitiator::Service::ServerList(::grpc::ServerContext* context, const ::directfs::v1::DfsInitiatorHostListQuery* request, ::directfs::v1::DfsInitiatorHostList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsInitiator::Service::VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsInitiatorVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsInitiator::Service::VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsInitiatorVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsInitiator::Service::VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsInitiatorVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsInitiator::Service::VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsInitiatorVolumeListQuery* request, ::directfs::v1::DfsInitiatorVolumeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DfsResponder_method_names[] = {
  "/directfs.v1.DfsResponder/Status",
  "/directfs.v1.DfsResponder/VolumeCreate",
  "/directfs.v1.DfsResponder/VolumeUpdate",
  "/directfs.v1.DfsResponder/VolumeDelete",
  "/directfs.v1.DfsResponder/VolumeList",
};

std::unique_ptr< DfsResponder::Stub> DfsResponder::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< DfsResponder::Stub> stub(new DfsResponder::Stub(channel));
  return stub;
}

DfsResponder::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Status_(DfsResponder_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeCreate_(DfsResponder_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeUpdate_(DfsResponder_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeDelete_(DfsResponder_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VolumeList_(DfsResponder_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DfsResponder::Stub::Status(::grpc::ClientContext* context, const ::directfs::v1::DfsResponderStatusRequest& request, ::directfs::v1::DfsResponderStatus* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Status_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsResponderStatus>* DfsResponder::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsResponderStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsResponderStatus>::Create(channel_.get(), cq, rpcmethod_Status_, context, request);
}

::grpc::Status DfsResponder::Stub::VolumeCreate(::grpc::ClientContext* context, const ::directfs::v1::DfsResponderVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeCreate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsResponder::Stub::AsyncVolumeCreateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsResponderVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeCreate_, context, request);
}

::grpc::Status DfsResponder::Stub::VolumeUpdate(::grpc::ClientContext* context, const ::directfs::v1::DfsResponderVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeUpdate_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsResponder::Stub::AsyncVolumeUpdateRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsResponderVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeUpdate_, context, request);
}

::grpc::Status DfsResponder::Stub::VolumeDelete(::grpc::ClientContext* context, const ::directfs::v1::DfsResponderVolume& request, ::common::v1::RpcResult* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeDelete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>* DfsResponder::Stub::AsyncVolumeDeleteRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsResponderVolume& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::common::v1::RpcResult>::Create(channel_.get(), cq, rpcmethod_VolumeDelete_, context, request);
}

::grpc::Status DfsResponder::Stub::VolumeList(::grpc::ClientContext* context, const ::directfs::v1::DfsResponderVolumeListQuery& request, ::directfs::v1::DfsResponderVolumeList* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_VolumeList_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsResponderVolumeList>* DfsResponder::Stub::AsyncVolumeListRaw(::grpc::ClientContext* context, const ::directfs::v1::DfsResponderVolumeListQuery& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::directfs::v1::DfsResponderVolumeList>::Create(channel_.get(), cq, rpcmethod_VolumeList_, context, request);
}

DfsResponder::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsResponder_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsResponder::Service, ::directfs::v1::DfsResponderStatusRequest, ::directfs::v1::DfsResponderStatus>(
          std::mem_fn(&DfsResponder::Service::Status), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsResponder_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsResponder::Service, ::directfs::v1::DfsResponderVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsResponder::Service::VolumeCreate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsResponder_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsResponder::Service, ::directfs::v1::DfsResponderVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsResponder::Service::VolumeUpdate), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsResponder_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsResponder::Service, ::directfs::v1::DfsResponderVolume, ::common::v1::RpcResult>(
          std::mem_fn(&DfsResponder::Service::VolumeDelete), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      DfsResponder_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< DfsResponder::Service, ::directfs::v1::DfsResponderVolumeListQuery, ::directfs::v1::DfsResponderVolumeList>(
          std::mem_fn(&DfsResponder::Service::VolumeList), this)));
}

DfsResponder::Service::~Service() {
}

::grpc::Status DfsResponder::Service::Status(::grpc::ServerContext* context, const ::directfs::v1::DfsResponderStatusRequest* request, ::directfs::v1::DfsResponderStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsResponder::Service::VolumeCreate(::grpc::ServerContext* context, const ::directfs::v1::DfsResponderVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsResponder::Service::VolumeUpdate(::grpc::ServerContext* context, const ::directfs::v1::DfsResponderVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsResponder::Service::VolumeDelete(::grpc::ServerContext* context, const ::directfs::v1::DfsResponderVolume* request, ::common::v1::RpcResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DfsResponder::Service::VolumeList(::grpc::ServerContext* context, const ::directfs::v1::DfsResponderVolumeListQuery* request, ::directfs::v1::DfsResponderVolumeList* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace directfs
}  // namespace v1

