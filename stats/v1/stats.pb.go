// Code generated by protoc-gen-go. DO NOT EDIT.
// source: stats.proto

/*
Package stats_v1 is a generated protocol buffer package.

It is generated from these files:
	stats.proto

It has these top-level messages:
	StatsStatusRequest
	StatsStatus
	StatsVolumeListQuery
	StatsVolumeLabel
	StatsVolumeCredentials
	StatsVolumeStatistics
	StatsVolumeStatus
	StatsVolume
	StatsVolumeList
*/
package stats_v1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common_v1 "code.storageos.net/storageos/service/common/v1"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StatsStatusRequest struct {
}

func (m *StatsStatusRequest) Reset()                    { *m = StatsStatusRequest{} }
func (m *StatsStatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatsStatusRequest) ProtoMessage()               {}
func (*StatsStatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatsStatus struct {
	// The version control info string.
	VersionInfo string `protobuf:"bytes,1,opt,name=version_info,json=versionInfo" json:"version_info,omitempty"`
	// Generic daemon status.
	Status *common_v1.DaemonStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *StatsStatus) Reset()                    { *m = StatsStatus{} }
func (m *StatsStatus) String() string            { return proto.CompactTextString(m) }
func (*StatsStatus) ProtoMessage()               {}
func (*StatsStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatsStatus) GetVersionInfo() string {
	if m != nil {
		return m.VersionInfo
	}
	return ""
}

func (m *StatsStatus) GetStatus() *common_v1.DaemonStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type StatsVolumeListQuery struct {
	// Optional list of volume IDs to query.
	VolumeIds []uint32 `protobuf:"varint,1,rep,packed,name=volume_ids,json=volumeIds" json:"volume_ids,omitempty"`
}

func (m *StatsVolumeListQuery) Reset()                    { *m = StatsVolumeListQuery{} }
func (m *StatsVolumeListQuery) String() string            { return proto.CompactTextString(m) }
func (*StatsVolumeListQuery) ProtoMessage()               {}
func (*StatsVolumeListQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatsVolumeListQuery) GetVolumeIds() []uint32 {
	if m != nil {
		return m.VolumeIds
	}
	return nil
}

type StatsVolumeLabel struct {
	// The label key.
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	// The label value.
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *StatsVolumeLabel) Reset()                    { *m = StatsVolumeLabel{} }
func (m *StatsVolumeLabel) String() string            { return proto.CompactTextString(m) }
func (*StatsVolumeLabel) ProtoMessage()               {}
func (*StatsVolumeLabel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *StatsVolumeLabel) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StatsVolumeLabel) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type StatsVolumeCredentials struct {
}

func (m *StatsVolumeCredentials) Reset()                    { *m = StatsVolumeCredentials{} }
func (m *StatsVolumeCredentials) String() string            { return proto.CompactTextString(m) }
func (*StatsVolumeCredentials) ProtoMessage()               {}
func (*StatsVolumeCredentials) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type StatsVolumeStatistics struct {
}

func (m *StatsVolumeStatistics) Reset()                    { *m = StatsVolumeStatistics{} }
func (m *StatsVolumeStatistics) String() string            { return proto.CompactTextString(m) }
func (*StatsVolumeStatistics) ProtoMessage()               {}
func (*StatsVolumeStatistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type StatsVolumeStatus struct {
}

func (m *StatsVolumeStatus) Reset()                    { *m = StatsVolumeStatus{} }
func (m *StatsVolumeStatus) String() string            { return proto.CompactTextString(m) }
func (*StatsVolumeStatus) ProtoMessage()               {}
func (*StatsVolumeStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// *
// A volume used by the Stats module.
type StatsVolume struct {
	Cc *common_v1.DataplaneCommon `protobuf:"bytes,1,opt,name=cc" json:"cc,omitempty"`
	// The volume ID.
	VolumeId uint32 `protobuf:"varint,2,opt,name=volume_id,json=volumeId" json:"volume_id,omitempty"`
	// List of volume lables.
	Labels []*StatsVolumeLabel `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty"`
	// Volume credentials.
	Credentials *StatsVolumeCredentials `protobuf:"bytes,4,opt,name=credentials" json:"credentials,omitempty"`
	// Volume statistics.
	Stats *StatsVolumeStatistics `protobuf:"bytes,5,opt,name=stats" json:"stats,omitempty"`
	// Volume status.
	Status *StatsVolumeStatus `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
}

func (m *StatsVolume) Reset()                    { *m = StatsVolume{} }
func (m *StatsVolume) String() string            { return proto.CompactTextString(m) }
func (*StatsVolume) ProtoMessage()               {}
func (*StatsVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StatsVolume) GetCc() *common_v1.DataplaneCommon {
	if m != nil {
		return m.Cc
	}
	return nil
}

func (m *StatsVolume) GetVolumeId() uint32 {
	if m != nil {
		return m.VolumeId
	}
	return 0
}

func (m *StatsVolume) GetLabels() []*StatsVolumeLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *StatsVolume) GetCredentials() *StatsVolumeCredentials {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func (m *StatsVolume) GetStats() *StatsVolumeStatistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *StatsVolume) GetStatus() *StatsVolumeStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type StatsVolumeList struct {
	Volumes []*StatsVolume `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
}

func (m *StatsVolumeList) Reset()                    { *m = StatsVolumeList{} }
func (m *StatsVolumeList) String() string            { return proto.CompactTextString(m) }
func (*StatsVolumeList) ProtoMessage()               {}
func (*StatsVolumeList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *StatsVolumeList) GetVolumes() []*StatsVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func init() {
	proto.RegisterType((*StatsStatusRequest)(nil), "stats.v1.StatsStatusRequest")
	proto.RegisterType((*StatsStatus)(nil), "stats.v1.StatsStatus")
	proto.RegisterType((*StatsVolumeListQuery)(nil), "stats.v1.StatsVolumeListQuery")
	proto.RegisterType((*StatsVolumeLabel)(nil), "stats.v1.StatsVolumeLabel")
	proto.RegisterType((*StatsVolumeCredentials)(nil), "stats.v1.StatsVolumeCredentials")
	proto.RegisterType((*StatsVolumeStatistics)(nil), "stats.v1.StatsVolumeStatistics")
	proto.RegisterType((*StatsVolumeStatus)(nil), "stats.v1.StatsVolumeStatus")
	proto.RegisterType((*StatsVolume)(nil), "stats.v1.StatsVolume")
	proto.RegisterType((*StatsVolumeList)(nil), "stats.v1.StatsVolumeList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Stats service

type StatsClient interface {
	// *
	// Get program status.
	Status(ctx context.Context, in *StatsStatusRequest, opts ...grpc.CallOption) (*StatsStatus, error)
	// *
	// Add configuration for the given StatsVolume message.
	//
	// returns RpcResult
	VolumeCreate(ctx context.Context, in *StatsVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Update configuration for the given StatsVolume message.
	//
	// returns RpcResult
	VolumeUpdate(ctx context.Context, in *StatsVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Remove configuration for the given StatsVolume message.
	//
	// returns RpcResult
	VolumeDelete(ctx context.Context, in *StatsVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error)
	// *
	// Return a list of configured volumes. Optionally filter using the StatsVolumeListQuery message.
	//
	// returns An StatsVolumeList message containing StatsVolume messages,
	//         if any are found matching the filter.
	VolumeList(ctx context.Context, in *StatsVolumeListQuery, opts ...grpc.CallOption) (*StatsVolumeList, error)
	// Config services, from common.v1.
	ConfigGetBool(ctx context.Context, in *common_v1.ConfigKey, opts ...grpc.CallOption) (*common_v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(ctx context.Context, in *common_v1.ConfigBool, opts ...grpc.CallOption) (*common_v1.ConfigUpdateReply, error)
	ConfigListBool(ctx context.Context, in *common_v1.ConfigListQuery, opts ...grpc.CallOption) (*common_v1.ConfigBoolList, error)
	ConfigGetString(ctx context.Context, in *common_v1.ConfigKey, opts ...grpc.CallOption) (*common_v1.ConfigGetStringReply, error)
	ConfigUpdateString(ctx context.Context, in *common_v1.ConfigString, opts ...grpc.CallOption) (*common_v1.ConfigUpdateReply, error)
	ConfigListString(ctx context.Context, in *common_v1.ConfigListQuery, opts ...grpc.CallOption) (*common_v1.ConfigStringList, error)
}

type statsClient struct {
	cc *grpc.ClientConn
}

func NewStatsClient(cc *grpc.ClientConn) StatsClient {
	return &statsClient{cc}
}

func (c *statsClient) Status(ctx context.Context, in *StatsStatusRequest, opts ...grpc.CallOption) (*StatsStatus, error) {
	out := new(StatsStatus)
	err := grpc.Invoke(ctx, "/stats.v1.Stats/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) VolumeCreate(ctx context.Context, in *StatsVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/stats.v1.Stats/VolumeCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) VolumeUpdate(ctx context.Context, in *StatsVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/stats.v1.Stats/VolumeUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) VolumeDelete(ctx context.Context, in *StatsVolume, opts ...grpc.CallOption) (*common_v1.RpcResult, error) {
	out := new(common_v1.RpcResult)
	err := grpc.Invoke(ctx, "/stats.v1.Stats/VolumeDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) VolumeList(ctx context.Context, in *StatsVolumeListQuery, opts ...grpc.CallOption) (*StatsVolumeList, error) {
	out := new(StatsVolumeList)
	err := grpc.Invoke(ctx, "/stats.v1.Stats/VolumeList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) ConfigGetBool(ctx context.Context, in *common_v1.ConfigKey, opts ...grpc.CallOption) (*common_v1.ConfigGetBoolReply, error) {
	out := new(common_v1.ConfigGetBoolReply)
	err := grpc.Invoke(ctx, "/stats.v1.Stats/ConfigGetBool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) ConfigUpdateBool(ctx context.Context, in *common_v1.ConfigBool, opts ...grpc.CallOption) (*common_v1.ConfigUpdateReply, error) {
	out := new(common_v1.ConfigUpdateReply)
	err := grpc.Invoke(ctx, "/stats.v1.Stats/ConfigUpdateBool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) ConfigListBool(ctx context.Context, in *common_v1.ConfigListQuery, opts ...grpc.CallOption) (*common_v1.ConfigBoolList, error) {
	out := new(common_v1.ConfigBoolList)
	err := grpc.Invoke(ctx, "/stats.v1.Stats/ConfigListBool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) ConfigGetString(ctx context.Context, in *common_v1.ConfigKey, opts ...grpc.CallOption) (*common_v1.ConfigGetStringReply, error) {
	out := new(common_v1.ConfigGetStringReply)
	err := grpc.Invoke(ctx, "/stats.v1.Stats/ConfigGetString", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) ConfigUpdateString(ctx context.Context, in *common_v1.ConfigString, opts ...grpc.CallOption) (*common_v1.ConfigUpdateReply, error) {
	out := new(common_v1.ConfigUpdateReply)
	err := grpc.Invoke(ctx, "/stats.v1.Stats/ConfigUpdateString", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsClient) ConfigListString(ctx context.Context, in *common_v1.ConfigListQuery, opts ...grpc.CallOption) (*common_v1.ConfigStringList, error) {
	out := new(common_v1.ConfigStringList)
	err := grpc.Invoke(ctx, "/stats.v1.Stats/ConfigListString", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stats service

type StatsServer interface {
	// *
	// Get program status.
	Status(context.Context, *StatsStatusRequest) (*StatsStatus, error)
	// *
	// Add configuration for the given StatsVolume message.
	//
	// returns RpcResult
	VolumeCreate(context.Context, *StatsVolume) (*common_v1.RpcResult, error)
	// *
	// Update configuration for the given StatsVolume message.
	//
	// returns RpcResult
	VolumeUpdate(context.Context, *StatsVolume) (*common_v1.RpcResult, error)
	// *
	// Remove configuration for the given StatsVolume message.
	//
	// returns RpcResult
	VolumeDelete(context.Context, *StatsVolume) (*common_v1.RpcResult, error)
	// *
	// Return a list of configured volumes. Optionally filter using the StatsVolumeListQuery message.
	//
	// returns An StatsVolumeList message containing StatsVolume messages,
	//         if any are found matching the filter.
	VolumeList(context.Context, *StatsVolumeListQuery) (*StatsVolumeList, error)
	// Config services, from common.v1.
	ConfigGetBool(context.Context, *common_v1.ConfigKey) (*common_v1.ConfigGetBoolReply, error)
	ConfigUpdateBool(context.Context, *common_v1.ConfigBool) (*common_v1.ConfigUpdateReply, error)
	ConfigListBool(context.Context, *common_v1.ConfigListQuery) (*common_v1.ConfigBoolList, error)
	ConfigGetString(context.Context, *common_v1.ConfigKey) (*common_v1.ConfigGetStringReply, error)
	ConfigUpdateString(context.Context, *common_v1.ConfigString) (*common_v1.ConfigUpdateReply, error)
	ConfigListString(context.Context, *common_v1.ConfigListQuery) (*common_v1.ConfigStringList, error)
}

func RegisterStatsServer(s *grpc.Server, srv StatsServer) {
	s.RegisterService(&_Stats_serviceDesc, srv)
}

func _Stats_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.v1.Stats/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).Status(ctx, req.(*StatsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_VolumeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).VolumeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.v1.Stats/VolumeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).VolumeCreate(ctx, req.(*StatsVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_VolumeUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).VolumeUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.v1.Stats/VolumeUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).VolumeUpdate(ctx, req.(*StatsVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_VolumeDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsVolume)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).VolumeDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.v1.Stats/VolumeDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).VolumeDelete(ctx, req.(*StatsVolume))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_VolumeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsVolumeListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).VolumeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.v1.Stats/VolumeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).VolumeList(ctx, req.(*StatsVolumeListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_ConfigGetBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).ConfigGetBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.v1.Stats/ConfigGetBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).ConfigGetBool(ctx, req.(*common_v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_ConfigUpdateBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_v1.ConfigBool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).ConfigUpdateBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.v1.Stats/ConfigUpdateBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).ConfigUpdateBool(ctx, req.(*common_v1.ConfigBool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_ConfigListBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).ConfigListBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.v1.Stats/ConfigListBool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).ConfigListBool(ctx, req.(*common_v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_ConfigGetString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_v1.ConfigKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).ConfigGetString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.v1.Stats/ConfigGetString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).ConfigGetString(ctx, req.(*common_v1.ConfigKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_ConfigUpdateString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_v1.ConfigString)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).ConfigUpdateString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.v1.Stats/ConfigUpdateString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).ConfigUpdateString(ctx, req.(*common_v1.ConfigString))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stats_ConfigListString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common_v1.ConfigListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).ConfigListString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stats.v1.Stats/ConfigListString",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).ConfigListString(ctx, req.(*common_v1.ConfigListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stats_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stats.v1.Stats",
	HandlerType: (*StatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Stats_Status_Handler,
		},
		{
			MethodName: "VolumeCreate",
			Handler:    _Stats_VolumeCreate_Handler,
		},
		{
			MethodName: "VolumeUpdate",
			Handler:    _Stats_VolumeUpdate_Handler,
		},
		{
			MethodName: "VolumeDelete",
			Handler:    _Stats_VolumeDelete_Handler,
		},
		{
			MethodName: "VolumeList",
			Handler:    _Stats_VolumeList_Handler,
		},
		{
			MethodName: "ConfigGetBool",
			Handler:    _Stats_ConfigGetBool_Handler,
		},
		{
			MethodName: "ConfigUpdateBool",
			Handler:    _Stats_ConfigUpdateBool_Handler,
		},
		{
			MethodName: "ConfigListBool",
			Handler:    _Stats_ConfigListBool_Handler,
		},
		{
			MethodName: "ConfigGetString",
			Handler:    _Stats_ConfigGetString_Handler,
		},
		{
			MethodName: "ConfigUpdateString",
			Handler:    _Stats_ConfigUpdateString_Handler,
		},
		{
			MethodName: "ConfigListString",
			Handler:    _Stats_ConfigListString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stats.proto",
}

func init() { proto.RegisterFile("stats.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 572 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x51, 0x6f, 0x12, 0x41,
	0x10, 0x2e, 0x20, 0x67, 0x99, 0x03, 0x8b, 0x23, 0xc8, 0x79, 0xb4, 0x16, 0xef, 0x89, 0xf8, 0x40,
	0x53, 0x9a, 0xbe, 0x98, 0x18, 0x13, 0x68, 0x34, 0xa8, 0x7d, 0x70, 0x1b, 0x7d, 0x6d, 0xae, 0xc7,
	0xd2, 0x5c, 0x3c, 0x6e, 0x91, 0xdd, 0x23, 0xe1, 0x9f, 0xf8, 0x5b, 0xfc, 0x75, 0xe6, 0x76, 0xf7,
	0x60, 0xcb, 0x1d, 0x1a, 0xe3, 0x0b, 0xd9, 0xfd, 0x66, 0xbe, 0x99, 0xef, 0x9b, 0x59, 0x0e, 0x6c,
	0x2e, 0x7c, 0xc1, 0x07, 0x8b, 0x25, 0x13, 0x0c, 0x0f, 0xd5, 0x65, 0x75, 0xee, 0xd6, 0x03, 0x36,
	0x9f, 0xb3, 0x58, 0xe1, 0x5e, 0x0b, 0xf0, 0x26, 0x8d, 0xa4, 0x3f, 0x09, 0x27, 0xf4, 0x47, 0x42,
	0xb9, 0xf0, 0x7c, 0xb0, 0x0d, 0x14, 0x5f, 0x41, 0x7d, 0x45, 0x97, 0x3c, 0x64, 0xf1, 0x6d, 0x18,
	0xcf, 0x98, 0x53, 0xea, 0x95, 0xfa, 0x35, 0x62, 0x6b, 0x6c, 0x12, 0xcf, 0x18, 0x9e, 0x81, 0xc5,
	0x65, 0xb2, 0x53, 0xee, 0x95, 0xfa, 0xf6, 0xb0, 0x33, 0xd0, 0x6d, 0x56, 0xe7, 0x83, 0x2b, 0x9f,
	0xce, 0x59, 0xac, 0x3b, 0xe8, 0x34, 0xef, 0x12, 0x5a, 0xb2, 0xc5, 0x37, 0x16, 0x25, 0x73, 0xfa,
	0x39, 0xe4, 0xe2, 0x4b, 0x42, 0x97, 0x6b, 0x3c, 0x01, 0x58, 0x49, 0xe8, 0x36, 0x9c, 0x72, 0xa7,
	0xd4, 0xab, 0xf4, 0x1b, 0xa4, 0xa6, 0x90, 0xc9, 0x94, 0x7b, 0x6f, 0xa0, 0x69, 0xd2, 0xfc, 0x3b,
	0x1a, 0x61, 0x13, 0x2a, 0xdf, 0xe9, 0x5a, 0xab, 0x4a, 0x8f, 0xd8, 0x82, 0xea, 0xca, 0x8f, 0x12,
	0x2a, 0xc5, 0xd4, 0x88, 0xba, 0x78, 0x0e, 0x3c, 0x37, 0xb8, 0xe3, 0x25, 0x9d, 0xd2, 0x58, 0x84,
	0x7e, 0xc4, 0xbd, 0x0e, 0xb4, 0x8d, 0x48, 0x7a, 0x0c, 0xb9, 0x08, 0x03, 0xee, 0x3d, 0x83, 0xa7,
	0x3b, 0x81, 0x84, 0x7b, 0xbf, 0xca, 0x7a, 0x3c, 0x0a, 0xc5, 0xd7, 0x50, 0x0e, 0x02, 0xd9, 0xde,
	0x1e, 0xba, 0x0f, 0x7c, 0x0b, 0x7f, 0x11, 0xf9, 0x31, 0x1d, 0x4b, 0x88, 0x94, 0x83, 0x00, 0xbb,
	0x50, 0xdb, 0xd8, 0x93, 0xea, 0x1a, 0xe4, 0x30, 0x73, 0x87, 0x43, 0xb0, 0xa2, 0xd4, 0x11, 0x77,
	0x2a, 0xbd, 0x8a, 0x2c, 0x96, 0x6d, 0x6d, 0xb0, 0x6b, 0x9a, 0xe8, 0x4c, 0x1c, 0x81, 0x1d, 0x6c,
	0x9d, 0x38, 0x8f, 0xa4, 0x8a, 0x5e, 0x21, 0xd1, 0x70, 0x4c, 0x4c, 0x12, 0x5e, 0x42, 0x55, 0xe6,
	0x3b, 0x55, 0xc9, 0x3e, 0x2d, 0x64, 0x6f, 0xa7, 0x42, 0x54, 0x36, 0x5e, 0x6c, 0x76, 0x6e, 0x49,
	0x5e, 0x77, 0x2f, 0xcf, 0xd8, 0xfb, 0x08, 0x8e, 0x76, 0xf6, 0x8e, 0x67, 0xf0, 0x58, 0x8d, 0x40,
	0xed, 0xdb, 0x1e, 0xb6, 0x0b, 0x0b, 0x91, 0x2c, 0x6b, 0xf8, 0xd3, 0x82, 0xaa, 0x0c, 0xe0, 0x3b,
	0xb0, 0xf4, 0x1b, 0x3d, 0xde, 0xe1, 0x3c, 0x78, 0xd0, 0x6e, 0xbb, 0x30, 0xea, 0x1d, 0xe0, 0x5b,
	0xa8, 0x6f, 0x86, 0xe3, 0x0b, 0x8a, 0xc5, 0xad, 0xdd, 0x96, 0xb1, 0x56, 0xb2, 0x08, 0x08, 0xe5,
	0x49, 0x24, 0x4c, 0xfa, 0xd7, 0xc5, 0xf4, 0x7f, 0xe8, 0x57, 0x34, 0xa2, 0xff, 0x4e, 0x9f, 0x00,
	0x18, 0x63, 0x7c, 0x59, 0xfc, 0x5a, 0xb2, 0x7f, 0x96, 0xfb, 0x62, 0x6f, 0xdc, 0x3b, 0xc0, 0xf7,
	0xd0, 0x18, 0xb3, 0x78, 0x16, 0xde, 0x7f, 0xa0, 0x62, 0xc4, 0x58, 0x84, 0x66, 0x4f, 0x15, 0xf9,
	0x44, 0xd7, 0xee, 0x49, 0x0e, 0xd5, 0xf9, 0x84, 0x2e, 0xa2, 0xb5, 0x94, 0xd4, 0x54, 0xb8, 0x1a,
	0x88, 0x2c, 0xd5, 0xce, 0x91, 0x52, 0xd8, 0x3d, 0xce, 0xc1, 0x8a, 0xb3, 0x2d, 0xf5, 0x44, 0xc1,
	0xa9, 0x44, 0x59, 0xc8, 0xcd, 0x31, 0x4c, 0x77, 0x45, 0x4d, 0xb4, 0xbb, 0x8f, 0x70, 0xb4, 0x51,
	0x7b, 0x23, 0x96, 0x61, 0x7c, 0xbf, 0xc7, 0xdf, 0x69, 0x91, 0x3f, 0xc5, 0xc8, 0x64, 0x5d, 0x03,
	0x9a, 0x6a, 0x75, 0xb9, 0x4e, 0x8e, 0xa8, 0x02, 0x7f, 0x75, 0x79, 0x9d, 0x0d, 0x2c, 0x95, 0xaa,
	0x8b, 0xfd, 0xc9, 0x67, 0x77, 0x4f, 0x23, 0xe5, 0xf4, 0xce, 0x92, 0x9f, 0xf5, 0x8b, 0xdf, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xc5, 0x21, 0xaa, 0xa1, 0xfd, 0x05, 0x00, 0x00,
}
