syntax = "proto3";
package stats.v1;

import "common.proto";

/**
 * Stats configuration and status service.
 */
service Stats {
    /**
     * Get program status.
     */
    rpc Status(StatsStatusRequest) returns (StatsStatus) {}

    /**
     * Add configuration for the given StatsVolume message.
     *
     * returns RpcResult
     */
    rpc VolumeCreate(StatsVolume) returns (common.v1.RpcResult) {}

    /**
     * Update configuration for the given StatsVolume message.
     *
     * returns RpcResult
     */
    rpc VolumeUpdate(StatsVolume) returns (common.v1.RpcResult) {}

    /**
     * Remove configuration for the given StatsVolume message.
     *
     * returns RpcResult
     */
    rpc VolumeDelete(StatsVolume) returns (common.v1.RpcResult) {}

    /**
     * Return a list of configured volumes. Optionally filter using the StatsVolumeListQuery message.

     * returns An StatsVolumeList message containing StatsVolume messages,
     *         if any are found matching the filter.
     */
    rpc VolumeList(StatsVolumeListQuery) returns (StatsVolumeList) {}

    /**
     * Return a list of volume metrics. Optionally filter using the StatsVolumeMetricsListQuery message.
     *
     * returns A StatsVolumeMetricsList message containing StatsVolumeMetrics messages,
     *         if any are found matching the filter.
     */
    rpc VolumeMetrics(StatsVolumeMetricsListQuery) returns (StatsVolumeMetricsList) {}

    // Config services, from common.v1.
    rpc ConfigGetBool(common.v1.ConfigKey) returns (common.v1.ConfigGetBoolReply) {}
    rpc ConfigUpdateBool(common.v1.ConfigBool) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListBool(common.v1.ConfigListQuery) returns (common.v1.ConfigBoolList) {}

    rpc ConfigGetString(common.v1.ConfigKey) returns (common.v1.ConfigGetStringReply) {}
    rpc ConfigUpdateString(common.v1.ConfigString) returns (common.v1.ConfigUpdateReply) {}
    rpc ConfigListString(common.v1.ConfigListQuery) returns (common.v1.ConfigStringList) {}
}

message StatsStatusRequest {
    // Empty for now.
}

message StatsStatus {
    // The version control info string.
    string version_info = 1;

    // Generic daemon status.
    common.v1.DaemonStatus status = 2;
}

message StatsVolumeListQuery {
    // Optional list of volume IDs to query.
    repeated uint32 volume_ids = 1;
}

message StatsVolumeLabel {
    // The label key.
    string key = 1;

    // The label value.
    string value = 2;
}

message StatsVolumeCredentials {
    // Empty for now.
}

message StatsVolumeStatistics {
    // Empty for now.
}

message StatsVolumeStatus {
    // Empty for now.
}

/**
 * A volume used by the Stats module.
 */
message StatsVolume {
    common.v1.DataplaneCommon cc = 1;

    // The volume ID.
    uint32 volume_id = 2;

    // List of volume lables.
    repeated StatsVolumeLabel labels = 3;

    // Volume credentials.
    StatsVolumeCredentials credentials = 4;

    // Volume statistics.
    StatsVolumeStatistics stats = 5;

    // Volume status.
    StatsVolumeStatus status = 6;
}

message StatsVolumeList {
    repeated StatsVolume volumes = 1;
}

message StatsVolumeMetricsListQuery {
    // Optional list of volume IDs to query.
    repeated uint32 volume_ids = 1;
}

/**
 * Volume metrics from the Stats module.
 */
message StatsVolumeMetrics { 
    // The volume ID.
    uint32 volume_id = 2;

    // How much data has been written, e.g. volume will be full when matches provisioned size.
    uint64 capacity_used_bytes = 3;

    // Since we compress, this should be less than what the client sees in 'df' on their mounted fs.
    uint64 actual_used_bytes = 4;
}

message StatsVolumeMetricsList {
   repeated StatsVolumeMetrics metrics = 1;
}
